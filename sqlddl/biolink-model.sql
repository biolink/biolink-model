-- # Class: "ontology class" Description: "a concept or class in an ontology, vocabulary or thesaurus. Note that nodes in a biolink compatible KG can be considered both instances of biolink classes, and OWL classes in their own right. In general you should not need to use this class directly. Instead, use the appropriate biolink class. For example, for the GO concept of endocytosis (GO:0006897), use bl:BiologicalProcess as the type."
--     * Slot: id Description: 
-- # Class: "annotation" Description: "Biolink Model root class for entity annotations."
--     * Slot: id Description: 
-- # Class: "quantity value" Description: "A value of an attribute that is quantitative and measurable, expressed as a combination of a unit and a numeric value"
--     * Slot: id Description: 
--     * Slot: has_unit Description: connects a quantity value to a unit
--     * Slot: has_numeric_value Description: connects a quantity value to a number
-- # Class: "attribute" Description: "A property or characteristic of an entity. For example, an apple may have properties such as color, shape, age, crispiness. An environmental sample may have attributes such as depth, lat, long, material."
--     * Slot: id Description: 
--     * Slot: name Description: The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: source Description: 
--     * Slot: has_attribute_type_id Description: connects an attribute to a class that describes it
-- # Class: "chemical role" Description: ""
--     * Slot: id Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: source Description: 
--     * Slot: has_attribute_type_id Description: connects an attribute to a class that describes it
-- # Class: "biological sex" Description: ""
--     * Slot: id Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: source Description: 
--     * Slot: has_attribute_type_id Description: connects an attribute to a class that describes it
-- # Class: "phenotypic sex" Description: "An attribute corresponding to the phenotypic sex of the individual, based upon the reproductive organs present."
--     * Slot: id Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: source Description: 
--     * Slot: has_attribute_type_id Description: connects an attribute to a class that describes it
-- # Class: "genotypic sex" Description: "An attribute corresponding to the genotypic sex of the individual, based upon genotypic composition of sex chromosomes."
--     * Slot: id Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: source Description: 
--     * Slot: has_attribute_type_id Description: connects an attribute to a class that describes it
-- # Class: "severity value" Description: "describes the severity of a phenotypic feature or disease"
--     * Slot: id Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: source Description: 
--     * Slot: has_attribute_type_id Description: connects an attribute to a class that describes it
-- # Class: "relationship quantifier" Description: ""
--     * Slot: id Description: 
-- # Class: "sensitivity quantifier" Description: ""
--     * Slot: id Description: 
-- # Class: "specificity quantifier" Description: ""
--     * Slot: id Description: 
-- # Class: "pathognomonicity quantifier" Description: "A relationship quantifier between a variant or symptom and a disease, which is high when the presence of the feature implies the existence of the disease"
--     * Slot: id Description: 
-- # Class: "frequency quantifier" Description: ""
--     * Slot: id Description: 
--     * Slot: has_count Description: number of things with a particular property
--     * Slot: has_total Description: total number of things in a particular reference set
--     * Slot: has_quotient Description: 
--     * Slot: has_percentage Description: equivalent to has quotient multiplied by 100
-- # Class: "chemical or drug or treatment" Description: "grouping class for chemicals, drugs, and treatments used for search."
--     * Slot: id Description: 
-- # Class: "entity" Description: "Root Biolink Model class for all things and informational relationships, real or imagined."
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "named thing" Description: "a databased entity or concept/class"
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "relationship type" Description: "An OWL property used as an edge label"
--     * Slot: id Description: 
-- # Class: "gene ontology class" Description: "an ontology class that describes a functional aspect of a gene, gene prodoct or complex"
--     * Slot: id Description: 
-- # Class: "unclassified ontology class" Description: "this is used for nodes that are taken from an ontology but are not typed using an existing biolink class"
--     * Slot: id Description: 
-- # Class: "taxonomic rank" Description: "A descriptor for the rank within a taxonomic classification. Example instance: TAXRANK:0000017 (kingdom)"
--     * Slot: id Description: 
-- # Class: "organism taxon" Description: "A classification of a set of organisms. Example instances: NCBITaxon:9606 (Homo sapiens), NCBITaxon:2 (Bacteria). Can also be used to represent strains or subspecies."
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "event" Description: "Something that happens at a given place and time."
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "administrative entity" Description: ""
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "agent" Description: "person, group, organization or project that provides a piece of information (i.e. a knowledge association)"
--     * Slot: address Description: the particulars of the place where someone or an organization is situated.  For now, this slot is a simple text "blob" containing all relevant details of the given location for fitness of purpose. For the moment, this "address" can include other contact details such as email and phone number(?).
--     * Slot: id Description: Different classes of agents have distinct preferred identifiers. For publishers, use the ISBN publisher code. See https://grp.isbn-international.org/ for publisher code lookups. For editors, authors and  individual providers, use the individual's ORCID if available; Otherwise, a ScopusID, ResearchID or Google Scholar ID ('GSID') may be used if the author ORCID is unknown. Institutional agents could be identified by an International Standard Name Identifier ('ISNI') code.
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: it is recommended that an author's 'name' property be formatted as "surname, firstname initial."
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "information content entity" Description: "a piece of information that typically describes some topic of discourse or is used as support."
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "dataset" Description: "an item that refers to a collection of data from a data source."
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "dataset distribution" Description: "an item that holds distribution level information about a dataset."
--     * Slot: distribution_download_url Description: 
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "dataset version" Description: "an item that holds version level information about a dataset."
--     * Slot: has_dataset Description: 
--     * Slot: ingest_date Description: 
--     * Slot: has_distribution Description: 
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "dataset summary" Description: "an item that holds summary level information about a dataset."
--     * Slot: source_web_page Description: 
--     * Slot: source_logo Description: 
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "confidence level" Description: "Level of confidence in a statement"
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "evidence type" Description: "Class of evidence that supports an association"
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "information resource" Description: "A database or knowledgebase and its supporting ecosystem of interfaces  and services that deliver content to consumers (e.g. web portals, APIs,  query endpoints, streaming services, data downloads, etc.). A single Information Resource by this definition may span many different datasets or databases, and include many access endpoints and user interfaces. Information Resources include project-specific resources such as a Translator Knowledge Provider, and community knowledgebases like ChemBL, OMIM, or DGIdb."
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "publication" Description: "Any published piece of information. Can refer to a whole publication, its encompassing publication (i.e. journal or book) or to a part of a publication, if of significant knowledge scope (e.g. a figure, figure legend, or section highlighted by NLP). The scope is intended to be general and include information published on the web, as well as printed materials, either directly or in one of the Publication Biolink category subclasses."
--     * Slot: summary Description: executive  summary of a publication
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: id Description: Different kinds of publication subtypes will have different preferred identifiers (curies when feasible). Precedence of identifiers for scientific articles is as follows: PMID if available; DOI if not; actual alternate CURIE otherwise. Enclosing publications (i.e. referenced by 'published in' node property) such as books and journals, should have industry-standard identifier such as from ISBN and ISSN.
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: Ontology term for publication type may be drawn from Dublin Core types (https://www.dublincore.org/specifications/dublin-core/dcmi-type-vocabulary/), FRBR-aligned Bibliographic Ontology (https://sparontologies.github.io/fabio/current/fabio.html), the MESH publication types (https://www.nlm.nih.gov/mesh/pubtypes.html), the Confederation of Open Access Repositories (COAR) Controlled Vocabulary for Resource Type Genres (http://vocabularies.coar-repositories.org/documentation/resource_types/), Wikidata (https://www.wikidata.org/wiki/Wikidata:Publication_types), or equivalent publication type ontology. When a given publication type ontology term is used within a given knowledge graph, then the CURIE identified term must be documented in the graph as a concept node of biolink:category biolink:OntologyClass.
--     * Slot: name Description: the 'title' of the publication is generally recorded in the 'name' property (inherited from NamedThing). The field name 'title' is now also tagged as an acceptable alias for the node property 'name' (just in case).
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "book" Description: "This class may rarely be instantiated except if use cases of a given knowledge graph support its utility."
--     * Slot: summary Description: executive  summary of a publication
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: id Description: Books should have industry-standard identifier such as from ISBN.
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: Should generally be set to an ontology class defined term for 'book'.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "book chapter" Description: ""
--     * Slot: published_in Description: The enclosing parent book containing the chapter should have industry-standard identifier from ISBN.
--     * Slot: volume Description: volume of a book or music release in a collection/series or a published collection of journal issues in a serial publication
--     * Slot: chapter Description: chapter of a book
--     * Slot: summary Description: executive  summary of a publication
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "serial" Description: "This class may rarely be instantiated except if use cases of a given knowledge graph support its utility."
--     * Slot: iso_abbreviation Description: Standard abbreviation for periodicals in the International Organization for Standardization (ISO) 4 system See https://www.issn.org/services/online-services/access-to-the-ltwa/. If the 'published in' property is set, then the iso abbreviation pertains to the broader publication context (the journal) within which the given publication node is embedded, not the publication itself.
--     * Slot: volume Description: volume of a book or music release in a collection/series or a published collection of journal issues in a serial publication
--     * Slot: issue Description: issue of a newspaper, a scientific journal or magazine for reference purpose
--     * Slot: summary Description: executive  summary of a publication
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: id Description: Serials (journals) should have industry-standard identifier such as from ISSN.
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: Should generally be set to an ontology class defined term for 'serial' or 'journal'.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "article" Description: ""
--     * Slot: published_in Description: The enclosing parent serial containing the article should have industry-standard identifier from ISSN.
--     * Slot: iso_abbreviation Description: Optional value, if used locally as a convenience, is set to the iso abbreviation of the 'published in' parent.
--     * Slot: volume Description: volume of a book or music release in a collection/series or a published collection of journal issues in a serial publication
--     * Slot: issue Description: issue of a newspaper, a scientific journal or magazine for reference purpose
--     * Slot: summary Description: executive  summary of a publication
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "physical essence or occurrent" Description: "Either a physical or processual entity."
--     * Slot: id Description: 
-- # Class: "physical essence" Description: "Semantic mixin concept.  Pertains to entities that have physical properties such as mass, volume, or charge."
--     * Slot: id Description: 
-- # Class: "physical entity" Description: "An entity that has material reality (a.k.a. physical essence)."
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "occurrent" Description: "A processual entity."
--     * Slot: id Description: 
-- # Class: "activity and behavior" Description: "Activity or behavior of any independent integral living, organization or mechanical actor in the world"
--     * Slot: id Description: 
-- # Class: "activity" Description: "An activity is something that occurs over a period of time and acts upon or with entities; it may include consuming, processing, transforming, modifying, relocating, using, or generating entities."
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "procedure" Description: "A series of actions conducted in a certain order or manner"
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "phenomenon" Description: "a fact or situation that is observed to exist or happen, especially one whose cause or explanation is in question"
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "device" Description: "A thing made or adapted for a particular purpose, especially a piece of mechanical or electronic equipment"
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "study population" Description: "A group of people banded together or treated as a group as participants in a research study."
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "subject of investigation" Description: "An entity that has the role of being studied in an investigation, study, or experiment"
--     * Slot: id Description: 
-- # Class: "material sample" Description: "A sample is a limited quantity of something (e.g. an individual or set of individuals from a population, or a portion of a substance) to be used for testing, analysis, inspection, investigation, demonstration, or trial use. [SIO]"
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "planetary entity" Description: "Any entity or process that exists at the level of the whole planet"
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "environmental process" Description: ""
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "environmental feature" Description: ""
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "geographic location" Description: "a location that can be described in lat/long coordinates"
--     * Slot: latitude Description: latitude
--     * Slot: longitude Description: longitude
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "geographic location at time" Description: "a location that can be described in lat/long coordinates, for a particular time"
--     * Slot: timepoint Description: a point in time
--     * Slot: latitude Description: latitude
--     * Slot: longitude Description: longitude
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "biological entity" Description: ""
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "thing with taxon" Description: "A mixin that can be used on any entity that can be taxonomically classified. This includes individual organisms; genes, their products and other molecular entities; body parts; biological processes"
--     * Slot: id Description: 
-- # Class: "genomic entity" Description: ""
--     * Slot: id Description: 
--     * Slot: has_biological_sequence Description: connects a genomic feature to its sequence
-- # Class: "molecular entity" Description: "A molecular entity is a chemical entity composed of individual or covalently bonded atoms."
--     * Slot: is_metabolite Description: indicates whether a molecular entity is a metabolite
--     * Slot: trade_name Description: 
--     * Slot: max_tolerated_dose Description: The highest dose of a drug or treatment that does not cause unacceptable side effects. The maximum tolerated dose is determined in clinical trials by testing increasing doses on different groups of people until the highest dose with acceptable side effects is found. Also called MTD.
--     * Slot: is_toxic Description: 
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "chemical entity" Description: "A chemical entity is a physical entity that pertains to chemistry or biochemistry."
--     * Slot: trade_name Description: 
--     * Slot: max_tolerated_dose Description: The highest dose of a drug or treatment that does not cause unacceptable side effects. The maximum tolerated dose is determined in clinical trials by testing increasing doses on different groups of people until the highest dose with acceptable side effects is found. Also called MTD.
--     * Slot: is_toxic Description: 
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "chemical substance" Description: ""
--     * Slot: id Description: 
-- # Class: "small molecule" Description: "A small molecule entity is a molecular entity characterized by availability in small-molecule databases of SMILES, InChI, IUPAC, or other unambiguous representation of its precise chemical structure; for convenience of representation, any valid chemical representation is included, even if it is not strictly molecular (e.g., sodium ion)."
--     * Slot: is_metabolite Description: indicates whether a molecular entity is a metabolite
--     * Slot: trade_name Description: 
--     * Slot: max_tolerated_dose Description: The highest dose of a drug or treatment that does not cause unacceptable side effects. The maximum tolerated dose is determined in clinical trials by testing increasing doses on different groups of people until the highest dose with acceptable side effects is found. Also called MTD.
--     * Slot: is_toxic Description: 
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "chemical mixture" Description: "A chemical mixture is a chemical entity composed of two or more molecular entities."
--     * Slot: is_supplement Description: 
--     * Slot: highest_FDA_approval_status Description: Should be the highest level of FDA approval this chemical entity or device has, regardless of which disease, condition or phenotype it is currently being reviewed to treat.  For specific levels of FDA approval for a specific condition, disease, phenotype, etc., see the association slot, 'FDA approval status.'
--     * Slot: drug_regulatory_status_world_wide Description: An agglomeration of drug regulatory status worldwide. Not specific to FDA.
--     * Slot: trade_name Description: 
--     * Slot: max_tolerated_dose Description: The highest dose of a drug or treatment that does not cause unacceptable side effects. The maximum tolerated dose is determined in clinical trials by testing increasing doses on different groups of people until the highest dose with acceptable side effects is found. Also called MTD.
--     * Slot: is_toxic Description: 
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "nucleic acid entity" Description: "A nucleic acid entity is a molecular entity characterized by availability in gene databases of nucleotide-based sequence representations of its precise sequence; for convenience of representation, partial sequences of various kinds are included."
--     * Slot: has_biological_sequence Description: connects a genomic feature to its sequence
--     * Slot: is_metabolite Description: indicates whether a molecular entity is a metabolite
--     * Slot: trade_name Description: 
--     * Slot: max_tolerated_dose Description: The highest dose of a drug or treatment that does not cause unacceptable side effects. The maximum tolerated dose is determined in clinical trials by testing increasing doses on different groups of people until the highest dose with acceptable side effects is found. Also called MTD.
--     * Slot: is_toxic Description: 
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "molecular mixture" Description: "A molecular mixture is a chemical mixture composed of two or more molecular entities with known concentration and stoichiometry."
--     * Slot: is_supplement Description: 
--     * Slot: highest_FDA_approval_status Description: Should be the highest level of FDA approval this chemical entity or device has, regardless of which disease, condition or phenotype it is currently being reviewed to treat.  For specific levels of FDA approval for a specific condition, disease, phenotype, etc., see the association slot, 'FDA approval status.'
--     * Slot: drug_regulatory_status_world_wide Description: An agglomeration of drug regulatory status worldwide. Not specific to FDA.
--     * Slot: trade_name Description: 
--     * Slot: max_tolerated_dose Description: The highest dose of a drug or treatment that does not cause unacceptable side effects. The maximum tolerated dose is determined in clinical trials by testing increasing doses on different groups of people until the highest dose with acceptable side effects is found. Also called MTD.
--     * Slot: is_toxic Description: 
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "complex molecular mixture" Description: "A complex molecular mixture is a chemical mixture composed of two or more molecular entities with unknown concentration and stoichiometry."
--     * Slot: is_supplement Description: 
--     * Slot: highest_FDA_approval_status Description: Should be the highest level of FDA approval this chemical entity or device has, regardless of which disease, condition or phenotype it is currently being reviewed to treat.  For specific levels of FDA approval for a specific condition, disease, phenotype, etc., see the association slot, 'FDA approval status.'
--     * Slot: drug_regulatory_status_world_wide Description: An agglomeration of drug regulatory status worldwide. Not specific to FDA.
--     * Slot: trade_name Description: 
--     * Slot: max_tolerated_dose Description: The highest dose of a drug or treatment that does not cause unacceptable side effects. The maximum tolerated dose is determined in clinical trials by testing increasing doses on different groups of people until the highest dose with acceptable side effects is found. Also called MTD.
--     * Slot: is_toxic Description: 
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "biological process or activity" Description: "Either an individual molecular activity, or a collection of causally connected molecular activities in a biological system."
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "molecular activity" Description: "An execution of a molecular function carried out by a gene product or macromolecular complex."
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "biological process" Description: "One or more causally connected executions of molecular functions"
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "pathway" Description: ""
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "physiological process" Description: ""
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "behavior" Description: ""
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "processed material" Description: "A chemical entity (often a mixture) processed for consumption for nutritional, medical or technical use. Is a material entity that is created or changed during material processing."
--     * Slot: is_supplement Description: 
--     * Slot: highest_FDA_approval_status Description: Should be the highest level of FDA approval this chemical entity or device has, regardless of which disease, condition or phenotype it is currently being reviewed to treat.  For specific levels of FDA approval for a specific condition, disease, phenotype, etc., see the association slot, 'FDA approval status.'
--     * Slot: drug_regulatory_status_world_wide Description: An agglomeration of drug regulatory status worldwide. Not specific to FDA.
--     * Slot: trade_name Description: 
--     * Slot: max_tolerated_dose Description: The highest dose of a drug or treatment that does not cause unacceptable side effects. The maximum tolerated dose is determined in clinical trials by testing increasing doses on different groups of people until the highest dose with acceptable side effects is found. Also called MTD.
--     * Slot: is_toxic Description: 
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "drug" Description: "A substance intended for use in the diagnosis, cure, mitigation, treatment, or prevention of disease"
--     * Slot: is_supplement Description: 
--     * Slot: highest_FDA_approval_status Description: Should be the highest level of FDA approval this chemical entity or device has, regardless of which disease, condition or phenotype it is currently being reviewed to treat.  For specific levels of FDA approval for a specific condition, disease, phenotype, etc., see the association slot, 'FDA approval status.'
--     * Slot: drug_regulatory_status_world_wide Description: An agglomeration of drug regulatory status worldwide. Not specific to FDA.
--     * Slot: trade_name Description: 
--     * Slot: max_tolerated_dose Description: The highest dose of a drug or treatment that does not cause unacceptable side effects. The maximum tolerated dose is determined in clinical trials by testing increasing doses on different groups of people until the highest dose with acceptable side effects is found. Also called MTD.
--     * Slot: is_toxic Description: 
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "environmental food contaminant" Description: ""
--     * Slot: trade_name Description: 
--     * Slot: max_tolerated_dose Description: The highest dose of a drug or treatment that does not cause unacceptable side effects. The maximum tolerated dose is determined in clinical trials by testing increasing doses on different groups of people until the highest dose with acceptable side effects is found. Also called MTD.
--     * Slot: is_toxic Description: 
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "food additive" Description: ""
--     * Slot: trade_name Description: 
--     * Slot: max_tolerated_dose Description: The highest dose of a drug or treatment that does not cause unacceptable side effects. The maximum tolerated dose is determined in clinical trials by testing increasing doses on different groups of people until the highest dose with acceptable side effects is found. Also called MTD.
--     * Slot: is_toxic Description: 
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "nutrient" Description: ""
--     * Slot: trade_name Description: 
--     * Slot: max_tolerated_dose Description: The highest dose of a drug or treatment that does not cause unacceptable side effects. The maximum tolerated dose is determined in clinical trials by testing increasing doses on different groups of people until the highest dose with acceptable side effects is found. Also called MTD.
--     * Slot: is_toxic Description: 
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "macronutrient" Description: ""
--     * Slot: trade_name Description: 
--     * Slot: max_tolerated_dose Description: The highest dose of a drug or treatment that does not cause unacceptable side effects. The maximum tolerated dose is determined in clinical trials by testing increasing doses on different groups of people until the highest dose with acceptable side effects is found. Also called MTD.
--     * Slot: is_toxic Description: 
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "micronutrient" Description: ""
--     * Slot: trade_name Description: 
--     * Slot: max_tolerated_dose Description: The highest dose of a drug or treatment that does not cause unacceptable side effects. The maximum tolerated dose is determined in clinical trials by testing increasing doses on different groups of people until the highest dose with acceptable side effects is found. Also called MTD.
--     * Slot: is_toxic Description: 
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "vitamin" Description: ""
--     * Slot: trade_name Description: 
--     * Slot: max_tolerated_dose Description: The highest dose of a drug or treatment that does not cause unacceptable side effects. The maximum tolerated dose is determined in clinical trials by testing increasing doses on different groups of people until the highest dose with acceptable side effects is found. Also called MTD.
--     * Slot: is_toxic Description: 
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "food" Description: "A substance consumed by a living organism as a source of nutrition"
--     * Slot: is_supplement Description: 
--     * Slot: highest_FDA_approval_status Description: Should be the highest level of FDA approval this chemical entity or device has, regardless of which disease, condition or phenotype it is currently being reviewed to treat.  For specific levels of FDA approval for a specific condition, disease, phenotype, etc., see the association slot, 'FDA approval status.'
--     * Slot: drug_regulatory_status_world_wide Description: An agglomeration of drug regulatory status worldwide. Not specific to FDA.
--     * Slot: trade_name Description: 
--     * Slot: max_tolerated_dose Description: The highest dose of a drug or treatment that does not cause unacceptable side effects. The maximum tolerated dose is determined in clinical trials by testing increasing doses on different groups of people until the highest dose with acceptable side effects is found. Also called MTD.
--     * Slot: is_toxic Description: 
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "organism attribute" Description: "describes a characteristic of an organismal entity."
--     * Slot: id Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: source Description: 
--     * Slot: has_attribute_type_id Description: connects an attribute to a class that describes it
-- # Class: "phenotypic quality" Description: "A property of a phenotype"
--     * Slot: id Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: source Description: 
--     * Slot: has_attribute_type_id Description: connects an attribute to a class that describes it
-- # Class: "inheritance" Description: "The pattern or 'mode' in which a particular genetic trait or disorder is passed from one generation to the next, e.g. autosomal dominant, autosomal recessive, etc."
--     * Slot: id Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: source Description: 
--     * Slot: has_attribute_type_id Description: connects an attribute to a class that describes it
-- # Class: "organismal entity" Description: "A named entity that is either a part of an organism, a whole organism, population or clade of organisms, excluding chemical entities"
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "life stage" Description: "A stage of development or growth of an organism, including post-natal adult stages"
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "individual organism" Description: "An instance of an organism. For example, Richard Nixon, Charles Darwin, my pet cat. Example ID: ORCID:0000-0002-5355-2576"
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "population of individual organisms" Description: "A collection of individuals from the same taxonomic class distinguished by one or more characteristics.  Characteristics can include, but are not limited to, shared geographic location, genetics, phenotypes."
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "disease or phenotypic feature" Description: "Either one of a disease or an individual phenotypic feature. Some knowledge resources such as Monarch treat these as distinct, others such as MESH conflate."
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "disease" Description: ""
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "phenotypic feature" Description: "A combination of entity and quality that makes up a phenotyping statement."
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "behavioral feature" Description: "A phenotypic feature which is behavioral in nature."
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "anatomical entity" Description: "A subcellular location, cell type or gross anatomical part"
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "cellular component" Description: "A location in or around a cell"
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "cell" Description: ""
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "cell line" Description: ""
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "gross anatomical structure" Description: ""
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "chemical entity or gene or gene product" Description: "A union of chemical entities and children, and gene or gene product. This mixin is helpful to use when searching across chemical entities that must include genes and their children as chemical entities."
--     * Slot: id Description: 
-- # Class: "chemical entity or protein or polypeptide" Description: "A union of chemical entities and children, and protein and polypeptide. This mixin is helpful to use when searching across chemical entities that must include genes and their children as chemical entities."
--     * Slot: id Description: 
-- # Class: "macromolecular machine mixin" Description: "A union of gene locus, gene product, and macromolecular complex mixin. These are the basic units of function in a cell. They either carry out individual biological activities, or they encode molecules which do this."
--     * Slot: id Description: 
--     * Slot: name Description: genes are typically designated by a short symbol and a full name. We map the symbol to the default display name and use an additional slot for full name
-- # Class: "gene or gene product" Description: "A union of gene loci or gene products. Frequently an identifier for one will be used as proxy for another"
--     * Slot: id Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
-- # Class: "gene" Description: "A region (or regions) that includes all of the sequence elements necessary to encode a functional transcript. A gene locus may include regulatory regions, transcribed regions and/or other functional sequence regions."
--     * Slot: symbol Description: Symbol for a particular thing
--     * Slot: has_biological_sequence Description: connects a genomic feature to its sequence
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "gene product mixin" Description: "The functional molecular product of a single gene locus. Gene products are either proteins or functional RNA molecules."
--     * Slot: id Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
-- # Class: "gene product isoform mixin" Description: "This is an abstract class that can be mixed in with different kinds of gene products to indicate that the gene product is intended to represent a specific isoform rather than a canonical or reference or generic product. The designation of canonical or reference may be arbitrary, or it may represent the superclass of all isoforms."
--     * Slot: id Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
-- # Class: "macromolecular complex mixin" Description: "A stable assembly of two or more macromolecules, i.e. proteins, nucleic acids, carbohydrates or lipids, in which at least one component is a protein and the constituent parts function together."
--     * Slot: id Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
-- # Class: "genome" Description: "A genome is the sum of genetic material within a cell or virion."
--     * Slot: has_biological_sequence Description: connects a genomic feature to its sequence
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "exon" Description: "A region of the transcript sequence within a gene which is not removed from the primary RNA transcript by RNA splicing."
--     * Slot: has_biological_sequence Description: connects a genomic feature to its sequence
--     * Slot: is_metabolite Description: indicates whether a molecular entity is a metabolite
--     * Slot: trade_name Description: 
--     * Slot: max_tolerated_dose Description: The highest dose of a drug or treatment that does not cause unacceptable side effects. The maximum tolerated dose is determined in clinical trials by testing increasing doses on different groups of people until the highest dose with acceptable side effects is found. Also called MTD.
--     * Slot: is_toxic Description: 
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "transcript" Description: "An RNA synthesized on a DNA or RNA template by an RNA polymerase."
--     * Slot: has_biological_sequence Description: connects a genomic feature to its sequence
--     * Slot: is_metabolite Description: indicates whether a molecular entity is a metabolite
--     * Slot: trade_name Description: 
--     * Slot: max_tolerated_dose Description: The highest dose of a drug or treatment that does not cause unacceptable side effects. The maximum tolerated dose is determined in clinical trials by testing increasing doses on different groups of people until the highest dose with acceptable side effects is found. Also called MTD.
--     * Slot: is_toxic Description: 
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "coding sequence" Description: ""
--     * Slot: has_biological_sequence Description: connects a genomic feature to its sequence
--     * Slot: is_metabolite Description: indicates whether a molecular entity is a metabolite
--     * Slot: trade_name Description: 
--     * Slot: max_tolerated_dose Description: The highest dose of a drug or treatment that does not cause unacceptable side effects. The maximum tolerated dose is determined in clinical trials by testing increasing doses on different groups of people until the highest dose with acceptable side effects is found. Also called MTD.
--     * Slot: is_toxic Description: 
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "polypeptide" Description: "A polypeptide is a molecular entity characterized by availability in protein databases of amino-acid-based sequence representations of its precise primary structure; for convenience of representation, partial sequences of various kinds are included, even if they do not represent a physical molecule."
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "protein" Description: "A gene product that is composed of a chain of amino acid sequences and is produced by ribosome-mediated translation of mRNA"
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "protein isoform" Description: "Represents a protein that is a specific isoform of the canonical or reference protein. See https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4114032/"
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "protein domain" Description: "A conserved part of protein sequence and (tertiary) structure that can evolve, function, and exist independently of the rest of the protein chain. Protein domains maintain their structure and function independently of the proteins in which they are found. e.g. an SH3 domain."
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "protein family" Description: ""
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "nucleic acid sequence motif" Description: "A linear nucleotide sequence pattern that is widespread and has, or is conjectured to have, a biological significance. e.g. the TATA box promoter motif, transcription factor binding consensus sequences."
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "RNA product" Description: ""
--     * Slot: has_biological_sequence Description: connects a genomic feature to its sequence
--     * Slot: is_metabolite Description: indicates whether a molecular entity is a metabolite
--     * Slot: trade_name Description: 
--     * Slot: max_tolerated_dose Description: The highest dose of a drug or treatment that does not cause unacceptable side effects. The maximum tolerated dose is determined in clinical trials by testing increasing doses on different groups of people until the highest dose with acceptable side effects is found. Also called MTD.
--     * Slot: is_toxic Description: 
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "RNA product isoform" Description: "Represents a protein that is a specific isoform of the canonical or reference RNA"
--     * Slot: has_biological_sequence Description: connects a genomic feature to its sequence
--     * Slot: is_metabolite Description: indicates whether a molecular entity is a metabolite
--     * Slot: trade_name Description: 
--     * Slot: max_tolerated_dose Description: The highest dose of a drug or treatment that does not cause unacceptable side effects. The maximum tolerated dose is determined in clinical trials by testing increasing doses on different groups of people until the highest dose with acceptable side effects is found. Also called MTD.
--     * Slot: is_toxic Description: 
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "noncoding RNA product" Description: ""
--     * Slot: has_biological_sequence Description: connects a genomic feature to its sequence
--     * Slot: is_metabolite Description: indicates whether a molecular entity is a metabolite
--     * Slot: trade_name Description: 
--     * Slot: max_tolerated_dose Description: The highest dose of a drug or treatment that does not cause unacceptable side effects. The maximum tolerated dose is determined in clinical trials by testing increasing doses on different groups of people until the highest dose with acceptable side effects is found. Also called MTD.
--     * Slot: is_toxic Description: 
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "microRNA" Description: ""
--     * Slot: has_biological_sequence Description: connects a genomic feature to its sequence
--     * Slot: is_metabolite Description: indicates whether a molecular entity is a metabolite
--     * Slot: trade_name Description: 
--     * Slot: max_tolerated_dose Description: The highest dose of a drug or treatment that does not cause unacceptable side effects. The maximum tolerated dose is determined in clinical trials by testing increasing doses on different groups of people until the highest dose with acceptable side effects is found. Also called MTD.
--     * Slot: is_toxic Description: 
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "siRNA" Description: "A small RNA molecule that is the product of a longer exogenous or endogenous dsRNA, which is either a bimolecular duplex or very long hairpin, processed (via the Dicer pathway) such that numerous siRNAs accumulate from both strands of the dsRNA. SRNAs trigger the cleavage of their target molecules."
--     * Slot: has_biological_sequence Description: connects a genomic feature to its sequence
--     * Slot: is_metabolite Description: indicates whether a molecular entity is a metabolite
--     * Slot: trade_name Description: 
--     * Slot: max_tolerated_dose Description: The highest dose of a drug or treatment that does not cause unacceptable side effects. The maximum tolerated dose is determined in clinical trials by testing increasing doses on different groups of people until the highest dose with acceptable side effects is found. Also called MTD.
--     * Slot: is_toxic Description: 
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "gene grouping mixin" Description: "any grouping of multiple genes or gene products"
--     * Slot: id Description: 
-- # Class: "gene family" Description: "any grouping of multiple genes or gene products related by common descent"
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "zygosity" Description: ""
--     * Slot: id Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: source Description: 
--     * Slot: has_attribute_type_id Description: connects an attribute to a class that describes it
-- # Class: "genotype" Description: "An information content entity that describes a genome by specifying the total variation in genomic sequence and/or gene expression, relative to some established background"
--     * Slot: has_biological_sequence Description: connects a genomic feature to its sequence
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: has_zygosity_id Description: 
-- # Class: "haplotype" Description: "A set of zero or more Alleles on a single instance of a Sequence[VMC]"
--     * Slot: has_biological_sequence Description: connects a genomic feature to its sequence
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "sequence variant" Description: "An allele that varies in its sequence from what is considered the reference allele at that locus."
--     * Slot: has_biological_sequence Description: The state of the sequence w.r.t a reference sequence
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "snv" Description: "SNVs are single nucleotide positions in genomic DNA at which different sequence alternatives exist"
--     * Slot: has_biological_sequence Description: connects a genomic feature to its sequence
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "reagent targeted gene" Description: "A gene altered in its expression level in the context of some experiment as a result of being targeted by gene-knockdown reagent(s) such as a morpholino or RNAi."
--     * Slot: has_biological_sequence Description: connects a genomic feature to its sequence
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "clinical attribute" Description: "Attributes relating to a clinical manifestation"
--     * Slot: id Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: source Description: 
--     * Slot: has_attribute_type_id Description: connects an attribute to a class that describes it
-- # Class: "clinical measurement" Description: "A clinical measurement is a special kind of attribute which results from a laboratory observation from a subject individual or sample. Measurements can be connected to their subject by the 'has attribute' slot."
--     * Slot: id Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: source Description: 
--     * Slot: has_attribute_type_id Description: connects an attribute to a class that describes it
-- # Class: "clinical modifier" Description: "Used to characterize and specify the phenotypic abnormalities defined in the phenotypic abnormality sub-ontology, with respect to severity, laterality, and other aspects"
--     * Slot: id Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: source Description: 
--     * Slot: has_attribute_type_id Description: connects an attribute to a class that describes it
-- # Class: "clinical course" Description: "The course a disease typically takes from its onset, progression in time, and eventual resolution or death of the affected individual"
--     * Slot: id Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: source Description: 
--     * Slot: has_attribute_type_id Description: connects an attribute to a class that describes it
-- # Class: "onset" Description: "The age group in which (disease) symptom manifestations appear"
--     * Slot: id Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: source Description: 
--     * Slot: has_attribute_type_id Description: connects an attribute to a class that describes it
-- # Class: "clinical entity" Description: "Any entity or process that exists in the clinical domain and outside the biological realm. Diseases are placed under biological entities"
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "clinical trial" Description: ""
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "clinical intervention" Description: ""
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "clinical finding" Description: "this category is currently considered broad enough to tag clinical lab measurements and other biological attributes taken as 'clinical traits' with some statistical score, for example, a p value in genetic associations."
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "hospitalization" Description: ""
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "socioeconomic attribute" Description: "Attributes relating to a socioeconomic manifestation"
--     * Slot: id Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: source Description: 
--     * Slot: has_attribute_type_id Description: connects an attribute to a class that describes it
-- # Class: "case" Description: "An individual (human) organism that has a patient role in some clinical context."
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "cohort" Description: "A group of people banded together or treated as a group who share common characteristics. A cohort 'study' is a particular form of longitudinal study that samples a cohort, performing a cross-section at intervals through time."
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "exposure event" Description: "A (possibly time bounded) incidence of a feature of the environment of an organism that influences one or more phenotypic features of that organism, potentially mediated by genes"
--     * Slot: id Description: 
--     * Slot: timepoint Description: a point in time
-- # Class: "genomic background exposure" Description: "A genomic background exposure is where an individual's specific genomic background of genes, sequence variants or other pre-existing genomic conditions constitute a kind of 'exposure' to the organism, leading to or influencing an outcome."
--     * Slot: id Description: 
--     * Slot: timepoint Description: a point in time
--     * Slot: has_biological_sequence Description: connects a genomic feature to its sequence
-- # Class: "pathological entity mixin" Description: "A pathological (abnormal) structure or process."
--     * Slot: id Description: 
-- # Class: "pathological process" Description: "A biologic function or a process having an abnormal or deleterious effect at the subcellular, cellular, multicellular, or organismal level."
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "pathological process exposure" Description: "A pathological process, when viewed as an exposure, representing a precondition, leading to or influencing an outcome, e.g. autoimmunity leading to disease."
--     * Slot: id Description: 
--     * Slot: timepoint Description: a point in time
-- # Class: "pathological anatomical structure" Description: "An anatomical structure with the potential of have an abnormal or deleterious effect at the subcellular, cellular, multicellular, or organismal level."
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "pathological anatomical exposure" Description: "An abnormal anatomical structure, when viewed as an exposure, representing an precondition, leading to or influencing an outcome, e.g. thrombosis leading to an ischemic disease outcome."
--     * Slot: id Description: 
--     * Slot: timepoint Description: a point in time
-- # Class: "disease or phenotypic feature exposure" Description: "A disease or phenotypic feature state, when viewed as an exposure, represents an precondition, leading to or influencing an outcome, e.g. HIV predisposing an individual to infections; a relative deficiency of skin pigmentation predisposing an individual to skin cancer."
--     * Slot: id Description: 
--     * Slot: timepoint Description: a point in time
-- # Class: "chemical exposure" Description: "A chemical exposure is an intake of a particular chemical entity."
--     * Slot: id Description: 
--     * Slot: timepoint Description: a point in time
-- # Class: "complex chemical exposure" Description: "A complex chemical exposure is an intake of a chemical mixture (e.g. gasoline), other than a drug."
--     * Slot: id Description: 
-- # Class: "drug exposure" Description: "A drug exposure is an intake of a particular drug."
--     * Slot: id Description: 
--     * Slot: timepoint Description: a point in time
-- # Class: "drug to gene interaction exposure" Description: "drug to gene interaction exposure is a drug exposure is where the interactions of the drug with specific genes are known to constitute an 'exposure' to the organism, leading to or influencing an outcome."
--     * Slot: id Description: 
--     * Slot: timepoint Description: a point in time
-- # Class: "treatment" Description: "A treatment is targeted at a disease or phenotype and may involve multiple drug 'exposures', medical devices and/or procedures"
--     * Slot: timepoint Description: a point in time
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "biotic exposure" Description: "An external biotic exposure is an intake of (sometimes pathological) biological organisms (including viruses)."
--     * Slot: id Description: 
--     * Slot: timepoint Description: a point in time
-- # Class: "geographic exposure" Description: "A geographic exposure is a factor relating to geographic proximity to some impactful entity."
--     * Slot: id Description: 
--     * Slot: timepoint Description: a point in time
-- # Class: "environmental exposure" Description: "A environmental exposure is a factor relating to abiotic processes in the environment including sunlight (UV-B), atmospheric (heat, cold, general pollution) and water-born contaminants."
--     * Slot: id Description: 
--     * Slot: timepoint Description: a point in time
-- # Class: "behavioral exposure" Description: "A behavioral exposure is a factor relating to behavior impacting an individual."
--     * Slot: id Description: 
--     * Slot: timepoint Description: a point in time
-- # Class: "socioeconomic exposure" Description: "A socioeconomic exposure is a factor relating to social and financial status of an affected individual (e.g. poverty)."
--     * Slot: id Description: 
--     * Slot: timepoint Description: a point in time
-- # Class: "outcome" Description: "An entity that has the role of being the consequence of an exposure event. This is an abstract mixin grouping of various categories of possible biological or non-biological (e.g. clinical) outcomes."
--     * Slot: id Description: 
-- # Class: "pathological process outcome" Description: "An outcome resulting from an exposure event which is the manifestation of a pathological process."
--     * Slot: id Description: 
-- # Class: "pathological anatomical outcome" Description: "An outcome resulting from an exposure event which is the manifestation of an abnormal anatomical structure."
--     * Slot: id Description: 
-- # Class: "disease or phenotypic feature outcome" Description: "Physiological outcomes resulting from an exposure event which is the manifestation of a disease or other characteristic phenotype."
--     * Slot: id Description: 
-- # Class: "behavioral outcome" Description: "An outcome resulting from an exposure event which is the manifestation of human behavior."
--     * Slot: id Description: 
-- # Class: "hospitalization outcome" Description: "An outcome resulting from an exposure event which is the increased manifestation of acute (e.g. emergency room visit) or chronic (inpatient) hospitalization."
--     * Slot: id Description: 
-- # Class: "mortality outcome" Description: "An outcome of death from resulting from an exposure event."
--     * Slot: id Description: 
-- # Class: "epidemiological outcome" Description: "An epidemiological outcome, such as societal disease burden, resulting from an exposure event."
--     * Slot: id Description: 
-- # Class: "socioeconomic outcome" Description: "An general social or economic outcome, such as healthcare costs, utilization, etc., resulting from an exposure event"
--     * Slot: id Description: 
-- # Class: "association" Description: "A typed association between two entities, supported by evidence"
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "contributor association" Description: "Any association between an entity (such as a publication) and various agents that contribute to its realisation"
--     * Slot: subject Description: information content entity which an agent has helped realise
--     * Slot: predicate Description: generally one of the predicate values 'provider', 'publisher', 'editor' or 'author'
--     * Slot: object Description: agent helping to realise the given entity (e.g. such as a publication)
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "genotype to genotype part association" Description: "Any association between one genotype and a genotypic entity that is a sub-component of it"
--     * Slot: subject Description: parent genotype
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: child genotype
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "genotype to gene association" Description: "Any association between a genotype and a gene. The genotype have have multiple variants in that gene or a single one. There is no assumption of cardinality"
--     * Slot: subject Description: parent genotype
--     * Slot: predicate Description: the relationship type used to connect genotype to gene
--     * Slot: object Description: gene implicated in genotype
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "genotype to variant association" Description: "Any association between a genotype and a sequence variant."
--     * Slot: subject Description: parent genotype
--     * Slot: predicate Description: the relationship type used to connect genotype to gene
--     * Slot: object Description: gene implicated in genotype
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "gene to gene association" Description: "abstract parent class for different kinds of gene-gene or gene product to gene product relationships. Includes homology and interaction."
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: subject_id Description: the subject gene in the association. If the relation is symmetric, subject vs object is arbitrary. We allow a gene product to stand as a proxy for the gene or vice versa.
--     * Slot: object_id Description: the object gene in the association. If the relation is symmetric, subject vs object is arbitrary. We allow a gene product to stand as a proxy for the gene or vice versa.
-- # Class: "gene to gene homology association" Description: "A homology association between two genes. May be orthology (in which case the species of subject and object should differ) or paralogy (in which case the species may be the same)"
--     * Slot: predicate Description: homology relationship type
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: subject_id Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: object_id Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
-- # Class: "gene expression mixin" Description: "Observed gene expression intensity, context (site, stage) and associated phenotypic status within which the expression occurs."
--     * Slot: id Description: 
--     * Slot: expression_site Description: location in which gene or protein expression takes place. May be cell, tissue, or organ.
--     * Slot: stage_qualifier Description: stage during which gene or protein expression of takes place.
--     * Slot: phenotypic_state Description: in experiments (e.g. gene expression) assaying diseased or unhealthy tissue, the phenotypic state can be put here, e.g. MONDO ID. For healthy tissues, use XXX.
--     * Slot: quantifier_qualifier_id Description: Optional quantitative value indicating degree of expression.
-- # Class: "gene to gene coexpression association" Description: "Indicates that two genes are co-expressed, generally under the same conditions."
--     * Slot: expression_site Description: location in which gene or protein expression takes place. May be cell, tissue, or organ.
--     * Slot: stage_qualifier Description: stage during which gene or protein expression of takes place.
--     * Slot: phenotypic_state Description: in experiments (e.g. gene expression) assaying diseased or unhealthy tissue, the phenotypic state can be put here, e.g. MONDO ID. For healthy tissues, use XXX.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: quantifier_qualifier_id Description: A measurable quantity for the object of the association
--     * Slot: subject_id Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: object_id Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
-- # Class: "pairwise gene to gene interaction" Description: "An interaction between two genes or two gene products. May be physical (e.g. protein binding) or genetic (between genes). May be symmetric (e.g. protein interaction) or directed (e.g. phosphorylation)"
--     * Slot: predicate Description: interaction relationship type
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: subject_id Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: object_id Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
-- # Class: "pairwise molecular interaction" Description: "An interaction at the molecular level between two physical entities"
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: interaction relationship type
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: identifier for the interaction. This may come from an interaction database such as IMEX.
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: interacting_molecules_category_id Description: 
-- # Class: "cell line to entity association mixin" Description: "An relationship between a cell line and another entity"
--     * Slot: id Description: 
-- # Class: "cell line to disease or phenotypic feature association" Description: "An relationship between a cell line and a disease or a phenotype, where the cell line is derived from an individual with that disease or phenotype."
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "chemical entity to entity association mixin" Description: "An interaction between a chemical entity and another entity"
--     * Slot: id Description: 
-- # Class: "drug to entity association mixin" Description: "An interaction between a drug and another entity"
--     * Slot: id Description: 
-- # Class: "chemical to entity association mixin" Description: "An interaction between a chemical entity and another entity"
--     * Slot: id Description: 
-- # Class: "case to entity association mixin" Description: "An abstract association for use where the case is the subject"
--     * Slot: id Description: 
-- # Class: "chemical to chemical association" Description: "A relationship between two chemical entities. This can encompass actual interactions as well as temporal causal edges, e.g. one chemical converted to another."
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: the chemical element that is the target of the statement
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: subject_id Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
-- # Class: "reaction to participant association" Description: ""
--     * Slot: stoichiometry Description: the relationship between the relative quantities of substances taking part in a reaction or forming a compound, typically a ratio of whole integers.
--     * Slot: reaction_direction Description: the direction of a reaction as constrained by the direction_enum (ie: left_to_right, neutral, etc.)
--     * Slot: reaction_side Description: the side of a reaction being modeled (ie: left or right)
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "reaction to catalyst association" Description: ""
--     * Slot: stoichiometry Description: the relationship between the relative quantities of substances taking part in a reaction or forming a compound, typically a ratio of whole integers.
--     * Slot: reaction_direction Description: the direction of a reaction as constrained by the direction_enum (ie: left_to_right, neutral, etc.)
--     * Slot: reaction_side Description: the side of a reaction being modeled (ie: left or right)
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: object_id Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
-- # Class: "chemical to chemical derivation association" Description: "A causal relationship between two chemical entities, where the subject represents the upstream entity and the object represents the downstream. For any such association there is an implicit reaction IF R has-input C1 AND R has-output C2 AND R enabled-by P AND R type Reaction THENC1 derives-into C2 <<catalyst qualifier P>>"
--     * Slot: subject Description: the upstream chemical entity
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: the downstream chemical entity
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "chemical to disease or phenotypic feature association" Description: "An interaction between a chemical entity and a phenotype or disease, where the presence of the chemical gives rise to or exacerbates the phenotype."
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: the disease or phenotype that is affected by the chemical
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: subject_id Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
-- # Class: "chemical to pathway association" Description: "An interaction between a chemical entity and a biological process or pathway."
--     * Slot: subject Description: the chemical entity that is affecting the pathway
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: the pathway that is affected by the chemical
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "chemical to gene association" Description: "An interaction between a chemical entity and a gene or gene product."
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: subject_id Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: object_id Description: the gene or gene product that is affected by the chemical.
-- # Class: "drug to gene association" Description: "An interaction between a drug and a gene or gene product."
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: object_id Description: the gene or gene product that is affected by the drug
-- # Class: "material sample to entity association mixin" Description: "An association between a material sample and something."
--     * Slot: id Description: 
-- # Class: "material sample derivation association" Description: "An association between a material sample and the material entity from which it is derived."
--     * Slot: subject Description: the material sample being described
--     * Slot: predicate Description: derivation relationship
--     * Slot: object Description: the material entity the sample was derived from. This may be another material sample, or any other material entity, including for example an organism, a geographic feature, or some environmental material.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "material sample to disease or phenotypic feature association" Description: "An association between a material sample and a disease or phenotype."
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "disease to entity association mixin" Description: ""
--     * Slot: id Description: 
-- # Class: "entity to exposure event association mixin" Description: "An association between some entity and an exposure event."
--     * Slot: id Description: 
-- # Class: "disease to exposure event association" Description: "An association between an exposure event and a disease."
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: object_id Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
-- # Class: "exposure event to entity association mixin" Description: ""
--     * Slot: id Description: 
-- # Class: "entity to outcome association mixin" Description: "An association between some entity and an outcome"
--     * Slot: id Description: 
-- # Class: "exposure event to outcome association" Description: "An association between an exposure event and an outcome."
--     * Slot: has_population_context Description: a biological population (general, study, cohort, etc.) with a specific set of characteristics to constrain an association.
--     * Slot: has_temporal_context Description: a constraint of time placed upon the truth value of an association.
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: object_id Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
-- # Class: "frequency qualifier mixin" Description: "Qualifier for frequency type associations"
--     * Slot: id Description: 
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
-- # Class: "entity to feature or disease qualifiers mixin" Description: "Qualifiers for entity to disease or phenotype associations."
--     * Slot: id Description: 
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
--     * Slot: severity_qualifier_id Description: a qualifier used in a phenotypic association to state how severe the phenotype is in the subject
--     * Slot: onset_qualifier_id Description: a qualifier used in a phenotypic association to state when the phenotype appears is in the subject
-- # Class: "entity to phenotypic feature association mixin" Description: ""
--     * Slot: id Description: 
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
--     * Slot: sex_qualifier_id Description: a qualifier used in a phenotypic association to state whether the association is specific to a particular sex.
--     * Slot: severity_qualifier_id Description: a qualifier used in a phenotypic association to state how severe the phenotype is in the subject
--     * Slot: onset_qualifier_id Description: a qualifier used in a phenotypic association to state when the phenotype appears is in the subject
-- # Class: "information content entity to named thing association" Description: "association between a named thing and a information content entity where the specific context of the relationship between that named thing and the publication is unknown. For example, model organisms databases often capture the knowledge that a gene is found in a journal article, but not specifically the context in which that gene was documented in the article. In these cases, this association with the accompanying predicate 'mentions' could be used. Conversely, for more specific associations (like 'gene to disease association', the publication should be captured as an edge property)."
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "entity to disease association mixin" Description: "mixin class for any association whose object (target node) is a disease"
--     * Slot: id Description: 
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
--     * Slot: severity_qualifier_id Description: a qualifier used in a phenotypic association to state how severe the phenotype is in the subject
--     * Slot: onset_qualifier_id Description: a qualifier used in a phenotypic association to state when the phenotype appears is in the subject
-- # Class: "disease or phenotypic feature to entity association mixin" Description: ""
--     * Slot: id Description: 
-- # Class: "disease or phenotypic feature to location association" Description: "An association between either a disease or a phenotypic feature and an anatomical entity, where the disease/feature manifests in that site."
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: anatomical entity in which the disease or feature is found.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "entity to disease or phenotypic feature association mixin" Description: ""
--     * Slot: id Description: 
-- # Class: "genotype to entity association mixin" Description: ""
--     * Slot: id Description: 
-- # Class: "genotype to phenotypic feature association" Description: "Any association between one genotype and a phenotypic feature, where having the genotype confers the phenotype, either in isolation or through environment"
--     * Slot: subject Description: genotype that is associated with the phenotypic feature
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
--     * Slot: sex_qualifier_id Description: a qualifier used in a phenotypic association to state whether the association is specific to a particular sex.
--     * Slot: severity_qualifier_id Description: a qualifier used in a phenotypic association to state how severe the phenotype is in the subject
--     * Slot: onset_qualifier_id Description: a qualifier used in a phenotypic association to state when the phenotype appears is in the subject
-- # Class: "exposure event to phenotypic feature association" Description: "Any association between an environment and a phenotypic feature, where being in the environment influences the phenotype."
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
--     * Slot: sex_qualifier_id Description: a qualifier used in a phenotypic association to state whether the association is specific to a particular sex.
--     * Slot: subject_id Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: severity_qualifier_id Description: a qualifier used in a phenotypic association to state how severe the phenotype is in the subject
--     * Slot: onset_qualifier_id Description: a qualifier used in a phenotypic association to state when the phenotype appears is in the subject
-- # Class: "disease to phenotypic feature association" Description: "An association between a disease and a phenotypic feature in which the phenotypic feature is associated with the disease in some way."
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
--     * Slot: sex_qualifier_id Description: a qualifier used in a phenotypic association to state whether the association is specific to a particular sex.
--     * Slot: severity_qualifier_id Description: a qualifier used in a phenotypic association to state how severe the phenotype is in the subject
--     * Slot: onset_qualifier_id Description: a qualifier used in a phenotypic association to state when the phenotype appears is in the subject
-- # Class: "case to phenotypic feature association" Description: "An association between a case (e.g. individual patient) and a phenotypic feature in which the individual has or has had the phenotype."
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
--     * Slot: sex_qualifier_id Description: a qualifier used in a phenotypic association to state whether the association is specific to a particular sex.
--     * Slot: severity_qualifier_id Description: a qualifier used in a phenotypic association to state how severe the phenotype is in the subject
--     * Slot: onset_qualifier_id Description: a qualifier used in a phenotypic association to state when the phenotype appears is in the subject
-- # Class: "behavior to behavioral feature association" Description: "An association between an mixture behavior and a behavioral feature manifested by the individual exhibited or has exhibited the behavior."
--     * Slot: subject Description: behavior that is the subject of the association
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: behavioral feature that is the object of the association
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
--     * Slot: sex_qualifier_id Description: a qualifier used in a phenotypic association to state whether the association is specific to a particular sex.
--     * Slot: severity_qualifier_id Description: a qualifier used in a phenotypic association to state how severe the phenotype is in the subject
--     * Slot: onset_qualifier_id Description: a qualifier used in a phenotypic association to state when the phenotype appears is in the subject
-- # Class: "gene to entity association mixin" Description: ""
--     * Slot: id Description: 
-- # Class: "variant to entity association mixin" Description: ""
--     * Slot: id Description: 
-- # Class: "gene to phenotypic feature association" Description: ""
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
--     * Slot: sex_qualifier_id Description: a qualifier used in a phenotypic association to state whether the association is specific to a particular sex.
--     * Slot: subject_id Description: gene in which variation is correlated with the phenotypic feature
--     * Slot: severity_qualifier_id Description: a qualifier used in a phenotypic association to state how severe the phenotype is in the subject
--     * Slot: onset_qualifier_id Description: a qualifier used in a phenotypic association to state when the phenotype appears is in the subject
-- # Class: "gene to disease association" Description: ""
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
--     * Slot: subject_id Description: gene in which variation is correlated with the disease, may be protective or causative or associative, or as a model
--     * Slot: severity_qualifier_id Description: a qualifier used in a phenotypic association to state how severe the phenotype is in the subject
--     * Slot: onset_qualifier_id Description: a qualifier used in a phenotypic association to state when the phenotype appears is in the subject
-- # Class: "druggable gene to disease association" Description: ""
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
--     * Slot: subject_id Description: gene in which variation is correlated with the disease in a protective manner, or if the product produced by the gene can be targeted by a small molecule and this leads to a protective or improving disease state.
--     * Slot: severity_qualifier_id Description: a qualifier used in a phenotypic association to state how severe the phenotype is in the subject
--     * Slot: onset_qualifier_id Description: a qualifier used in a phenotypic association to state when the phenotype appears is in the subject
-- # Class: "variant to gene association" Description: "An association between a variant and a gene, where the variant has a genetic association with the gene (i.e. is in linkage disequilibrium)"
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "variant to gene expression association" Description: "An association between a variant and expression of a gene (i.e. e-QTL)"
--     * Slot: expression_site Description: location in which gene or protein expression takes place. May be cell, tissue, or organ.
--     * Slot: stage_qualifier Description: stage during which gene or protein expression of takes place.
--     * Slot: phenotypic_state Description: in experiments (e.g. gene expression) assaying diseased or unhealthy tissue, the phenotypic state can be put here, e.g. MONDO ID. For healthy tissues, use XXX.
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: quantifier_qualifier_id Description: A measurable quantity for the object of the association
-- # Class: "variant to population association" Description: "An association between a variant and a population, where the variant has particular frequency in the population"
--     * Slot: has_count Description: number in object population that carry a particular allele, aka allele count
--     * Slot: has_total Description: number all populations that carry a particular allele, aka allele number
--     * Slot: has_quotient Description: frequency of allele in population, expressed as a number with allele divided by number in reference population, aka allele frequency
--     * Slot: has_percentage Description: equivalent to has quotient multiplied by 100
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
--     * Slot: subject Description: an allele that has a certain frequency in a given population
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: the population that is observed to have the frequency
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "population to population association" Description: "An association between a two populations"
--     * Slot: subject Description: the population that form the subject of the association
--     * Slot: predicate Description: A relationship type that holds between the subject and object populations. Standard mereological relations can be used. E.g. subject part-of object, subject overlaps object. Derivation relationships can also be used
--     * Slot: object Description: the population that form the object of the association
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "variant to phenotypic feature association" Description: ""
--     * Slot: subject Description: a sequence variant in which the allele state is associated in some way with the phenotype state
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
--     * Slot: sex_qualifier_id Description: a qualifier used in a phenotypic association to state whether the association is specific to a particular sex.
--     * Slot: severity_qualifier_id Description: a qualifier used in a phenotypic association to state how severe the phenotype is in the subject
--     * Slot: onset_qualifier_id Description: a qualifier used in a phenotypic association to state when the phenotype appears is in the subject
-- # Class: "variant to disease association" Description: ""
--     * Slot: subject Description: a sequence variant in which the allele state is associated in some way with the disease state
--     * Slot: predicate Description: E.g. is pathogenic for
--     * Slot: object Description: a disease that is associated with that variant
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
--     * Slot: severity_qualifier_id Description: a qualifier used in a phenotypic association to state how severe the phenotype is in the subject
--     * Slot: onset_qualifier_id Description: a qualifier used in a phenotypic association to state when the phenotype appears is in the subject
-- # Class: "genotype to disease association" Description: ""
--     * Slot: subject Description: a genotype that is associated in some way with a disease state
--     * Slot: predicate Description: E.g. is pathogenic for
--     * Slot: object Description: a disease that is associated with that genotype
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
--     * Slot: severity_qualifier_id Description: a qualifier used in a phenotypic association to state how severe the phenotype is in the subject
--     * Slot: onset_qualifier_id Description: a qualifier used in a phenotypic association to state when the phenotype appears is in the subject
-- # Class: "model to disease association mixin" Description: "This mixin is used for any association class for which the subject (source node) plays the role of a 'model', in that it recapitulates some features of the disease in a way that is useful for studying the disease outside a patient carrying the disease"
--     * Slot: id Description: 
-- # Class: "gene as a model of disease association" Description: ""
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
--     * Slot: subject_id Description: A gene that has a role in modeling the disease. This may be a model organism ortholog of a known disease gene, or it may be a gene whose mutants recapitulate core features of the disease.
--     * Slot: severity_qualifier_id Description: a qualifier used in a phenotypic association to state how severe the phenotype is in the subject
--     * Slot: onset_qualifier_id Description: a qualifier used in a phenotypic association to state when the phenotype appears is in the subject
-- # Class: "variant as a model of disease association" Description: ""
--     * Slot: subject Description: A variant that has a role in modeling the disease.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
--     * Slot: severity_qualifier_id Description: a qualifier used in a phenotypic association to state how severe the phenotype is in the subject
--     * Slot: onset_qualifier_id Description: a qualifier used in a phenotypic association to state when the phenotype appears is in the subject
-- # Class: "genotype as a model of disease association" Description: ""
--     * Slot: subject Description: A genotype that has a role in modeling the disease.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
--     * Slot: severity_qualifier_id Description: a qualifier used in a phenotypic association to state how severe the phenotype is in the subject
--     * Slot: onset_qualifier_id Description: a qualifier used in a phenotypic association to state when the phenotype appears is in the subject
-- # Class: "cell line as a model of disease association" Description: ""
--     * Slot: subject Description: A cell line derived from an organismal entity with a disease state that is used as a model of that disease.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
--     * Slot: severity_qualifier_id Description: a qualifier used in a phenotypic association to state how severe the phenotype is in the subject
--     * Slot: onset_qualifier_id Description: a qualifier used in a phenotypic association to state when the phenotype appears is in the subject
-- # Class: "organismal entity as a model of disease association" Description: ""
--     * Slot: subject Description: A organismal entity (strain, breed) with a predisposition to a disease, or bred/created specifically to model a disease.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
--     * Slot: severity_qualifier_id Description: a qualifier used in a phenotypic association to state how severe the phenotype is in the subject
--     * Slot: onset_qualifier_id Description: a qualifier used in a phenotypic association to state when the phenotype appears is in the subject
-- # Class: "organism to organism association" Description: ""
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: An association between two individual organisms.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "taxon to taxon association" Description: ""
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: An association between individuals of different taxa.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "gene has variant that contributes to disease association" Description: ""
--     * Slot: sequence_variant_qualifier Description: a qualifier used in an association with the variant
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
--     * Slot: subject_id Description: A gene that has a role in modeling the disease. This may be a model organism ortholog of a known disease gene, or it may be a gene whose mutants recapitulate core features of the disease.
--     * Slot: severity_qualifier_id Description: a qualifier used in a phenotypic association to state how severe the phenotype is in the subject
--     * Slot: onset_qualifier_id Description: a qualifier used in a phenotypic association to state when the phenotype appears is in the subject
-- # Class: "gene to expression site association" Description: "An association between a gene and a gene expression site, possibly qualified by stage/timing info."
--     * Slot: stage_qualifier Description: stage at which the gene is expressed in the site
--     * Slot: predicate Description: expression relationship
--     * Slot: object Description: location in which the gene is expressed
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: quantifier_qualifier_id Description: can be used to indicate magnitude, or also ranking
--     * Slot: subject_id Description: Gene or gene product positively within the specified anatomical entity (or subclass, i.e. cellular component) location.
-- # Class: "sequence variant modulates treatment association" Description: "An association between a sequence variant and a treatment or health intervention. The treatment object itself encompasses both the disease and the drug used."
--     * Slot: subject Description: variant that modulates the treatment of some disease
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: treatment whose efficacy is modulated by the subject variant
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "functional association" Description: "An association between a macromolecular machine mixin (gene, gene product or complex of gene products) and either a molecular activity, a biological process or a cellular location in which a function is executed."
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: subject_id Description: gene, product or macromolecular complex mixin that has the function associated with the GO term
--     * Slot: object_id Description: class describing the activity, process or localization of the gene product
-- # Class: "macromolecular machine to entity association mixin" Description: "an association which has a macromolecular machine mixin as a subject"
--     * Slot: id Description: 
-- # Class: "macromolecular machine to molecular activity association" Description: "A functional association between a macromolecular machine (gene, gene product or complex) and a molecular activity (as represented in the GO molecular function branch), where the entity carries out the activity, or contributes to its execution."
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: subject_id Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
-- # Class: "macromolecular machine to biological process association" Description: "A functional association between a macromolecular machine (gene, gene product or complex) and a biological process or pathway (as represented in the GO biological process branch), where the entity carries out some part of the process, regulates it, or acts upstream of it."
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: subject_id Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
-- # Class: "macromolecular machine to cellular component association" Description: "A functional association between a macromolecular machine (gene, gene product or complex) and a cellular component (as represented in the GO cellular component branch), where the entity carries out its function in the cellular component."
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: subject_id Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
-- # Class: "molecular activity to chemical entity association" Description: "Added in response to capturing relationship between microbiome activities as measured via measurements of blood analytes as collected via blood and stool samples"
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "molecular activity to molecular activity association" Description: "Added in response to capturing relationship between microbiome activities as measured via measurements of blood analytes as collected via blood and stool samples"
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "gene to go term association" Description: ""
--     * Slot: subject Description: gene, product or macromolecular complex that has the function associated with the GO term
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: object_id Description: class describing the activity, process or localization of the gene product
-- # Class: "entity to disease association" Description: ""
--     * Slot: FDA_approval_status Description: 
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "entity to phenotypic feature association" Description: ""
--     * Slot: FDA_approval_status Description: 
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "sequence association" Description: "An association between a sequence feature and a nucleic acid entity it is localized to."
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "genomic sequence localization" Description: "A relationship between a sequence feature and a nucleic acid entity it is localized to. The reference entity may be a chromosome, chromosome region or information entity such as a contig."
--     * Slot: start_interbase_coordinate Description: The position at which the subject nucleic acid entity starts on the chromosome or other entity to which it is located on. (ie: the start of the sequence being referenced is 0).
--     * Slot: end_interbase_coordinate Description: The position at which the subject nucleic acid entity ends on the chromosome or other entity to which it is located on.
--     * Slot: genome_build Description: The version of the genome on which a feature is located. For example, GRCh38 for Homo sapiens.
--     * Slot: strand Description: The strand on which a feature is located. Has a value of '+' (sense strand or forward strand) or '-' (anti-sense strand or reverse strand).
--     * Slot: phase Description: The phase for a coding sequence entity. For example, phase of a CDS as represented in a GFF3 with a value of 0, 1 or 2.
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "sequence feature relationship" Description: "For example, a particular exon is part of a particular transcript or gene"
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "transcript to gene relationship" Description: "A gene is a collection of transcripts"
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "gene to gene product relationship" Description: "A gene is transcribed and potentially translated to a gene product"
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: object_id Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
-- # Class: "exon to transcript relationship" Description: "A transcript is formed from multiple exons"
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "gene regulatory relationship" Description: "A regulatory relationship between two genes"
--     * Slot: predicate Description: the direction is always from regulator to regulated
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
--     * Slot: subject_id Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: object_id Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
-- # Class: "anatomical entity to anatomical entity association" Description: ""
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "anatomical entity to anatomical entity part of association" Description: "A relationship between two anatomical entities where the relationship is mereological, i.e the two entities are related by parthood. This includes relationships between cellular components and cells, between cells and tissues, tissues and whole organisms"
--     * Slot: subject Description: the part
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: the whole
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "anatomical entity to anatomical entity ontogenic association" Description: "A relationship between two anatomical entities where the relationship is ontogenic, i.e. the two entities are related by development. A number of different relationship types can be used to specify the precise nature of the relationship."
--     * Slot: subject Description: the structure at a later time
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: the structure at an earlier time
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "organism taxon to entity association" Description: "An association between an organism taxon and another entity"
--     * Slot: id Description: 
-- # Class: "organism taxon to organism taxon association" Description: "A relationship between two organism taxon nodes"
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "organism taxon to organism taxon specialization" Description: "A child-parent relationship between two taxa. For example: Homo sapiens subclass_of Homo"
--     * Slot: subject Description: the more specific taxon
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: the more general taxon
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "organism taxon to organism taxon interaction" Description: "An interaction relationship between two taxa. This may be a symbiotic relationship (encompassing mutualism and parasitism), or it may be non-symbiotic. Example: plague transmitted_by flea; cattle domesticated_by Homo sapiens; plague infects Homo sapiens"
--     * Slot: associated_environmental_context Description: the environment in which the two taxa interact
--     * Slot: subject Description: the taxon that is the subject of the association
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: the taxon that is the subject of the association
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "organism taxon to environment association" Description: ""
--     * Slot: subject Description: the taxon that is the subject of the association
--     * Slot: predicate Description: predicate describing the relationship between the taxon and the environment 
--     * Slot: object Description: the environment in which the organism occurs
--     * Slot: relation Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: type Description: 
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: source Description: 
-- # Class: "attribute_has_quantitative_value" Description: ""
--     * Slot: attribute_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "chemical role_has_quantitative_value" Description: ""
--     * Slot: chemical role_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "biological sex_has_quantitative_value" Description: ""
--     * Slot: biological sex_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "phenotypic sex_has_quantitative_value" Description: ""
--     * Slot: phenotypic sex_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "genotypic sex_has_quantitative_value" Description: ""
--     * Slot: genotypic sex_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "severity value_has_quantitative_value" Description: ""
--     * Slot: severity value_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "entity_category" Description: ""
--     * Slot: entity_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "entity_has_attribute" Description: ""
--     * Slot: entity_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "named thing_provided_by" Description: ""
--     * Slot: named thing_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "named thing_category" Description: ""
--     * Slot: named thing_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "named thing_has_attribute" Description: ""
--     * Slot: named thing_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "organism taxon_provided_by" Description: ""
--     * Slot: organism taxon_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "organism taxon_category" Description: ""
--     * Slot: organism taxon_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "organism taxon_has_attribute" Description: ""
--     * Slot: organism taxon_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "event_provided_by" Description: ""
--     * Slot: event_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "event_category" Description: ""
--     * Slot: event_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "event_has_attribute" Description: ""
--     * Slot: event_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "administrative entity_provided_by" Description: ""
--     * Slot: administrative entity_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "administrative entity_category" Description: ""
--     * Slot: administrative entity_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "administrative entity_has_attribute" Description: ""
--     * Slot: administrative entity_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "agent_affiliation" Description: ""
--     * Slot: agent_id Description: Autocreated FK slot
--     * Slot: affiliation Description: a professional relationship between one provider (often a person) within another provider (often an organization). Target provider identity should be specified by a CURIE. Providers may have multiple affiliations.
-- # Class: "agent_provided_by" Description: ""
--     * Slot: agent_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "agent_category" Description: ""
--     * Slot: agent_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "agent_has_attribute" Description: ""
--     * Slot: agent_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "information content entity_provided_by" Description: ""
--     * Slot: information content entity_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "information content entity_category" Description: ""
--     * Slot: information content entity_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "information content entity_has_attribute" Description: ""
--     * Slot: information content entity_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "dataset_provided_by" Description: ""
--     * Slot: dataset_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "dataset_category" Description: ""
--     * Slot: dataset_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "dataset_has_attribute" Description: ""
--     * Slot: dataset_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "dataset distribution_provided_by" Description: ""
--     * Slot: dataset distribution_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "dataset distribution_category" Description: ""
--     * Slot: dataset distribution_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "dataset distribution_has_attribute" Description: ""
--     * Slot: dataset distribution_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "dataset version_provided_by" Description: ""
--     * Slot: dataset version_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "dataset version_category" Description: ""
--     * Slot: dataset version_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "dataset version_has_attribute" Description: ""
--     * Slot: dataset version_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "dataset summary_provided_by" Description: ""
--     * Slot: dataset summary_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "dataset summary_category" Description: ""
--     * Slot: dataset summary_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "dataset summary_has_attribute" Description: ""
--     * Slot: dataset summary_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "confidence level_provided_by" Description: ""
--     * Slot: confidence level_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "confidence level_category" Description: ""
--     * Slot: confidence level_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "confidence level_has_attribute" Description: ""
--     * Slot: confidence level_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "evidence type_provided_by" Description: ""
--     * Slot: evidence type_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "evidence type_category" Description: ""
--     * Slot: evidence type_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "evidence type_has_attribute" Description: ""
--     * Slot: evidence type_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "information resource_provided_by" Description: ""
--     * Slot: information resource_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "information resource_category" Description: ""
--     * Slot: information resource_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "information resource_has_attribute" Description: ""
--     * Slot: information resource_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "publication_author" Description: ""
--     * Slot: publication_id Description: Autocreated FK slot
--     * Slot: author Description: connects an publication to the list of authors who contributed to the publication. This property should be a comma-delimited list of author names. It is recommended that an author's name be formatted as "surname, firstname initial.".   Note that this property is a node annotation expressing the citation list of authorship which might typically otherwise be more completely documented in biolink:PublicationToProviderAssociation defined edges which point to full details about an author and possibly, some qualifiers which clarify the specific status of a given author in the publication.
-- # Class: "publication_pages" Description: ""
--     * Slot: publication_id Description: Autocreated FK slot
--     * Slot: pages Description: When a 2-tuple of page numbers are provided, they represent the start and end page of the publication within its parent publication context. For books, this may be set to the total number of pages of the book.
-- # Class: "publication_keywords" Description: ""
--     * Slot: publication_id Description: Autocreated FK slot
--     * Slot: keywords Description: keywords tagging a publication
-- # Class: "publication_mesh_terms" Description: ""
--     * Slot: publication_id Description: Autocreated FK slot
--     * Slot: mesh_terms Description: mesh terms tagging a publication
-- # Class: "publication_xref" Description: ""
--     * Slot: publication_id Description: Autocreated FK slot
--     * Slot: xref Description: Alternate CURIEs for a thing
-- # Class: "publication_provided_by" Description: ""
--     * Slot: publication_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "publication_category" Description: ""
--     * Slot: publication_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "publication_has_attribute" Description: ""
--     * Slot: publication_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "book_author" Description: ""
--     * Slot: book_id Description: Autocreated FK slot
--     * Slot: author Description: connects an publication to the list of authors who contributed to the publication. This property should be a comma-delimited list of author names. It is recommended that an author's name be formatted as "surname, firstname initial.".   Note that this property is a node annotation expressing the citation list of authorship which might typically otherwise be more completely documented in biolink:PublicationToProviderAssociation defined edges which point to full details about an author and possibly, some qualifiers which clarify the specific status of a given author in the publication.
-- # Class: "book_pages" Description: ""
--     * Slot: book_id Description: Autocreated FK slot
--     * Slot: pages Description: page number of source referenced for statement or publication
-- # Class: "book_keywords" Description: ""
--     * Slot: book_id Description: Autocreated FK slot
--     * Slot: keywords Description: keywords tagging a publication
-- # Class: "book_mesh_terms" Description: ""
--     * Slot: book_id Description: Autocreated FK slot
--     * Slot: mesh_terms Description: mesh terms tagging a publication
-- # Class: "book_xref" Description: ""
--     * Slot: book_id Description: Autocreated FK slot
--     * Slot: xref Description: Alternate CURIEs for a thing
-- # Class: "book_provided_by" Description: ""
--     * Slot: book_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "book_category" Description: ""
--     * Slot: book_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "book_has_attribute" Description: ""
--     * Slot: book_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "book chapter_author" Description: ""
--     * Slot: book chapter_id Description: Autocreated FK slot
--     * Slot: author Description: connects an publication to the list of authors who contributed to the publication. This property should be a comma-delimited list of author names. It is recommended that an author's name be formatted as "surname, firstname initial.".   Note that this property is a node annotation expressing the citation list of authorship which might typically otherwise be more completely documented in biolink:PublicationToProviderAssociation defined edges which point to full details about an author and possibly, some qualifiers which clarify the specific status of a given author in the publication.
-- # Class: "book chapter_pages" Description: ""
--     * Slot: book chapter_id Description: Autocreated FK slot
--     * Slot: pages Description: page number of source referenced for statement or publication
-- # Class: "book chapter_keywords" Description: ""
--     * Slot: book chapter_id Description: Autocreated FK slot
--     * Slot: keywords Description: keywords tagging a publication
-- # Class: "book chapter_mesh_terms" Description: ""
--     * Slot: book chapter_id Description: Autocreated FK slot
--     * Slot: mesh_terms Description: mesh terms tagging a publication
-- # Class: "book chapter_xref" Description: ""
--     * Slot: book chapter_id Description: Autocreated FK slot
--     * Slot: xref Description: Alternate CURIEs for a thing
-- # Class: "book chapter_provided_by" Description: ""
--     * Slot: book chapter_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "book chapter_category" Description: ""
--     * Slot: book chapter_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "book chapter_has_attribute" Description: ""
--     * Slot: book chapter_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "serial_author" Description: ""
--     * Slot: serial_id Description: Autocreated FK slot
--     * Slot: author Description: connects an publication to the list of authors who contributed to the publication. This property should be a comma-delimited list of author names. It is recommended that an author's name be formatted as "surname, firstname initial.".   Note that this property is a node annotation expressing the citation list of authorship which might typically otherwise be more completely documented in biolink:PublicationToProviderAssociation defined edges which point to full details about an author and possibly, some qualifiers which clarify the specific status of a given author in the publication.
-- # Class: "serial_pages" Description: ""
--     * Slot: serial_id Description: Autocreated FK slot
--     * Slot: pages Description: page number of source referenced for statement or publication
-- # Class: "serial_keywords" Description: ""
--     * Slot: serial_id Description: Autocreated FK slot
--     * Slot: keywords Description: keywords tagging a publication
-- # Class: "serial_mesh_terms" Description: ""
--     * Slot: serial_id Description: Autocreated FK slot
--     * Slot: mesh_terms Description: mesh terms tagging a publication
-- # Class: "serial_xref" Description: ""
--     * Slot: serial_id Description: Autocreated FK slot
--     * Slot: xref Description: Alternate CURIEs for a thing
-- # Class: "serial_provided_by" Description: ""
--     * Slot: serial_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "serial_category" Description: ""
--     * Slot: serial_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "serial_has_attribute" Description: ""
--     * Slot: serial_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "article_author" Description: ""
--     * Slot: article_id Description: Autocreated FK slot
--     * Slot: author Description: connects an publication to the list of authors who contributed to the publication. This property should be a comma-delimited list of author names. It is recommended that an author's name be formatted as "surname, firstname initial.".   Note that this property is a node annotation expressing the citation list of authorship which might typically otherwise be more completely documented in biolink:PublicationToProviderAssociation defined edges which point to full details about an author and possibly, some qualifiers which clarify the specific status of a given author in the publication.
-- # Class: "article_pages" Description: ""
--     * Slot: article_id Description: Autocreated FK slot
--     * Slot: pages Description: page number of source referenced for statement or publication
-- # Class: "article_keywords" Description: ""
--     * Slot: article_id Description: Autocreated FK slot
--     * Slot: keywords Description: keywords tagging a publication
-- # Class: "article_mesh_terms" Description: ""
--     * Slot: article_id Description: Autocreated FK slot
--     * Slot: mesh_terms Description: mesh terms tagging a publication
-- # Class: "article_xref" Description: ""
--     * Slot: article_id Description: Autocreated FK slot
--     * Slot: xref Description: Alternate CURIEs for a thing
-- # Class: "article_provided_by" Description: ""
--     * Slot: article_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "article_category" Description: ""
--     * Slot: article_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "article_has_attribute" Description: ""
--     * Slot: article_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "physical entity_provided_by" Description: ""
--     * Slot: physical entity_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "physical entity_category" Description: ""
--     * Slot: physical entity_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "physical entity_has_attribute" Description: ""
--     * Slot: physical entity_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "activity_provided_by" Description: ""
--     * Slot: activity_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "activity_category" Description: ""
--     * Slot: activity_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "activity_has_attribute" Description: ""
--     * Slot: activity_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "procedure_provided_by" Description: ""
--     * Slot: procedure_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "procedure_category" Description: ""
--     * Slot: procedure_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "procedure_has_attribute" Description: ""
--     * Slot: procedure_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "phenomenon_provided_by" Description: ""
--     * Slot: phenomenon_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "phenomenon_category" Description: ""
--     * Slot: phenomenon_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "phenomenon_has_attribute" Description: ""
--     * Slot: phenomenon_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "device_provided_by" Description: ""
--     * Slot: device_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "device_category" Description: ""
--     * Slot: device_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "device_has_attribute" Description: ""
--     * Slot: device_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "study population_in_taxon" Description: ""
--     * Slot: study population_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "study population_provided_by" Description: ""
--     * Slot: study population_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "study population_category" Description: ""
--     * Slot: study population_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "study population_has_attribute" Description: ""
--     * Slot: study population_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "material sample_provided_by" Description: ""
--     * Slot: material sample_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "material sample_category" Description: ""
--     * Slot: material sample_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "material sample_has_attribute" Description: ""
--     * Slot: material sample_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "planetary entity_provided_by" Description: ""
--     * Slot: planetary entity_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "planetary entity_category" Description: ""
--     * Slot: planetary entity_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "planetary entity_has_attribute" Description: ""
--     * Slot: planetary entity_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "environmental process_provided_by" Description: ""
--     * Slot: environmental process_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "environmental process_category" Description: ""
--     * Slot: environmental process_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "environmental process_has_attribute" Description: ""
--     * Slot: environmental process_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "environmental feature_provided_by" Description: ""
--     * Slot: environmental feature_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "environmental feature_category" Description: ""
--     * Slot: environmental feature_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "environmental feature_has_attribute" Description: ""
--     * Slot: environmental feature_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "geographic location_provided_by" Description: ""
--     * Slot: geographic location_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "geographic location_category" Description: ""
--     * Slot: geographic location_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "geographic location_has_attribute" Description: ""
--     * Slot: geographic location_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "geographic location at time_provided_by" Description: ""
--     * Slot: geographic location at time_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "geographic location at time_category" Description: ""
--     * Slot: geographic location at time_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "geographic location at time_has_attribute" Description: ""
--     * Slot: geographic location at time_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "biological entity_provided_by" Description: ""
--     * Slot: biological entity_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "biological entity_category" Description: ""
--     * Slot: biological entity_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "biological entity_has_attribute" Description: ""
--     * Slot: biological entity_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "thing with taxon_in_taxon" Description: ""
--     * Slot: thing with taxon_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "genomic entity_in_taxon" Description: ""
--     * Slot: genomic entity_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "molecular entity_available_from" Description: ""
--     * Slot: molecular entity_id Description: Autocreated FK slot
--     * Slot: available_from Description: 
-- # Class: "molecular entity_has_chemical_role" Description: ""
--     * Slot: molecular entity_id Description: Autocreated FK slot
--     * Slot: has_chemical_role_id Description: 	A role is particular behaviour which a material entity may exhibit.
-- # Class: "molecular entity_provided_by" Description: ""
--     * Slot: molecular entity_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "molecular entity_category" Description: ""
--     * Slot: molecular entity_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "molecular entity_has_attribute" Description: ""
--     * Slot: molecular entity_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "chemical entity_available_from" Description: ""
--     * Slot: chemical entity_id Description: Autocreated FK slot
--     * Slot: available_from Description: 
-- # Class: "chemical entity_has_chemical_role" Description: ""
--     * Slot: chemical entity_id Description: Autocreated FK slot
--     * Slot: has_chemical_role_id Description: 	A role is particular behaviour which a material entity may exhibit.
-- # Class: "chemical entity_provided_by" Description: ""
--     * Slot: chemical entity_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "chemical entity_category" Description: ""
--     * Slot: chemical entity_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "chemical entity_has_attribute" Description: ""
--     * Slot: chemical entity_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "small molecule_available_from" Description: ""
--     * Slot: small molecule_id Description: Autocreated FK slot
--     * Slot: available_from Description: 
-- # Class: "small molecule_has_chemical_role" Description: ""
--     * Slot: small molecule_id Description: Autocreated FK slot
--     * Slot: has_chemical_role_id Description: 	A role is particular behaviour which a material entity may exhibit.
-- # Class: "small molecule_provided_by" Description: ""
--     * Slot: small molecule_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "small molecule_category" Description: ""
--     * Slot: small molecule_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "small molecule_has_attribute" Description: ""
--     * Slot: small molecule_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "chemical mixture_routes_of_delivery" Description: ""
--     * Slot: chemical mixture_id Description: Autocreated FK slot
--     * Slot: routes_of_delivery Description: the method or process of administering a pharmaceutical compound to achieve a therapeutic effect in humans or animals.
-- # Class: "chemical mixture_available_from" Description: ""
--     * Slot: chemical mixture_id Description: Autocreated FK slot
--     * Slot: available_from Description: 
-- # Class: "chemical mixture_has_chemical_role" Description: ""
--     * Slot: chemical mixture_id Description: Autocreated FK slot
--     * Slot: has_chemical_role_id Description: 	A role is particular behaviour which a material entity may exhibit.
-- # Class: "chemical mixture_provided_by" Description: ""
--     * Slot: chemical mixture_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "chemical mixture_category" Description: ""
--     * Slot: chemical mixture_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "chemical mixture_has_attribute" Description: ""
--     * Slot: chemical mixture_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "nucleic acid entity_available_from" Description: ""
--     * Slot: nucleic acid entity_id Description: Autocreated FK slot
--     * Slot: available_from Description: 
-- # Class: "nucleic acid entity_has_chemical_role" Description: ""
--     * Slot: nucleic acid entity_id Description: Autocreated FK slot
--     * Slot: has_chemical_role_id Description: 	A role is particular behaviour which a material entity may exhibit.
-- # Class: "nucleic acid entity_provided_by" Description: ""
--     * Slot: nucleic acid entity_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "nucleic acid entity_category" Description: ""
--     * Slot: nucleic acid entity_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "nucleic acid entity_has_attribute" Description: ""
--     * Slot: nucleic acid entity_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "nucleic acid entity_in_taxon" Description: ""
--     * Slot: nucleic acid entity_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "molecular mixture_routes_of_delivery" Description: ""
--     * Slot: molecular mixture_id Description: Autocreated FK slot
--     * Slot: routes_of_delivery Description: the method or process of administering a pharmaceutical compound to achieve a therapeutic effect in humans or animals.
-- # Class: "molecular mixture_available_from" Description: ""
--     * Slot: molecular mixture_id Description: Autocreated FK slot
--     * Slot: available_from Description: 
-- # Class: "molecular mixture_has_chemical_role" Description: ""
--     * Slot: molecular mixture_id Description: Autocreated FK slot
--     * Slot: has_chemical_role_id Description: 	A role is particular behaviour which a material entity may exhibit.
-- # Class: "molecular mixture_provided_by" Description: ""
--     * Slot: molecular mixture_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "molecular mixture_category" Description: ""
--     * Slot: molecular mixture_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "molecular mixture_has_attribute" Description: ""
--     * Slot: molecular mixture_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "complex molecular mixture_routes_of_delivery" Description: ""
--     * Slot: complex molecular mixture_id Description: Autocreated FK slot
--     * Slot: routes_of_delivery Description: the method or process of administering a pharmaceutical compound to achieve a therapeutic effect in humans or animals.
-- # Class: "complex molecular mixture_available_from" Description: ""
--     * Slot: complex molecular mixture_id Description: Autocreated FK slot
--     * Slot: available_from Description: 
-- # Class: "complex molecular mixture_has_chemical_role" Description: ""
--     * Slot: complex molecular mixture_id Description: Autocreated FK slot
--     * Slot: has_chemical_role_id Description: 	A role is particular behaviour which a material entity may exhibit.
-- # Class: "complex molecular mixture_provided_by" Description: ""
--     * Slot: complex molecular mixture_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "complex molecular mixture_category" Description: ""
--     * Slot: complex molecular mixture_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "complex molecular mixture_has_attribute" Description: ""
--     * Slot: complex molecular mixture_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "biological process or activity_has_input" Description: ""
--     * Slot: biological process or activity_id Description: Autocreated FK slot
--     * Slot: has_input Description: holds between a process and a continuant, where the continuant is an input into the process
-- # Class: "biological process or activity_has_output" Description: ""
--     * Slot: biological process or activity_id Description: Autocreated FK slot
--     * Slot: has_output Description: holds between a process and a continuant, where the continuant is an output of the process
-- # Class: "biological process or activity_enabled_by" Description: ""
--     * Slot: biological process or activity_id Description: Autocreated FK slot
--     * Slot: enabled_by Description: holds between a process and a physical entity, where the physical entity executes the process
-- # Class: "biological process or activity_provided_by" Description: ""
--     * Slot: biological process or activity_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "biological process or activity_category" Description: ""
--     * Slot: biological process or activity_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "biological process or activity_has_attribute" Description: ""
--     * Slot: biological process or activity_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "molecular activity_has_input" Description: ""
--     * Slot: molecular activity_id Description: Autocreated FK slot
--     * Slot: has_input Description: A chemical entity that is the input for the reaction
-- # Class: "molecular activity_has_output" Description: ""
--     * Slot: molecular activity_id Description: Autocreated FK slot
--     * Slot: has_output Description: A chemical entity that is the output for the reaction
-- # Class: "molecular activity_enabled_by" Description: ""
--     * Slot: molecular activity_id Description: Autocreated FK slot
--     * Slot: enabled_by_id Description: The gene product, gene, or complex that catalyzes the reaction
-- # Class: "molecular activity_provided_by" Description: ""
--     * Slot: molecular activity_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "molecular activity_category" Description: ""
--     * Slot: molecular activity_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "molecular activity_has_attribute" Description: ""
--     * Slot: molecular activity_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "biological process_has_input" Description: ""
--     * Slot: biological process_id Description: Autocreated FK slot
--     * Slot: has_input Description: holds between a process and a continuant, where the continuant is an input into the process
-- # Class: "biological process_has_output" Description: ""
--     * Slot: biological process_id Description: Autocreated FK slot
--     * Slot: has_output Description: holds between a process and a continuant, where the continuant is an output of the process
-- # Class: "biological process_enabled_by" Description: ""
--     * Slot: biological process_id Description: Autocreated FK slot
--     * Slot: enabled_by Description: holds between a process and a physical entity, where the physical entity executes the process
-- # Class: "biological process_provided_by" Description: ""
--     * Slot: biological process_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "biological process_category" Description: ""
--     * Slot: biological process_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "biological process_has_attribute" Description: ""
--     * Slot: biological process_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "pathway_has_input" Description: ""
--     * Slot: pathway_id Description: Autocreated FK slot
--     * Slot: has_input Description: holds between a process and a continuant, where the continuant is an input into the process
-- # Class: "pathway_has_output" Description: ""
--     * Slot: pathway_id Description: Autocreated FK slot
--     * Slot: has_output Description: holds between a process and a continuant, where the continuant is an output of the process
-- # Class: "pathway_enabled_by" Description: ""
--     * Slot: pathway_id Description: Autocreated FK slot
--     * Slot: enabled_by Description: holds between a process and a physical entity, where the physical entity executes the process
-- # Class: "pathway_provided_by" Description: ""
--     * Slot: pathway_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "pathway_category" Description: ""
--     * Slot: pathway_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "pathway_has_attribute" Description: ""
--     * Slot: pathway_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "physiological process_has_input" Description: ""
--     * Slot: physiological process_id Description: Autocreated FK slot
--     * Slot: has_input Description: holds between a process and a continuant, where the continuant is an input into the process
-- # Class: "physiological process_has_output" Description: ""
--     * Slot: physiological process_id Description: Autocreated FK slot
--     * Slot: has_output Description: holds between a process and a continuant, where the continuant is an output of the process
-- # Class: "physiological process_enabled_by" Description: ""
--     * Slot: physiological process_id Description: Autocreated FK slot
--     * Slot: enabled_by Description: holds between a process and a physical entity, where the physical entity executes the process
-- # Class: "physiological process_provided_by" Description: ""
--     * Slot: physiological process_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "physiological process_category" Description: ""
--     * Slot: physiological process_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "physiological process_has_attribute" Description: ""
--     * Slot: physiological process_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "behavior_has_input" Description: ""
--     * Slot: behavior_id Description: Autocreated FK slot
--     * Slot: has_input Description: holds between a process and a continuant, where the continuant is an input into the process
-- # Class: "behavior_has_output" Description: ""
--     * Slot: behavior_id Description: Autocreated FK slot
--     * Slot: has_output Description: holds between a process and a continuant, where the continuant is an output of the process
-- # Class: "behavior_enabled_by" Description: ""
--     * Slot: behavior_id Description: Autocreated FK slot
--     * Slot: enabled_by Description: holds between a process and a physical entity, where the physical entity executes the process
-- # Class: "behavior_provided_by" Description: ""
--     * Slot: behavior_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "behavior_category" Description: ""
--     * Slot: behavior_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "behavior_has_attribute" Description: ""
--     * Slot: behavior_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "processed material_routes_of_delivery" Description: ""
--     * Slot: processed material_id Description: Autocreated FK slot
--     * Slot: routes_of_delivery Description: the method or process of administering a pharmaceutical compound to achieve a therapeutic effect in humans or animals.
-- # Class: "processed material_available_from" Description: ""
--     * Slot: processed material_id Description: Autocreated FK slot
--     * Slot: available_from Description: 
-- # Class: "processed material_has_chemical_role" Description: ""
--     * Slot: processed material_id Description: Autocreated FK slot
--     * Slot: has_chemical_role_id Description: 	A role is particular behaviour which a material entity may exhibit.
-- # Class: "processed material_provided_by" Description: ""
--     * Slot: processed material_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "processed material_category" Description: ""
--     * Slot: processed material_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "processed material_has_attribute" Description: ""
--     * Slot: processed material_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "drug_routes_of_delivery" Description: ""
--     * Slot: drug_id Description: Autocreated FK slot
--     * Slot: routes_of_delivery Description: the method or process of administering a pharmaceutical compound to achieve a therapeutic effect in humans or animals.
-- # Class: "drug_available_from" Description: ""
--     * Slot: drug_id Description: Autocreated FK slot
--     * Slot: available_from Description: 
-- # Class: "drug_has_chemical_role" Description: ""
--     * Slot: drug_id Description: Autocreated FK slot
--     * Slot: has_chemical_role_id Description: 	A role is particular behaviour which a material entity may exhibit.
-- # Class: "drug_provided_by" Description: ""
--     * Slot: drug_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "drug_category" Description: ""
--     * Slot: drug_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "drug_has_attribute" Description: ""
--     * Slot: drug_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "environmental food contaminant_available_from" Description: ""
--     * Slot: environmental food contaminant_id Description: Autocreated FK slot
--     * Slot: available_from Description: 
-- # Class: "environmental food contaminant_has_chemical_role" Description: ""
--     * Slot: environmental food contaminant_id Description: Autocreated FK slot
--     * Slot: has_chemical_role_id Description: 	A role is particular behaviour which a material entity may exhibit.
-- # Class: "environmental food contaminant_provided_by" Description: ""
--     * Slot: environmental food contaminant_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "environmental food contaminant_category" Description: ""
--     * Slot: environmental food contaminant_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "environmental food contaminant_has_attribute" Description: ""
--     * Slot: environmental food contaminant_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "food additive_available_from" Description: ""
--     * Slot: food additive_id Description: Autocreated FK slot
--     * Slot: available_from Description: 
-- # Class: "food additive_has_chemical_role" Description: ""
--     * Slot: food additive_id Description: Autocreated FK slot
--     * Slot: has_chemical_role_id Description: 	A role is particular behaviour which a material entity may exhibit.
-- # Class: "food additive_provided_by" Description: ""
--     * Slot: food additive_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "food additive_category" Description: ""
--     * Slot: food additive_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "food additive_has_attribute" Description: ""
--     * Slot: food additive_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "nutrient_available_from" Description: ""
--     * Slot: nutrient_id Description: Autocreated FK slot
--     * Slot: available_from Description: 
-- # Class: "nutrient_has_chemical_role" Description: ""
--     * Slot: nutrient_id Description: Autocreated FK slot
--     * Slot: has_chemical_role_id Description: 	A role is particular behaviour which a material entity may exhibit.
-- # Class: "nutrient_provided_by" Description: ""
--     * Slot: nutrient_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "nutrient_category" Description: ""
--     * Slot: nutrient_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "nutrient_has_attribute" Description: ""
--     * Slot: nutrient_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "macronutrient_available_from" Description: ""
--     * Slot: macronutrient_id Description: Autocreated FK slot
--     * Slot: available_from Description: 
-- # Class: "macronutrient_has_chemical_role" Description: ""
--     * Slot: macronutrient_id Description: Autocreated FK slot
--     * Slot: has_chemical_role_id Description: 	A role is particular behaviour which a material entity may exhibit.
-- # Class: "macronutrient_provided_by" Description: ""
--     * Slot: macronutrient_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "macronutrient_category" Description: ""
--     * Slot: macronutrient_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "macronutrient_has_attribute" Description: ""
--     * Slot: macronutrient_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "micronutrient_available_from" Description: ""
--     * Slot: micronutrient_id Description: Autocreated FK slot
--     * Slot: available_from Description: 
-- # Class: "micronutrient_has_chemical_role" Description: ""
--     * Slot: micronutrient_id Description: Autocreated FK slot
--     * Slot: has_chemical_role_id Description: 	A role is particular behaviour which a material entity may exhibit.
-- # Class: "micronutrient_provided_by" Description: ""
--     * Slot: micronutrient_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "micronutrient_category" Description: ""
--     * Slot: micronutrient_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "micronutrient_has_attribute" Description: ""
--     * Slot: micronutrient_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "vitamin_available_from" Description: ""
--     * Slot: vitamin_id Description: Autocreated FK slot
--     * Slot: available_from Description: 
-- # Class: "vitamin_has_chemical_role" Description: ""
--     * Slot: vitamin_id Description: Autocreated FK slot
--     * Slot: has_chemical_role_id Description: 	A role is particular behaviour which a material entity may exhibit.
-- # Class: "vitamin_provided_by" Description: ""
--     * Slot: vitamin_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "vitamin_category" Description: ""
--     * Slot: vitamin_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "vitamin_has_attribute" Description: ""
--     * Slot: vitamin_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "food_routes_of_delivery" Description: ""
--     * Slot: food_id Description: Autocreated FK slot
--     * Slot: routes_of_delivery Description: the method or process of administering a pharmaceutical compound to achieve a therapeutic effect in humans or animals.
-- # Class: "food_available_from" Description: ""
--     * Slot: food_id Description: Autocreated FK slot
--     * Slot: available_from Description: 
-- # Class: "food_has_chemical_role" Description: ""
--     * Slot: food_id Description: Autocreated FK slot
--     * Slot: has_chemical_role_id Description: 	A role is particular behaviour which a material entity may exhibit.
-- # Class: "food_provided_by" Description: ""
--     * Slot: food_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "food_category" Description: ""
--     * Slot: food_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "food_has_attribute" Description: ""
--     * Slot: food_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "organism attribute_has_quantitative_value" Description: ""
--     * Slot: organism attribute_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "phenotypic quality_has_quantitative_value" Description: ""
--     * Slot: phenotypic quality_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "inheritance_has_quantitative_value" Description: ""
--     * Slot: inheritance_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "organismal entity_provided_by" Description: ""
--     * Slot: organismal entity_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "organismal entity_category" Description: ""
--     * Slot: organismal entity_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "organismal entity_has_attribute" Description: ""
--     * Slot: organismal entity_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: may often be an organism attribute
-- # Class: "life stage_in_taxon" Description: ""
--     * Slot: life stage_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "life stage_provided_by" Description: ""
--     * Slot: life stage_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "life stage_category" Description: ""
--     * Slot: life stage_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "life stage_has_attribute" Description: ""
--     * Slot: life stage_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "individual organism_in_taxon" Description: ""
--     * Slot: individual organism_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "individual organism_provided_by" Description: ""
--     * Slot: individual organism_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "individual organism_category" Description: ""
--     * Slot: individual organism_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "individual organism_has_attribute" Description: ""
--     * Slot: individual organism_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "population of individual organisms_in_taxon" Description: ""
--     * Slot: population of individual organisms_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "population of individual organisms_provided_by" Description: ""
--     * Slot: population of individual organisms_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "population of individual organisms_category" Description: ""
--     * Slot: population of individual organisms_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "population of individual organisms_has_attribute" Description: ""
--     * Slot: population of individual organisms_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "disease or phenotypic feature_in_taxon" Description: ""
--     * Slot: disease or phenotypic feature_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "disease or phenotypic feature_provided_by" Description: ""
--     * Slot: disease or phenotypic feature_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "disease or phenotypic feature_category" Description: ""
--     * Slot: disease or phenotypic feature_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "disease or phenotypic feature_has_attribute" Description: ""
--     * Slot: disease or phenotypic feature_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "disease_in_taxon" Description: ""
--     * Slot: disease_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "disease_provided_by" Description: ""
--     * Slot: disease_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "disease_category" Description: ""
--     * Slot: disease_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "disease_has_attribute" Description: ""
--     * Slot: disease_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "phenotypic feature_in_taxon" Description: ""
--     * Slot: phenotypic feature_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "phenotypic feature_provided_by" Description: ""
--     * Slot: phenotypic feature_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "phenotypic feature_category" Description: ""
--     * Slot: phenotypic feature_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "phenotypic feature_has_attribute" Description: ""
--     * Slot: phenotypic feature_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "behavioral feature_in_taxon" Description: ""
--     * Slot: behavioral feature_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "behavioral feature_provided_by" Description: ""
--     * Slot: behavioral feature_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "behavioral feature_category" Description: ""
--     * Slot: behavioral feature_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "behavioral feature_has_attribute" Description: ""
--     * Slot: behavioral feature_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "anatomical entity_in_taxon" Description: ""
--     * Slot: anatomical entity_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "anatomical entity_provided_by" Description: ""
--     * Slot: anatomical entity_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "anatomical entity_category" Description: ""
--     * Slot: anatomical entity_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "anatomical entity_has_attribute" Description: ""
--     * Slot: anatomical entity_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "cellular component_in_taxon" Description: ""
--     * Slot: cellular component_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "cellular component_provided_by" Description: ""
--     * Slot: cellular component_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "cellular component_category" Description: ""
--     * Slot: cellular component_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "cellular component_has_attribute" Description: ""
--     * Slot: cellular component_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "cell_in_taxon" Description: ""
--     * Slot: cell_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "cell_provided_by" Description: ""
--     * Slot: cell_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "cell_category" Description: ""
--     * Slot: cell_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "cell_has_attribute" Description: ""
--     * Slot: cell_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "cell line_provided_by" Description: ""
--     * Slot: cell line_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "cell line_category" Description: ""
--     * Slot: cell line_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "cell line_has_attribute" Description: ""
--     * Slot: cell line_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "gross anatomical structure_in_taxon" Description: ""
--     * Slot: gross anatomical structure_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "gross anatomical structure_provided_by" Description: ""
--     * Slot: gross anatomical structure_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "gross anatomical structure_category" Description: ""
--     * Slot: gross anatomical structure_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "gross anatomical structure_has_attribute" Description: ""
--     * Slot: gross anatomical structure_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "gene_synonym" Description: ""
--     * Slot: gene_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "gene_xref" Description: ""
--     * Slot: gene_id Description: Autocreated FK slot
--     * Slot: xref Description: Alternate CURIEs for a thing
-- # Class: "gene_provided_by" Description: ""
--     * Slot: gene_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "gene_category" Description: ""
--     * Slot: gene_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "gene_has_attribute" Description: ""
--     * Slot: gene_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "gene_in_taxon" Description: ""
--     * Slot: gene_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "gene product mixin_synonym" Description: ""
--     * Slot: gene product mixin_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "gene product mixin_xref" Description: ""
--     * Slot: gene product mixin_id Description: Autocreated FK slot
--     * Slot: xref Description: Alternate CURIEs for a thing
-- # Class: "gene product isoform mixin_synonym" Description: ""
--     * Slot: gene product isoform mixin_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "gene product isoform mixin_xref" Description: ""
--     * Slot: gene product isoform mixin_id Description: Autocreated FK slot
--     * Slot: xref Description: Alternate CURIEs for a thing
-- # Class: "genome_provided_by" Description: ""
--     * Slot: genome_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "genome_category" Description: ""
--     * Slot: genome_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "genome_has_attribute" Description: ""
--     * Slot: genome_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "genome_in_taxon" Description: ""
--     * Slot: genome_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "exon_available_from" Description: ""
--     * Slot: exon_id Description: Autocreated FK slot
--     * Slot: available_from Description: 
-- # Class: "exon_has_chemical_role" Description: ""
--     * Slot: exon_id Description: Autocreated FK slot
--     * Slot: has_chemical_role_id Description: 	A role is particular behaviour which a material entity may exhibit.
-- # Class: "exon_provided_by" Description: ""
--     * Slot: exon_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "exon_category" Description: ""
--     * Slot: exon_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "exon_has_attribute" Description: ""
--     * Slot: exon_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "exon_in_taxon" Description: ""
--     * Slot: exon_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "transcript_available_from" Description: ""
--     * Slot: transcript_id Description: Autocreated FK slot
--     * Slot: available_from Description: 
-- # Class: "transcript_has_chemical_role" Description: ""
--     * Slot: transcript_id Description: Autocreated FK slot
--     * Slot: has_chemical_role_id Description: 	A role is particular behaviour which a material entity may exhibit.
-- # Class: "transcript_provided_by" Description: ""
--     * Slot: transcript_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "transcript_category" Description: ""
--     * Slot: transcript_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "transcript_has_attribute" Description: ""
--     * Slot: transcript_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "transcript_in_taxon" Description: ""
--     * Slot: transcript_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "coding sequence_available_from" Description: ""
--     * Slot: coding sequence_id Description: Autocreated FK slot
--     * Slot: available_from Description: 
-- # Class: "coding sequence_has_chemical_role" Description: ""
--     * Slot: coding sequence_id Description: Autocreated FK slot
--     * Slot: has_chemical_role_id Description: 	A role is particular behaviour which a material entity may exhibit.
-- # Class: "coding sequence_provided_by" Description: ""
--     * Slot: coding sequence_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "coding sequence_category" Description: ""
--     * Slot: coding sequence_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "coding sequence_has_attribute" Description: ""
--     * Slot: coding sequence_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "coding sequence_in_taxon" Description: ""
--     * Slot: coding sequence_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "polypeptide_in_taxon" Description: ""
--     * Slot: polypeptide_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "polypeptide_provided_by" Description: ""
--     * Slot: polypeptide_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "polypeptide_category" Description: ""
--     * Slot: polypeptide_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "polypeptide_has_attribute" Description: ""
--     * Slot: polypeptide_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "protein_synonym" Description: ""
--     * Slot: protein_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "protein_xref" Description: ""
--     * Slot: protein_id Description: Autocreated FK slot
--     * Slot: xref Description: Alternate CURIEs for a thing
-- # Class: "protein_in_taxon" Description: ""
--     * Slot: protein_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "protein_provided_by" Description: ""
--     * Slot: protein_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "protein_category" Description: ""
--     * Slot: protein_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "protein_has_attribute" Description: ""
--     * Slot: protein_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "protein isoform_synonym" Description: ""
--     * Slot: protein isoform_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "protein isoform_xref" Description: ""
--     * Slot: protein isoform_id Description: Autocreated FK slot
--     * Slot: xref Description: Alternate CURIEs for a thing
-- # Class: "protein isoform_in_taxon" Description: ""
--     * Slot: protein isoform_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "protein isoform_provided_by" Description: ""
--     * Slot: protein isoform_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "protein isoform_category" Description: ""
--     * Slot: protein isoform_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "protein isoform_has_attribute" Description: ""
--     * Slot: protein isoform_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "protein domain_has_gene_or_gene_product" Description: ""
--     * Slot: protein domain_id Description: Autocreated FK slot
--     * Slot: has_gene_or_gene_product Description: connects an entity with one or more gene or gene products
-- # Class: "protein domain_provided_by" Description: ""
--     * Slot: protein domain_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "protein domain_category" Description: ""
--     * Slot: protein domain_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "protein domain_has_attribute" Description: ""
--     * Slot: protein domain_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "protein family_has_gene_or_gene_product" Description: ""
--     * Slot: protein family_id Description: Autocreated FK slot
--     * Slot: has_gene_or_gene_product Description: connects an entity with one or more gene or gene products
-- # Class: "protein family_provided_by" Description: ""
--     * Slot: protein family_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "protein family_category" Description: ""
--     * Slot: protein family_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "protein family_has_attribute" Description: ""
--     * Slot: protein family_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "nucleic acid sequence motif_provided_by" Description: ""
--     * Slot: nucleic acid sequence motif_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "nucleic acid sequence motif_category" Description: ""
--     * Slot: nucleic acid sequence motif_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "nucleic acid sequence motif_has_attribute" Description: ""
--     * Slot: nucleic acid sequence motif_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "RNA product_synonym" Description: ""
--     * Slot: RNA product_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "RNA product_xref" Description: ""
--     * Slot: RNA product_id Description: Autocreated FK slot
--     * Slot: xref Description: Alternate CURIEs for a thing
-- # Class: "RNA product_available_from" Description: ""
--     * Slot: RNA product_id Description: Autocreated FK slot
--     * Slot: available_from Description: 
-- # Class: "RNA product_has_chemical_role" Description: ""
--     * Slot: RNA product_id Description: Autocreated FK slot
--     * Slot: has_chemical_role_id Description: 	A role is particular behaviour which a material entity may exhibit.
-- # Class: "RNA product_provided_by" Description: ""
--     * Slot: RNA product_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "RNA product_category" Description: ""
--     * Slot: RNA product_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "RNA product_has_attribute" Description: ""
--     * Slot: RNA product_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "RNA product_in_taxon" Description: ""
--     * Slot: RNA product_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "RNA product isoform_synonym" Description: ""
--     * Slot: RNA product isoform_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "RNA product isoform_xref" Description: ""
--     * Slot: RNA product isoform_id Description: Autocreated FK slot
--     * Slot: xref Description: Alternate CURIEs for a thing
-- # Class: "RNA product isoform_available_from" Description: ""
--     * Slot: RNA product isoform_id Description: Autocreated FK slot
--     * Slot: available_from Description: 
-- # Class: "RNA product isoform_has_chemical_role" Description: ""
--     * Slot: RNA product isoform_id Description: Autocreated FK slot
--     * Slot: has_chemical_role_id Description: 	A role is particular behaviour which a material entity may exhibit.
-- # Class: "RNA product isoform_provided_by" Description: ""
--     * Slot: RNA product isoform_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "RNA product isoform_category" Description: ""
--     * Slot: RNA product isoform_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "RNA product isoform_has_attribute" Description: ""
--     * Slot: RNA product isoform_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "RNA product isoform_in_taxon" Description: ""
--     * Slot: RNA product isoform_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "noncoding RNA product_synonym" Description: ""
--     * Slot: noncoding RNA product_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "noncoding RNA product_xref" Description: ""
--     * Slot: noncoding RNA product_id Description: Autocreated FK slot
--     * Slot: xref Description: Alternate CURIEs for a thing
-- # Class: "noncoding RNA product_available_from" Description: ""
--     * Slot: noncoding RNA product_id Description: Autocreated FK slot
--     * Slot: available_from Description: 
-- # Class: "noncoding RNA product_has_chemical_role" Description: ""
--     * Slot: noncoding RNA product_id Description: Autocreated FK slot
--     * Slot: has_chemical_role_id Description: 	A role is particular behaviour which a material entity may exhibit.
-- # Class: "noncoding RNA product_provided_by" Description: ""
--     * Slot: noncoding RNA product_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "noncoding RNA product_category" Description: ""
--     * Slot: noncoding RNA product_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "noncoding RNA product_has_attribute" Description: ""
--     * Slot: noncoding RNA product_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "noncoding RNA product_in_taxon" Description: ""
--     * Slot: noncoding RNA product_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "microRNA_synonym" Description: ""
--     * Slot: microRNA_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "microRNA_xref" Description: ""
--     * Slot: microRNA_id Description: Autocreated FK slot
--     * Slot: xref Description: Alternate CURIEs for a thing
-- # Class: "microRNA_available_from" Description: ""
--     * Slot: microRNA_id Description: Autocreated FK slot
--     * Slot: available_from Description: 
-- # Class: "microRNA_has_chemical_role" Description: ""
--     * Slot: microRNA_id Description: Autocreated FK slot
--     * Slot: has_chemical_role_id Description: 	A role is particular behaviour which a material entity may exhibit.
-- # Class: "microRNA_provided_by" Description: ""
--     * Slot: microRNA_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "microRNA_category" Description: ""
--     * Slot: microRNA_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "microRNA_has_attribute" Description: ""
--     * Slot: microRNA_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "microRNA_in_taxon" Description: ""
--     * Slot: microRNA_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "siRNA_synonym" Description: ""
--     * Slot: siRNA_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "siRNA_xref" Description: ""
--     * Slot: siRNA_id Description: Autocreated FK slot
--     * Slot: xref Description: Alternate CURIEs for a thing
-- # Class: "siRNA_available_from" Description: ""
--     * Slot: siRNA_id Description: Autocreated FK slot
--     * Slot: available_from Description: 
-- # Class: "siRNA_has_chemical_role" Description: ""
--     * Slot: siRNA_id Description: Autocreated FK slot
--     * Slot: has_chemical_role_id Description: 	A role is particular behaviour which a material entity may exhibit.
-- # Class: "siRNA_provided_by" Description: ""
--     * Slot: siRNA_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "siRNA_category" Description: ""
--     * Slot: siRNA_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "siRNA_has_attribute" Description: ""
--     * Slot: siRNA_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "siRNA_in_taxon" Description: ""
--     * Slot: siRNA_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "gene grouping mixin_has_gene_or_gene_product" Description: ""
--     * Slot: gene grouping mixin_id Description: Autocreated FK slot
--     * Slot: has_gene_or_gene_product Description: connects an entity with one or more gene or gene products
-- # Class: "gene family_has_gene_or_gene_product" Description: ""
--     * Slot: gene family_id Description: Autocreated FK slot
--     * Slot: has_gene_or_gene_product Description: connects an entity with one or more gene or gene products
-- # Class: "gene family_provided_by" Description: ""
--     * Slot: gene family_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "gene family_category" Description: ""
--     * Slot: gene family_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "gene family_has_attribute" Description: ""
--     * Slot: gene family_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "zygosity_has_quantitative_value" Description: ""
--     * Slot: zygosity_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "genotype_provided_by" Description: ""
--     * Slot: genotype_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "genotype_category" Description: ""
--     * Slot: genotype_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "genotype_has_attribute" Description: ""
--     * Slot: genotype_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "genotype_in_taxon" Description: ""
--     * Slot: genotype_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "haplotype_provided_by" Description: ""
--     * Slot: haplotype_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "haplotype_category" Description: ""
--     * Slot: haplotype_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "haplotype_has_attribute" Description: ""
--     * Slot: haplotype_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "haplotype_in_taxon" Description: ""
--     * Slot: haplotype_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "sequence variant_has_gene" Description: ""
--     * Slot: sequence variant_id Description: Autocreated FK slot
--     * Slot: has_gene Description: Each allele can be associated with any number of genes
-- # Class: "sequence variant_provided_by" Description: ""
--     * Slot: sequence variant_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "sequence variant_category" Description: ""
--     * Slot: sequence variant_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "sequence variant_has_attribute" Description: ""
--     * Slot: sequence variant_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "sequence variant_in_taxon" Description: ""
--     * Slot: sequence variant_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "snv_has_gene" Description: ""
--     * Slot: snv_id Description: Autocreated FK slot
--     * Slot: has_gene Description: connects an entity associated with one or more genes
-- # Class: "snv_provided_by" Description: ""
--     * Slot: snv_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "snv_category" Description: ""
--     * Slot: snv_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "snv_has_attribute" Description: ""
--     * Slot: snv_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "snv_in_taxon" Description: ""
--     * Slot: snv_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "reagent targeted gene_provided_by" Description: ""
--     * Slot: reagent targeted gene_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "reagent targeted gene_category" Description: ""
--     * Slot: reagent targeted gene_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "reagent targeted gene_has_attribute" Description: ""
--     * Slot: reagent targeted gene_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "reagent targeted gene_in_taxon" Description: ""
--     * Slot: reagent targeted gene_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "clinical attribute_has_quantitative_value" Description: ""
--     * Slot: clinical attribute_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "clinical measurement_has_quantitative_value" Description: ""
--     * Slot: clinical measurement_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "clinical modifier_has_quantitative_value" Description: ""
--     * Slot: clinical modifier_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "clinical course_has_quantitative_value" Description: ""
--     * Slot: clinical course_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "onset_has_quantitative_value" Description: ""
--     * Slot: onset_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "clinical entity_provided_by" Description: ""
--     * Slot: clinical entity_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "clinical entity_category" Description: ""
--     * Slot: clinical entity_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "clinical entity_has_attribute" Description: ""
--     * Slot: clinical entity_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "clinical trial_provided_by" Description: ""
--     * Slot: clinical trial_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "clinical trial_category" Description: ""
--     * Slot: clinical trial_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "clinical trial_has_attribute" Description: ""
--     * Slot: clinical trial_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "clinical intervention_provided_by" Description: ""
--     * Slot: clinical intervention_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "clinical intervention_category" Description: ""
--     * Slot: clinical intervention_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "clinical intervention_has_attribute" Description: ""
--     * Slot: clinical intervention_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "clinical finding_in_taxon" Description: ""
--     * Slot: clinical finding_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "clinical finding_provided_by" Description: ""
--     * Slot: clinical finding_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "clinical finding_category" Description: ""
--     * Slot: clinical finding_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "clinical finding_has_attribute" Description: ""
--     * Slot: clinical finding_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "hospitalization_provided_by" Description: ""
--     * Slot: hospitalization_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "hospitalization_category" Description: ""
--     * Slot: hospitalization_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "hospitalization_has_attribute" Description: ""
--     * Slot: hospitalization_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "socioeconomic attribute_has_quantitative_value" Description: ""
--     * Slot: socioeconomic attribute_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "case_in_taxon" Description: ""
--     * Slot: case_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "case_provided_by" Description: ""
--     * Slot: case_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "case_category" Description: ""
--     * Slot: case_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "case_has_attribute" Description: ""
--     * Slot: case_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "cohort_in_taxon" Description: ""
--     * Slot: cohort_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "cohort_provided_by" Description: ""
--     * Slot: cohort_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "cohort_category" Description: ""
--     * Slot: cohort_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "cohort_has_attribute" Description: ""
--     * Slot: cohort_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "genomic background exposure_has_gene_or_gene_product" Description: ""
--     * Slot: genomic background exposure_id Description: Autocreated FK slot
--     * Slot: has_gene_or_gene_product Description: connects an entity with one or more gene or gene products
-- # Class: "genomic background exposure_in_taxon" Description: ""
--     * Slot: genomic background exposure_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "pathological process_has_input" Description: ""
--     * Slot: pathological process_id Description: Autocreated FK slot
--     * Slot: has_input Description: holds between a process and a continuant, where the continuant is an input into the process
-- # Class: "pathological process_has_output" Description: ""
--     * Slot: pathological process_id Description: Autocreated FK slot
--     * Slot: has_output Description: holds between a process and a continuant, where the continuant is an output of the process
-- # Class: "pathological process_enabled_by" Description: ""
--     * Slot: pathological process_id Description: Autocreated FK slot
--     * Slot: enabled_by Description: holds between a process and a physical entity, where the physical entity executes the process
-- # Class: "pathological process_provided_by" Description: ""
--     * Slot: pathological process_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "pathological process_category" Description: ""
--     * Slot: pathological process_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "pathological process_has_attribute" Description: ""
--     * Slot: pathological process_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "pathological anatomical structure_in_taxon" Description: ""
--     * Slot: pathological anatomical structure_id Description: Autocreated FK slot
--     * Slot: in_taxon Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "pathological anatomical structure_provided_by" Description: ""
--     * Slot: pathological anatomical structure_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "pathological anatomical structure_category" Description: ""
--     * Slot: pathological anatomical structure_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "pathological anatomical structure_has_attribute" Description: ""
--     * Slot: pathological anatomical structure_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "chemical exposure_has_quantitative_value" Description: ""
--     * Slot: chemical exposure_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "drug exposure_has_quantitative_value" Description: ""
--     * Slot: drug exposure_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "drug to gene interaction exposure_has_gene_or_gene_product" Description: ""
--     * Slot: drug to gene interaction exposure_id Description: Autocreated FK slot
--     * Slot: has_gene_or_gene_product Description: connects an entity with one or more gene or gene products
-- # Class: "drug to gene interaction exposure_has_quantitative_value" Description: ""
--     * Slot: drug to gene interaction exposure_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "treatment_has_drug" Description: ""
--     * Slot: treatment_id Description: Autocreated FK slot
--     * Slot: has_drug Description: connects an entity to one or more drugs
-- # Class: "treatment_has_device" Description: ""
--     * Slot: treatment_id Description: Autocreated FK slot
--     * Slot: has_device Description: connects an entity to one or more (medical) devices
-- # Class: "treatment_has_procedure" Description: ""
--     * Slot: treatment_id Description: Autocreated FK slot
--     * Slot: has_procedure Description: connects an entity to one or more (medical) procedures
-- # Class: "treatment_provided_by" Description: ""
--     * Slot: treatment_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "treatment_category" Description: ""
--     * Slot: treatment_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "treatment_has_attribute" Description: ""
--     * Slot: treatment_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "association_qualifier" Description: ""
--     * Slot: association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "association_publication" Description: ""
--     * Slot: association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "association_has_evidence" Description: ""
--     * Slot: association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "association_knowledge_source" Description: ""
--     * Slot: association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "association_original_knowledge_source" Description: ""
--     * Slot: association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "association_primary_knowledge_source" Description: ""
--     * Slot: association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "association_aggregator_knowledge_source" Description: ""
--     * Slot: association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "association_category" Description: ""
--     * Slot: association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "association_has_attribute" Description: ""
--     * Slot: association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "contributor association_qualifier" Description: ""
--     * Slot: contributor association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: this field can be used to annotate special characteristics of an agent relationship, such as the fact that a given author agent of a publication is the 'corresponding author'
-- # Class: "contributor association_publication" Description: ""
--     * Slot: contributor association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "contributor association_has_evidence" Description: ""
--     * Slot: contributor association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "contributor association_knowledge_source" Description: ""
--     * Slot: contributor association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "contributor association_original_knowledge_source" Description: ""
--     * Slot: contributor association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "contributor association_primary_knowledge_source" Description: ""
--     * Slot: contributor association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "contributor association_aggregator_knowledge_source" Description: ""
--     * Slot: contributor association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "contributor association_category" Description: ""
--     * Slot: contributor association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "contributor association_has_attribute" Description: ""
--     * Slot: contributor association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "genotype to genotype part association_qualifier" Description: ""
--     * Slot: genotype to genotype part association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "genotype to genotype part association_publication" Description: ""
--     * Slot: genotype to genotype part association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "genotype to genotype part association_has_evidence" Description: ""
--     * Slot: genotype to genotype part association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "genotype to genotype part association_knowledge_source" Description: ""
--     * Slot: genotype to genotype part association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "genotype to genotype part association_original_knowledge_source" Description: ""
--     * Slot: genotype to genotype part association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "genotype to genotype part association_primary_knowledge_source" Description: ""
--     * Slot: genotype to genotype part association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "genotype to genotype part association_aggregator_knowledge_source" Description: ""
--     * Slot: genotype to genotype part association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "genotype to genotype part association_category" Description: ""
--     * Slot: genotype to genotype part association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "genotype to genotype part association_has_attribute" Description: ""
--     * Slot: genotype to genotype part association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "genotype to gene association_qualifier" Description: ""
--     * Slot: genotype to gene association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "genotype to gene association_publication" Description: ""
--     * Slot: genotype to gene association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "genotype to gene association_has_evidence" Description: ""
--     * Slot: genotype to gene association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "genotype to gene association_knowledge_source" Description: ""
--     * Slot: genotype to gene association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "genotype to gene association_original_knowledge_source" Description: ""
--     * Slot: genotype to gene association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "genotype to gene association_primary_knowledge_source" Description: ""
--     * Slot: genotype to gene association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "genotype to gene association_aggregator_knowledge_source" Description: ""
--     * Slot: genotype to gene association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "genotype to gene association_category" Description: ""
--     * Slot: genotype to gene association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "genotype to gene association_has_attribute" Description: ""
--     * Slot: genotype to gene association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "genotype to variant association_qualifier" Description: ""
--     * Slot: genotype to variant association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "genotype to variant association_publication" Description: ""
--     * Slot: genotype to variant association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "genotype to variant association_has_evidence" Description: ""
--     * Slot: genotype to variant association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "genotype to variant association_knowledge_source" Description: ""
--     * Slot: genotype to variant association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "genotype to variant association_original_knowledge_source" Description: ""
--     * Slot: genotype to variant association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "genotype to variant association_primary_knowledge_source" Description: ""
--     * Slot: genotype to variant association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "genotype to variant association_aggregator_knowledge_source" Description: ""
--     * Slot: genotype to variant association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "genotype to variant association_category" Description: ""
--     * Slot: genotype to variant association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "genotype to variant association_has_attribute" Description: ""
--     * Slot: genotype to variant association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "gene to gene association_qualifier" Description: ""
--     * Slot: gene to gene association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "gene to gene association_publication" Description: ""
--     * Slot: gene to gene association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "gene to gene association_has_evidence" Description: ""
--     * Slot: gene to gene association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "gene to gene association_knowledge_source" Description: ""
--     * Slot: gene to gene association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "gene to gene association_original_knowledge_source" Description: ""
--     * Slot: gene to gene association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "gene to gene association_primary_knowledge_source" Description: ""
--     * Slot: gene to gene association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "gene to gene association_aggregator_knowledge_source" Description: ""
--     * Slot: gene to gene association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "gene to gene association_category" Description: ""
--     * Slot: gene to gene association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "gene to gene association_has_attribute" Description: ""
--     * Slot: gene to gene association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "gene to gene homology association_qualifier" Description: ""
--     * Slot: gene to gene homology association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "gene to gene homology association_publication" Description: ""
--     * Slot: gene to gene homology association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "gene to gene homology association_has_evidence" Description: ""
--     * Slot: gene to gene homology association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "gene to gene homology association_knowledge_source" Description: ""
--     * Slot: gene to gene homology association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "gene to gene homology association_original_knowledge_source" Description: ""
--     * Slot: gene to gene homology association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "gene to gene homology association_primary_knowledge_source" Description: ""
--     * Slot: gene to gene homology association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "gene to gene homology association_aggregator_knowledge_source" Description: ""
--     * Slot: gene to gene homology association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "gene to gene homology association_category" Description: ""
--     * Slot: gene to gene homology association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "gene to gene homology association_has_attribute" Description: ""
--     * Slot: gene to gene homology association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "gene to gene coexpression association_qualifier" Description: ""
--     * Slot: gene to gene coexpression association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "gene to gene coexpression association_publication" Description: ""
--     * Slot: gene to gene coexpression association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "gene to gene coexpression association_has_evidence" Description: ""
--     * Slot: gene to gene coexpression association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "gene to gene coexpression association_knowledge_source" Description: ""
--     * Slot: gene to gene coexpression association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "gene to gene coexpression association_original_knowledge_source" Description: ""
--     * Slot: gene to gene coexpression association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "gene to gene coexpression association_primary_knowledge_source" Description: ""
--     * Slot: gene to gene coexpression association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "gene to gene coexpression association_aggregator_knowledge_source" Description: ""
--     * Slot: gene to gene coexpression association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "gene to gene coexpression association_category" Description: ""
--     * Slot: gene to gene coexpression association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "gene to gene coexpression association_has_attribute" Description: ""
--     * Slot: gene to gene coexpression association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "pairwise gene to gene interaction_qualifier" Description: ""
--     * Slot: pairwise gene to gene interaction_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "pairwise gene to gene interaction_publication" Description: ""
--     * Slot: pairwise gene to gene interaction_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "pairwise gene to gene interaction_has_evidence" Description: ""
--     * Slot: pairwise gene to gene interaction_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "pairwise gene to gene interaction_knowledge_source" Description: ""
--     * Slot: pairwise gene to gene interaction_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "pairwise gene to gene interaction_original_knowledge_source" Description: ""
--     * Slot: pairwise gene to gene interaction_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "pairwise gene to gene interaction_primary_knowledge_source" Description: ""
--     * Slot: pairwise gene to gene interaction_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "pairwise gene to gene interaction_aggregator_knowledge_source" Description: ""
--     * Slot: pairwise gene to gene interaction_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "pairwise gene to gene interaction_category" Description: ""
--     * Slot: pairwise gene to gene interaction_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "pairwise gene to gene interaction_has_attribute" Description: ""
--     * Slot: pairwise gene to gene interaction_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "pairwise molecular interaction_qualifier" Description: ""
--     * Slot: pairwise molecular interaction_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "pairwise molecular interaction_publication" Description: ""
--     * Slot: pairwise molecular interaction_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "pairwise molecular interaction_has_evidence" Description: ""
--     * Slot: pairwise molecular interaction_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "pairwise molecular interaction_knowledge_source" Description: ""
--     * Slot: pairwise molecular interaction_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "pairwise molecular interaction_original_knowledge_source" Description: ""
--     * Slot: pairwise molecular interaction_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "pairwise molecular interaction_primary_knowledge_source" Description: ""
--     * Slot: pairwise molecular interaction_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "pairwise molecular interaction_aggregator_knowledge_source" Description: ""
--     * Slot: pairwise molecular interaction_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "pairwise molecular interaction_category" Description: ""
--     * Slot: pairwise molecular interaction_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "pairwise molecular interaction_has_attribute" Description: ""
--     * Slot: pairwise molecular interaction_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "cell line to disease or phenotypic feature association_qualifier" Description: ""
--     * Slot: cell line to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "cell line to disease or phenotypic feature association_publication" Description: ""
--     * Slot: cell line to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "cell line to disease or phenotypic feature association_has_evidence" Description: ""
--     * Slot: cell line to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "cell line to disease or phenotypic feature association_knowledge_source" Description: ""
--     * Slot: cell line to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "cell line to disease or phenotypic feature association_original_knowledge_source" Description: ""
--     * Slot: cell line to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "cell line to disease or phenotypic feature association_primary_knowledge_source" Description: ""
--     * Slot: cell line to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "cell line to disease or phenotypic feature association_aggregator_knowledge_source" Description: ""
--     * Slot: cell line to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "cell line to disease or phenotypic feature association_category" Description: ""
--     * Slot: cell line to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "cell line to disease or phenotypic feature association_has_attribute" Description: ""
--     * Slot: cell line to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "chemical to chemical association_qualifier" Description: ""
--     * Slot: chemical to chemical association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "chemical to chemical association_publication" Description: ""
--     * Slot: chemical to chemical association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "chemical to chemical association_has_evidence" Description: ""
--     * Slot: chemical to chemical association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "chemical to chemical association_knowledge_source" Description: ""
--     * Slot: chemical to chemical association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "chemical to chemical association_original_knowledge_source" Description: ""
--     * Slot: chemical to chemical association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "chemical to chemical association_primary_knowledge_source" Description: ""
--     * Slot: chemical to chemical association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "chemical to chemical association_aggregator_knowledge_source" Description: ""
--     * Slot: chemical to chemical association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "chemical to chemical association_category" Description: ""
--     * Slot: chemical to chemical association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "chemical to chemical association_has_attribute" Description: ""
--     * Slot: chemical to chemical association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "reaction to participant association_qualifier" Description: ""
--     * Slot: reaction to participant association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "reaction to participant association_publication" Description: ""
--     * Slot: reaction to participant association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "reaction to participant association_has_evidence" Description: ""
--     * Slot: reaction to participant association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "reaction to participant association_knowledge_source" Description: ""
--     * Slot: reaction to participant association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "reaction to participant association_original_knowledge_source" Description: ""
--     * Slot: reaction to participant association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "reaction to participant association_primary_knowledge_source" Description: ""
--     * Slot: reaction to participant association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "reaction to participant association_aggregator_knowledge_source" Description: ""
--     * Slot: reaction to participant association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "reaction to participant association_category" Description: ""
--     * Slot: reaction to participant association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "reaction to participant association_has_attribute" Description: ""
--     * Slot: reaction to participant association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "reaction to catalyst association_qualifier" Description: ""
--     * Slot: reaction to catalyst association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "reaction to catalyst association_publication" Description: ""
--     * Slot: reaction to catalyst association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "reaction to catalyst association_has_evidence" Description: ""
--     * Slot: reaction to catalyst association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "reaction to catalyst association_knowledge_source" Description: ""
--     * Slot: reaction to catalyst association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "reaction to catalyst association_original_knowledge_source" Description: ""
--     * Slot: reaction to catalyst association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "reaction to catalyst association_primary_knowledge_source" Description: ""
--     * Slot: reaction to catalyst association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "reaction to catalyst association_aggregator_knowledge_source" Description: ""
--     * Slot: reaction to catalyst association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "reaction to catalyst association_category" Description: ""
--     * Slot: reaction to catalyst association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "reaction to catalyst association_has_attribute" Description: ""
--     * Slot: reaction to catalyst association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "chemical to chemical derivation association_catalyst_qualifier" Description: ""
--     * Slot: chemical to chemical derivation association_id Description: Autocreated FK slot
--     * Slot: catalyst_qualifier_id Description: this connects the derivation edge to the chemical entity that catalyzes the reaction that causes the subject chemical to transform into the object chemical.
-- # Class: "chemical to chemical derivation association_qualifier" Description: ""
--     * Slot: chemical to chemical derivation association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "chemical to chemical derivation association_publication" Description: ""
--     * Slot: chemical to chemical derivation association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "chemical to chemical derivation association_has_evidence" Description: ""
--     * Slot: chemical to chemical derivation association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "chemical to chemical derivation association_knowledge_source" Description: ""
--     * Slot: chemical to chemical derivation association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "chemical to chemical derivation association_original_knowledge_source" Description: ""
--     * Slot: chemical to chemical derivation association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "chemical to chemical derivation association_primary_knowledge_source" Description: ""
--     * Slot: chemical to chemical derivation association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "chemical to chemical derivation association_aggregator_knowledge_source" Description: ""
--     * Slot: chemical to chemical derivation association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "chemical to chemical derivation association_category" Description: ""
--     * Slot: chemical to chemical derivation association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "chemical to chemical derivation association_has_attribute" Description: ""
--     * Slot: chemical to chemical derivation association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "chemical to disease or phenotypic feature association_qualifier" Description: ""
--     * Slot: chemical to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "chemical to disease or phenotypic feature association_publication" Description: ""
--     * Slot: chemical to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "chemical to disease or phenotypic feature association_has_evidence" Description: ""
--     * Slot: chemical to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "chemical to disease or phenotypic feature association_knowledge_source" Description: ""
--     * Slot: chemical to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "chemical to disease or phenotypic feature association_original_knowledge_source" Description: ""
--     * Slot: chemical to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "chemical to disease or phenotypic feature association_primary_knowledge_source" Description: ""
--     * Slot: chemical to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "chemical to disease or phenotypic feature association_aggregator_knowledge_source" Description: ""
--     * Slot: chemical to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "chemical to disease or phenotypic feature association_category" Description: ""
--     * Slot: chemical to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "chemical to disease or phenotypic feature association_has_attribute" Description: ""
--     * Slot: chemical to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "chemical to pathway association_qualifier" Description: ""
--     * Slot: chemical to pathway association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "chemical to pathway association_publication" Description: ""
--     * Slot: chemical to pathway association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "chemical to pathway association_has_evidence" Description: ""
--     * Slot: chemical to pathway association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "chemical to pathway association_knowledge_source" Description: ""
--     * Slot: chemical to pathway association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "chemical to pathway association_original_knowledge_source" Description: ""
--     * Slot: chemical to pathway association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "chemical to pathway association_primary_knowledge_source" Description: ""
--     * Slot: chemical to pathway association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "chemical to pathway association_aggregator_knowledge_source" Description: ""
--     * Slot: chemical to pathway association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "chemical to pathway association_category" Description: ""
--     * Slot: chemical to pathway association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "chemical to pathway association_has_attribute" Description: ""
--     * Slot: chemical to pathway association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "chemical to gene association_qualifier" Description: ""
--     * Slot: chemical to gene association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "chemical to gene association_publication" Description: ""
--     * Slot: chemical to gene association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "chemical to gene association_has_evidence" Description: ""
--     * Slot: chemical to gene association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "chemical to gene association_knowledge_source" Description: ""
--     * Slot: chemical to gene association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "chemical to gene association_original_knowledge_source" Description: ""
--     * Slot: chemical to gene association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "chemical to gene association_primary_knowledge_source" Description: ""
--     * Slot: chemical to gene association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "chemical to gene association_aggregator_knowledge_source" Description: ""
--     * Slot: chemical to gene association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "chemical to gene association_category" Description: ""
--     * Slot: chemical to gene association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "chemical to gene association_has_attribute" Description: ""
--     * Slot: chemical to gene association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "drug to gene association_qualifier" Description: ""
--     * Slot: drug to gene association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "drug to gene association_publication" Description: ""
--     * Slot: drug to gene association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "drug to gene association_has_evidence" Description: ""
--     * Slot: drug to gene association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "drug to gene association_knowledge_source" Description: ""
--     * Slot: drug to gene association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "drug to gene association_original_knowledge_source" Description: ""
--     * Slot: drug to gene association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "drug to gene association_primary_knowledge_source" Description: ""
--     * Slot: drug to gene association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "drug to gene association_aggregator_knowledge_source" Description: ""
--     * Slot: drug to gene association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "drug to gene association_category" Description: ""
--     * Slot: drug to gene association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "drug to gene association_has_attribute" Description: ""
--     * Slot: drug to gene association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "material sample derivation association_qualifier" Description: ""
--     * Slot: material sample derivation association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "material sample derivation association_publication" Description: ""
--     * Slot: material sample derivation association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "material sample derivation association_has_evidence" Description: ""
--     * Slot: material sample derivation association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "material sample derivation association_knowledge_source" Description: ""
--     * Slot: material sample derivation association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "material sample derivation association_original_knowledge_source" Description: ""
--     * Slot: material sample derivation association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "material sample derivation association_primary_knowledge_source" Description: ""
--     * Slot: material sample derivation association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "material sample derivation association_aggregator_knowledge_source" Description: ""
--     * Slot: material sample derivation association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "material sample derivation association_category" Description: ""
--     * Slot: material sample derivation association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "material sample derivation association_has_attribute" Description: ""
--     * Slot: material sample derivation association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "material sample to disease or phenotypic feature association_qualifier" Description: ""
--     * Slot: material sample to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "material sample to disease or phenotypic feature association_publication" Description: ""
--     * Slot: material sample to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "material sample to disease or phenotypic feature association_has_evidence" Description: ""
--     * Slot: material sample to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "material sample to disease or phenotypic feature association_knowledge_source" Description: ""
--     * Slot: material sample to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "material sample to disease or phenotypic feature association_original_knowledge_source" Description: ""
--     * Slot: material sample to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "material sample to disease or phenotypic feature association_primary_knowledge_source" Description: ""
--     * Slot: material sample to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "material sample to disease or phenotypic feature association_aggregator_knowledge_source" Description: ""
--     * Slot: material sample to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "material sample to disease or phenotypic feature association_category" Description: ""
--     * Slot: material sample to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "material sample to disease or phenotypic feature association_has_attribute" Description: ""
--     * Slot: material sample to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "disease to exposure event association_qualifier" Description: ""
--     * Slot: disease to exposure event association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "disease to exposure event association_publication" Description: ""
--     * Slot: disease to exposure event association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "disease to exposure event association_has_evidence" Description: ""
--     * Slot: disease to exposure event association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "disease to exposure event association_knowledge_source" Description: ""
--     * Slot: disease to exposure event association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "disease to exposure event association_original_knowledge_source" Description: ""
--     * Slot: disease to exposure event association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "disease to exposure event association_primary_knowledge_source" Description: ""
--     * Slot: disease to exposure event association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "disease to exposure event association_aggregator_knowledge_source" Description: ""
--     * Slot: disease to exposure event association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "disease to exposure event association_category" Description: ""
--     * Slot: disease to exposure event association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "disease to exposure event association_has_attribute" Description: ""
--     * Slot: disease to exposure event association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "exposure event to outcome association_qualifier" Description: ""
--     * Slot: exposure event to outcome association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "exposure event to outcome association_publication" Description: ""
--     * Slot: exposure event to outcome association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "exposure event to outcome association_has_evidence" Description: ""
--     * Slot: exposure event to outcome association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "exposure event to outcome association_knowledge_source" Description: ""
--     * Slot: exposure event to outcome association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "exposure event to outcome association_original_knowledge_source" Description: ""
--     * Slot: exposure event to outcome association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "exposure event to outcome association_primary_knowledge_source" Description: ""
--     * Slot: exposure event to outcome association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "exposure event to outcome association_aggregator_knowledge_source" Description: ""
--     * Slot: exposure event to outcome association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "exposure event to outcome association_category" Description: ""
--     * Slot: exposure event to outcome association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "exposure event to outcome association_has_attribute" Description: ""
--     * Slot: exposure event to outcome association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "information content entity to named thing association_qualifier" Description: ""
--     * Slot: information content entity to named thing association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "information content entity to named thing association_publication" Description: ""
--     * Slot: information content entity to named thing association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "information content entity to named thing association_has_evidence" Description: ""
--     * Slot: information content entity to named thing association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "information content entity to named thing association_knowledge_source" Description: ""
--     * Slot: information content entity to named thing association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "information content entity to named thing association_original_knowledge_source" Description: ""
--     * Slot: information content entity to named thing association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "information content entity to named thing association_primary_knowledge_source" Description: ""
--     * Slot: information content entity to named thing association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "information content entity to named thing association_aggregator_knowledge_source" Description: ""
--     * Slot: information content entity to named thing association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "information content entity to named thing association_category" Description: ""
--     * Slot: information content entity to named thing association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "information content entity to named thing association_has_attribute" Description: ""
--     * Slot: information content entity to named thing association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "disease or phenotypic feature to location association_qualifier" Description: ""
--     * Slot: disease or phenotypic feature to location association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "disease or phenotypic feature to location association_publication" Description: ""
--     * Slot: disease or phenotypic feature to location association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "disease or phenotypic feature to location association_has_evidence" Description: ""
--     * Slot: disease or phenotypic feature to location association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "disease or phenotypic feature to location association_knowledge_source" Description: ""
--     * Slot: disease or phenotypic feature to location association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "disease or phenotypic feature to location association_original_knowledge_source" Description: ""
--     * Slot: disease or phenotypic feature to location association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "disease or phenotypic feature to location association_primary_knowledge_source" Description: ""
--     * Slot: disease or phenotypic feature to location association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "disease or phenotypic feature to location association_aggregator_knowledge_source" Description: ""
--     * Slot: disease or phenotypic feature to location association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "disease or phenotypic feature to location association_category" Description: ""
--     * Slot: disease or phenotypic feature to location association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "disease or phenotypic feature to location association_has_attribute" Description: ""
--     * Slot: disease or phenotypic feature to location association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "genotype to phenotypic feature association_qualifier" Description: ""
--     * Slot: genotype to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "genotype to phenotypic feature association_publication" Description: ""
--     * Slot: genotype to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "genotype to phenotypic feature association_has_evidence" Description: ""
--     * Slot: genotype to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "genotype to phenotypic feature association_knowledge_source" Description: ""
--     * Slot: genotype to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "genotype to phenotypic feature association_original_knowledge_source" Description: ""
--     * Slot: genotype to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "genotype to phenotypic feature association_primary_knowledge_source" Description: ""
--     * Slot: genotype to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "genotype to phenotypic feature association_aggregator_knowledge_source" Description: ""
--     * Slot: genotype to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "genotype to phenotypic feature association_category" Description: ""
--     * Slot: genotype to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "genotype to phenotypic feature association_has_attribute" Description: ""
--     * Slot: genotype to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "exposure event to phenotypic feature association_qualifier" Description: ""
--     * Slot: exposure event to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "exposure event to phenotypic feature association_publication" Description: ""
--     * Slot: exposure event to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "exposure event to phenotypic feature association_has_evidence" Description: ""
--     * Slot: exposure event to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "exposure event to phenotypic feature association_knowledge_source" Description: ""
--     * Slot: exposure event to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "exposure event to phenotypic feature association_original_knowledge_source" Description: ""
--     * Slot: exposure event to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "exposure event to phenotypic feature association_primary_knowledge_source" Description: ""
--     * Slot: exposure event to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "exposure event to phenotypic feature association_aggregator_knowledge_source" Description: ""
--     * Slot: exposure event to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "exposure event to phenotypic feature association_category" Description: ""
--     * Slot: exposure event to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "exposure event to phenotypic feature association_has_attribute" Description: ""
--     * Slot: exposure event to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "disease to phenotypic feature association_qualifier" Description: ""
--     * Slot: disease to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "disease to phenotypic feature association_publication" Description: ""
--     * Slot: disease to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "disease to phenotypic feature association_has_evidence" Description: ""
--     * Slot: disease to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "disease to phenotypic feature association_knowledge_source" Description: ""
--     * Slot: disease to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "disease to phenotypic feature association_original_knowledge_source" Description: ""
--     * Slot: disease to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "disease to phenotypic feature association_primary_knowledge_source" Description: ""
--     * Slot: disease to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "disease to phenotypic feature association_aggregator_knowledge_source" Description: ""
--     * Slot: disease to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "disease to phenotypic feature association_category" Description: ""
--     * Slot: disease to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "disease to phenotypic feature association_has_attribute" Description: ""
--     * Slot: disease to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "case to phenotypic feature association_qualifier" Description: ""
--     * Slot: case to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "case to phenotypic feature association_publication" Description: ""
--     * Slot: case to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "case to phenotypic feature association_has_evidence" Description: ""
--     * Slot: case to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "case to phenotypic feature association_knowledge_source" Description: ""
--     * Slot: case to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "case to phenotypic feature association_original_knowledge_source" Description: ""
--     * Slot: case to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "case to phenotypic feature association_primary_knowledge_source" Description: ""
--     * Slot: case to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "case to phenotypic feature association_aggregator_knowledge_source" Description: ""
--     * Slot: case to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "case to phenotypic feature association_category" Description: ""
--     * Slot: case to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "case to phenotypic feature association_has_attribute" Description: ""
--     * Slot: case to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "behavior to behavioral feature association_qualifier" Description: ""
--     * Slot: behavior to behavioral feature association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "behavior to behavioral feature association_publication" Description: ""
--     * Slot: behavior to behavioral feature association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "behavior to behavioral feature association_has_evidence" Description: ""
--     * Slot: behavior to behavioral feature association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "behavior to behavioral feature association_knowledge_source" Description: ""
--     * Slot: behavior to behavioral feature association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "behavior to behavioral feature association_original_knowledge_source" Description: ""
--     * Slot: behavior to behavioral feature association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "behavior to behavioral feature association_primary_knowledge_source" Description: ""
--     * Slot: behavior to behavioral feature association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "behavior to behavioral feature association_aggregator_knowledge_source" Description: ""
--     * Slot: behavior to behavioral feature association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "behavior to behavioral feature association_category" Description: ""
--     * Slot: behavior to behavioral feature association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "behavior to behavioral feature association_has_attribute" Description: ""
--     * Slot: behavior to behavioral feature association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "gene to phenotypic feature association_qualifier" Description: ""
--     * Slot: gene to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "gene to phenotypic feature association_publication" Description: ""
--     * Slot: gene to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "gene to phenotypic feature association_has_evidence" Description: ""
--     * Slot: gene to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "gene to phenotypic feature association_knowledge_source" Description: ""
--     * Slot: gene to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "gene to phenotypic feature association_original_knowledge_source" Description: ""
--     * Slot: gene to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "gene to phenotypic feature association_primary_knowledge_source" Description: ""
--     * Slot: gene to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "gene to phenotypic feature association_aggregator_knowledge_source" Description: ""
--     * Slot: gene to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "gene to phenotypic feature association_category" Description: ""
--     * Slot: gene to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "gene to phenotypic feature association_has_attribute" Description: ""
--     * Slot: gene to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "gene to disease association_qualifier" Description: ""
--     * Slot: gene to disease association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "gene to disease association_publication" Description: ""
--     * Slot: gene to disease association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "gene to disease association_has_evidence" Description: ""
--     * Slot: gene to disease association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "gene to disease association_knowledge_source" Description: ""
--     * Slot: gene to disease association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "gene to disease association_original_knowledge_source" Description: ""
--     * Slot: gene to disease association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "gene to disease association_primary_knowledge_source" Description: ""
--     * Slot: gene to disease association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "gene to disease association_aggregator_knowledge_source" Description: ""
--     * Slot: gene to disease association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "gene to disease association_category" Description: ""
--     * Slot: gene to disease association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "gene to disease association_has_attribute" Description: ""
--     * Slot: gene to disease association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "druggable gene to disease association_qualifier" Description: ""
--     * Slot: druggable gene to disease association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "druggable gene to disease association_publication" Description: ""
--     * Slot: druggable gene to disease association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "druggable gene to disease association_has_evidence" Description: ""
--     * Slot: druggable gene to disease association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "druggable gene to disease association_knowledge_source" Description: ""
--     * Slot: druggable gene to disease association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "druggable gene to disease association_original_knowledge_source" Description: ""
--     * Slot: druggable gene to disease association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "druggable gene to disease association_primary_knowledge_source" Description: ""
--     * Slot: druggable gene to disease association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "druggable gene to disease association_aggregator_knowledge_source" Description: ""
--     * Slot: druggable gene to disease association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "druggable gene to disease association_category" Description: ""
--     * Slot: druggable gene to disease association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "druggable gene to disease association_has_attribute" Description: ""
--     * Slot: druggable gene to disease association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "variant to gene association_qualifier" Description: ""
--     * Slot: variant to gene association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "variant to gene association_publication" Description: ""
--     * Slot: variant to gene association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "variant to gene association_has_evidence" Description: ""
--     * Slot: variant to gene association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "variant to gene association_knowledge_source" Description: ""
--     * Slot: variant to gene association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "variant to gene association_original_knowledge_source" Description: ""
--     * Slot: variant to gene association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "variant to gene association_primary_knowledge_source" Description: ""
--     * Slot: variant to gene association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "variant to gene association_aggregator_knowledge_source" Description: ""
--     * Slot: variant to gene association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "variant to gene association_category" Description: ""
--     * Slot: variant to gene association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "variant to gene association_has_attribute" Description: ""
--     * Slot: variant to gene association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "variant to gene expression association_qualifier" Description: ""
--     * Slot: variant to gene expression association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "variant to gene expression association_publication" Description: ""
--     * Slot: variant to gene expression association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "variant to gene expression association_has_evidence" Description: ""
--     * Slot: variant to gene expression association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "variant to gene expression association_knowledge_source" Description: ""
--     * Slot: variant to gene expression association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "variant to gene expression association_original_knowledge_source" Description: ""
--     * Slot: variant to gene expression association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "variant to gene expression association_primary_knowledge_source" Description: ""
--     * Slot: variant to gene expression association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "variant to gene expression association_aggregator_knowledge_source" Description: ""
--     * Slot: variant to gene expression association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "variant to gene expression association_category" Description: ""
--     * Slot: variant to gene expression association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "variant to gene expression association_has_attribute" Description: ""
--     * Slot: variant to gene expression association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "variant to population association_qualifier" Description: ""
--     * Slot: variant to population association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "variant to population association_publication" Description: ""
--     * Slot: variant to population association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "variant to population association_has_evidence" Description: ""
--     * Slot: variant to population association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "variant to population association_knowledge_source" Description: ""
--     * Slot: variant to population association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "variant to population association_original_knowledge_source" Description: ""
--     * Slot: variant to population association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "variant to population association_primary_knowledge_source" Description: ""
--     * Slot: variant to population association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "variant to population association_aggregator_knowledge_source" Description: ""
--     * Slot: variant to population association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "variant to population association_category" Description: ""
--     * Slot: variant to population association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "variant to population association_has_attribute" Description: ""
--     * Slot: variant to population association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "population to population association_qualifier" Description: ""
--     * Slot: population to population association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "population to population association_publication" Description: ""
--     * Slot: population to population association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "population to population association_has_evidence" Description: ""
--     * Slot: population to population association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "population to population association_knowledge_source" Description: ""
--     * Slot: population to population association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "population to population association_original_knowledge_source" Description: ""
--     * Slot: population to population association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "population to population association_primary_knowledge_source" Description: ""
--     * Slot: population to population association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "population to population association_aggregator_knowledge_source" Description: ""
--     * Slot: population to population association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "population to population association_category" Description: ""
--     * Slot: population to population association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "population to population association_has_attribute" Description: ""
--     * Slot: population to population association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "variant to phenotypic feature association_qualifier" Description: ""
--     * Slot: variant to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "variant to phenotypic feature association_publication" Description: ""
--     * Slot: variant to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "variant to phenotypic feature association_has_evidence" Description: ""
--     * Slot: variant to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "variant to phenotypic feature association_knowledge_source" Description: ""
--     * Slot: variant to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "variant to phenotypic feature association_original_knowledge_source" Description: ""
--     * Slot: variant to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "variant to phenotypic feature association_primary_knowledge_source" Description: ""
--     * Slot: variant to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "variant to phenotypic feature association_aggregator_knowledge_source" Description: ""
--     * Slot: variant to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "variant to phenotypic feature association_category" Description: ""
--     * Slot: variant to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "variant to phenotypic feature association_has_attribute" Description: ""
--     * Slot: variant to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "variant to disease association_qualifier" Description: ""
--     * Slot: variant to disease association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "variant to disease association_publication" Description: ""
--     * Slot: variant to disease association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "variant to disease association_has_evidence" Description: ""
--     * Slot: variant to disease association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "variant to disease association_knowledge_source" Description: ""
--     * Slot: variant to disease association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "variant to disease association_original_knowledge_source" Description: ""
--     * Slot: variant to disease association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "variant to disease association_primary_knowledge_source" Description: ""
--     * Slot: variant to disease association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "variant to disease association_aggregator_knowledge_source" Description: ""
--     * Slot: variant to disease association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "variant to disease association_category" Description: ""
--     * Slot: variant to disease association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "variant to disease association_has_attribute" Description: ""
--     * Slot: variant to disease association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "genotype to disease association_qualifier" Description: ""
--     * Slot: genotype to disease association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "genotype to disease association_publication" Description: ""
--     * Slot: genotype to disease association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "genotype to disease association_has_evidence" Description: ""
--     * Slot: genotype to disease association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "genotype to disease association_knowledge_source" Description: ""
--     * Slot: genotype to disease association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "genotype to disease association_original_knowledge_source" Description: ""
--     * Slot: genotype to disease association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "genotype to disease association_primary_knowledge_source" Description: ""
--     * Slot: genotype to disease association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "genotype to disease association_aggregator_knowledge_source" Description: ""
--     * Slot: genotype to disease association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "genotype to disease association_category" Description: ""
--     * Slot: genotype to disease association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "genotype to disease association_has_attribute" Description: ""
--     * Slot: genotype to disease association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "gene as a model of disease association_qualifier" Description: ""
--     * Slot: gene as a model of disease association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "gene as a model of disease association_publication" Description: ""
--     * Slot: gene as a model of disease association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "gene as a model of disease association_has_evidence" Description: ""
--     * Slot: gene as a model of disease association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "gene as a model of disease association_knowledge_source" Description: ""
--     * Slot: gene as a model of disease association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "gene as a model of disease association_original_knowledge_source" Description: ""
--     * Slot: gene as a model of disease association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "gene as a model of disease association_primary_knowledge_source" Description: ""
--     * Slot: gene as a model of disease association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "gene as a model of disease association_aggregator_knowledge_source" Description: ""
--     * Slot: gene as a model of disease association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "gene as a model of disease association_category" Description: ""
--     * Slot: gene as a model of disease association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "gene as a model of disease association_has_attribute" Description: ""
--     * Slot: gene as a model of disease association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "variant as a model of disease association_qualifier" Description: ""
--     * Slot: variant as a model of disease association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "variant as a model of disease association_publication" Description: ""
--     * Slot: variant as a model of disease association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "variant as a model of disease association_has_evidence" Description: ""
--     * Slot: variant as a model of disease association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "variant as a model of disease association_knowledge_source" Description: ""
--     * Slot: variant as a model of disease association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "variant as a model of disease association_original_knowledge_source" Description: ""
--     * Slot: variant as a model of disease association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "variant as a model of disease association_primary_knowledge_source" Description: ""
--     * Slot: variant as a model of disease association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "variant as a model of disease association_aggregator_knowledge_source" Description: ""
--     * Slot: variant as a model of disease association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "variant as a model of disease association_category" Description: ""
--     * Slot: variant as a model of disease association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "variant as a model of disease association_has_attribute" Description: ""
--     * Slot: variant as a model of disease association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "genotype as a model of disease association_qualifier" Description: ""
--     * Slot: genotype as a model of disease association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "genotype as a model of disease association_publication" Description: ""
--     * Slot: genotype as a model of disease association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "genotype as a model of disease association_has_evidence" Description: ""
--     * Slot: genotype as a model of disease association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "genotype as a model of disease association_knowledge_source" Description: ""
--     * Slot: genotype as a model of disease association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "genotype as a model of disease association_original_knowledge_source" Description: ""
--     * Slot: genotype as a model of disease association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "genotype as a model of disease association_primary_knowledge_source" Description: ""
--     * Slot: genotype as a model of disease association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "genotype as a model of disease association_aggregator_knowledge_source" Description: ""
--     * Slot: genotype as a model of disease association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "genotype as a model of disease association_category" Description: ""
--     * Slot: genotype as a model of disease association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "genotype as a model of disease association_has_attribute" Description: ""
--     * Slot: genotype as a model of disease association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "cell line as a model of disease association_qualifier" Description: ""
--     * Slot: cell line as a model of disease association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "cell line as a model of disease association_publication" Description: ""
--     * Slot: cell line as a model of disease association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "cell line as a model of disease association_has_evidence" Description: ""
--     * Slot: cell line as a model of disease association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "cell line as a model of disease association_knowledge_source" Description: ""
--     * Slot: cell line as a model of disease association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "cell line as a model of disease association_original_knowledge_source" Description: ""
--     * Slot: cell line as a model of disease association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "cell line as a model of disease association_primary_knowledge_source" Description: ""
--     * Slot: cell line as a model of disease association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "cell line as a model of disease association_aggregator_knowledge_source" Description: ""
--     * Slot: cell line as a model of disease association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "cell line as a model of disease association_category" Description: ""
--     * Slot: cell line as a model of disease association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "cell line as a model of disease association_has_attribute" Description: ""
--     * Slot: cell line as a model of disease association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "organismal entity as a model of disease association_qualifier" Description: ""
--     * Slot: organismal entity as a model of disease association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "organismal entity as a model of disease association_publication" Description: ""
--     * Slot: organismal entity as a model of disease association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "organismal entity as a model of disease association_has_evidence" Description: ""
--     * Slot: organismal entity as a model of disease association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "organismal entity as a model of disease association_knowledge_source" Description: ""
--     * Slot: organismal entity as a model of disease association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "organismal entity as a model of disease association_original_knowledge_source" Description: ""
--     * Slot: organismal entity as a model of disease association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "organismal entity as a model of disease association_primary_knowledge_source" Description: ""
--     * Slot: organismal entity as a model of disease association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "organismal entity as a model of disease association_aggregator_knowledge_source" Description: ""
--     * Slot: organismal entity as a model of disease association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "organismal entity as a model of disease association_category" Description: ""
--     * Slot: organismal entity as a model of disease association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "organismal entity as a model of disease association_has_attribute" Description: ""
--     * Slot: organismal entity as a model of disease association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "organism to organism association_qualifier" Description: ""
--     * Slot: organism to organism association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "organism to organism association_publication" Description: ""
--     * Slot: organism to organism association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "organism to organism association_has_evidence" Description: ""
--     * Slot: organism to organism association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "organism to organism association_knowledge_source" Description: ""
--     * Slot: organism to organism association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "organism to organism association_original_knowledge_source" Description: ""
--     * Slot: organism to organism association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "organism to organism association_primary_knowledge_source" Description: ""
--     * Slot: organism to organism association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "organism to organism association_aggregator_knowledge_source" Description: ""
--     * Slot: organism to organism association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "organism to organism association_category" Description: ""
--     * Slot: organism to organism association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "organism to organism association_has_attribute" Description: ""
--     * Slot: organism to organism association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "taxon to taxon association_qualifier" Description: ""
--     * Slot: taxon to taxon association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "taxon to taxon association_publication" Description: ""
--     * Slot: taxon to taxon association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "taxon to taxon association_has_evidence" Description: ""
--     * Slot: taxon to taxon association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "taxon to taxon association_knowledge_source" Description: ""
--     * Slot: taxon to taxon association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "taxon to taxon association_original_knowledge_source" Description: ""
--     * Slot: taxon to taxon association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "taxon to taxon association_primary_knowledge_source" Description: ""
--     * Slot: taxon to taxon association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "taxon to taxon association_aggregator_knowledge_source" Description: ""
--     * Slot: taxon to taxon association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "taxon to taxon association_category" Description: ""
--     * Slot: taxon to taxon association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "taxon to taxon association_has_attribute" Description: ""
--     * Slot: taxon to taxon association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "gene has variant that contributes to disease association_qualifier" Description: ""
--     * Slot: gene has variant that contributes to disease association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "gene has variant that contributes to disease association_publication" Description: ""
--     * Slot: gene has variant that contributes to disease association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "gene has variant that contributes to disease association_has_evidence" Description: ""
--     * Slot: gene has variant that contributes to disease association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "gene has variant that contributes to disease association_knowledge_source" Description: ""
--     * Slot: gene has variant that contributes to disease association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "gene has variant that contributes to disease association_original_knowledge_source" Description: ""
--     * Slot: gene has variant that contributes to disease association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "gene has variant that contributes to disease association_primary_knowledge_source" Description: ""
--     * Slot: gene has variant that contributes to disease association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "gene has variant that contributes to disease association_aggregator_knowledge_source" Description: ""
--     * Slot: gene has variant that contributes to disease association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "gene has variant that contributes to disease association_category" Description: ""
--     * Slot: gene has variant that contributes to disease association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "gene has variant that contributes to disease association_has_attribute" Description: ""
--     * Slot: gene has variant that contributes to disease association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "gene to expression site association_qualifier" Description: ""
--     * Slot: gene to expression site association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "gene to expression site association_publication" Description: ""
--     * Slot: gene to expression site association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "gene to expression site association_has_evidence" Description: ""
--     * Slot: gene to expression site association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "gene to expression site association_knowledge_source" Description: ""
--     * Slot: gene to expression site association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "gene to expression site association_original_knowledge_source" Description: ""
--     * Slot: gene to expression site association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "gene to expression site association_primary_knowledge_source" Description: ""
--     * Slot: gene to expression site association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "gene to expression site association_aggregator_knowledge_source" Description: ""
--     * Slot: gene to expression site association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "gene to expression site association_category" Description: ""
--     * Slot: gene to expression site association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "gene to expression site association_has_attribute" Description: ""
--     * Slot: gene to expression site association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "sequence variant modulates treatment association_qualifier" Description: ""
--     * Slot: sequence variant modulates treatment association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "sequence variant modulates treatment association_publication" Description: ""
--     * Slot: sequence variant modulates treatment association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "sequence variant modulates treatment association_has_evidence" Description: ""
--     * Slot: sequence variant modulates treatment association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "sequence variant modulates treatment association_knowledge_source" Description: ""
--     * Slot: sequence variant modulates treatment association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "sequence variant modulates treatment association_original_knowledge_source" Description: ""
--     * Slot: sequence variant modulates treatment association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "sequence variant modulates treatment association_primary_knowledge_source" Description: ""
--     * Slot: sequence variant modulates treatment association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "sequence variant modulates treatment association_aggregator_knowledge_source" Description: ""
--     * Slot: sequence variant modulates treatment association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "sequence variant modulates treatment association_category" Description: ""
--     * Slot: sequence variant modulates treatment association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "sequence variant modulates treatment association_has_attribute" Description: ""
--     * Slot: sequence variant modulates treatment association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "functional association_qualifier" Description: ""
--     * Slot: functional association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "functional association_publication" Description: ""
--     * Slot: functional association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "functional association_has_evidence" Description: ""
--     * Slot: functional association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "functional association_knowledge_source" Description: ""
--     * Slot: functional association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "functional association_original_knowledge_source" Description: ""
--     * Slot: functional association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "functional association_primary_knowledge_source" Description: ""
--     * Slot: functional association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "functional association_aggregator_knowledge_source" Description: ""
--     * Slot: functional association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "functional association_category" Description: ""
--     * Slot: functional association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "functional association_has_attribute" Description: ""
--     * Slot: functional association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "macromolecular machine to molecular activity association_qualifier" Description: ""
--     * Slot: macromolecular machine to molecular activity association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "macromolecular machine to molecular activity association_publication" Description: ""
--     * Slot: macromolecular machine to molecular activity association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "macromolecular machine to molecular activity association_has_evidence" Description: ""
--     * Slot: macromolecular machine to molecular activity association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "macromolecular machine to molecular activity association_knowledge_source" Description: ""
--     * Slot: macromolecular machine to molecular activity association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "macromolecular machine to molecular activity association_original_knowledge_source" Description: ""
--     * Slot: macromolecular machine to molecular activity association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "macromolecular machine to molecular activity association_primary_knowledge_source" Description: ""
--     * Slot: macromolecular machine to molecular activity association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "macromolecular machine to molecular activity association_aggregator_knowledge_source" Description: ""
--     * Slot: macromolecular machine to molecular activity association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "macromolecular machine to molecular activity association_category" Description: ""
--     * Slot: macromolecular machine to molecular activity association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "macromolecular machine to molecular activity association_has_attribute" Description: ""
--     * Slot: macromolecular machine to molecular activity association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "macromolecular machine to biological process association_qualifier" Description: ""
--     * Slot: macromolecular machine to biological process association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "macromolecular machine to biological process association_publication" Description: ""
--     * Slot: macromolecular machine to biological process association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "macromolecular machine to biological process association_has_evidence" Description: ""
--     * Slot: macromolecular machine to biological process association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "macromolecular machine to biological process association_knowledge_source" Description: ""
--     * Slot: macromolecular machine to biological process association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "macromolecular machine to biological process association_original_knowledge_source" Description: ""
--     * Slot: macromolecular machine to biological process association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "macromolecular machine to biological process association_primary_knowledge_source" Description: ""
--     * Slot: macromolecular machine to biological process association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "macromolecular machine to biological process association_aggregator_knowledge_source" Description: ""
--     * Slot: macromolecular machine to biological process association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "macromolecular machine to biological process association_category" Description: ""
--     * Slot: macromolecular machine to biological process association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "macromolecular machine to biological process association_has_attribute" Description: ""
--     * Slot: macromolecular machine to biological process association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "macromolecular machine to cellular component association_qualifier" Description: ""
--     * Slot: macromolecular machine to cellular component association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "macromolecular machine to cellular component association_publication" Description: ""
--     * Slot: macromolecular machine to cellular component association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "macromolecular machine to cellular component association_has_evidence" Description: ""
--     * Slot: macromolecular machine to cellular component association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "macromolecular machine to cellular component association_knowledge_source" Description: ""
--     * Slot: macromolecular machine to cellular component association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "macromolecular machine to cellular component association_original_knowledge_source" Description: ""
--     * Slot: macromolecular machine to cellular component association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "macromolecular machine to cellular component association_primary_knowledge_source" Description: ""
--     * Slot: macromolecular machine to cellular component association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "macromolecular machine to cellular component association_aggregator_knowledge_source" Description: ""
--     * Slot: macromolecular machine to cellular component association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "macromolecular machine to cellular component association_category" Description: ""
--     * Slot: macromolecular machine to cellular component association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "macromolecular machine to cellular component association_has_attribute" Description: ""
--     * Slot: macromolecular machine to cellular component association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "molecular activity to chemical entity association_qualifier" Description: ""
--     * Slot: molecular activity to chemical entity association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "molecular activity to chemical entity association_publication" Description: ""
--     * Slot: molecular activity to chemical entity association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "molecular activity to chemical entity association_has_evidence" Description: ""
--     * Slot: molecular activity to chemical entity association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "molecular activity to chemical entity association_knowledge_source" Description: ""
--     * Slot: molecular activity to chemical entity association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "molecular activity to chemical entity association_original_knowledge_source" Description: ""
--     * Slot: molecular activity to chemical entity association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "molecular activity to chemical entity association_primary_knowledge_source" Description: ""
--     * Slot: molecular activity to chemical entity association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "molecular activity to chemical entity association_aggregator_knowledge_source" Description: ""
--     * Slot: molecular activity to chemical entity association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "molecular activity to chemical entity association_category" Description: ""
--     * Slot: molecular activity to chemical entity association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "molecular activity to chemical entity association_has_attribute" Description: ""
--     * Slot: molecular activity to chemical entity association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "molecular activity to molecular activity association_qualifier" Description: ""
--     * Slot: molecular activity to molecular activity association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "molecular activity to molecular activity association_publication" Description: ""
--     * Slot: molecular activity to molecular activity association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "molecular activity to molecular activity association_has_evidence" Description: ""
--     * Slot: molecular activity to molecular activity association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "molecular activity to molecular activity association_knowledge_source" Description: ""
--     * Slot: molecular activity to molecular activity association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "molecular activity to molecular activity association_original_knowledge_source" Description: ""
--     * Slot: molecular activity to molecular activity association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "molecular activity to molecular activity association_primary_knowledge_source" Description: ""
--     * Slot: molecular activity to molecular activity association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "molecular activity to molecular activity association_aggregator_knowledge_source" Description: ""
--     * Slot: molecular activity to molecular activity association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "molecular activity to molecular activity association_category" Description: ""
--     * Slot: molecular activity to molecular activity association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "molecular activity to molecular activity association_has_attribute" Description: ""
--     * Slot: molecular activity to molecular activity association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "gene to go term association_qualifier" Description: ""
--     * Slot: gene to go term association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "gene to go term association_publication" Description: ""
--     * Slot: gene to go term association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "gene to go term association_has_evidence" Description: ""
--     * Slot: gene to go term association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "gene to go term association_knowledge_source" Description: ""
--     * Slot: gene to go term association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "gene to go term association_original_knowledge_source" Description: ""
--     * Slot: gene to go term association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "gene to go term association_primary_knowledge_source" Description: ""
--     * Slot: gene to go term association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "gene to go term association_aggregator_knowledge_source" Description: ""
--     * Slot: gene to go term association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "gene to go term association_category" Description: ""
--     * Slot: gene to go term association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "gene to go term association_has_attribute" Description: ""
--     * Slot: gene to go term association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "entity to disease association_qualifier" Description: ""
--     * Slot: entity to disease association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "entity to disease association_publication" Description: ""
--     * Slot: entity to disease association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "entity to disease association_has_evidence" Description: ""
--     * Slot: entity to disease association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "entity to disease association_knowledge_source" Description: ""
--     * Slot: entity to disease association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "entity to disease association_original_knowledge_source" Description: ""
--     * Slot: entity to disease association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "entity to disease association_primary_knowledge_source" Description: ""
--     * Slot: entity to disease association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "entity to disease association_aggregator_knowledge_source" Description: ""
--     * Slot: entity to disease association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "entity to disease association_category" Description: ""
--     * Slot: entity to disease association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "entity to disease association_has_attribute" Description: ""
--     * Slot: entity to disease association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "entity to phenotypic feature association_qualifier" Description: ""
--     * Slot: entity to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "entity to phenotypic feature association_publication" Description: ""
--     * Slot: entity to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "entity to phenotypic feature association_has_evidence" Description: ""
--     * Slot: entity to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "entity to phenotypic feature association_knowledge_source" Description: ""
--     * Slot: entity to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "entity to phenotypic feature association_original_knowledge_source" Description: ""
--     * Slot: entity to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "entity to phenotypic feature association_primary_knowledge_source" Description: ""
--     * Slot: entity to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "entity to phenotypic feature association_aggregator_knowledge_source" Description: ""
--     * Slot: entity to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "entity to phenotypic feature association_category" Description: ""
--     * Slot: entity to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "entity to phenotypic feature association_has_attribute" Description: ""
--     * Slot: entity to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "sequence association_qualifier" Description: ""
--     * Slot: sequence association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "sequence association_publication" Description: ""
--     * Slot: sequence association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "sequence association_has_evidence" Description: ""
--     * Slot: sequence association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "sequence association_knowledge_source" Description: ""
--     * Slot: sequence association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "sequence association_original_knowledge_source" Description: ""
--     * Slot: sequence association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "sequence association_primary_knowledge_source" Description: ""
--     * Slot: sequence association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "sequence association_aggregator_knowledge_source" Description: ""
--     * Slot: sequence association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "sequence association_category" Description: ""
--     * Slot: sequence association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "sequence association_has_attribute" Description: ""
--     * Slot: sequence association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "genomic sequence localization_qualifier" Description: ""
--     * Slot: genomic sequence localization_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "genomic sequence localization_publication" Description: ""
--     * Slot: genomic sequence localization_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "genomic sequence localization_has_evidence" Description: ""
--     * Slot: genomic sequence localization_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "genomic sequence localization_knowledge_source" Description: ""
--     * Slot: genomic sequence localization_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "genomic sequence localization_original_knowledge_source" Description: ""
--     * Slot: genomic sequence localization_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "genomic sequence localization_primary_knowledge_source" Description: ""
--     * Slot: genomic sequence localization_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "genomic sequence localization_aggregator_knowledge_source" Description: ""
--     * Slot: genomic sequence localization_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "genomic sequence localization_category" Description: ""
--     * Slot: genomic sequence localization_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "genomic sequence localization_has_attribute" Description: ""
--     * Slot: genomic sequence localization_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "sequence feature relationship_qualifier" Description: ""
--     * Slot: sequence feature relationship_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "sequence feature relationship_publication" Description: ""
--     * Slot: sequence feature relationship_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "sequence feature relationship_has_evidence" Description: ""
--     * Slot: sequence feature relationship_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "sequence feature relationship_knowledge_source" Description: ""
--     * Slot: sequence feature relationship_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "sequence feature relationship_original_knowledge_source" Description: ""
--     * Slot: sequence feature relationship_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "sequence feature relationship_primary_knowledge_source" Description: ""
--     * Slot: sequence feature relationship_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "sequence feature relationship_aggregator_knowledge_source" Description: ""
--     * Slot: sequence feature relationship_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "sequence feature relationship_category" Description: ""
--     * Slot: sequence feature relationship_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "sequence feature relationship_has_attribute" Description: ""
--     * Slot: sequence feature relationship_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "transcript to gene relationship_qualifier" Description: ""
--     * Slot: transcript to gene relationship_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "transcript to gene relationship_publication" Description: ""
--     * Slot: transcript to gene relationship_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "transcript to gene relationship_has_evidence" Description: ""
--     * Slot: transcript to gene relationship_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "transcript to gene relationship_knowledge_source" Description: ""
--     * Slot: transcript to gene relationship_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "transcript to gene relationship_original_knowledge_source" Description: ""
--     * Slot: transcript to gene relationship_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "transcript to gene relationship_primary_knowledge_source" Description: ""
--     * Slot: transcript to gene relationship_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "transcript to gene relationship_aggregator_knowledge_source" Description: ""
--     * Slot: transcript to gene relationship_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "transcript to gene relationship_category" Description: ""
--     * Slot: transcript to gene relationship_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "transcript to gene relationship_has_attribute" Description: ""
--     * Slot: transcript to gene relationship_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "gene to gene product relationship_qualifier" Description: ""
--     * Slot: gene to gene product relationship_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "gene to gene product relationship_publication" Description: ""
--     * Slot: gene to gene product relationship_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "gene to gene product relationship_has_evidence" Description: ""
--     * Slot: gene to gene product relationship_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "gene to gene product relationship_knowledge_source" Description: ""
--     * Slot: gene to gene product relationship_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "gene to gene product relationship_original_knowledge_source" Description: ""
--     * Slot: gene to gene product relationship_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "gene to gene product relationship_primary_knowledge_source" Description: ""
--     * Slot: gene to gene product relationship_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "gene to gene product relationship_aggregator_knowledge_source" Description: ""
--     * Slot: gene to gene product relationship_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "gene to gene product relationship_category" Description: ""
--     * Slot: gene to gene product relationship_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "gene to gene product relationship_has_attribute" Description: ""
--     * Slot: gene to gene product relationship_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "exon to transcript relationship_qualifier" Description: ""
--     * Slot: exon to transcript relationship_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "exon to transcript relationship_publication" Description: ""
--     * Slot: exon to transcript relationship_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "exon to transcript relationship_has_evidence" Description: ""
--     * Slot: exon to transcript relationship_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "exon to transcript relationship_knowledge_source" Description: ""
--     * Slot: exon to transcript relationship_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "exon to transcript relationship_original_knowledge_source" Description: ""
--     * Slot: exon to transcript relationship_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "exon to transcript relationship_primary_knowledge_source" Description: ""
--     * Slot: exon to transcript relationship_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "exon to transcript relationship_aggregator_knowledge_source" Description: ""
--     * Slot: exon to transcript relationship_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "exon to transcript relationship_category" Description: ""
--     * Slot: exon to transcript relationship_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "exon to transcript relationship_has_attribute" Description: ""
--     * Slot: exon to transcript relationship_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "gene regulatory relationship_qualifier" Description: ""
--     * Slot: gene regulatory relationship_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "gene regulatory relationship_publication" Description: ""
--     * Slot: gene regulatory relationship_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "gene regulatory relationship_has_evidence" Description: ""
--     * Slot: gene regulatory relationship_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "gene regulatory relationship_knowledge_source" Description: ""
--     * Slot: gene regulatory relationship_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "gene regulatory relationship_original_knowledge_source" Description: ""
--     * Slot: gene regulatory relationship_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "gene regulatory relationship_primary_knowledge_source" Description: ""
--     * Slot: gene regulatory relationship_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "gene regulatory relationship_aggregator_knowledge_source" Description: ""
--     * Slot: gene regulatory relationship_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "gene regulatory relationship_category" Description: ""
--     * Slot: gene regulatory relationship_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "gene regulatory relationship_has_attribute" Description: ""
--     * Slot: gene regulatory relationship_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "anatomical entity to anatomical entity association_qualifier" Description: ""
--     * Slot: anatomical entity to anatomical entity association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "anatomical entity to anatomical entity association_publication" Description: ""
--     * Slot: anatomical entity to anatomical entity association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "anatomical entity to anatomical entity association_has_evidence" Description: ""
--     * Slot: anatomical entity to anatomical entity association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "anatomical entity to anatomical entity association_knowledge_source" Description: ""
--     * Slot: anatomical entity to anatomical entity association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "anatomical entity to anatomical entity association_original_knowledge_source" Description: ""
--     * Slot: anatomical entity to anatomical entity association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "anatomical entity to anatomical entity association_primary_knowledge_source" Description: ""
--     * Slot: anatomical entity to anatomical entity association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "anatomical entity to anatomical entity association_aggregator_knowledge_source" Description: ""
--     * Slot: anatomical entity to anatomical entity association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "anatomical entity to anatomical entity association_category" Description: ""
--     * Slot: anatomical entity to anatomical entity association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "anatomical entity to anatomical entity association_has_attribute" Description: ""
--     * Slot: anatomical entity to anatomical entity association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "anatomical entity to anatomical entity part of association_qualifier" Description: ""
--     * Slot: anatomical entity to anatomical entity part of association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "anatomical entity to anatomical entity part of association_publication" Description: ""
--     * Slot: anatomical entity to anatomical entity part of association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "anatomical entity to anatomical entity part of association_has_evidence" Description: ""
--     * Slot: anatomical entity to anatomical entity part of association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "anatomical entity to anatomical entity part of association_knowledge_source" Description: ""
--     * Slot: anatomical entity to anatomical entity part of association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "anatomical entity to anatomical entity part of association_original_knowledge_source" Description: ""
--     * Slot: anatomical entity to anatomical entity part of association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "anatomical entity to anatomical entity part of association_primary_knowledge_source" Description: ""
--     * Slot: anatomical entity to anatomical entity part of association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "anatomical entity to anatomical entity part of association_aggregator_knowledge_source" Description: ""
--     * Slot: anatomical entity to anatomical entity part of association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "anatomical entity to anatomical entity part of association_category" Description: ""
--     * Slot: anatomical entity to anatomical entity part of association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "anatomical entity to anatomical entity part of association_has_attribute" Description: ""
--     * Slot: anatomical entity to anatomical entity part of association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "anatomical entity to anatomical entity ontogenic association_qualifier" Description: ""
--     * Slot: anatomical entity to anatomical entity ontogenic association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "anatomical entity to anatomical entity ontogenic association_publication" Description: ""
--     * Slot: anatomical entity to anatomical entity ontogenic association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "anatomical entity to anatomical entity ontogenic association_has_evidence" Description: ""
--     * Slot: anatomical entity to anatomical entity ontogenic association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "anatomical entity to anatomical entity ontogenic association_knowledge_source" Description: ""
--     * Slot: anatomical entity to anatomical entity ontogenic association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "anatomical entity to anatomical entity ontogenic association_original_knowledge_source" Description: ""
--     * Slot: anatomical entity to anatomical entity ontogenic association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "anatomical entity to anatomical entity ontogenic association_primary_knowledge_source" Description: ""
--     * Slot: anatomical entity to anatomical entity ontogenic association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "anatomical entity to anatomical entity ontogenic association_aggregator_knowledge_source" Description: ""
--     * Slot: anatomical entity to anatomical entity ontogenic association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "anatomical entity to anatomical entity ontogenic association_category" Description: ""
--     * Slot: anatomical entity to anatomical entity ontogenic association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "anatomical entity to anatomical entity ontogenic association_has_attribute" Description: ""
--     * Slot: anatomical entity to anatomical entity ontogenic association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "organism taxon to organism taxon association_qualifier" Description: ""
--     * Slot: organism taxon to organism taxon association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "organism taxon to organism taxon association_publication" Description: ""
--     * Slot: organism taxon to organism taxon association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "organism taxon to organism taxon association_has_evidence" Description: ""
--     * Slot: organism taxon to organism taxon association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "organism taxon to organism taxon association_knowledge_source" Description: ""
--     * Slot: organism taxon to organism taxon association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "organism taxon to organism taxon association_original_knowledge_source" Description: ""
--     * Slot: organism taxon to organism taxon association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "organism taxon to organism taxon association_primary_knowledge_source" Description: ""
--     * Slot: organism taxon to organism taxon association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "organism taxon to organism taxon association_aggregator_knowledge_source" Description: ""
--     * Slot: organism taxon to organism taxon association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "organism taxon to organism taxon association_category" Description: ""
--     * Slot: organism taxon to organism taxon association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "organism taxon to organism taxon association_has_attribute" Description: ""
--     * Slot: organism taxon to organism taxon association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "organism taxon to organism taxon specialization_qualifier" Description: ""
--     * Slot: organism taxon to organism taxon specialization_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "organism taxon to organism taxon specialization_publication" Description: ""
--     * Slot: organism taxon to organism taxon specialization_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "organism taxon to organism taxon specialization_has_evidence" Description: ""
--     * Slot: organism taxon to organism taxon specialization_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "organism taxon to organism taxon specialization_knowledge_source" Description: ""
--     * Slot: organism taxon to organism taxon specialization_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "organism taxon to organism taxon specialization_original_knowledge_source" Description: ""
--     * Slot: organism taxon to organism taxon specialization_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "organism taxon to organism taxon specialization_primary_knowledge_source" Description: ""
--     * Slot: organism taxon to organism taxon specialization_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "organism taxon to organism taxon specialization_aggregator_knowledge_source" Description: ""
--     * Slot: organism taxon to organism taxon specialization_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "organism taxon to organism taxon specialization_category" Description: ""
--     * Slot: organism taxon to organism taxon specialization_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "organism taxon to organism taxon specialization_has_attribute" Description: ""
--     * Slot: organism taxon to organism taxon specialization_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "organism taxon to organism taxon interaction_qualifier" Description: ""
--     * Slot: organism taxon to organism taxon interaction_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "organism taxon to organism taxon interaction_publication" Description: ""
--     * Slot: organism taxon to organism taxon interaction_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "organism taxon to organism taxon interaction_has_evidence" Description: ""
--     * Slot: organism taxon to organism taxon interaction_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "organism taxon to organism taxon interaction_knowledge_source" Description: ""
--     * Slot: organism taxon to organism taxon interaction_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "organism taxon to organism taxon interaction_original_knowledge_source" Description: ""
--     * Slot: organism taxon to organism taxon interaction_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "organism taxon to organism taxon interaction_primary_knowledge_source" Description: ""
--     * Slot: organism taxon to organism taxon interaction_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "organism taxon to organism taxon interaction_aggregator_knowledge_source" Description: ""
--     * Slot: organism taxon to organism taxon interaction_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "organism taxon to organism taxon interaction_category" Description: ""
--     * Slot: organism taxon to organism taxon interaction_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "organism taxon to organism taxon interaction_has_attribute" Description: ""
--     * Slot: organism taxon to organism taxon interaction_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "organism taxon to environment association_qualifier" Description: ""
--     * Slot: organism taxon to environment association_id Description: Autocreated FK slot
--     * Slot: qualifier_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "organism taxon to environment association_publication" Description: ""
--     * Slot: organism taxon to environment association_id Description: Autocreated FK slot
--     * Slot: publication Description: connects an association to publications supporting the association
-- # Class: "organism taxon to environment association_has_evidence" Description: ""
--     * Slot: organism taxon to environment association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "organism taxon to environment association_knowledge_source" Description: ""
--     * Slot: organism taxon to environment association_id Description: Autocreated FK slot
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
-- # Class: "organism taxon to environment association_original_knowledge_source" Description: ""
--     * Slot: organism taxon to environment association_id Description: Autocreated FK slot
--     * Slot: original_knowledge_source Description: The Information Resource that created the original record of the knowledge expressed in an Association (e.g. via curation of the knowledge from the literature, or generation of the knowledge de novo through computation, reasoning, inference over data).
-- # Class: "organism taxon to environment association_primary_knowledge_source" Description: ""
--     * Slot: organism taxon to environment association_id Description: Autocreated FK slot
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify (may or may not be the 'original' source).
-- # Class: "organism taxon to environment association_aggregator_knowledge_source" Description: ""
--     * Slot: organism taxon to environment association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "organism taxon to environment association_category" Description: ""
--     * Slot: organism taxon to environment association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class.  In a neo4j database this MAY correspond to the neo4j label tag.  In an RDF database it should be a biolink model class URI.  This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`, etc... In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "organism taxon to environment association_has_attribute" Description: ""
--     * Slot: organism taxon to environment association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute

CREATE TABLE "ontology class" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE annotation (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "quantity value" (
	id INTEGER, 
	has_unit TEXT, 
	has_numeric_value FLOAT, 
	PRIMARY KEY (id)
);
CREATE TABLE "relationship quantifier" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "sensitivity quantifier" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "specificity quantifier" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "pathognomonicity quantifier" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "frequency quantifier" (
	id INTEGER, 
	has_count INTEGER, 
	has_total INTEGER, 
	has_quotient FLOAT, 
	has_percentage FLOAT, 
	PRIMARY KEY (id)
);
CREATE TABLE "chemical or drug or treatment" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE entity (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "named thing" (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "relationship type" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "gene ontology class" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "unclassified ontology class" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "taxonomic rank" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "organism taxon" (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE event (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "administrative entity" (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE agent (
	address TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "information content entity" (
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE dataset (
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "dataset distribution" (
	distribution_download_url TEXT, 
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "dataset summary" (
	source_web_page TEXT, 
	source_logo TEXT, 
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "confidence level" (
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "evidence type" (
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "information resource" (
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE publication (
	summary TEXT, 
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT NOT NULL, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE book (
	summary TEXT, 
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT NOT NULL, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "book chapter" (
	published_in TEXT NOT NULL, 
	volume TEXT, 
	chapter TEXT, 
	summary TEXT, 
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT NOT NULL, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE serial (
	iso_abbreviation TEXT, 
	volume TEXT, 
	issue TEXT, 
	summary TEXT, 
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT NOT NULL, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE article (
	published_in TEXT NOT NULL, 
	iso_abbreviation TEXT, 
	volume TEXT, 
	issue TEXT, 
	summary TEXT, 
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT NOT NULL, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "physical essence or occurrent" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "physical essence" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "physical entity" (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE occurrent (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "activity and behavior" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE activity (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE procedure (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE phenomenon (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE device (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "study population" (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "subject of investigation" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "material sample" (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "planetary entity" (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "environmental process" (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "environmental feature" (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "geographic location" (
	latitude FLOAT, 
	longitude FLOAT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "geographic location at time" (
	timepoint TEXT, 
	latitude FLOAT, 
	longitude FLOAT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "biological entity" (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "thing with taxon" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "genomic entity" (
	id INTEGER, 
	has_biological_sequence TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "chemical entity" (
	trade_name TEXT, 
	max_tolerated_dose TEXT, 
	is_toxic BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(trade_name) REFERENCES "chemical entity" (id)
);
CREATE TABLE "chemical substance" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "biological process or activity" (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "molecular activity" (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "biological process" (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE pathway (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "physiological process" (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE behavior (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "organismal entity" (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "life stage" (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "individual organism" (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "population of individual organisms" (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "disease or phenotypic feature" (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE disease (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "phenotypic feature" (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "behavioral feature" (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "anatomical entity" (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "cellular component" (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE cell (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "cell line" (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "gross anatomical structure" (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "chemical entity or gene or gene product" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "chemical entity or protein or polypeptide" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "macromolecular machine mixin" (
	id INTEGER, 
	name TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "gene or gene product" (
	id INTEGER, 
	name TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE gene (
	symbol TEXT, 
	has_biological_sequence TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "gene product mixin" (
	id INTEGER, 
	name TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "gene product isoform mixin" (
	id INTEGER, 
	name TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "macromolecular complex mixin" (
	id INTEGER, 
	name TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE genome (
	has_biological_sequence TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE polypeptide (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE protein (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "protein isoform" (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "protein domain" (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "protein family" (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "nucleic acid sequence motif" (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "gene grouping mixin" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "gene family" (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE haplotype (
	has_biological_sequence TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "sequence variant" (
	has_biological_sequence TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE snv (
	has_biological_sequence TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "reagent targeted gene" (
	has_biological_sequence TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "clinical entity" (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "clinical trial" (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "clinical intervention" (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "clinical finding" (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE hospitalization (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "case" (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE cohort (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "exposure event" (
	id INTEGER, 
	timepoint TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "genomic background exposure" (
	id INTEGER, 
	timepoint TEXT, 
	has_biological_sequence TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "pathological entity mixin" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "pathological process" (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "pathological process exposure" (
	id INTEGER, 
	timepoint TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "pathological anatomical structure" (
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "pathological anatomical exposure" (
	id INTEGER, 
	timepoint TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "disease or phenotypic feature exposure" (
	id INTEGER, 
	timepoint TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "chemical exposure" (
	id INTEGER, 
	timepoint TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "complex chemical exposure" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "drug exposure" (
	id INTEGER, 
	timepoint TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "drug to gene interaction exposure" (
	id INTEGER, 
	timepoint TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE treatment (
	timepoint TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "biotic exposure" (
	id INTEGER, 
	timepoint TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "geographic exposure" (
	id INTEGER, 
	timepoint TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "environmental exposure" (
	id INTEGER, 
	timepoint TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "behavioral exposure" (
	id INTEGER, 
	timepoint TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "socioeconomic exposure" (
	id INTEGER, 
	timepoint TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE outcome (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "pathological process outcome" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "pathological anatomical outcome" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "disease or phenotypic feature outcome" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "behavioral outcome" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "hospitalization outcome" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "mortality outcome" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "epidemiological outcome" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "socioeconomic outcome" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "cell line to entity association mixin" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "chemical entity to entity association mixin" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "drug to entity association mixin" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "chemical to entity association mixin" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "case to entity association mixin" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "material sample to entity association mixin" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "disease to entity association mixin" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "entity to exposure event association mixin" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "exposure event to entity association mixin" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "entity to outcome association mixin" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "frequency qualifier mixin" (
	id INTEGER, 
	frequency_qualifier TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "disease or phenotypic feature to entity association mixin" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "entity to disease or phenotypic feature association mixin" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "genotype to entity association mixin" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "gene to entity association mixin" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "variant to entity association mixin" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "model to disease association mixin" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "macromolecular machine to entity association mixin" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE "organism taxon to entity association" (
	id INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE attribute (
	id INTEGER, 
	name TEXT, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	source TEXT, 
	has_attribute_type_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id), 
	FOREIGN KEY(has_attribute_type_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical role" (
	id INTEGER, 
	name TEXT, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	source TEXT, 
	has_attribute_type_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id), 
	FOREIGN KEY(has_attribute_type_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "biological sex" (
	id INTEGER, 
	name TEXT, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	source TEXT, 
	has_attribute_type_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id), 
	FOREIGN KEY(has_attribute_type_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "phenotypic sex" (
	id INTEGER, 
	name TEXT, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	source TEXT, 
	has_attribute_type_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id), 
	FOREIGN KEY(has_attribute_type_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "genotypic sex" (
	id INTEGER, 
	name TEXT, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	source TEXT, 
	has_attribute_type_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id), 
	FOREIGN KEY(has_attribute_type_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "severity value" (
	id INTEGER, 
	name TEXT, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	source TEXT, 
	has_attribute_type_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id), 
	FOREIGN KEY(has_attribute_type_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "dataset version" (
	has_dataset TEXT, 
	ingest_date TEXT, 
	has_distribution TEXT, 
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_dataset) REFERENCES dataset (id), 
	FOREIGN KEY(has_distribution) REFERENCES "dataset distribution" (id)
);
CREATE TABLE "molecular entity" (
	is_metabolite BOOLEAN, 
	trade_name TEXT, 
	max_tolerated_dose TEXT, 
	is_toxic BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(trade_name) REFERENCES "chemical entity" (id)
);
CREATE TABLE "small molecule" (
	is_metabolite BOOLEAN, 
	trade_name TEXT, 
	max_tolerated_dose TEXT, 
	is_toxic BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(trade_name) REFERENCES "chemical entity" (id)
);
CREATE TABLE "chemical mixture" (
	is_supplement TEXT, 
	"highest_FDA_approval_status" TEXT, 
	drug_regulatory_status_world_wide TEXT, 
	trade_name TEXT, 
	max_tolerated_dose TEXT, 
	is_toxic BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(is_supplement) REFERENCES "chemical mixture" (id), 
	FOREIGN KEY(trade_name) REFERENCES "chemical entity" (id)
);
CREATE TABLE "nucleic acid entity" (
	has_biological_sequence TEXT, 
	is_metabolite BOOLEAN, 
	trade_name TEXT, 
	max_tolerated_dose TEXT, 
	is_toxic BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(trade_name) REFERENCES "chemical entity" (id)
);
CREATE TABLE "environmental food contaminant" (
	trade_name TEXT, 
	max_tolerated_dose TEXT, 
	is_toxic BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(trade_name) REFERENCES "chemical entity" (id)
);
CREATE TABLE "food additive" (
	trade_name TEXT, 
	max_tolerated_dose TEXT, 
	is_toxic BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(trade_name) REFERENCES "chemical entity" (id)
);
CREATE TABLE nutrient (
	trade_name TEXT, 
	max_tolerated_dose TEXT, 
	is_toxic BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(trade_name) REFERENCES "chemical entity" (id)
);
CREATE TABLE macronutrient (
	trade_name TEXT, 
	max_tolerated_dose TEXT, 
	is_toxic BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(trade_name) REFERENCES "chemical entity" (id)
);
CREATE TABLE micronutrient (
	trade_name TEXT, 
	max_tolerated_dose TEXT, 
	is_toxic BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(trade_name) REFERENCES "chemical entity" (id)
);
CREATE TABLE vitamin (
	trade_name TEXT, 
	max_tolerated_dose TEXT, 
	is_toxic BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(trade_name) REFERENCES "chemical entity" (id)
);
CREATE TABLE "organism attribute" (
	id INTEGER, 
	name TEXT, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	source TEXT, 
	has_attribute_type_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id), 
	FOREIGN KEY(has_attribute_type_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "phenotypic quality" (
	id INTEGER, 
	name TEXT, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	source TEXT, 
	has_attribute_type_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id), 
	FOREIGN KEY(has_attribute_type_id) REFERENCES "ontology class" (id)
);
CREATE TABLE inheritance (
	id INTEGER, 
	name TEXT, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	source TEXT, 
	has_attribute_type_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id), 
	FOREIGN KEY(has_attribute_type_id) REFERENCES "ontology class" (id)
);
CREATE TABLE exon (
	has_biological_sequence TEXT, 
	is_metabolite BOOLEAN, 
	trade_name TEXT, 
	max_tolerated_dose TEXT, 
	is_toxic BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(trade_name) REFERENCES "chemical entity" (id)
);
CREATE TABLE transcript (
	has_biological_sequence TEXT, 
	is_metabolite BOOLEAN, 
	trade_name TEXT, 
	max_tolerated_dose TEXT, 
	is_toxic BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(trade_name) REFERENCES "chemical entity" (id)
);
CREATE TABLE "coding sequence" (
	has_biological_sequence TEXT, 
	is_metabolite BOOLEAN, 
	trade_name TEXT, 
	max_tolerated_dose TEXT, 
	is_toxic BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(trade_name) REFERENCES "chemical entity" (id)
);
CREATE TABLE "RNA product" (
	has_biological_sequence TEXT, 
	is_metabolite BOOLEAN, 
	trade_name TEXT, 
	max_tolerated_dose TEXT, 
	is_toxic BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(trade_name) REFERENCES "chemical entity" (id)
);
CREATE TABLE "RNA product isoform" (
	has_biological_sequence TEXT, 
	is_metabolite BOOLEAN, 
	trade_name TEXT, 
	max_tolerated_dose TEXT, 
	is_toxic BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(trade_name) REFERENCES "chemical entity" (id)
);
CREATE TABLE "noncoding RNA product" (
	has_biological_sequence TEXT, 
	is_metabolite BOOLEAN, 
	trade_name TEXT, 
	max_tolerated_dose TEXT, 
	is_toxic BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(trade_name) REFERENCES "chemical entity" (id)
);
CREATE TABLE "microRNA" (
	has_biological_sequence TEXT, 
	is_metabolite BOOLEAN, 
	trade_name TEXT, 
	max_tolerated_dose TEXT, 
	is_toxic BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(trade_name) REFERENCES "chemical entity" (id)
);
CREATE TABLE "siRNA" (
	has_biological_sequence TEXT, 
	is_metabolite BOOLEAN, 
	trade_name TEXT, 
	max_tolerated_dose TEXT, 
	is_toxic BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(trade_name) REFERENCES "chemical entity" (id)
);
CREATE TABLE zygosity (
	id INTEGER, 
	name TEXT, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	source TEXT, 
	has_attribute_type_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id), 
	FOREIGN KEY(has_attribute_type_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "clinical attribute" (
	id INTEGER, 
	name TEXT, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	source TEXT, 
	has_attribute_type_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id), 
	FOREIGN KEY(has_attribute_type_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "clinical measurement" (
	id INTEGER, 
	name TEXT, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	source TEXT, 
	has_attribute_type_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id), 
	FOREIGN KEY(has_attribute_type_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "clinical modifier" (
	id INTEGER, 
	name TEXT, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	source TEXT, 
	has_attribute_type_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id), 
	FOREIGN KEY(has_attribute_type_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "clinical course" (
	id INTEGER, 
	name TEXT, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	source TEXT, 
	has_attribute_type_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id), 
	FOREIGN KEY(has_attribute_type_id) REFERENCES "ontology class" (id)
);
CREATE TABLE onset (
	id INTEGER, 
	name TEXT, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	source TEXT, 
	has_attribute_type_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id), 
	FOREIGN KEY(has_attribute_type_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "socioeconomic attribute" (
	id INTEGER, 
	name TEXT, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	source TEXT, 
	has_attribute_type_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id), 
	FOREIGN KEY(has_attribute_type_id) REFERENCES "ontology class" (id)
);
CREATE TABLE association (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "named thing" (id), 
	FOREIGN KEY(object) REFERENCES "named thing" (id)
);
CREATE TABLE "contributor association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "information content entity" (id), 
	FOREIGN KEY(object) REFERENCES agent (id)
);
CREATE TABLE "gene to gene association" (
	predicate TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	subject_id TEXT NOT NULL, 
	object_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject_id) REFERENCES "gene or gene product" (id), 
	FOREIGN KEY(object_id) REFERENCES "gene or gene product" (id)
);
CREATE TABLE "gene to gene homology association" (
	predicate TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	subject_id TEXT NOT NULL, 
	object_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject_id) REFERENCES "gene or gene product" (id), 
	FOREIGN KEY(object_id) REFERENCES "gene or gene product" (id)
);
CREATE TABLE "gene expression mixin" (
	id INTEGER, 
	expression_site TEXT, 
	stage_qualifier TEXT, 
	phenotypic_state TEXT, 
	quantifier_qualifier_id TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(expression_site) REFERENCES "anatomical entity" (id), 
	FOREIGN KEY(stage_qualifier) REFERENCES "life stage" (id), 
	FOREIGN KEY(phenotypic_state) REFERENCES "disease or phenotypic feature" (id), 
	FOREIGN KEY(quantifier_qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to gene coexpression association" (
	expression_site TEXT, 
	stage_qualifier TEXT, 
	phenotypic_state TEXT, 
	predicate TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	quantifier_qualifier_id TEXT, 
	subject_id TEXT NOT NULL, 
	object_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(expression_site) REFERENCES "anatomical entity" (id), 
	FOREIGN KEY(stage_qualifier) REFERENCES "life stage" (id), 
	FOREIGN KEY(phenotypic_state) REFERENCES "disease or phenotypic feature" (id), 
	FOREIGN KEY(quantifier_qualifier_id) REFERENCES "ontology class" (id), 
	FOREIGN KEY(subject_id) REFERENCES "gene or gene product" (id), 
	FOREIGN KEY(object_id) REFERENCES "gene or gene product" (id)
);
CREATE TABLE "pairwise gene to gene interaction" (
	predicate TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	subject_id TEXT NOT NULL, 
	object_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject_id) REFERENCES "gene or gene product" (id), 
	FOREIGN KEY(object_id) REFERENCES "gene or gene product" (id)
);
CREATE TABLE "cell line to disease or phenotypic feature association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "disease or phenotypic feature" (id), 
	FOREIGN KEY(object) REFERENCES "disease or phenotypic feature" (id)
);
CREATE TABLE "chemical to chemical association" (
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	subject_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(object) REFERENCES "chemical entity" (id), 
	FOREIGN KEY(subject_id) REFERENCES "chemical entity or gene or gene product" (id)
);
CREATE TABLE "chemical to chemical derivation association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "chemical entity" (id), 
	FOREIGN KEY(object) REFERENCES "chemical entity" (id)
);
CREATE TABLE "chemical to disease or phenotypic feature association" (
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	subject_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(object) REFERENCES "disease or phenotypic feature" (id), 
	FOREIGN KEY(subject_id) REFERENCES "chemical entity or gene or gene product" (id)
);
CREATE TABLE "chemical to pathway association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "chemical entity" (id), 
	FOREIGN KEY(object) REFERENCES pathway (id)
);
CREATE TABLE "chemical to gene association" (
	predicate TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	subject_id TEXT NOT NULL, 
	object_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject_id) REFERENCES "chemical entity or gene or gene product" (id), 
	FOREIGN KEY(object_id) REFERENCES "gene or gene product" (id)
);
CREATE TABLE "material sample derivation association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "material sample" (id), 
	FOREIGN KEY(object) REFERENCES "named thing" (id)
);
CREATE TABLE "material sample to disease or phenotypic feature association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "material sample" (id), 
	FOREIGN KEY(object) REFERENCES "disease or phenotypic feature" (id)
);
CREATE TABLE "disease to exposure event association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	object_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES disease (id), 
	FOREIGN KEY(object_id) REFERENCES "exposure event" (id)
);
CREATE TABLE "exposure event to outcome association" (
	has_population_context TEXT, 
	has_temporal_context TEXT, 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	object_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_population_context) REFERENCES "population of individual organisms" (id), 
	FOREIGN KEY(subject) REFERENCES "named thing" (id), 
	FOREIGN KEY(object_id) REFERENCES outcome (id)
);
CREATE TABLE "information content entity to named thing association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "named thing" (id), 
	FOREIGN KEY(object) REFERENCES "named thing" (id)
);
CREATE TABLE "disease or phenotypic feature to location association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "disease or phenotypic feature" (id), 
	FOREIGN KEY(object) REFERENCES "anatomical entity" (id)
);
CREATE TABLE "variant to gene association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "sequence variant" (id), 
	FOREIGN KEY(object) REFERENCES gene (id)
);
CREATE TABLE "variant to gene expression association" (
	expression_site TEXT, 
	stage_qualifier TEXT, 
	phenotypic_state TEXT, 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	quantifier_qualifier_id TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(expression_site) REFERENCES "anatomical entity" (id), 
	FOREIGN KEY(stage_qualifier) REFERENCES "life stage" (id), 
	FOREIGN KEY(phenotypic_state) REFERENCES "disease or phenotypic feature" (id), 
	FOREIGN KEY(subject) REFERENCES "sequence variant" (id), 
	FOREIGN KEY(object) REFERENCES gene (id), 
	FOREIGN KEY(quantifier_qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "variant to population association" (
	has_count INTEGER, 
	has_total INTEGER, 
	has_quotient FLOAT, 
	has_percentage FLOAT, 
	frequency_qualifier TEXT, 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "sequence variant" (id), 
	FOREIGN KEY(object) REFERENCES "population of individual organisms" (id)
);
CREATE TABLE "population to population association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "population of individual organisms" (id), 
	FOREIGN KEY(object) REFERENCES "population of individual organisms" (id)
);
CREATE TABLE "organism to organism association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "individual organism" (id), 
	FOREIGN KEY(object) REFERENCES "individual organism" (id)
);
CREATE TABLE "taxon to taxon association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "organism taxon" (id), 
	FOREIGN KEY(object) REFERENCES "organism taxon" (id)
);
CREATE TABLE "gene to expression site association" (
	stage_qualifier TEXT, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	quantifier_qualifier_id TEXT, 
	subject_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(stage_qualifier) REFERENCES "life stage" (id), 
	FOREIGN KEY(object) REFERENCES "anatomical entity" (id), 
	FOREIGN KEY(quantifier_qualifier_id) REFERENCES "ontology class" (id), 
	FOREIGN KEY(subject_id) REFERENCES "gene or gene product" (id)
);
CREATE TABLE "sequence variant modulates treatment association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "sequence variant" (id), 
	FOREIGN KEY(object) REFERENCES treatment (id)
);
CREATE TABLE "functional association" (
	predicate TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	subject_id TEXT NOT NULL, 
	object_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject_id) REFERENCES "macromolecular machine mixin" (id), 
	FOREIGN KEY(object_id) REFERENCES "gene ontology class" (id)
);
CREATE TABLE "macromolecular machine to molecular activity association" (
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	subject_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(object) REFERENCES "molecular activity" (id), 
	FOREIGN KEY(subject_id) REFERENCES "macromolecular machine mixin" (id)
);
CREATE TABLE "macromolecular machine to biological process association" (
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	subject_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(object) REFERENCES "biological process" (id), 
	FOREIGN KEY(subject_id) REFERENCES "macromolecular machine mixin" (id)
);
CREATE TABLE "macromolecular machine to cellular component association" (
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	subject_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(object) REFERENCES "cellular component" (id), 
	FOREIGN KEY(subject_id) REFERENCES "macromolecular machine mixin" (id)
);
CREATE TABLE "molecular activity to chemical entity association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "molecular activity" (id), 
	FOREIGN KEY(object) REFERENCES "chemical entity" (id)
);
CREATE TABLE "molecular activity to molecular activity association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "molecular activity" (id), 
	FOREIGN KEY(object) REFERENCES "molecular activity" (id)
);
CREATE TABLE "gene to go term association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	object_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES gene (id), 
	FOREIGN KEY(object_id) REFERENCES "gene ontology class" (id)
);
CREATE TABLE "entity to disease association" (
	"FDA_approval_status" VARCHAR(33), 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "named thing" (id), 
	FOREIGN KEY(object) REFERENCES "named thing" (id)
);
CREATE TABLE "entity to phenotypic feature association" (
	"FDA_approval_status" VARCHAR(33), 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "named thing" (id), 
	FOREIGN KEY(object) REFERENCES "named thing" (id)
);
CREATE TABLE "sequence association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "named thing" (id), 
	FOREIGN KEY(object) REFERENCES "named thing" (id)
);
CREATE TABLE "gene to gene product relationship" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	object_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES gene (id), 
	FOREIGN KEY(object_id) REFERENCES "gene product mixin" (id)
);
CREATE TABLE "gene regulatory relationship" (
	predicate TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	subject_id TEXT NOT NULL, 
	object_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject_id) REFERENCES "gene or gene product" (id), 
	FOREIGN KEY(object_id) REFERENCES "gene or gene product" (id)
);
CREATE TABLE "anatomical entity to anatomical entity association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "anatomical entity" (id), 
	FOREIGN KEY(object) REFERENCES "anatomical entity" (id)
);
CREATE TABLE "anatomical entity to anatomical entity part of association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "anatomical entity" (id), 
	FOREIGN KEY(object) REFERENCES "anatomical entity" (id)
);
CREATE TABLE "anatomical entity to anatomical entity ontogenic association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "anatomical entity" (id), 
	FOREIGN KEY(object) REFERENCES "anatomical entity" (id)
);
CREATE TABLE "organism taxon to organism taxon association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "organism taxon" (id), 
	FOREIGN KEY(object) REFERENCES "organism taxon" (id)
);
CREATE TABLE "organism taxon to organism taxon specialization" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "organism taxon" (id), 
	FOREIGN KEY(object) REFERENCES "organism taxon" (id)
);
CREATE TABLE "organism taxon to organism taxon interaction" (
	associated_environmental_context TEXT, 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "organism taxon" (id), 
	FOREIGN KEY(object) REFERENCES "organism taxon" (id)
);
CREATE TABLE "organism taxon to environment association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "organism taxon" (id), 
	FOREIGN KEY(object) REFERENCES "named thing" (id)
);
CREATE TABLE entity_category (
	entity_id TEXT, 
	category TEXT, 
	PRIMARY KEY (entity_id, category), 
	FOREIGN KEY(entity_id) REFERENCES entity (id)
);
CREATE TABLE "named thing_provided_by" (
	"named thing_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("named thing_id", provided_by), 
	FOREIGN KEY("named thing_id") REFERENCES "named thing" (id)
);
CREATE TABLE "named thing_category" (
	"named thing_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("named thing_id", category), 
	FOREIGN KEY("named thing_id") REFERENCES "named thing" (id)
);
CREATE TABLE "organism taxon_provided_by" (
	"organism taxon_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("organism taxon_id", provided_by), 
	FOREIGN KEY("organism taxon_id") REFERENCES "organism taxon" (id)
);
CREATE TABLE "organism taxon_category" (
	"organism taxon_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("organism taxon_id", category), 
	FOREIGN KEY("organism taxon_id") REFERENCES "organism taxon" (id)
);
CREATE TABLE event_provided_by (
	event_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (event_id, provided_by), 
	FOREIGN KEY(event_id) REFERENCES event (id)
);
CREATE TABLE event_category (
	event_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (event_id, category), 
	FOREIGN KEY(event_id) REFERENCES event (id)
);
CREATE TABLE "administrative entity_provided_by" (
	"administrative entity_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("administrative entity_id", provided_by), 
	FOREIGN KEY("administrative entity_id") REFERENCES "administrative entity" (id)
);
CREATE TABLE "administrative entity_category" (
	"administrative entity_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("administrative entity_id", category), 
	FOREIGN KEY("administrative entity_id") REFERENCES "administrative entity" (id)
);
CREATE TABLE agent_affiliation (
	agent_id TEXT, 
	affiliation TEXT, 
	PRIMARY KEY (agent_id, affiliation), 
	FOREIGN KEY(agent_id) REFERENCES agent (id)
);
CREATE TABLE agent_provided_by (
	agent_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (agent_id, provided_by), 
	FOREIGN KEY(agent_id) REFERENCES agent (id)
);
CREATE TABLE agent_category (
	agent_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (agent_id, category), 
	FOREIGN KEY(agent_id) REFERENCES agent (id)
);
CREATE TABLE "information content entity_provided_by" (
	"information content entity_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("information content entity_id", provided_by), 
	FOREIGN KEY("information content entity_id") REFERENCES "information content entity" (id)
);
CREATE TABLE "information content entity_category" (
	"information content entity_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("information content entity_id", category), 
	FOREIGN KEY("information content entity_id") REFERENCES "information content entity" (id)
);
CREATE TABLE dataset_provided_by (
	dataset_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (dataset_id, provided_by), 
	FOREIGN KEY(dataset_id) REFERENCES dataset (id)
);
CREATE TABLE dataset_category (
	dataset_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (dataset_id, category), 
	FOREIGN KEY(dataset_id) REFERENCES dataset (id)
);
CREATE TABLE "dataset distribution_provided_by" (
	"dataset distribution_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("dataset distribution_id", provided_by), 
	FOREIGN KEY("dataset distribution_id") REFERENCES "dataset distribution" (id)
);
CREATE TABLE "dataset distribution_category" (
	"dataset distribution_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("dataset distribution_id", category), 
	FOREIGN KEY("dataset distribution_id") REFERENCES "dataset distribution" (id)
);
CREATE TABLE "dataset summary_provided_by" (
	"dataset summary_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("dataset summary_id", provided_by), 
	FOREIGN KEY("dataset summary_id") REFERENCES "dataset summary" (id)
);
CREATE TABLE "dataset summary_category" (
	"dataset summary_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("dataset summary_id", category), 
	FOREIGN KEY("dataset summary_id") REFERENCES "dataset summary" (id)
);
CREATE TABLE "confidence level_provided_by" (
	"confidence level_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("confidence level_id", provided_by), 
	FOREIGN KEY("confidence level_id") REFERENCES "confidence level" (id)
);
CREATE TABLE "confidence level_category" (
	"confidence level_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("confidence level_id", category), 
	FOREIGN KEY("confidence level_id") REFERENCES "confidence level" (id)
);
CREATE TABLE "evidence type_provided_by" (
	"evidence type_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("evidence type_id", provided_by), 
	FOREIGN KEY("evidence type_id") REFERENCES "evidence type" (id)
);
CREATE TABLE "evidence type_category" (
	"evidence type_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("evidence type_id", category), 
	FOREIGN KEY("evidence type_id") REFERENCES "evidence type" (id)
);
CREATE TABLE "information resource_provided_by" (
	"information resource_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("information resource_id", provided_by), 
	FOREIGN KEY("information resource_id") REFERENCES "information resource" (id)
);
CREATE TABLE "information resource_category" (
	"information resource_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("information resource_id", category), 
	FOREIGN KEY("information resource_id") REFERENCES "information resource" (id)
);
CREATE TABLE publication_author (
	publication_id TEXT, 
	author TEXT, 
	PRIMARY KEY (publication_id, author), 
	FOREIGN KEY(publication_id) REFERENCES publication (id)
);
CREATE TABLE publication_pages (
	publication_id TEXT, 
	pages TEXT, 
	PRIMARY KEY (publication_id, pages), 
	FOREIGN KEY(publication_id) REFERENCES publication (id)
);
CREATE TABLE publication_keywords (
	publication_id TEXT, 
	keywords TEXT, 
	PRIMARY KEY (publication_id, keywords), 
	FOREIGN KEY(publication_id) REFERENCES publication (id)
);
CREATE TABLE publication_mesh_terms (
	publication_id TEXT, 
	mesh_terms TEXT, 
	PRIMARY KEY (publication_id, mesh_terms), 
	FOREIGN KEY(publication_id) REFERENCES publication (id)
);
CREATE TABLE publication_xref (
	publication_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (publication_id, xref), 
	FOREIGN KEY(publication_id) REFERENCES publication (id)
);
CREATE TABLE publication_provided_by (
	publication_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (publication_id, provided_by), 
	FOREIGN KEY(publication_id) REFERENCES publication (id)
);
CREATE TABLE publication_category (
	publication_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (publication_id, category), 
	FOREIGN KEY(publication_id) REFERENCES publication (id)
);
CREATE TABLE book_author (
	book_id TEXT, 
	author TEXT, 
	PRIMARY KEY (book_id, author), 
	FOREIGN KEY(book_id) REFERENCES book (id)
);
CREATE TABLE book_pages (
	book_id TEXT, 
	pages TEXT, 
	PRIMARY KEY (book_id, pages), 
	FOREIGN KEY(book_id) REFERENCES book (id)
);
CREATE TABLE book_keywords (
	book_id TEXT, 
	keywords TEXT, 
	PRIMARY KEY (book_id, keywords), 
	FOREIGN KEY(book_id) REFERENCES book (id)
);
CREATE TABLE book_mesh_terms (
	book_id TEXT, 
	mesh_terms TEXT, 
	PRIMARY KEY (book_id, mesh_terms), 
	FOREIGN KEY(book_id) REFERENCES book (id)
);
CREATE TABLE book_xref (
	book_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (book_id, xref), 
	FOREIGN KEY(book_id) REFERENCES book (id)
);
CREATE TABLE book_provided_by (
	book_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (book_id, provided_by), 
	FOREIGN KEY(book_id) REFERENCES book (id)
);
CREATE TABLE book_category (
	book_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (book_id, category), 
	FOREIGN KEY(book_id) REFERENCES book (id)
);
CREATE TABLE "book chapter_author" (
	"book chapter_id" TEXT, 
	author TEXT, 
	PRIMARY KEY ("book chapter_id", author), 
	FOREIGN KEY("book chapter_id") REFERENCES "book chapter" (id)
);
CREATE TABLE "book chapter_pages" (
	"book chapter_id" TEXT, 
	pages TEXT, 
	PRIMARY KEY ("book chapter_id", pages), 
	FOREIGN KEY("book chapter_id") REFERENCES "book chapter" (id)
);
CREATE TABLE "book chapter_keywords" (
	"book chapter_id" TEXT, 
	keywords TEXT, 
	PRIMARY KEY ("book chapter_id", keywords), 
	FOREIGN KEY("book chapter_id") REFERENCES "book chapter" (id)
);
CREATE TABLE "book chapter_mesh_terms" (
	"book chapter_id" TEXT, 
	mesh_terms TEXT, 
	PRIMARY KEY ("book chapter_id", mesh_terms), 
	FOREIGN KEY("book chapter_id") REFERENCES "book chapter" (id)
);
CREATE TABLE "book chapter_xref" (
	"book chapter_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("book chapter_id", xref), 
	FOREIGN KEY("book chapter_id") REFERENCES "book chapter" (id)
);
CREATE TABLE "book chapter_provided_by" (
	"book chapter_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("book chapter_id", provided_by), 
	FOREIGN KEY("book chapter_id") REFERENCES "book chapter" (id)
);
CREATE TABLE "book chapter_category" (
	"book chapter_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("book chapter_id", category), 
	FOREIGN KEY("book chapter_id") REFERENCES "book chapter" (id)
);
CREATE TABLE serial_author (
	serial_id TEXT, 
	author TEXT, 
	PRIMARY KEY (serial_id, author), 
	FOREIGN KEY(serial_id) REFERENCES serial (id)
);
CREATE TABLE serial_pages (
	serial_id TEXT, 
	pages TEXT, 
	PRIMARY KEY (serial_id, pages), 
	FOREIGN KEY(serial_id) REFERENCES serial (id)
);
CREATE TABLE serial_keywords (
	serial_id TEXT, 
	keywords TEXT, 
	PRIMARY KEY (serial_id, keywords), 
	FOREIGN KEY(serial_id) REFERENCES serial (id)
);
CREATE TABLE serial_mesh_terms (
	serial_id TEXT, 
	mesh_terms TEXT, 
	PRIMARY KEY (serial_id, mesh_terms), 
	FOREIGN KEY(serial_id) REFERENCES serial (id)
);
CREATE TABLE serial_xref (
	serial_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (serial_id, xref), 
	FOREIGN KEY(serial_id) REFERENCES serial (id)
);
CREATE TABLE serial_provided_by (
	serial_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (serial_id, provided_by), 
	FOREIGN KEY(serial_id) REFERENCES serial (id)
);
CREATE TABLE serial_category (
	serial_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (serial_id, category), 
	FOREIGN KEY(serial_id) REFERENCES serial (id)
);
CREATE TABLE article_author (
	article_id TEXT, 
	author TEXT, 
	PRIMARY KEY (article_id, author), 
	FOREIGN KEY(article_id) REFERENCES article (id)
);
CREATE TABLE article_pages (
	article_id TEXT, 
	pages TEXT, 
	PRIMARY KEY (article_id, pages), 
	FOREIGN KEY(article_id) REFERENCES article (id)
);
CREATE TABLE article_keywords (
	article_id TEXT, 
	keywords TEXT, 
	PRIMARY KEY (article_id, keywords), 
	FOREIGN KEY(article_id) REFERENCES article (id)
);
CREATE TABLE article_mesh_terms (
	article_id TEXT, 
	mesh_terms TEXT, 
	PRIMARY KEY (article_id, mesh_terms), 
	FOREIGN KEY(article_id) REFERENCES article (id)
);
CREATE TABLE article_xref (
	article_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (article_id, xref), 
	FOREIGN KEY(article_id) REFERENCES article (id)
);
CREATE TABLE article_provided_by (
	article_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (article_id, provided_by), 
	FOREIGN KEY(article_id) REFERENCES article (id)
);
CREATE TABLE article_category (
	article_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (article_id, category), 
	FOREIGN KEY(article_id) REFERENCES article (id)
);
CREATE TABLE "physical entity_provided_by" (
	"physical entity_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("physical entity_id", provided_by), 
	FOREIGN KEY("physical entity_id") REFERENCES "physical entity" (id)
);
CREATE TABLE "physical entity_category" (
	"physical entity_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("physical entity_id", category), 
	FOREIGN KEY("physical entity_id") REFERENCES "physical entity" (id)
);
CREATE TABLE activity_provided_by (
	activity_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (activity_id, provided_by), 
	FOREIGN KEY(activity_id) REFERENCES activity (id)
);
CREATE TABLE activity_category (
	activity_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (activity_id, category), 
	FOREIGN KEY(activity_id) REFERENCES activity (id)
);
CREATE TABLE procedure_provided_by (
	procedure_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (procedure_id, provided_by), 
	FOREIGN KEY(procedure_id) REFERENCES procedure (id)
);
CREATE TABLE procedure_category (
	procedure_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (procedure_id, category), 
	FOREIGN KEY(procedure_id) REFERENCES procedure (id)
);
CREATE TABLE phenomenon_provided_by (
	phenomenon_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (phenomenon_id, provided_by), 
	FOREIGN KEY(phenomenon_id) REFERENCES phenomenon (id)
);
CREATE TABLE phenomenon_category (
	phenomenon_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (phenomenon_id, category), 
	FOREIGN KEY(phenomenon_id) REFERENCES phenomenon (id)
);
CREATE TABLE device_provided_by (
	device_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (device_id, provided_by), 
	FOREIGN KEY(device_id) REFERENCES device (id)
);
CREATE TABLE device_category (
	device_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (device_id, category), 
	FOREIGN KEY(device_id) REFERENCES device (id)
);
CREATE TABLE "study population_in_taxon" (
	"study population_id" TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY ("study population_id", in_taxon), 
	FOREIGN KEY("study population_id") REFERENCES "study population" (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE "study population_provided_by" (
	"study population_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("study population_id", provided_by), 
	FOREIGN KEY("study population_id") REFERENCES "study population" (id)
);
CREATE TABLE "study population_category" (
	"study population_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("study population_id", category), 
	FOREIGN KEY("study population_id") REFERENCES "study population" (id)
);
CREATE TABLE "material sample_provided_by" (
	"material sample_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("material sample_id", provided_by), 
	FOREIGN KEY("material sample_id") REFERENCES "material sample" (id)
);
CREATE TABLE "material sample_category" (
	"material sample_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("material sample_id", category), 
	FOREIGN KEY("material sample_id") REFERENCES "material sample" (id)
);
CREATE TABLE "planetary entity_provided_by" (
	"planetary entity_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("planetary entity_id", provided_by), 
	FOREIGN KEY("planetary entity_id") REFERENCES "planetary entity" (id)
);
CREATE TABLE "planetary entity_category" (
	"planetary entity_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("planetary entity_id", category), 
	FOREIGN KEY("planetary entity_id") REFERENCES "planetary entity" (id)
);
CREATE TABLE "environmental process_provided_by" (
	"environmental process_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("environmental process_id", provided_by), 
	FOREIGN KEY("environmental process_id") REFERENCES "environmental process" (id)
);
CREATE TABLE "environmental process_category" (
	"environmental process_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("environmental process_id", category), 
	FOREIGN KEY("environmental process_id") REFERENCES "environmental process" (id)
);
CREATE TABLE "environmental feature_provided_by" (
	"environmental feature_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("environmental feature_id", provided_by), 
	FOREIGN KEY("environmental feature_id") REFERENCES "environmental feature" (id)
);
CREATE TABLE "environmental feature_category" (
	"environmental feature_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("environmental feature_id", category), 
	FOREIGN KEY("environmental feature_id") REFERENCES "environmental feature" (id)
);
CREATE TABLE "geographic location_provided_by" (
	"geographic location_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("geographic location_id", provided_by), 
	FOREIGN KEY("geographic location_id") REFERENCES "geographic location" (id)
);
CREATE TABLE "geographic location_category" (
	"geographic location_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("geographic location_id", category), 
	FOREIGN KEY("geographic location_id") REFERENCES "geographic location" (id)
);
CREATE TABLE "geographic location at time_provided_by" (
	"geographic location at time_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("geographic location at time_id", provided_by), 
	FOREIGN KEY("geographic location at time_id") REFERENCES "geographic location at time" (id)
);
CREATE TABLE "geographic location at time_category" (
	"geographic location at time_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("geographic location at time_id", category), 
	FOREIGN KEY("geographic location at time_id") REFERENCES "geographic location at time" (id)
);
CREATE TABLE "biological entity_provided_by" (
	"biological entity_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("biological entity_id", provided_by), 
	FOREIGN KEY("biological entity_id") REFERENCES "biological entity" (id)
);
CREATE TABLE "biological entity_category" (
	"biological entity_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("biological entity_id", category), 
	FOREIGN KEY("biological entity_id") REFERENCES "biological entity" (id)
);
CREATE TABLE "thing with taxon_in_taxon" (
	"thing with taxon_id" TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY ("thing with taxon_id", in_taxon), 
	FOREIGN KEY("thing with taxon_id") REFERENCES "thing with taxon" (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE "genomic entity_in_taxon" (
	"genomic entity_id" TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY ("genomic entity_id", in_taxon), 
	FOREIGN KEY("genomic entity_id") REFERENCES "genomic entity" (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE "chemical entity_available_from" (
	"chemical entity_id" TEXT, 
	available_from VARCHAR(16), 
	PRIMARY KEY ("chemical entity_id", available_from), 
	FOREIGN KEY("chemical entity_id") REFERENCES "chemical entity" (id)
);
CREATE TABLE "chemical entity_provided_by" (
	"chemical entity_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("chemical entity_id", provided_by), 
	FOREIGN KEY("chemical entity_id") REFERENCES "chemical entity" (id)
);
CREATE TABLE "chemical entity_category" (
	"chemical entity_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("chemical entity_id", category), 
	FOREIGN KEY("chemical entity_id") REFERENCES "chemical entity" (id)
);
CREATE TABLE "biological process or activity_has_input" (
	"biological process or activity_id" TEXT, 
	has_input TEXT, 
	PRIMARY KEY ("biological process or activity_id", has_input), 
	FOREIGN KEY("biological process or activity_id") REFERENCES "biological process or activity" (id), 
	FOREIGN KEY(has_input) REFERENCES "biological process or activity" (id)
);
CREATE TABLE "biological process or activity_has_output" (
	"biological process or activity_id" TEXT, 
	has_output TEXT, 
	PRIMARY KEY ("biological process or activity_id", has_output), 
	FOREIGN KEY("biological process or activity_id") REFERENCES "biological process or activity" (id), 
	FOREIGN KEY(has_output) REFERENCES "biological process or activity" (id)
);
CREATE TABLE "biological process or activity_enabled_by" (
	"biological process or activity_id" TEXT, 
	enabled_by TEXT, 
	PRIMARY KEY ("biological process or activity_id", enabled_by), 
	FOREIGN KEY("biological process or activity_id") REFERENCES "biological process or activity" (id), 
	FOREIGN KEY(enabled_by) REFERENCES "physical entity" (id)
);
CREATE TABLE "biological process or activity_provided_by" (
	"biological process or activity_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("biological process or activity_id", provided_by), 
	FOREIGN KEY("biological process or activity_id") REFERENCES "biological process or activity" (id)
);
CREATE TABLE "biological process or activity_category" (
	"biological process or activity_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("biological process or activity_id", category), 
	FOREIGN KEY("biological process or activity_id") REFERENCES "biological process or activity" (id)
);
CREATE TABLE "molecular activity_enabled_by" (
	"molecular activity_id" TEXT, 
	enabled_by_id TEXT, 
	PRIMARY KEY ("molecular activity_id", enabled_by_id), 
	FOREIGN KEY("molecular activity_id") REFERENCES "molecular activity" (id), 
	FOREIGN KEY(enabled_by_id) REFERENCES "macromolecular machine mixin" (id)
);
CREATE TABLE "molecular activity_provided_by" (
	"molecular activity_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("molecular activity_id", provided_by), 
	FOREIGN KEY("molecular activity_id") REFERENCES "molecular activity" (id)
);
CREATE TABLE "molecular activity_category" (
	"molecular activity_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("molecular activity_id", category), 
	FOREIGN KEY("molecular activity_id") REFERENCES "molecular activity" (id)
);
CREATE TABLE "biological process_has_input" (
	"biological process_id" TEXT, 
	has_input TEXT, 
	PRIMARY KEY ("biological process_id", has_input), 
	FOREIGN KEY("biological process_id") REFERENCES "biological process" (id), 
	FOREIGN KEY(has_input) REFERENCES "biological process or activity" (id)
);
CREATE TABLE "biological process_has_output" (
	"biological process_id" TEXT, 
	has_output TEXT, 
	PRIMARY KEY ("biological process_id", has_output), 
	FOREIGN KEY("biological process_id") REFERENCES "biological process" (id), 
	FOREIGN KEY(has_output) REFERENCES "biological process or activity" (id)
);
CREATE TABLE "biological process_enabled_by" (
	"biological process_id" TEXT, 
	enabled_by TEXT, 
	PRIMARY KEY ("biological process_id", enabled_by), 
	FOREIGN KEY("biological process_id") REFERENCES "biological process" (id), 
	FOREIGN KEY(enabled_by) REFERENCES "physical entity" (id)
);
CREATE TABLE "biological process_provided_by" (
	"biological process_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("biological process_id", provided_by), 
	FOREIGN KEY("biological process_id") REFERENCES "biological process" (id)
);
CREATE TABLE "biological process_category" (
	"biological process_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("biological process_id", category), 
	FOREIGN KEY("biological process_id") REFERENCES "biological process" (id)
);
CREATE TABLE pathway_has_input (
	pathway_id TEXT, 
	has_input TEXT, 
	PRIMARY KEY (pathway_id, has_input), 
	FOREIGN KEY(pathway_id) REFERENCES pathway (id), 
	FOREIGN KEY(has_input) REFERENCES "biological process or activity" (id)
);
CREATE TABLE pathway_has_output (
	pathway_id TEXT, 
	has_output TEXT, 
	PRIMARY KEY (pathway_id, has_output), 
	FOREIGN KEY(pathway_id) REFERENCES pathway (id), 
	FOREIGN KEY(has_output) REFERENCES "biological process or activity" (id)
);
CREATE TABLE pathway_enabled_by (
	pathway_id TEXT, 
	enabled_by TEXT, 
	PRIMARY KEY (pathway_id, enabled_by), 
	FOREIGN KEY(pathway_id) REFERENCES pathway (id), 
	FOREIGN KEY(enabled_by) REFERENCES "physical entity" (id)
);
CREATE TABLE pathway_provided_by (
	pathway_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (pathway_id, provided_by), 
	FOREIGN KEY(pathway_id) REFERENCES pathway (id)
);
CREATE TABLE pathway_category (
	pathway_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (pathway_id, category), 
	FOREIGN KEY(pathway_id) REFERENCES pathway (id)
);
CREATE TABLE "physiological process_has_input" (
	"physiological process_id" TEXT, 
	has_input TEXT, 
	PRIMARY KEY ("physiological process_id", has_input), 
	FOREIGN KEY("physiological process_id") REFERENCES "physiological process" (id), 
	FOREIGN KEY(has_input) REFERENCES "biological process or activity" (id)
);
CREATE TABLE "physiological process_has_output" (
	"physiological process_id" TEXT, 
	has_output TEXT, 
	PRIMARY KEY ("physiological process_id", has_output), 
	FOREIGN KEY("physiological process_id") REFERENCES "physiological process" (id), 
	FOREIGN KEY(has_output) REFERENCES "biological process or activity" (id)
);
CREATE TABLE "physiological process_enabled_by" (
	"physiological process_id" TEXT, 
	enabled_by TEXT, 
	PRIMARY KEY ("physiological process_id", enabled_by), 
	FOREIGN KEY("physiological process_id") REFERENCES "physiological process" (id), 
	FOREIGN KEY(enabled_by) REFERENCES "physical entity" (id)
);
CREATE TABLE "physiological process_provided_by" (
	"physiological process_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("physiological process_id", provided_by), 
	FOREIGN KEY("physiological process_id") REFERENCES "physiological process" (id)
);
CREATE TABLE "physiological process_category" (
	"physiological process_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("physiological process_id", category), 
	FOREIGN KEY("physiological process_id") REFERENCES "physiological process" (id)
);
CREATE TABLE behavior_has_input (
	behavior_id TEXT, 
	has_input TEXT, 
	PRIMARY KEY (behavior_id, has_input), 
	FOREIGN KEY(behavior_id) REFERENCES behavior (id), 
	FOREIGN KEY(has_input) REFERENCES "biological process or activity" (id)
);
CREATE TABLE behavior_has_output (
	behavior_id TEXT, 
	has_output TEXT, 
	PRIMARY KEY (behavior_id, has_output), 
	FOREIGN KEY(behavior_id) REFERENCES behavior (id), 
	FOREIGN KEY(has_output) REFERENCES "biological process or activity" (id)
);
CREATE TABLE behavior_enabled_by (
	behavior_id TEXT, 
	enabled_by TEXT, 
	PRIMARY KEY (behavior_id, enabled_by), 
	FOREIGN KEY(behavior_id) REFERENCES behavior (id), 
	FOREIGN KEY(enabled_by) REFERENCES "physical entity" (id)
);
CREATE TABLE behavior_provided_by (
	behavior_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (behavior_id, provided_by), 
	FOREIGN KEY(behavior_id) REFERENCES behavior (id)
);
CREATE TABLE behavior_category (
	behavior_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (behavior_id, category), 
	FOREIGN KEY(behavior_id) REFERENCES behavior (id)
);
CREATE TABLE "organismal entity_provided_by" (
	"organismal entity_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("organismal entity_id", provided_by), 
	FOREIGN KEY("organismal entity_id") REFERENCES "organismal entity" (id)
);
CREATE TABLE "organismal entity_category" (
	"organismal entity_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("organismal entity_id", category), 
	FOREIGN KEY("organismal entity_id") REFERENCES "organismal entity" (id)
);
CREATE TABLE "life stage_in_taxon" (
	"life stage_id" TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY ("life stage_id", in_taxon), 
	FOREIGN KEY("life stage_id") REFERENCES "life stage" (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE "life stage_provided_by" (
	"life stage_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("life stage_id", provided_by), 
	FOREIGN KEY("life stage_id") REFERENCES "life stage" (id)
);
CREATE TABLE "life stage_category" (
	"life stage_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("life stage_id", category), 
	FOREIGN KEY("life stage_id") REFERENCES "life stage" (id)
);
CREATE TABLE "individual organism_in_taxon" (
	"individual organism_id" TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY ("individual organism_id", in_taxon), 
	FOREIGN KEY("individual organism_id") REFERENCES "individual organism" (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE "individual organism_provided_by" (
	"individual organism_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("individual organism_id", provided_by), 
	FOREIGN KEY("individual organism_id") REFERENCES "individual organism" (id)
);
CREATE TABLE "individual organism_category" (
	"individual organism_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("individual organism_id", category), 
	FOREIGN KEY("individual organism_id") REFERENCES "individual organism" (id)
);
CREATE TABLE "population of individual organisms_in_taxon" (
	"population of individual organisms_id" TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY ("population of individual organisms_id", in_taxon), 
	FOREIGN KEY("population of individual organisms_id") REFERENCES "population of individual organisms" (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE "population of individual organisms_provided_by" (
	"population of individual organisms_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("population of individual organisms_id", provided_by), 
	FOREIGN KEY("population of individual organisms_id") REFERENCES "population of individual organisms" (id)
);
CREATE TABLE "population of individual organisms_category" (
	"population of individual organisms_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("population of individual organisms_id", category), 
	FOREIGN KEY("population of individual organisms_id") REFERENCES "population of individual organisms" (id)
);
CREATE TABLE "disease or phenotypic feature_in_taxon" (
	"disease or phenotypic feature_id" TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY ("disease or phenotypic feature_id", in_taxon), 
	FOREIGN KEY("disease or phenotypic feature_id") REFERENCES "disease or phenotypic feature" (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE "disease or phenotypic feature_provided_by" (
	"disease or phenotypic feature_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("disease or phenotypic feature_id", provided_by), 
	FOREIGN KEY("disease or phenotypic feature_id") REFERENCES "disease or phenotypic feature" (id)
);
CREATE TABLE "disease or phenotypic feature_category" (
	"disease or phenotypic feature_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("disease or phenotypic feature_id", category), 
	FOREIGN KEY("disease or phenotypic feature_id") REFERENCES "disease or phenotypic feature" (id)
);
CREATE TABLE disease_in_taxon (
	disease_id TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY (disease_id, in_taxon), 
	FOREIGN KEY(disease_id) REFERENCES disease (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE disease_provided_by (
	disease_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (disease_id, provided_by), 
	FOREIGN KEY(disease_id) REFERENCES disease (id)
);
CREATE TABLE disease_category (
	disease_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (disease_id, category), 
	FOREIGN KEY(disease_id) REFERENCES disease (id)
);
CREATE TABLE "phenotypic feature_in_taxon" (
	"phenotypic feature_id" TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY ("phenotypic feature_id", in_taxon), 
	FOREIGN KEY("phenotypic feature_id") REFERENCES "phenotypic feature" (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE "phenotypic feature_provided_by" (
	"phenotypic feature_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("phenotypic feature_id", provided_by), 
	FOREIGN KEY("phenotypic feature_id") REFERENCES "phenotypic feature" (id)
);
CREATE TABLE "phenotypic feature_category" (
	"phenotypic feature_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("phenotypic feature_id", category), 
	FOREIGN KEY("phenotypic feature_id") REFERENCES "phenotypic feature" (id)
);
CREATE TABLE "behavioral feature_in_taxon" (
	"behavioral feature_id" TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY ("behavioral feature_id", in_taxon), 
	FOREIGN KEY("behavioral feature_id") REFERENCES "behavioral feature" (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE "behavioral feature_provided_by" (
	"behavioral feature_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("behavioral feature_id", provided_by), 
	FOREIGN KEY("behavioral feature_id") REFERENCES "behavioral feature" (id)
);
CREATE TABLE "behavioral feature_category" (
	"behavioral feature_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("behavioral feature_id", category), 
	FOREIGN KEY("behavioral feature_id") REFERENCES "behavioral feature" (id)
);
CREATE TABLE "anatomical entity_in_taxon" (
	"anatomical entity_id" TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY ("anatomical entity_id", in_taxon), 
	FOREIGN KEY("anatomical entity_id") REFERENCES "anatomical entity" (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE "anatomical entity_provided_by" (
	"anatomical entity_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("anatomical entity_id", provided_by), 
	FOREIGN KEY("anatomical entity_id") REFERENCES "anatomical entity" (id)
);
CREATE TABLE "anatomical entity_category" (
	"anatomical entity_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("anatomical entity_id", category), 
	FOREIGN KEY("anatomical entity_id") REFERENCES "anatomical entity" (id)
);
CREATE TABLE "cellular component_in_taxon" (
	"cellular component_id" TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY ("cellular component_id", in_taxon), 
	FOREIGN KEY("cellular component_id") REFERENCES "cellular component" (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE "cellular component_provided_by" (
	"cellular component_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("cellular component_id", provided_by), 
	FOREIGN KEY("cellular component_id") REFERENCES "cellular component" (id)
);
CREATE TABLE "cellular component_category" (
	"cellular component_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("cellular component_id", category), 
	FOREIGN KEY("cellular component_id") REFERENCES "cellular component" (id)
);
CREATE TABLE cell_in_taxon (
	cell_id TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY (cell_id, in_taxon), 
	FOREIGN KEY(cell_id) REFERENCES cell (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE cell_provided_by (
	cell_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (cell_id, provided_by), 
	FOREIGN KEY(cell_id) REFERENCES cell (id)
);
CREATE TABLE cell_category (
	cell_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (cell_id, category), 
	FOREIGN KEY(cell_id) REFERENCES cell (id)
);
CREATE TABLE "cell line_provided_by" (
	"cell line_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("cell line_id", provided_by), 
	FOREIGN KEY("cell line_id") REFERENCES "cell line" (id)
);
CREATE TABLE "cell line_category" (
	"cell line_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("cell line_id", category), 
	FOREIGN KEY("cell line_id") REFERENCES "cell line" (id)
);
CREATE TABLE "gross anatomical structure_in_taxon" (
	"gross anatomical structure_id" TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY ("gross anatomical structure_id", in_taxon), 
	FOREIGN KEY("gross anatomical structure_id") REFERENCES "gross anatomical structure" (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE "gross anatomical structure_provided_by" (
	"gross anatomical structure_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("gross anatomical structure_id", provided_by), 
	FOREIGN KEY("gross anatomical structure_id") REFERENCES "gross anatomical structure" (id)
);
CREATE TABLE "gross anatomical structure_category" (
	"gross anatomical structure_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("gross anatomical structure_id", category), 
	FOREIGN KEY("gross anatomical structure_id") REFERENCES "gross anatomical structure" (id)
);
CREATE TABLE gene_synonym (
	gene_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (gene_id, synonym), 
	FOREIGN KEY(gene_id) REFERENCES gene (id)
);
CREATE TABLE gene_xref (
	gene_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (gene_id, xref), 
	FOREIGN KEY(gene_id) REFERENCES gene (id)
);
CREATE TABLE gene_provided_by (
	gene_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (gene_id, provided_by), 
	FOREIGN KEY(gene_id) REFERENCES gene (id)
);
CREATE TABLE gene_category (
	gene_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (gene_id, category), 
	FOREIGN KEY(gene_id) REFERENCES gene (id)
);
CREATE TABLE gene_in_taxon (
	gene_id TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY (gene_id, in_taxon), 
	FOREIGN KEY(gene_id) REFERENCES gene (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE "gene product mixin_synonym" (
	"gene product mixin_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("gene product mixin_id", synonym), 
	FOREIGN KEY("gene product mixin_id") REFERENCES "gene product mixin" (id)
);
CREATE TABLE "gene product mixin_xref" (
	"gene product mixin_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("gene product mixin_id", xref), 
	FOREIGN KEY("gene product mixin_id") REFERENCES "gene product mixin" (id)
);
CREATE TABLE "gene product isoform mixin_synonym" (
	"gene product isoform mixin_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("gene product isoform mixin_id", synonym), 
	FOREIGN KEY("gene product isoform mixin_id") REFERENCES "gene product isoform mixin" (id)
);
CREATE TABLE "gene product isoform mixin_xref" (
	"gene product isoform mixin_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("gene product isoform mixin_id", xref), 
	FOREIGN KEY("gene product isoform mixin_id") REFERENCES "gene product isoform mixin" (id)
);
CREATE TABLE genome_provided_by (
	genome_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (genome_id, provided_by), 
	FOREIGN KEY(genome_id) REFERENCES genome (id)
);
CREATE TABLE genome_category (
	genome_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (genome_id, category), 
	FOREIGN KEY(genome_id) REFERENCES genome (id)
);
CREATE TABLE genome_in_taxon (
	genome_id TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY (genome_id, in_taxon), 
	FOREIGN KEY(genome_id) REFERENCES genome (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE polypeptide_in_taxon (
	polypeptide_id TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY (polypeptide_id, in_taxon), 
	FOREIGN KEY(polypeptide_id) REFERENCES polypeptide (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE polypeptide_provided_by (
	polypeptide_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (polypeptide_id, provided_by), 
	FOREIGN KEY(polypeptide_id) REFERENCES polypeptide (id)
);
CREATE TABLE polypeptide_category (
	polypeptide_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (polypeptide_id, category), 
	FOREIGN KEY(polypeptide_id) REFERENCES polypeptide (id)
);
CREATE TABLE protein_synonym (
	protein_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (protein_id, synonym), 
	FOREIGN KEY(protein_id) REFERENCES protein (id)
);
CREATE TABLE protein_xref (
	protein_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (protein_id, xref), 
	FOREIGN KEY(protein_id) REFERENCES protein (id)
);
CREATE TABLE protein_in_taxon (
	protein_id TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY (protein_id, in_taxon), 
	FOREIGN KEY(protein_id) REFERENCES protein (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE protein_provided_by (
	protein_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (protein_id, provided_by), 
	FOREIGN KEY(protein_id) REFERENCES protein (id)
);
CREATE TABLE protein_category (
	protein_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (protein_id, category), 
	FOREIGN KEY(protein_id) REFERENCES protein (id)
);
CREATE TABLE "protein isoform_synonym" (
	"protein isoform_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("protein isoform_id", synonym), 
	FOREIGN KEY("protein isoform_id") REFERENCES "protein isoform" (id)
);
CREATE TABLE "protein isoform_xref" (
	"protein isoform_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("protein isoform_id", xref), 
	FOREIGN KEY("protein isoform_id") REFERENCES "protein isoform" (id)
);
CREATE TABLE "protein isoform_in_taxon" (
	"protein isoform_id" TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY ("protein isoform_id", in_taxon), 
	FOREIGN KEY("protein isoform_id") REFERENCES "protein isoform" (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE "protein isoform_provided_by" (
	"protein isoform_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("protein isoform_id", provided_by), 
	FOREIGN KEY("protein isoform_id") REFERENCES "protein isoform" (id)
);
CREATE TABLE "protein isoform_category" (
	"protein isoform_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("protein isoform_id", category), 
	FOREIGN KEY("protein isoform_id") REFERENCES "protein isoform" (id)
);
CREATE TABLE "protein domain_has_gene_or_gene_product" (
	"protein domain_id" TEXT, 
	has_gene_or_gene_product TEXT, 
	PRIMARY KEY ("protein domain_id", has_gene_or_gene_product), 
	FOREIGN KEY("protein domain_id") REFERENCES "protein domain" (id), 
	FOREIGN KEY(has_gene_or_gene_product) REFERENCES gene (id)
);
CREATE TABLE "protein domain_provided_by" (
	"protein domain_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("protein domain_id", provided_by), 
	FOREIGN KEY("protein domain_id") REFERENCES "protein domain" (id)
);
CREATE TABLE "protein domain_category" (
	"protein domain_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("protein domain_id", category), 
	FOREIGN KEY("protein domain_id") REFERENCES "protein domain" (id)
);
CREATE TABLE "protein family_has_gene_or_gene_product" (
	"protein family_id" TEXT, 
	has_gene_or_gene_product TEXT, 
	PRIMARY KEY ("protein family_id", has_gene_or_gene_product), 
	FOREIGN KEY("protein family_id") REFERENCES "protein family" (id), 
	FOREIGN KEY(has_gene_or_gene_product) REFERENCES gene (id)
);
CREATE TABLE "protein family_provided_by" (
	"protein family_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("protein family_id", provided_by), 
	FOREIGN KEY("protein family_id") REFERENCES "protein family" (id)
);
CREATE TABLE "protein family_category" (
	"protein family_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("protein family_id", category), 
	FOREIGN KEY("protein family_id") REFERENCES "protein family" (id)
);
CREATE TABLE "nucleic acid sequence motif_provided_by" (
	"nucleic acid sequence motif_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("nucleic acid sequence motif_id", provided_by), 
	FOREIGN KEY("nucleic acid sequence motif_id") REFERENCES "nucleic acid sequence motif" (id)
);
CREATE TABLE "nucleic acid sequence motif_category" (
	"nucleic acid sequence motif_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("nucleic acid sequence motif_id", category), 
	FOREIGN KEY("nucleic acid sequence motif_id") REFERENCES "nucleic acid sequence motif" (id)
);
CREATE TABLE "gene grouping mixin_has_gene_or_gene_product" (
	"gene grouping mixin_id" TEXT, 
	has_gene_or_gene_product TEXT, 
	PRIMARY KEY ("gene grouping mixin_id", has_gene_or_gene_product), 
	FOREIGN KEY("gene grouping mixin_id") REFERENCES "gene grouping mixin" (id), 
	FOREIGN KEY(has_gene_or_gene_product) REFERENCES gene (id)
);
CREATE TABLE "gene family_has_gene_or_gene_product" (
	"gene family_id" TEXT, 
	has_gene_or_gene_product TEXT, 
	PRIMARY KEY ("gene family_id", has_gene_or_gene_product), 
	FOREIGN KEY("gene family_id") REFERENCES "gene family" (id), 
	FOREIGN KEY(has_gene_or_gene_product) REFERENCES gene (id)
);
CREATE TABLE "gene family_provided_by" (
	"gene family_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("gene family_id", provided_by), 
	FOREIGN KEY("gene family_id") REFERENCES "gene family" (id)
);
CREATE TABLE "gene family_category" (
	"gene family_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("gene family_id", category), 
	FOREIGN KEY("gene family_id") REFERENCES "gene family" (id)
);
CREATE TABLE haplotype_provided_by (
	haplotype_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (haplotype_id, provided_by), 
	FOREIGN KEY(haplotype_id) REFERENCES haplotype (id)
);
CREATE TABLE haplotype_category (
	haplotype_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (haplotype_id, category), 
	FOREIGN KEY(haplotype_id) REFERENCES haplotype (id)
);
CREATE TABLE haplotype_in_taxon (
	haplotype_id TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY (haplotype_id, in_taxon), 
	FOREIGN KEY(haplotype_id) REFERENCES haplotype (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE "sequence variant_has_gene" (
	"sequence variant_id" TEXT, 
	has_gene TEXT, 
	PRIMARY KEY ("sequence variant_id", has_gene), 
	FOREIGN KEY("sequence variant_id") REFERENCES "sequence variant" (id), 
	FOREIGN KEY(has_gene) REFERENCES gene (id)
);
CREATE TABLE "sequence variant_provided_by" (
	"sequence variant_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("sequence variant_id", provided_by), 
	FOREIGN KEY("sequence variant_id") REFERENCES "sequence variant" (id)
);
CREATE TABLE "sequence variant_category" (
	"sequence variant_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("sequence variant_id", category), 
	FOREIGN KEY("sequence variant_id") REFERENCES "sequence variant" (id)
);
CREATE TABLE "sequence variant_in_taxon" (
	"sequence variant_id" TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY ("sequence variant_id", in_taxon), 
	FOREIGN KEY("sequence variant_id") REFERENCES "sequence variant" (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE snv_has_gene (
	snv_id TEXT, 
	has_gene TEXT, 
	PRIMARY KEY (snv_id, has_gene), 
	FOREIGN KEY(snv_id) REFERENCES snv (id), 
	FOREIGN KEY(has_gene) REFERENCES gene (id)
);
CREATE TABLE snv_provided_by (
	snv_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (snv_id, provided_by), 
	FOREIGN KEY(snv_id) REFERENCES snv (id)
);
CREATE TABLE snv_category (
	snv_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (snv_id, category), 
	FOREIGN KEY(snv_id) REFERENCES snv (id)
);
CREATE TABLE snv_in_taxon (
	snv_id TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY (snv_id, in_taxon), 
	FOREIGN KEY(snv_id) REFERENCES snv (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE "reagent targeted gene_provided_by" (
	"reagent targeted gene_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("reagent targeted gene_id", provided_by), 
	FOREIGN KEY("reagent targeted gene_id") REFERENCES "reagent targeted gene" (id)
);
CREATE TABLE "reagent targeted gene_category" (
	"reagent targeted gene_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("reagent targeted gene_id", category), 
	FOREIGN KEY("reagent targeted gene_id") REFERENCES "reagent targeted gene" (id)
);
CREATE TABLE "reagent targeted gene_in_taxon" (
	"reagent targeted gene_id" TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY ("reagent targeted gene_id", in_taxon), 
	FOREIGN KEY("reagent targeted gene_id") REFERENCES "reagent targeted gene" (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE "clinical entity_provided_by" (
	"clinical entity_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("clinical entity_id", provided_by), 
	FOREIGN KEY("clinical entity_id") REFERENCES "clinical entity" (id)
);
CREATE TABLE "clinical entity_category" (
	"clinical entity_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("clinical entity_id", category), 
	FOREIGN KEY("clinical entity_id") REFERENCES "clinical entity" (id)
);
CREATE TABLE "clinical trial_provided_by" (
	"clinical trial_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("clinical trial_id", provided_by), 
	FOREIGN KEY("clinical trial_id") REFERENCES "clinical trial" (id)
);
CREATE TABLE "clinical trial_category" (
	"clinical trial_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("clinical trial_id", category), 
	FOREIGN KEY("clinical trial_id") REFERENCES "clinical trial" (id)
);
CREATE TABLE "clinical intervention_provided_by" (
	"clinical intervention_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("clinical intervention_id", provided_by), 
	FOREIGN KEY("clinical intervention_id") REFERENCES "clinical intervention" (id)
);
CREATE TABLE "clinical intervention_category" (
	"clinical intervention_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("clinical intervention_id", category), 
	FOREIGN KEY("clinical intervention_id") REFERENCES "clinical intervention" (id)
);
CREATE TABLE "clinical finding_in_taxon" (
	"clinical finding_id" TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY ("clinical finding_id", in_taxon), 
	FOREIGN KEY("clinical finding_id") REFERENCES "clinical finding" (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE "clinical finding_provided_by" (
	"clinical finding_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("clinical finding_id", provided_by), 
	FOREIGN KEY("clinical finding_id") REFERENCES "clinical finding" (id)
);
CREATE TABLE "clinical finding_category" (
	"clinical finding_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("clinical finding_id", category), 
	FOREIGN KEY("clinical finding_id") REFERENCES "clinical finding" (id)
);
CREATE TABLE hospitalization_provided_by (
	hospitalization_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (hospitalization_id, provided_by), 
	FOREIGN KEY(hospitalization_id) REFERENCES hospitalization (id)
);
CREATE TABLE hospitalization_category (
	hospitalization_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (hospitalization_id, category), 
	FOREIGN KEY(hospitalization_id) REFERENCES hospitalization (id)
);
CREATE TABLE case_in_taxon (
	case_id TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY (case_id, in_taxon), 
	FOREIGN KEY(case_id) REFERENCES "case" (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE case_provided_by (
	case_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (case_id, provided_by), 
	FOREIGN KEY(case_id) REFERENCES "case" (id)
);
CREATE TABLE case_category (
	case_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (case_id, category), 
	FOREIGN KEY(case_id) REFERENCES "case" (id)
);
CREATE TABLE cohort_in_taxon (
	cohort_id TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY (cohort_id, in_taxon), 
	FOREIGN KEY(cohort_id) REFERENCES cohort (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE cohort_provided_by (
	cohort_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (cohort_id, provided_by), 
	FOREIGN KEY(cohort_id) REFERENCES cohort (id)
);
CREATE TABLE cohort_category (
	cohort_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (cohort_id, category), 
	FOREIGN KEY(cohort_id) REFERENCES cohort (id)
);
CREATE TABLE "genomic background exposure_has_gene_or_gene_product" (
	"genomic background exposure_id" TEXT, 
	has_gene_or_gene_product TEXT, 
	PRIMARY KEY ("genomic background exposure_id", has_gene_or_gene_product), 
	FOREIGN KEY("genomic background exposure_id") REFERENCES "genomic background exposure" (id), 
	FOREIGN KEY(has_gene_or_gene_product) REFERENCES gene (id)
);
CREATE TABLE "genomic background exposure_in_taxon" (
	"genomic background exposure_id" TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY ("genomic background exposure_id", in_taxon), 
	FOREIGN KEY("genomic background exposure_id") REFERENCES "genomic background exposure" (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE "pathological process_has_input" (
	"pathological process_id" TEXT, 
	has_input TEXT, 
	PRIMARY KEY ("pathological process_id", has_input), 
	FOREIGN KEY("pathological process_id") REFERENCES "pathological process" (id), 
	FOREIGN KEY(has_input) REFERENCES "biological process or activity" (id)
);
CREATE TABLE "pathological process_has_output" (
	"pathological process_id" TEXT, 
	has_output TEXT, 
	PRIMARY KEY ("pathological process_id", has_output), 
	FOREIGN KEY("pathological process_id") REFERENCES "pathological process" (id), 
	FOREIGN KEY(has_output) REFERENCES "biological process or activity" (id)
);
CREATE TABLE "pathological process_enabled_by" (
	"pathological process_id" TEXT, 
	enabled_by TEXT, 
	PRIMARY KEY ("pathological process_id", enabled_by), 
	FOREIGN KEY("pathological process_id") REFERENCES "pathological process" (id), 
	FOREIGN KEY(enabled_by) REFERENCES "physical entity" (id)
);
CREATE TABLE "pathological process_provided_by" (
	"pathological process_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("pathological process_id", provided_by), 
	FOREIGN KEY("pathological process_id") REFERENCES "pathological process" (id)
);
CREATE TABLE "pathological process_category" (
	"pathological process_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("pathological process_id", category), 
	FOREIGN KEY("pathological process_id") REFERENCES "pathological process" (id)
);
CREATE TABLE "pathological anatomical structure_in_taxon" (
	"pathological anatomical structure_id" TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY ("pathological anatomical structure_id", in_taxon), 
	FOREIGN KEY("pathological anatomical structure_id") REFERENCES "pathological anatomical structure" (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE "pathological anatomical structure_provided_by" (
	"pathological anatomical structure_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("pathological anatomical structure_id", provided_by), 
	FOREIGN KEY("pathological anatomical structure_id") REFERENCES "pathological anatomical structure" (id)
);
CREATE TABLE "pathological anatomical structure_category" (
	"pathological anatomical structure_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("pathological anatomical structure_id", category), 
	FOREIGN KEY("pathological anatomical structure_id") REFERENCES "pathological anatomical structure" (id)
);
CREATE TABLE "chemical exposure_has_quantitative_value" (
	"chemical exposure_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("chemical exposure_id", has_quantitative_value_id), 
	FOREIGN KEY("chemical exposure_id") REFERENCES "chemical exposure" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "drug exposure_has_quantitative_value" (
	"drug exposure_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("drug exposure_id", has_quantitative_value_id), 
	FOREIGN KEY("drug exposure_id") REFERENCES "drug exposure" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "drug to gene interaction exposure_has_gene_or_gene_product" (
	"drug to gene interaction exposure_id" TEXT, 
	has_gene_or_gene_product TEXT, 
	PRIMARY KEY ("drug to gene interaction exposure_id", has_gene_or_gene_product), 
	FOREIGN KEY("drug to gene interaction exposure_id") REFERENCES "drug to gene interaction exposure" (id), 
	FOREIGN KEY(has_gene_or_gene_product) REFERENCES gene (id)
);
CREATE TABLE "drug to gene interaction exposure_has_quantitative_value" (
	"drug to gene interaction exposure_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("drug to gene interaction exposure_id", has_quantitative_value_id), 
	FOREIGN KEY("drug to gene interaction exposure_id") REFERENCES "drug to gene interaction exposure" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE treatment_has_device (
	treatment_id TEXT, 
	has_device TEXT, 
	PRIMARY KEY (treatment_id, has_device), 
	FOREIGN KEY(treatment_id) REFERENCES treatment (id), 
	FOREIGN KEY(has_device) REFERENCES device (id)
);
CREATE TABLE treatment_has_procedure (
	treatment_id TEXT, 
	has_procedure TEXT, 
	PRIMARY KEY (treatment_id, has_procedure), 
	FOREIGN KEY(treatment_id) REFERENCES treatment (id), 
	FOREIGN KEY(has_procedure) REFERENCES procedure (id)
);
CREATE TABLE treatment_provided_by (
	treatment_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (treatment_id, provided_by), 
	FOREIGN KEY(treatment_id) REFERENCES treatment (id)
);
CREATE TABLE treatment_category (
	treatment_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (treatment_id, category), 
	FOREIGN KEY(treatment_id) REFERENCES treatment (id)
);
CREATE TABLE "molecular mixture" (
	is_supplement TEXT, 
	"highest_FDA_approval_status" TEXT, 
	drug_regulatory_status_world_wide TEXT, 
	trade_name TEXT, 
	max_tolerated_dose TEXT, 
	is_toxic BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(is_supplement) REFERENCES "chemical mixture" (id), 
	FOREIGN KEY(trade_name) REFERENCES "chemical entity" (id)
);
CREATE TABLE "complex molecular mixture" (
	is_supplement TEXT, 
	"highest_FDA_approval_status" TEXT, 
	drug_regulatory_status_world_wide TEXT, 
	trade_name TEXT, 
	max_tolerated_dose TEXT, 
	is_toxic BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(is_supplement) REFERENCES "chemical mixture" (id), 
	FOREIGN KEY(trade_name) REFERENCES "chemical entity" (id)
);
CREATE TABLE "processed material" (
	is_supplement TEXT, 
	"highest_FDA_approval_status" TEXT, 
	drug_regulatory_status_world_wide TEXT, 
	trade_name TEXT, 
	max_tolerated_dose TEXT, 
	is_toxic BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(is_supplement) REFERENCES "chemical mixture" (id), 
	FOREIGN KEY(trade_name) REFERENCES "chemical entity" (id)
);
CREATE TABLE drug (
	is_supplement TEXT, 
	"highest_FDA_approval_status" TEXT, 
	drug_regulatory_status_world_wide TEXT, 
	trade_name TEXT, 
	max_tolerated_dose TEXT, 
	is_toxic BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(is_supplement) REFERENCES "chemical mixture" (id), 
	FOREIGN KEY(trade_name) REFERENCES "chemical entity" (id)
);
CREATE TABLE food (
	is_supplement TEXT, 
	"highest_FDA_approval_status" TEXT, 
	drug_regulatory_status_world_wide TEXT, 
	trade_name TEXT, 
	max_tolerated_dose TEXT, 
	is_toxic BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(is_supplement) REFERENCES "chemical mixture" (id), 
	FOREIGN KEY(trade_name) REFERENCES "chemical entity" (id)
);
CREATE TABLE genotype (
	has_biological_sequence TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	has_zygosity_id TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_zygosity_id) REFERENCES zygosity (id)
);
CREATE TABLE "pairwise molecular interaction" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	interacting_molecules_category_id TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "molecular entity" (id), 
	FOREIGN KEY(object) REFERENCES "molecular entity" (id), 
	FOREIGN KEY(interacting_molecules_category_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "reaction to participant association" (
	stoichiometry INTEGER, 
	reaction_direction VARCHAR(13), 
	reaction_side VARCHAR(5), 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "molecular entity" (id), 
	FOREIGN KEY(object) REFERENCES "chemical entity" (id)
);
CREATE TABLE "reaction to catalyst association" (
	stoichiometry INTEGER, 
	reaction_direction VARCHAR(13), 
	reaction_side VARCHAR(5), 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	object_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "molecular entity" (id), 
	FOREIGN KEY(object_id) REFERENCES "gene or gene product" (id)
);
CREATE TABLE "entity to feature or disease qualifiers mixin" (
	id INTEGER, 
	frequency_qualifier TEXT, 
	severity_qualifier_id TEXT, 
	onset_qualifier_id TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(severity_qualifier_id) REFERENCES "severity value" (id), 
	FOREIGN KEY(onset_qualifier_id) REFERENCES onset (id)
);
CREATE TABLE "entity to phenotypic feature association mixin" (
	id INTEGER, 
	frequency_qualifier TEXT, 
	sex_qualifier_id TEXT, 
	severity_qualifier_id TEXT, 
	onset_qualifier_id TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(sex_qualifier_id) REFERENCES "biological sex" (id), 
	FOREIGN KEY(severity_qualifier_id) REFERENCES "severity value" (id), 
	FOREIGN KEY(onset_qualifier_id) REFERENCES onset (id)
);
CREATE TABLE "entity to disease association mixin" (
	id INTEGER, 
	frequency_qualifier TEXT, 
	severity_qualifier_id TEXT, 
	onset_qualifier_id TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(severity_qualifier_id) REFERENCES "severity value" (id), 
	FOREIGN KEY(onset_qualifier_id) REFERENCES onset (id)
);
CREATE TABLE "exposure event to phenotypic feature association" (
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	frequency_qualifier TEXT, 
	sex_qualifier_id TEXT, 
	subject_id TEXT NOT NULL, 
	severity_qualifier_id TEXT, 
	onset_qualifier_id TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(object) REFERENCES "phenotypic feature" (id), 
	FOREIGN KEY(sex_qualifier_id) REFERENCES "biological sex" (id), 
	FOREIGN KEY(subject_id) REFERENCES "exposure event" (id), 
	FOREIGN KEY(severity_qualifier_id) REFERENCES "severity value" (id), 
	FOREIGN KEY(onset_qualifier_id) REFERENCES onset (id)
);
CREATE TABLE "disease to phenotypic feature association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	frequency_qualifier TEXT, 
	sex_qualifier_id TEXT, 
	severity_qualifier_id TEXT, 
	onset_qualifier_id TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES disease (id), 
	FOREIGN KEY(object) REFERENCES "phenotypic feature" (id), 
	FOREIGN KEY(sex_qualifier_id) REFERENCES "biological sex" (id), 
	FOREIGN KEY(severity_qualifier_id) REFERENCES "severity value" (id), 
	FOREIGN KEY(onset_qualifier_id) REFERENCES onset (id)
);
CREATE TABLE "case to phenotypic feature association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	frequency_qualifier TEXT, 
	sex_qualifier_id TEXT, 
	severity_qualifier_id TEXT, 
	onset_qualifier_id TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "case" (id), 
	FOREIGN KEY(object) REFERENCES "phenotypic feature" (id), 
	FOREIGN KEY(sex_qualifier_id) REFERENCES "biological sex" (id), 
	FOREIGN KEY(severity_qualifier_id) REFERENCES "severity value" (id), 
	FOREIGN KEY(onset_qualifier_id) REFERENCES onset (id)
);
CREATE TABLE "behavior to behavioral feature association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	frequency_qualifier TEXT, 
	sex_qualifier_id TEXT, 
	severity_qualifier_id TEXT, 
	onset_qualifier_id TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES behavior (id), 
	FOREIGN KEY(object) REFERENCES "behavioral feature" (id), 
	FOREIGN KEY(sex_qualifier_id) REFERENCES "biological sex" (id), 
	FOREIGN KEY(severity_qualifier_id) REFERENCES "severity value" (id), 
	FOREIGN KEY(onset_qualifier_id) REFERENCES onset (id)
);
CREATE TABLE "gene to phenotypic feature association" (
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	frequency_qualifier TEXT, 
	sex_qualifier_id TEXT, 
	subject_id TEXT NOT NULL, 
	severity_qualifier_id TEXT, 
	onset_qualifier_id TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(object) REFERENCES "phenotypic feature" (id), 
	FOREIGN KEY(sex_qualifier_id) REFERENCES "biological sex" (id), 
	FOREIGN KEY(subject_id) REFERENCES "gene or gene product" (id), 
	FOREIGN KEY(severity_qualifier_id) REFERENCES "severity value" (id), 
	FOREIGN KEY(onset_qualifier_id) REFERENCES onset (id)
);
CREATE TABLE "gene to disease association" (
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	frequency_qualifier TEXT, 
	subject_id TEXT NOT NULL, 
	severity_qualifier_id TEXT, 
	onset_qualifier_id TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(object) REFERENCES disease (id), 
	FOREIGN KEY(subject_id) REFERENCES "gene or gene product" (id), 
	FOREIGN KEY(severity_qualifier_id) REFERENCES "severity value" (id), 
	FOREIGN KEY(onset_qualifier_id) REFERENCES onset (id)
);
CREATE TABLE "druggable gene to disease association" (
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	frequency_qualifier TEXT, 
	subject_id TEXT NOT NULL, 
	severity_qualifier_id TEXT, 
	onset_qualifier_id TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(object) REFERENCES disease (id), 
	FOREIGN KEY(subject_id) REFERENCES "gene or gene product" (id), 
	FOREIGN KEY(severity_qualifier_id) REFERENCES "severity value" (id), 
	FOREIGN KEY(onset_qualifier_id) REFERENCES onset (id)
);
CREATE TABLE "variant to phenotypic feature association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	frequency_qualifier TEXT, 
	sex_qualifier_id TEXT, 
	severity_qualifier_id TEXT, 
	onset_qualifier_id TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "sequence variant" (id), 
	FOREIGN KEY(object) REFERENCES "phenotypic feature" (id), 
	FOREIGN KEY(sex_qualifier_id) REFERENCES "biological sex" (id), 
	FOREIGN KEY(severity_qualifier_id) REFERENCES "severity value" (id), 
	FOREIGN KEY(onset_qualifier_id) REFERENCES onset (id)
);
CREATE TABLE "variant to disease association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	frequency_qualifier TEXT, 
	severity_qualifier_id TEXT, 
	onset_qualifier_id TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "sequence variant" (id), 
	FOREIGN KEY(object) REFERENCES disease (id), 
	FOREIGN KEY(severity_qualifier_id) REFERENCES "severity value" (id), 
	FOREIGN KEY(onset_qualifier_id) REFERENCES onset (id)
);
CREATE TABLE "gene as a model of disease association" (
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	frequency_qualifier TEXT, 
	subject_id TEXT NOT NULL, 
	severity_qualifier_id TEXT, 
	onset_qualifier_id TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(object) REFERENCES disease (id), 
	FOREIGN KEY(subject_id) REFERENCES "gene or gene product" (id), 
	FOREIGN KEY(severity_qualifier_id) REFERENCES "severity value" (id), 
	FOREIGN KEY(onset_qualifier_id) REFERENCES onset (id)
);
CREATE TABLE "variant as a model of disease association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	frequency_qualifier TEXT, 
	severity_qualifier_id TEXT, 
	onset_qualifier_id TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "sequence variant" (id), 
	FOREIGN KEY(object) REFERENCES disease (id), 
	FOREIGN KEY(severity_qualifier_id) REFERENCES "severity value" (id), 
	FOREIGN KEY(onset_qualifier_id) REFERENCES onset (id)
);
CREATE TABLE "cell line as a model of disease association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	frequency_qualifier TEXT, 
	severity_qualifier_id TEXT, 
	onset_qualifier_id TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "cell line" (id), 
	FOREIGN KEY(object) REFERENCES disease (id), 
	FOREIGN KEY(severity_qualifier_id) REFERENCES "severity value" (id), 
	FOREIGN KEY(onset_qualifier_id) REFERENCES onset (id)
);
CREATE TABLE "organismal entity as a model of disease association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	frequency_qualifier TEXT, 
	severity_qualifier_id TEXT, 
	onset_qualifier_id TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "organismal entity" (id), 
	FOREIGN KEY(object) REFERENCES disease (id), 
	FOREIGN KEY(severity_qualifier_id) REFERENCES "severity value" (id), 
	FOREIGN KEY(onset_qualifier_id) REFERENCES onset (id)
);
CREATE TABLE "gene has variant that contributes to disease association" (
	sequence_variant_qualifier TEXT, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	frequency_qualifier TEXT, 
	subject_id TEXT NOT NULL, 
	severity_qualifier_id TEXT, 
	onset_qualifier_id TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(sequence_variant_qualifier) REFERENCES "sequence variant" (id), 
	FOREIGN KEY(object) REFERENCES disease (id), 
	FOREIGN KEY(subject_id) REFERENCES "gene or gene product" (id), 
	FOREIGN KEY(severity_qualifier_id) REFERENCES "severity value" (id), 
	FOREIGN KEY(onset_qualifier_id) REFERENCES onset (id)
);
CREATE TABLE "genomic sequence localization" (
	start_interbase_coordinate INTEGER, 
	end_interbase_coordinate INTEGER, 
	genome_build VARCHAR(1), 
	strand VARCHAR(1), 
	phase VARCHAR(1), 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "nucleic acid entity" (id), 
	FOREIGN KEY(object) REFERENCES "nucleic acid entity" (id)
);
CREATE TABLE "sequence feature relationship" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "nucleic acid entity" (id), 
	FOREIGN KEY(object) REFERENCES "nucleic acid entity" (id)
);
CREATE TABLE "transcript to gene relationship" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES transcript (id), 
	FOREIGN KEY(object) REFERENCES gene (id)
);
CREATE TABLE "exon to transcript relationship" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES exon (id), 
	FOREIGN KEY(object) REFERENCES transcript (id)
);
CREATE TABLE attribute_has_quantitative_value (
	attribute_id TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY (attribute_id, has_quantitative_value_id), 
	FOREIGN KEY(attribute_id) REFERENCES attribute (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "chemical role_has_quantitative_value" (
	"chemical role_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("chemical role_id", has_quantitative_value_id), 
	FOREIGN KEY("chemical role_id") REFERENCES "chemical role" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "biological sex_has_quantitative_value" (
	"biological sex_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("biological sex_id", has_quantitative_value_id), 
	FOREIGN KEY("biological sex_id") REFERENCES "biological sex" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "phenotypic sex_has_quantitative_value" (
	"phenotypic sex_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("phenotypic sex_id", has_quantitative_value_id), 
	FOREIGN KEY("phenotypic sex_id") REFERENCES "phenotypic sex" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "genotypic sex_has_quantitative_value" (
	"genotypic sex_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("genotypic sex_id", has_quantitative_value_id), 
	FOREIGN KEY("genotypic sex_id") REFERENCES "genotypic sex" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "severity value_has_quantitative_value" (
	"severity value_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("severity value_id", has_quantitative_value_id), 
	FOREIGN KEY("severity value_id") REFERENCES "severity value" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE entity_has_attribute (
	entity_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (entity_id, has_attribute_id), 
	FOREIGN KEY(entity_id) REFERENCES entity (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "named thing_has_attribute" (
	"named thing_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("named thing_id", has_attribute_id), 
	FOREIGN KEY("named thing_id") REFERENCES "named thing" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "organism taxon_has_attribute" (
	"organism taxon_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("organism taxon_id", has_attribute_id), 
	FOREIGN KEY("organism taxon_id") REFERENCES "organism taxon" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE event_has_attribute (
	event_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (event_id, has_attribute_id), 
	FOREIGN KEY(event_id) REFERENCES event (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "administrative entity_has_attribute" (
	"administrative entity_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("administrative entity_id", has_attribute_id), 
	FOREIGN KEY("administrative entity_id") REFERENCES "administrative entity" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE agent_has_attribute (
	agent_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (agent_id, has_attribute_id), 
	FOREIGN KEY(agent_id) REFERENCES agent (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "information content entity_has_attribute" (
	"information content entity_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("information content entity_id", has_attribute_id), 
	FOREIGN KEY("information content entity_id") REFERENCES "information content entity" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE dataset_has_attribute (
	dataset_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (dataset_id, has_attribute_id), 
	FOREIGN KEY(dataset_id) REFERENCES dataset (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "dataset distribution_has_attribute" (
	"dataset distribution_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("dataset distribution_id", has_attribute_id), 
	FOREIGN KEY("dataset distribution_id") REFERENCES "dataset distribution" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "dataset version_provided_by" (
	"dataset version_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("dataset version_id", provided_by), 
	FOREIGN KEY("dataset version_id") REFERENCES "dataset version" (id)
);
CREATE TABLE "dataset version_category" (
	"dataset version_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("dataset version_id", category), 
	FOREIGN KEY("dataset version_id") REFERENCES "dataset version" (id)
);
CREATE TABLE "dataset version_has_attribute" (
	"dataset version_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("dataset version_id", has_attribute_id), 
	FOREIGN KEY("dataset version_id") REFERENCES "dataset version" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "dataset summary_has_attribute" (
	"dataset summary_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("dataset summary_id", has_attribute_id), 
	FOREIGN KEY("dataset summary_id") REFERENCES "dataset summary" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "confidence level_has_attribute" (
	"confidence level_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("confidence level_id", has_attribute_id), 
	FOREIGN KEY("confidence level_id") REFERENCES "confidence level" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "evidence type_has_attribute" (
	"evidence type_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("evidence type_id", has_attribute_id), 
	FOREIGN KEY("evidence type_id") REFERENCES "evidence type" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "information resource_has_attribute" (
	"information resource_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("information resource_id", has_attribute_id), 
	FOREIGN KEY("information resource_id") REFERENCES "information resource" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE publication_has_attribute (
	publication_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (publication_id, has_attribute_id), 
	FOREIGN KEY(publication_id) REFERENCES publication (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE book_has_attribute (
	book_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (book_id, has_attribute_id), 
	FOREIGN KEY(book_id) REFERENCES book (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "book chapter_has_attribute" (
	"book chapter_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("book chapter_id", has_attribute_id), 
	FOREIGN KEY("book chapter_id") REFERENCES "book chapter" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE serial_has_attribute (
	serial_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (serial_id, has_attribute_id), 
	FOREIGN KEY(serial_id) REFERENCES serial (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE article_has_attribute (
	article_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (article_id, has_attribute_id), 
	FOREIGN KEY(article_id) REFERENCES article (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "physical entity_has_attribute" (
	"physical entity_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("physical entity_id", has_attribute_id), 
	FOREIGN KEY("physical entity_id") REFERENCES "physical entity" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE activity_has_attribute (
	activity_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (activity_id, has_attribute_id), 
	FOREIGN KEY(activity_id) REFERENCES activity (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE procedure_has_attribute (
	procedure_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (procedure_id, has_attribute_id), 
	FOREIGN KEY(procedure_id) REFERENCES procedure (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE phenomenon_has_attribute (
	phenomenon_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (phenomenon_id, has_attribute_id), 
	FOREIGN KEY(phenomenon_id) REFERENCES phenomenon (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE device_has_attribute (
	device_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (device_id, has_attribute_id), 
	FOREIGN KEY(device_id) REFERENCES device (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "study population_has_attribute" (
	"study population_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("study population_id", has_attribute_id), 
	FOREIGN KEY("study population_id") REFERENCES "study population" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "material sample_has_attribute" (
	"material sample_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("material sample_id", has_attribute_id), 
	FOREIGN KEY("material sample_id") REFERENCES "material sample" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "planetary entity_has_attribute" (
	"planetary entity_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("planetary entity_id", has_attribute_id), 
	FOREIGN KEY("planetary entity_id") REFERENCES "planetary entity" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "environmental process_has_attribute" (
	"environmental process_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("environmental process_id", has_attribute_id), 
	FOREIGN KEY("environmental process_id") REFERENCES "environmental process" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "environmental feature_has_attribute" (
	"environmental feature_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("environmental feature_id", has_attribute_id), 
	FOREIGN KEY("environmental feature_id") REFERENCES "environmental feature" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "geographic location_has_attribute" (
	"geographic location_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("geographic location_id", has_attribute_id), 
	FOREIGN KEY("geographic location_id") REFERENCES "geographic location" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "geographic location at time_has_attribute" (
	"geographic location at time_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("geographic location at time_id", has_attribute_id), 
	FOREIGN KEY("geographic location at time_id") REFERENCES "geographic location at time" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "biological entity_has_attribute" (
	"biological entity_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("biological entity_id", has_attribute_id), 
	FOREIGN KEY("biological entity_id") REFERENCES "biological entity" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "molecular entity_available_from" (
	"molecular entity_id" TEXT, 
	available_from VARCHAR(16), 
	PRIMARY KEY ("molecular entity_id", available_from), 
	FOREIGN KEY("molecular entity_id") REFERENCES "molecular entity" (id)
);
CREATE TABLE "molecular entity_has_chemical_role" (
	"molecular entity_id" TEXT, 
	has_chemical_role_id TEXT, 
	PRIMARY KEY ("molecular entity_id", has_chemical_role_id), 
	FOREIGN KEY("molecular entity_id") REFERENCES "molecular entity" (id), 
	FOREIGN KEY(has_chemical_role_id) REFERENCES "chemical role" (id)
);
CREATE TABLE "molecular entity_provided_by" (
	"molecular entity_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("molecular entity_id", provided_by), 
	FOREIGN KEY("molecular entity_id") REFERENCES "molecular entity" (id)
);
CREATE TABLE "molecular entity_category" (
	"molecular entity_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("molecular entity_id", category), 
	FOREIGN KEY("molecular entity_id") REFERENCES "molecular entity" (id)
);
CREATE TABLE "molecular entity_has_attribute" (
	"molecular entity_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("molecular entity_id", has_attribute_id), 
	FOREIGN KEY("molecular entity_id") REFERENCES "molecular entity" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "chemical entity_has_chemical_role" (
	"chemical entity_id" TEXT, 
	has_chemical_role_id TEXT, 
	PRIMARY KEY ("chemical entity_id", has_chemical_role_id), 
	FOREIGN KEY("chemical entity_id") REFERENCES "chemical entity" (id), 
	FOREIGN KEY(has_chemical_role_id) REFERENCES "chemical role" (id)
);
CREATE TABLE "chemical entity_has_attribute" (
	"chemical entity_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("chemical entity_id", has_attribute_id), 
	FOREIGN KEY("chemical entity_id") REFERENCES "chemical entity" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "small molecule_available_from" (
	"small molecule_id" TEXT, 
	available_from VARCHAR(16), 
	PRIMARY KEY ("small molecule_id", available_from), 
	FOREIGN KEY("small molecule_id") REFERENCES "small molecule" (id)
);
CREATE TABLE "small molecule_has_chemical_role" (
	"small molecule_id" TEXT, 
	has_chemical_role_id TEXT, 
	PRIMARY KEY ("small molecule_id", has_chemical_role_id), 
	FOREIGN KEY("small molecule_id") REFERENCES "small molecule" (id), 
	FOREIGN KEY(has_chemical_role_id) REFERENCES "chemical role" (id)
);
CREATE TABLE "small molecule_provided_by" (
	"small molecule_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("small molecule_id", provided_by), 
	FOREIGN KEY("small molecule_id") REFERENCES "small molecule" (id)
);
CREATE TABLE "small molecule_category" (
	"small molecule_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("small molecule_id", category), 
	FOREIGN KEY("small molecule_id") REFERENCES "small molecule" (id)
);
CREATE TABLE "small molecule_has_attribute" (
	"small molecule_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("small molecule_id", has_attribute_id), 
	FOREIGN KEY("small molecule_id") REFERENCES "small molecule" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "chemical mixture_routes_of_delivery" (
	"chemical mixture_id" TEXT, 
	routes_of_delivery VARCHAR(27), 
	PRIMARY KEY ("chemical mixture_id", routes_of_delivery), 
	FOREIGN KEY("chemical mixture_id") REFERENCES "chemical mixture" (id)
);
CREATE TABLE "chemical mixture_available_from" (
	"chemical mixture_id" TEXT, 
	available_from VARCHAR(16), 
	PRIMARY KEY ("chemical mixture_id", available_from), 
	FOREIGN KEY("chemical mixture_id") REFERENCES "chemical mixture" (id)
);
CREATE TABLE "chemical mixture_has_chemical_role" (
	"chemical mixture_id" TEXT, 
	has_chemical_role_id TEXT, 
	PRIMARY KEY ("chemical mixture_id", has_chemical_role_id), 
	FOREIGN KEY("chemical mixture_id") REFERENCES "chemical mixture" (id), 
	FOREIGN KEY(has_chemical_role_id) REFERENCES "chemical role" (id)
);
CREATE TABLE "chemical mixture_provided_by" (
	"chemical mixture_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("chemical mixture_id", provided_by), 
	FOREIGN KEY("chemical mixture_id") REFERENCES "chemical mixture" (id)
);
CREATE TABLE "chemical mixture_category" (
	"chemical mixture_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("chemical mixture_id", category), 
	FOREIGN KEY("chemical mixture_id") REFERENCES "chemical mixture" (id)
);
CREATE TABLE "chemical mixture_has_attribute" (
	"chemical mixture_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("chemical mixture_id", has_attribute_id), 
	FOREIGN KEY("chemical mixture_id") REFERENCES "chemical mixture" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "nucleic acid entity_available_from" (
	"nucleic acid entity_id" TEXT, 
	available_from VARCHAR(16), 
	PRIMARY KEY ("nucleic acid entity_id", available_from), 
	FOREIGN KEY("nucleic acid entity_id") REFERENCES "nucleic acid entity" (id)
);
CREATE TABLE "nucleic acid entity_has_chemical_role" (
	"nucleic acid entity_id" TEXT, 
	has_chemical_role_id TEXT, 
	PRIMARY KEY ("nucleic acid entity_id", has_chemical_role_id), 
	FOREIGN KEY("nucleic acid entity_id") REFERENCES "nucleic acid entity" (id), 
	FOREIGN KEY(has_chemical_role_id) REFERENCES "chemical role" (id)
);
CREATE TABLE "nucleic acid entity_provided_by" (
	"nucleic acid entity_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("nucleic acid entity_id", provided_by), 
	FOREIGN KEY("nucleic acid entity_id") REFERENCES "nucleic acid entity" (id)
);
CREATE TABLE "nucleic acid entity_category" (
	"nucleic acid entity_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("nucleic acid entity_id", category), 
	FOREIGN KEY("nucleic acid entity_id") REFERENCES "nucleic acid entity" (id)
);
CREATE TABLE "nucleic acid entity_has_attribute" (
	"nucleic acid entity_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("nucleic acid entity_id", has_attribute_id), 
	FOREIGN KEY("nucleic acid entity_id") REFERENCES "nucleic acid entity" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "nucleic acid entity_in_taxon" (
	"nucleic acid entity_id" TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY ("nucleic acid entity_id", in_taxon), 
	FOREIGN KEY("nucleic acid entity_id") REFERENCES "nucleic acid entity" (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE "biological process or activity_has_attribute" (
	"biological process or activity_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("biological process or activity_id", has_attribute_id), 
	FOREIGN KEY("biological process or activity_id") REFERENCES "biological process or activity" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "molecular activity_has_input" (
	"molecular activity_id" TEXT, 
	has_input TEXT, 
	PRIMARY KEY ("molecular activity_id", has_input), 
	FOREIGN KEY("molecular activity_id") REFERENCES "molecular activity" (id), 
	FOREIGN KEY(has_input) REFERENCES "molecular entity" (id)
);
CREATE TABLE "molecular activity_has_output" (
	"molecular activity_id" TEXT, 
	has_output TEXT, 
	PRIMARY KEY ("molecular activity_id", has_output), 
	FOREIGN KEY("molecular activity_id") REFERENCES "molecular activity" (id), 
	FOREIGN KEY(has_output) REFERENCES "molecular entity" (id)
);
CREATE TABLE "molecular activity_has_attribute" (
	"molecular activity_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("molecular activity_id", has_attribute_id), 
	FOREIGN KEY("molecular activity_id") REFERENCES "molecular activity" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "biological process_has_attribute" (
	"biological process_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("biological process_id", has_attribute_id), 
	FOREIGN KEY("biological process_id") REFERENCES "biological process" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE pathway_has_attribute (
	pathway_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (pathway_id, has_attribute_id), 
	FOREIGN KEY(pathway_id) REFERENCES pathway (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "physiological process_has_attribute" (
	"physiological process_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("physiological process_id", has_attribute_id), 
	FOREIGN KEY("physiological process_id") REFERENCES "physiological process" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE behavior_has_attribute (
	behavior_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (behavior_id, has_attribute_id), 
	FOREIGN KEY(behavior_id) REFERENCES behavior (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "environmental food contaminant_available_from" (
	"environmental food contaminant_id" TEXT, 
	available_from VARCHAR(16), 
	PRIMARY KEY ("environmental food contaminant_id", available_from), 
	FOREIGN KEY("environmental food contaminant_id") REFERENCES "environmental food contaminant" (id)
);
CREATE TABLE "environmental food contaminant_has_chemical_role" (
	"environmental food contaminant_id" TEXT, 
	has_chemical_role_id TEXT, 
	PRIMARY KEY ("environmental food contaminant_id", has_chemical_role_id), 
	FOREIGN KEY("environmental food contaminant_id") REFERENCES "environmental food contaminant" (id), 
	FOREIGN KEY(has_chemical_role_id) REFERENCES "chemical role" (id)
);
CREATE TABLE "environmental food contaminant_provided_by" (
	"environmental food contaminant_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("environmental food contaminant_id", provided_by), 
	FOREIGN KEY("environmental food contaminant_id") REFERENCES "environmental food contaminant" (id)
);
CREATE TABLE "environmental food contaminant_category" (
	"environmental food contaminant_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("environmental food contaminant_id", category), 
	FOREIGN KEY("environmental food contaminant_id") REFERENCES "environmental food contaminant" (id)
);
CREATE TABLE "environmental food contaminant_has_attribute" (
	"environmental food contaminant_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("environmental food contaminant_id", has_attribute_id), 
	FOREIGN KEY("environmental food contaminant_id") REFERENCES "environmental food contaminant" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "food additive_available_from" (
	"food additive_id" TEXT, 
	available_from VARCHAR(16), 
	PRIMARY KEY ("food additive_id", available_from), 
	FOREIGN KEY("food additive_id") REFERENCES "food additive" (id)
);
CREATE TABLE "food additive_has_chemical_role" (
	"food additive_id" TEXT, 
	has_chemical_role_id TEXT, 
	PRIMARY KEY ("food additive_id", has_chemical_role_id), 
	FOREIGN KEY("food additive_id") REFERENCES "food additive" (id), 
	FOREIGN KEY(has_chemical_role_id) REFERENCES "chemical role" (id)
);
CREATE TABLE "food additive_provided_by" (
	"food additive_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("food additive_id", provided_by), 
	FOREIGN KEY("food additive_id") REFERENCES "food additive" (id)
);
CREATE TABLE "food additive_category" (
	"food additive_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("food additive_id", category), 
	FOREIGN KEY("food additive_id") REFERENCES "food additive" (id)
);
CREATE TABLE "food additive_has_attribute" (
	"food additive_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("food additive_id", has_attribute_id), 
	FOREIGN KEY("food additive_id") REFERENCES "food additive" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE nutrient_available_from (
	nutrient_id TEXT, 
	available_from VARCHAR(16), 
	PRIMARY KEY (nutrient_id, available_from), 
	FOREIGN KEY(nutrient_id) REFERENCES nutrient (id)
);
CREATE TABLE nutrient_has_chemical_role (
	nutrient_id TEXT, 
	has_chemical_role_id TEXT, 
	PRIMARY KEY (nutrient_id, has_chemical_role_id), 
	FOREIGN KEY(nutrient_id) REFERENCES nutrient (id), 
	FOREIGN KEY(has_chemical_role_id) REFERENCES "chemical role" (id)
);
CREATE TABLE nutrient_provided_by (
	nutrient_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (nutrient_id, provided_by), 
	FOREIGN KEY(nutrient_id) REFERENCES nutrient (id)
);
CREATE TABLE nutrient_category (
	nutrient_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (nutrient_id, category), 
	FOREIGN KEY(nutrient_id) REFERENCES nutrient (id)
);
CREATE TABLE nutrient_has_attribute (
	nutrient_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (nutrient_id, has_attribute_id), 
	FOREIGN KEY(nutrient_id) REFERENCES nutrient (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE macronutrient_available_from (
	macronutrient_id TEXT, 
	available_from VARCHAR(16), 
	PRIMARY KEY (macronutrient_id, available_from), 
	FOREIGN KEY(macronutrient_id) REFERENCES macronutrient (id)
);
CREATE TABLE macronutrient_has_chemical_role (
	macronutrient_id TEXT, 
	has_chemical_role_id TEXT, 
	PRIMARY KEY (macronutrient_id, has_chemical_role_id), 
	FOREIGN KEY(macronutrient_id) REFERENCES macronutrient (id), 
	FOREIGN KEY(has_chemical_role_id) REFERENCES "chemical role" (id)
);
CREATE TABLE macronutrient_provided_by (
	macronutrient_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (macronutrient_id, provided_by), 
	FOREIGN KEY(macronutrient_id) REFERENCES macronutrient (id)
);
CREATE TABLE macronutrient_category (
	macronutrient_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (macronutrient_id, category), 
	FOREIGN KEY(macronutrient_id) REFERENCES macronutrient (id)
);
CREATE TABLE macronutrient_has_attribute (
	macronutrient_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (macronutrient_id, has_attribute_id), 
	FOREIGN KEY(macronutrient_id) REFERENCES macronutrient (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE micronutrient_available_from (
	micronutrient_id TEXT, 
	available_from VARCHAR(16), 
	PRIMARY KEY (micronutrient_id, available_from), 
	FOREIGN KEY(micronutrient_id) REFERENCES micronutrient (id)
);
CREATE TABLE micronutrient_has_chemical_role (
	micronutrient_id TEXT, 
	has_chemical_role_id TEXT, 
	PRIMARY KEY (micronutrient_id, has_chemical_role_id), 
	FOREIGN KEY(micronutrient_id) REFERENCES micronutrient (id), 
	FOREIGN KEY(has_chemical_role_id) REFERENCES "chemical role" (id)
);
CREATE TABLE micronutrient_provided_by (
	micronutrient_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (micronutrient_id, provided_by), 
	FOREIGN KEY(micronutrient_id) REFERENCES micronutrient (id)
);
CREATE TABLE micronutrient_category (
	micronutrient_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (micronutrient_id, category), 
	FOREIGN KEY(micronutrient_id) REFERENCES micronutrient (id)
);
CREATE TABLE micronutrient_has_attribute (
	micronutrient_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (micronutrient_id, has_attribute_id), 
	FOREIGN KEY(micronutrient_id) REFERENCES micronutrient (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE vitamin_available_from (
	vitamin_id TEXT, 
	available_from VARCHAR(16), 
	PRIMARY KEY (vitamin_id, available_from), 
	FOREIGN KEY(vitamin_id) REFERENCES vitamin (id)
);
CREATE TABLE vitamin_has_chemical_role (
	vitamin_id TEXT, 
	has_chemical_role_id TEXT, 
	PRIMARY KEY (vitamin_id, has_chemical_role_id), 
	FOREIGN KEY(vitamin_id) REFERENCES vitamin (id), 
	FOREIGN KEY(has_chemical_role_id) REFERENCES "chemical role" (id)
);
CREATE TABLE vitamin_provided_by (
	vitamin_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (vitamin_id, provided_by), 
	FOREIGN KEY(vitamin_id) REFERENCES vitamin (id)
);
CREATE TABLE vitamin_category (
	vitamin_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (vitamin_id, category), 
	FOREIGN KEY(vitamin_id) REFERENCES vitamin (id)
);
CREATE TABLE vitamin_has_attribute (
	vitamin_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (vitamin_id, has_attribute_id), 
	FOREIGN KEY(vitamin_id) REFERENCES vitamin (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "organism attribute_has_quantitative_value" (
	"organism attribute_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("organism attribute_id", has_quantitative_value_id), 
	FOREIGN KEY("organism attribute_id") REFERENCES "organism attribute" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "phenotypic quality_has_quantitative_value" (
	"phenotypic quality_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("phenotypic quality_id", has_quantitative_value_id), 
	FOREIGN KEY("phenotypic quality_id") REFERENCES "phenotypic quality" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE inheritance_has_quantitative_value (
	inheritance_id TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY (inheritance_id, has_quantitative_value_id), 
	FOREIGN KEY(inheritance_id) REFERENCES inheritance (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "organismal entity_has_attribute" (
	"organismal entity_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("organismal entity_id", has_attribute_id), 
	FOREIGN KEY("organismal entity_id") REFERENCES "organismal entity" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "life stage_has_attribute" (
	"life stage_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("life stage_id", has_attribute_id), 
	FOREIGN KEY("life stage_id") REFERENCES "life stage" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "individual organism_has_attribute" (
	"individual organism_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("individual organism_id", has_attribute_id), 
	FOREIGN KEY("individual organism_id") REFERENCES "individual organism" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "population of individual organisms_has_attribute" (
	"population of individual organisms_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("population of individual organisms_id", has_attribute_id), 
	FOREIGN KEY("population of individual organisms_id") REFERENCES "population of individual organisms" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "disease or phenotypic feature_has_attribute" (
	"disease or phenotypic feature_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("disease or phenotypic feature_id", has_attribute_id), 
	FOREIGN KEY("disease or phenotypic feature_id") REFERENCES "disease or phenotypic feature" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE disease_has_attribute (
	disease_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (disease_id, has_attribute_id), 
	FOREIGN KEY(disease_id) REFERENCES disease (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "phenotypic feature_has_attribute" (
	"phenotypic feature_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("phenotypic feature_id", has_attribute_id), 
	FOREIGN KEY("phenotypic feature_id") REFERENCES "phenotypic feature" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "behavioral feature_has_attribute" (
	"behavioral feature_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("behavioral feature_id", has_attribute_id), 
	FOREIGN KEY("behavioral feature_id") REFERENCES "behavioral feature" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "anatomical entity_has_attribute" (
	"anatomical entity_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("anatomical entity_id", has_attribute_id), 
	FOREIGN KEY("anatomical entity_id") REFERENCES "anatomical entity" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "cellular component_has_attribute" (
	"cellular component_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("cellular component_id", has_attribute_id), 
	FOREIGN KEY("cellular component_id") REFERENCES "cellular component" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE cell_has_attribute (
	cell_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (cell_id, has_attribute_id), 
	FOREIGN KEY(cell_id) REFERENCES cell (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "cell line_has_attribute" (
	"cell line_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("cell line_id", has_attribute_id), 
	FOREIGN KEY("cell line_id") REFERENCES "cell line" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "gross anatomical structure_has_attribute" (
	"gross anatomical structure_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("gross anatomical structure_id", has_attribute_id), 
	FOREIGN KEY("gross anatomical structure_id") REFERENCES "gross anatomical structure" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE gene_has_attribute (
	gene_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (gene_id, has_attribute_id), 
	FOREIGN KEY(gene_id) REFERENCES gene (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE genome_has_attribute (
	genome_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (genome_id, has_attribute_id), 
	FOREIGN KEY(genome_id) REFERENCES genome (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE exon_available_from (
	exon_id TEXT, 
	available_from VARCHAR(16), 
	PRIMARY KEY (exon_id, available_from), 
	FOREIGN KEY(exon_id) REFERENCES exon (id)
);
CREATE TABLE exon_has_chemical_role (
	exon_id TEXT, 
	has_chemical_role_id TEXT, 
	PRIMARY KEY (exon_id, has_chemical_role_id), 
	FOREIGN KEY(exon_id) REFERENCES exon (id), 
	FOREIGN KEY(has_chemical_role_id) REFERENCES "chemical role" (id)
);
CREATE TABLE exon_provided_by (
	exon_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (exon_id, provided_by), 
	FOREIGN KEY(exon_id) REFERENCES exon (id)
);
CREATE TABLE exon_category (
	exon_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (exon_id, category), 
	FOREIGN KEY(exon_id) REFERENCES exon (id)
);
CREATE TABLE exon_has_attribute (
	exon_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (exon_id, has_attribute_id), 
	FOREIGN KEY(exon_id) REFERENCES exon (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE exon_in_taxon (
	exon_id TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY (exon_id, in_taxon), 
	FOREIGN KEY(exon_id) REFERENCES exon (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE transcript_available_from (
	transcript_id TEXT, 
	available_from VARCHAR(16), 
	PRIMARY KEY (transcript_id, available_from), 
	FOREIGN KEY(transcript_id) REFERENCES transcript (id)
);
CREATE TABLE transcript_has_chemical_role (
	transcript_id TEXT, 
	has_chemical_role_id TEXT, 
	PRIMARY KEY (transcript_id, has_chemical_role_id), 
	FOREIGN KEY(transcript_id) REFERENCES transcript (id), 
	FOREIGN KEY(has_chemical_role_id) REFERENCES "chemical role" (id)
);
CREATE TABLE transcript_provided_by (
	transcript_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (transcript_id, provided_by), 
	FOREIGN KEY(transcript_id) REFERENCES transcript (id)
);
CREATE TABLE transcript_category (
	transcript_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (transcript_id, category), 
	FOREIGN KEY(transcript_id) REFERENCES transcript (id)
);
CREATE TABLE transcript_has_attribute (
	transcript_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (transcript_id, has_attribute_id), 
	FOREIGN KEY(transcript_id) REFERENCES transcript (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE transcript_in_taxon (
	transcript_id TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY (transcript_id, in_taxon), 
	FOREIGN KEY(transcript_id) REFERENCES transcript (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE "coding sequence_available_from" (
	"coding sequence_id" TEXT, 
	available_from VARCHAR(16), 
	PRIMARY KEY ("coding sequence_id", available_from), 
	FOREIGN KEY("coding sequence_id") REFERENCES "coding sequence" (id)
);
CREATE TABLE "coding sequence_has_chemical_role" (
	"coding sequence_id" TEXT, 
	has_chemical_role_id TEXT, 
	PRIMARY KEY ("coding sequence_id", has_chemical_role_id), 
	FOREIGN KEY("coding sequence_id") REFERENCES "coding sequence" (id), 
	FOREIGN KEY(has_chemical_role_id) REFERENCES "chemical role" (id)
);
CREATE TABLE "coding sequence_provided_by" (
	"coding sequence_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("coding sequence_id", provided_by), 
	FOREIGN KEY("coding sequence_id") REFERENCES "coding sequence" (id)
);
CREATE TABLE "coding sequence_category" (
	"coding sequence_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("coding sequence_id", category), 
	FOREIGN KEY("coding sequence_id") REFERENCES "coding sequence" (id)
);
CREATE TABLE "coding sequence_has_attribute" (
	"coding sequence_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("coding sequence_id", has_attribute_id), 
	FOREIGN KEY("coding sequence_id") REFERENCES "coding sequence" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "coding sequence_in_taxon" (
	"coding sequence_id" TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY ("coding sequence_id", in_taxon), 
	FOREIGN KEY("coding sequence_id") REFERENCES "coding sequence" (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE polypeptide_has_attribute (
	polypeptide_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (polypeptide_id, has_attribute_id), 
	FOREIGN KEY(polypeptide_id) REFERENCES polypeptide (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE protein_has_attribute (
	protein_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (protein_id, has_attribute_id), 
	FOREIGN KEY(protein_id) REFERENCES protein (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "protein isoform_has_attribute" (
	"protein isoform_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("protein isoform_id", has_attribute_id), 
	FOREIGN KEY("protein isoform_id") REFERENCES "protein isoform" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "protein domain_has_attribute" (
	"protein domain_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("protein domain_id", has_attribute_id), 
	FOREIGN KEY("protein domain_id") REFERENCES "protein domain" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "protein family_has_attribute" (
	"protein family_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("protein family_id", has_attribute_id), 
	FOREIGN KEY("protein family_id") REFERENCES "protein family" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "nucleic acid sequence motif_has_attribute" (
	"nucleic acid sequence motif_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("nucleic acid sequence motif_id", has_attribute_id), 
	FOREIGN KEY("nucleic acid sequence motif_id") REFERENCES "nucleic acid sequence motif" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "RNA product_synonym" (
	"RNA product_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("RNA product_id", synonym), 
	FOREIGN KEY("RNA product_id") REFERENCES "RNA product" (id)
);
CREATE TABLE "RNA product_xref" (
	"RNA product_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("RNA product_id", xref), 
	FOREIGN KEY("RNA product_id") REFERENCES "RNA product" (id)
);
CREATE TABLE "RNA product_available_from" (
	"RNA product_id" TEXT, 
	available_from VARCHAR(16), 
	PRIMARY KEY ("RNA product_id", available_from), 
	FOREIGN KEY("RNA product_id") REFERENCES "RNA product" (id)
);
CREATE TABLE "RNA product_has_chemical_role" (
	"RNA product_id" TEXT, 
	has_chemical_role_id TEXT, 
	PRIMARY KEY ("RNA product_id", has_chemical_role_id), 
	FOREIGN KEY("RNA product_id") REFERENCES "RNA product" (id), 
	FOREIGN KEY(has_chemical_role_id) REFERENCES "chemical role" (id)
);
CREATE TABLE "RNA product_provided_by" (
	"RNA product_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("RNA product_id", provided_by), 
	FOREIGN KEY("RNA product_id") REFERENCES "RNA product" (id)
);
CREATE TABLE "RNA product_category" (
	"RNA product_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("RNA product_id", category), 
	FOREIGN KEY("RNA product_id") REFERENCES "RNA product" (id)
);
CREATE TABLE "RNA product_has_attribute" (
	"RNA product_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("RNA product_id", has_attribute_id), 
	FOREIGN KEY("RNA product_id") REFERENCES "RNA product" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "RNA product_in_taxon" (
	"RNA product_id" TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY ("RNA product_id", in_taxon), 
	FOREIGN KEY("RNA product_id") REFERENCES "RNA product" (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE "RNA product isoform_synonym" (
	"RNA product isoform_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("RNA product isoform_id", synonym), 
	FOREIGN KEY("RNA product isoform_id") REFERENCES "RNA product isoform" (id)
);
CREATE TABLE "RNA product isoform_xref" (
	"RNA product isoform_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("RNA product isoform_id", xref), 
	FOREIGN KEY("RNA product isoform_id") REFERENCES "RNA product isoform" (id)
);
CREATE TABLE "RNA product isoform_available_from" (
	"RNA product isoform_id" TEXT, 
	available_from VARCHAR(16), 
	PRIMARY KEY ("RNA product isoform_id", available_from), 
	FOREIGN KEY("RNA product isoform_id") REFERENCES "RNA product isoform" (id)
);
CREATE TABLE "RNA product isoform_has_chemical_role" (
	"RNA product isoform_id" TEXT, 
	has_chemical_role_id TEXT, 
	PRIMARY KEY ("RNA product isoform_id", has_chemical_role_id), 
	FOREIGN KEY("RNA product isoform_id") REFERENCES "RNA product isoform" (id), 
	FOREIGN KEY(has_chemical_role_id) REFERENCES "chemical role" (id)
);
CREATE TABLE "RNA product isoform_provided_by" (
	"RNA product isoform_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("RNA product isoform_id", provided_by), 
	FOREIGN KEY("RNA product isoform_id") REFERENCES "RNA product isoform" (id)
);
CREATE TABLE "RNA product isoform_category" (
	"RNA product isoform_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("RNA product isoform_id", category), 
	FOREIGN KEY("RNA product isoform_id") REFERENCES "RNA product isoform" (id)
);
CREATE TABLE "RNA product isoform_has_attribute" (
	"RNA product isoform_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("RNA product isoform_id", has_attribute_id), 
	FOREIGN KEY("RNA product isoform_id") REFERENCES "RNA product isoform" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "RNA product isoform_in_taxon" (
	"RNA product isoform_id" TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY ("RNA product isoform_id", in_taxon), 
	FOREIGN KEY("RNA product isoform_id") REFERENCES "RNA product isoform" (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE "noncoding RNA product_synonym" (
	"noncoding RNA product_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("noncoding RNA product_id", synonym), 
	FOREIGN KEY("noncoding RNA product_id") REFERENCES "noncoding RNA product" (id)
);
CREATE TABLE "noncoding RNA product_xref" (
	"noncoding RNA product_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("noncoding RNA product_id", xref), 
	FOREIGN KEY("noncoding RNA product_id") REFERENCES "noncoding RNA product" (id)
);
CREATE TABLE "noncoding RNA product_available_from" (
	"noncoding RNA product_id" TEXT, 
	available_from VARCHAR(16), 
	PRIMARY KEY ("noncoding RNA product_id", available_from), 
	FOREIGN KEY("noncoding RNA product_id") REFERENCES "noncoding RNA product" (id)
);
CREATE TABLE "noncoding RNA product_has_chemical_role" (
	"noncoding RNA product_id" TEXT, 
	has_chemical_role_id TEXT, 
	PRIMARY KEY ("noncoding RNA product_id", has_chemical_role_id), 
	FOREIGN KEY("noncoding RNA product_id") REFERENCES "noncoding RNA product" (id), 
	FOREIGN KEY(has_chemical_role_id) REFERENCES "chemical role" (id)
);
CREATE TABLE "noncoding RNA product_provided_by" (
	"noncoding RNA product_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("noncoding RNA product_id", provided_by), 
	FOREIGN KEY("noncoding RNA product_id") REFERENCES "noncoding RNA product" (id)
);
CREATE TABLE "noncoding RNA product_category" (
	"noncoding RNA product_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("noncoding RNA product_id", category), 
	FOREIGN KEY("noncoding RNA product_id") REFERENCES "noncoding RNA product" (id)
);
CREATE TABLE "noncoding RNA product_has_attribute" (
	"noncoding RNA product_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("noncoding RNA product_id", has_attribute_id), 
	FOREIGN KEY("noncoding RNA product_id") REFERENCES "noncoding RNA product" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "noncoding RNA product_in_taxon" (
	"noncoding RNA product_id" TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY ("noncoding RNA product_id", in_taxon), 
	FOREIGN KEY("noncoding RNA product_id") REFERENCES "noncoding RNA product" (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE "microRNA_synonym" (
	"microRNA_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("microRNA_id", synonym), 
	FOREIGN KEY("microRNA_id") REFERENCES "microRNA" (id)
);
CREATE TABLE "microRNA_xref" (
	"microRNA_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("microRNA_id", xref), 
	FOREIGN KEY("microRNA_id") REFERENCES "microRNA" (id)
);
CREATE TABLE "microRNA_available_from" (
	"microRNA_id" TEXT, 
	available_from VARCHAR(16), 
	PRIMARY KEY ("microRNA_id", available_from), 
	FOREIGN KEY("microRNA_id") REFERENCES "microRNA" (id)
);
CREATE TABLE "microRNA_has_chemical_role" (
	"microRNA_id" TEXT, 
	has_chemical_role_id TEXT, 
	PRIMARY KEY ("microRNA_id", has_chemical_role_id), 
	FOREIGN KEY("microRNA_id") REFERENCES "microRNA" (id), 
	FOREIGN KEY(has_chemical_role_id) REFERENCES "chemical role" (id)
);
CREATE TABLE "microRNA_provided_by" (
	"microRNA_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("microRNA_id", provided_by), 
	FOREIGN KEY("microRNA_id") REFERENCES "microRNA" (id)
);
CREATE TABLE "microRNA_category" (
	"microRNA_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("microRNA_id", category), 
	FOREIGN KEY("microRNA_id") REFERENCES "microRNA" (id)
);
CREATE TABLE "microRNA_has_attribute" (
	"microRNA_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("microRNA_id", has_attribute_id), 
	FOREIGN KEY("microRNA_id") REFERENCES "microRNA" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "microRNA_in_taxon" (
	"microRNA_id" TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY ("microRNA_id", in_taxon), 
	FOREIGN KEY("microRNA_id") REFERENCES "microRNA" (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE "siRNA_synonym" (
	"siRNA_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("siRNA_id", synonym), 
	FOREIGN KEY("siRNA_id") REFERENCES "siRNA" (id)
);
CREATE TABLE "siRNA_xref" (
	"siRNA_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("siRNA_id", xref), 
	FOREIGN KEY("siRNA_id") REFERENCES "siRNA" (id)
);
CREATE TABLE "siRNA_available_from" (
	"siRNA_id" TEXT, 
	available_from VARCHAR(16), 
	PRIMARY KEY ("siRNA_id", available_from), 
	FOREIGN KEY("siRNA_id") REFERENCES "siRNA" (id)
);
CREATE TABLE "siRNA_has_chemical_role" (
	"siRNA_id" TEXT, 
	has_chemical_role_id TEXT, 
	PRIMARY KEY ("siRNA_id", has_chemical_role_id), 
	FOREIGN KEY("siRNA_id") REFERENCES "siRNA" (id), 
	FOREIGN KEY(has_chemical_role_id) REFERENCES "chemical role" (id)
);
CREATE TABLE "siRNA_provided_by" (
	"siRNA_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("siRNA_id", provided_by), 
	FOREIGN KEY("siRNA_id") REFERENCES "siRNA" (id)
);
CREATE TABLE "siRNA_category" (
	"siRNA_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("siRNA_id", category), 
	FOREIGN KEY("siRNA_id") REFERENCES "siRNA" (id)
);
CREATE TABLE "siRNA_has_attribute" (
	"siRNA_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("siRNA_id", has_attribute_id), 
	FOREIGN KEY("siRNA_id") REFERENCES "siRNA" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "siRNA_in_taxon" (
	"siRNA_id" TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY ("siRNA_id", in_taxon), 
	FOREIGN KEY("siRNA_id") REFERENCES "siRNA" (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE "gene family_has_attribute" (
	"gene family_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("gene family_id", has_attribute_id), 
	FOREIGN KEY("gene family_id") REFERENCES "gene family" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE zygosity_has_quantitative_value (
	zygosity_id TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY (zygosity_id, has_quantitative_value_id), 
	FOREIGN KEY(zygosity_id) REFERENCES zygosity (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE haplotype_has_attribute (
	haplotype_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (haplotype_id, has_attribute_id), 
	FOREIGN KEY(haplotype_id) REFERENCES haplotype (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "sequence variant_has_attribute" (
	"sequence variant_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("sequence variant_id", has_attribute_id), 
	FOREIGN KEY("sequence variant_id") REFERENCES "sequence variant" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE snv_has_attribute (
	snv_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (snv_id, has_attribute_id), 
	FOREIGN KEY(snv_id) REFERENCES snv (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "reagent targeted gene_has_attribute" (
	"reagent targeted gene_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("reagent targeted gene_id", has_attribute_id), 
	FOREIGN KEY("reagent targeted gene_id") REFERENCES "reagent targeted gene" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "clinical attribute_has_quantitative_value" (
	"clinical attribute_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("clinical attribute_id", has_quantitative_value_id), 
	FOREIGN KEY("clinical attribute_id") REFERENCES "clinical attribute" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "clinical measurement_has_quantitative_value" (
	"clinical measurement_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("clinical measurement_id", has_quantitative_value_id), 
	FOREIGN KEY("clinical measurement_id") REFERENCES "clinical measurement" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "clinical modifier_has_quantitative_value" (
	"clinical modifier_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("clinical modifier_id", has_quantitative_value_id), 
	FOREIGN KEY("clinical modifier_id") REFERENCES "clinical modifier" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "clinical course_has_quantitative_value" (
	"clinical course_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("clinical course_id", has_quantitative_value_id), 
	FOREIGN KEY("clinical course_id") REFERENCES "clinical course" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE onset_has_quantitative_value (
	onset_id TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY (onset_id, has_quantitative_value_id), 
	FOREIGN KEY(onset_id) REFERENCES onset (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "clinical entity_has_attribute" (
	"clinical entity_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("clinical entity_id", has_attribute_id), 
	FOREIGN KEY("clinical entity_id") REFERENCES "clinical entity" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "clinical trial_has_attribute" (
	"clinical trial_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("clinical trial_id", has_attribute_id), 
	FOREIGN KEY("clinical trial_id") REFERENCES "clinical trial" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "clinical intervention_has_attribute" (
	"clinical intervention_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("clinical intervention_id", has_attribute_id), 
	FOREIGN KEY("clinical intervention_id") REFERENCES "clinical intervention" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "clinical finding_has_attribute" (
	"clinical finding_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("clinical finding_id", has_attribute_id), 
	FOREIGN KEY("clinical finding_id") REFERENCES "clinical finding" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES "clinical attribute" (id)
);
CREATE TABLE hospitalization_has_attribute (
	hospitalization_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (hospitalization_id, has_attribute_id), 
	FOREIGN KEY(hospitalization_id) REFERENCES hospitalization (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "socioeconomic attribute_has_quantitative_value" (
	"socioeconomic attribute_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("socioeconomic attribute_id", has_quantitative_value_id), 
	FOREIGN KEY("socioeconomic attribute_id") REFERENCES "socioeconomic attribute" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE case_has_attribute (
	case_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (case_id, has_attribute_id), 
	FOREIGN KEY(case_id) REFERENCES "case" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE cohort_has_attribute (
	cohort_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (cohort_id, has_attribute_id), 
	FOREIGN KEY(cohort_id) REFERENCES cohort (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "pathological process_has_attribute" (
	"pathological process_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("pathological process_id", has_attribute_id), 
	FOREIGN KEY("pathological process_id") REFERENCES "pathological process" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "pathological anatomical structure_has_attribute" (
	"pathological anatomical structure_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("pathological anatomical structure_id", has_attribute_id), 
	FOREIGN KEY("pathological anatomical structure_id") REFERENCES "pathological anatomical structure" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE treatment_has_attribute (
	treatment_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (treatment_id, has_attribute_id), 
	FOREIGN KEY(treatment_id) REFERENCES treatment (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE association_qualifier (
	association_id TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY (association_id, qualifier_id), 
	FOREIGN KEY(association_id) REFERENCES association (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE association_publication (
	association_id TEXT, 
	publication TEXT, 
	PRIMARY KEY (association_id, publication), 
	FOREIGN KEY(association_id) REFERENCES association (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE association_has_evidence (
	association_id TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY (association_id, has_evidence), 
	FOREIGN KEY(association_id) REFERENCES association (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE association_knowledge_source (
	association_id TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY (association_id, knowledge_source), 
	FOREIGN KEY(association_id) REFERENCES association (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE association_original_knowledge_source (
	association_id TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY (association_id, original_knowledge_source), 
	FOREIGN KEY(association_id) REFERENCES association (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE association_primary_knowledge_source (
	association_id TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY (association_id, primary_knowledge_source), 
	FOREIGN KEY(association_id) REFERENCES association (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE association_aggregator_knowledge_source (
	association_id TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY (association_id, aggregator_knowledge_source), 
	FOREIGN KEY(association_id) REFERENCES association (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE association_category (
	association_id TEXT, 
	category TEXT, 
	PRIMARY KEY (association_id, category), 
	FOREIGN KEY(association_id) REFERENCES association (id)
);
CREATE TABLE association_has_attribute (
	association_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (association_id, has_attribute_id), 
	FOREIGN KEY(association_id) REFERENCES association (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "contributor association_qualifier" (
	"contributor association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("contributor association_id", qualifier_id), 
	FOREIGN KEY("contributor association_id") REFERENCES "contributor association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "contributor association_publication" (
	"contributor association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("contributor association_id", publication), 
	FOREIGN KEY("contributor association_id") REFERENCES "contributor association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "contributor association_has_evidence" (
	"contributor association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("contributor association_id", has_evidence), 
	FOREIGN KEY("contributor association_id") REFERENCES "contributor association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "contributor association_knowledge_source" (
	"contributor association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("contributor association_id", knowledge_source), 
	FOREIGN KEY("contributor association_id") REFERENCES "contributor association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "contributor association_original_knowledge_source" (
	"contributor association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("contributor association_id", original_knowledge_source), 
	FOREIGN KEY("contributor association_id") REFERENCES "contributor association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "contributor association_primary_knowledge_source" (
	"contributor association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("contributor association_id", primary_knowledge_source), 
	FOREIGN KEY("contributor association_id") REFERENCES "contributor association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "contributor association_aggregator_knowledge_source" (
	"contributor association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("contributor association_id", aggregator_knowledge_source), 
	FOREIGN KEY("contributor association_id") REFERENCES "contributor association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "contributor association_category" (
	"contributor association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("contributor association_id", category), 
	FOREIGN KEY("contributor association_id") REFERENCES "contributor association" (id)
);
CREATE TABLE "contributor association_has_attribute" (
	"contributor association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("contributor association_id", has_attribute_id), 
	FOREIGN KEY("contributor association_id") REFERENCES "contributor association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "gene to gene association_qualifier" (
	"gene to gene association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("gene to gene association_id", qualifier_id), 
	FOREIGN KEY("gene to gene association_id") REFERENCES "gene to gene association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to gene association_publication" (
	"gene to gene association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("gene to gene association_id", publication), 
	FOREIGN KEY("gene to gene association_id") REFERENCES "gene to gene association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "gene to gene association_has_evidence" (
	"gene to gene association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("gene to gene association_id", has_evidence), 
	FOREIGN KEY("gene to gene association_id") REFERENCES "gene to gene association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "gene to gene association_knowledge_source" (
	"gene to gene association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("gene to gene association_id", knowledge_source), 
	FOREIGN KEY("gene to gene association_id") REFERENCES "gene to gene association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene to gene association_original_knowledge_source" (
	"gene to gene association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("gene to gene association_id", original_knowledge_source), 
	FOREIGN KEY("gene to gene association_id") REFERENCES "gene to gene association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene to gene association_primary_knowledge_source" (
	"gene to gene association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("gene to gene association_id", primary_knowledge_source), 
	FOREIGN KEY("gene to gene association_id") REFERENCES "gene to gene association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene to gene association_aggregator_knowledge_source" (
	"gene to gene association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("gene to gene association_id", aggregator_knowledge_source), 
	FOREIGN KEY("gene to gene association_id") REFERENCES "gene to gene association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene to gene association_category" (
	"gene to gene association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("gene to gene association_id", category), 
	FOREIGN KEY("gene to gene association_id") REFERENCES "gene to gene association" (id)
);
CREATE TABLE "gene to gene association_has_attribute" (
	"gene to gene association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("gene to gene association_id", has_attribute_id), 
	FOREIGN KEY("gene to gene association_id") REFERENCES "gene to gene association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "gene to gene homology association_qualifier" (
	"gene to gene homology association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("gene to gene homology association_id", qualifier_id), 
	FOREIGN KEY("gene to gene homology association_id") REFERENCES "gene to gene homology association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to gene homology association_publication" (
	"gene to gene homology association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("gene to gene homology association_id", publication), 
	FOREIGN KEY("gene to gene homology association_id") REFERENCES "gene to gene homology association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "gene to gene homology association_has_evidence" (
	"gene to gene homology association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("gene to gene homology association_id", has_evidence), 
	FOREIGN KEY("gene to gene homology association_id") REFERENCES "gene to gene homology association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "gene to gene homology association_knowledge_source" (
	"gene to gene homology association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("gene to gene homology association_id", knowledge_source), 
	FOREIGN KEY("gene to gene homology association_id") REFERENCES "gene to gene homology association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene to gene homology association_original_knowledge_source" (
	"gene to gene homology association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("gene to gene homology association_id", original_knowledge_source), 
	FOREIGN KEY("gene to gene homology association_id") REFERENCES "gene to gene homology association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene to gene homology association_primary_knowledge_source" (
	"gene to gene homology association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("gene to gene homology association_id", primary_knowledge_source), 
	FOREIGN KEY("gene to gene homology association_id") REFERENCES "gene to gene homology association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene to gene homology association_aggregator_knowledge_source" (
	"gene to gene homology association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("gene to gene homology association_id", aggregator_knowledge_source), 
	FOREIGN KEY("gene to gene homology association_id") REFERENCES "gene to gene homology association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene to gene homology association_category" (
	"gene to gene homology association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("gene to gene homology association_id", category), 
	FOREIGN KEY("gene to gene homology association_id") REFERENCES "gene to gene homology association" (id)
);
CREATE TABLE "gene to gene homology association_has_attribute" (
	"gene to gene homology association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("gene to gene homology association_id", has_attribute_id), 
	FOREIGN KEY("gene to gene homology association_id") REFERENCES "gene to gene homology association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "gene to gene coexpression association_qualifier" (
	"gene to gene coexpression association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("gene to gene coexpression association_id", qualifier_id), 
	FOREIGN KEY("gene to gene coexpression association_id") REFERENCES "gene to gene coexpression association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to gene coexpression association_publication" (
	"gene to gene coexpression association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("gene to gene coexpression association_id", publication), 
	FOREIGN KEY("gene to gene coexpression association_id") REFERENCES "gene to gene coexpression association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "gene to gene coexpression association_has_evidence" (
	"gene to gene coexpression association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("gene to gene coexpression association_id", has_evidence), 
	FOREIGN KEY("gene to gene coexpression association_id") REFERENCES "gene to gene coexpression association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "gene to gene coexpression association_knowledge_source" (
	"gene to gene coexpression association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("gene to gene coexpression association_id", knowledge_source), 
	FOREIGN KEY("gene to gene coexpression association_id") REFERENCES "gene to gene coexpression association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene to gene coexpression association_original_knowledge_source" (
	"gene to gene coexpression association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("gene to gene coexpression association_id", original_knowledge_source), 
	FOREIGN KEY("gene to gene coexpression association_id") REFERENCES "gene to gene coexpression association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene to gene coexpression association_primary_knowledge_source" (
	"gene to gene coexpression association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("gene to gene coexpression association_id", primary_knowledge_source), 
	FOREIGN KEY("gene to gene coexpression association_id") REFERENCES "gene to gene coexpression association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene to gene coexpression association_aggregator_knowledge_source" (
	"gene to gene coexpression association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("gene to gene coexpression association_id", aggregator_knowledge_source), 
	FOREIGN KEY("gene to gene coexpression association_id") REFERENCES "gene to gene coexpression association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene to gene coexpression association_category" (
	"gene to gene coexpression association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("gene to gene coexpression association_id", category), 
	FOREIGN KEY("gene to gene coexpression association_id") REFERENCES "gene to gene coexpression association" (id)
);
CREATE TABLE "gene to gene coexpression association_has_attribute" (
	"gene to gene coexpression association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("gene to gene coexpression association_id", has_attribute_id), 
	FOREIGN KEY("gene to gene coexpression association_id") REFERENCES "gene to gene coexpression association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "pairwise gene to gene interaction_qualifier" (
	"pairwise gene to gene interaction_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("pairwise gene to gene interaction_id", qualifier_id), 
	FOREIGN KEY("pairwise gene to gene interaction_id") REFERENCES "pairwise gene to gene interaction" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "pairwise gene to gene interaction_publication" (
	"pairwise gene to gene interaction_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("pairwise gene to gene interaction_id", publication), 
	FOREIGN KEY("pairwise gene to gene interaction_id") REFERENCES "pairwise gene to gene interaction" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "pairwise gene to gene interaction_has_evidence" (
	"pairwise gene to gene interaction_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("pairwise gene to gene interaction_id", has_evidence), 
	FOREIGN KEY("pairwise gene to gene interaction_id") REFERENCES "pairwise gene to gene interaction" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "pairwise gene to gene interaction_knowledge_source" (
	"pairwise gene to gene interaction_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("pairwise gene to gene interaction_id", knowledge_source), 
	FOREIGN KEY("pairwise gene to gene interaction_id") REFERENCES "pairwise gene to gene interaction" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "pairwise gene to gene interaction_original_knowledge_source" (
	"pairwise gene to gene interaction_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("pairwise gene to gene interaction_id", original_knowledge_source), 
	FOREIGN KEY("pairwise gene to gene interaction_id") REFERENCES "pairwise gene to gene interaction" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "pairwise gene to gene interaction_primary_knowledge_source" (
	"pairwise gene to gene interaction_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("pairwise gene to gene interaction_id", primary_knowledge_source), 
	FOREIGN KEY("pairwise gene to gene interaction_id") REFERENCES "pairwise gene to gene interaction" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "pairwise gene to gene interaction_aggregator_knowledge_source" (
	"pairwise gene to gene interaction_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("pairwise gene to gene interaction_id", aggregator_knowledge_source), 
	FOREIGN KEY("pairwise gene to gene interaction_id") REFERENCES "pairwise gene to gene interaction" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "pairwise gene to gene interaction_category" (
	"pairwise gene to gene interaction_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("pairwise gene to gene interaction_id", category), 
	FOREIGN KEY("pairwise gene to gene interaction_id") REFERENCES "pairwise gene to gene interaction" (id)
);
CREATE TABLE "pairwise gene to gene interaction_has_attribute" (
	"pairwise gene to gene interaction_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("pairwise gene to gene interaction_id", has_attribute_id), 
	FOREIGN KEY("pairwise gene to gene interaction_id") REFERENCES "pairwise gene to gene interaction" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "cell line to disease or phenotypic feature association_qualifier" (
	"cell line to disease or phenotypic feature association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("cell line to disease or phenotypic feature association_id", qualifier_id), 
	FOREIGN KEY("cell line to disease or phenotypic feature association_id") REFERENCES "cell line to disease or phenotypic feature association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "cell line to disease or phenotypic feature association_publication" (
	"cell line to disease or phenotypic feature association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("cell line to disease or phenotypic feature association_id", publication), 
	FOREIGN KEY("cell line to disease or phenotypic feature association_id") REFERENCES "cell line to disease or phenotypic feature association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "cell line to disease or phenotypic feature association_has_evidence" (
	"cell line to disease or phenotypic feature association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("cell line to disease or phenotypic feature association_id", has_evidence), 
	FOREIGN KEY("cell line to disease or phenotypic feature association_id") REFERENCES "cell line to disease or phenotypic feature association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "cell line to disease or phenotypic feature association_knowledge_source" (
	"cell line to disease or phenotypic feature association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("cell line to disease or phenotypic feature association_id", knowledge_source), 
	FOREIGN KEY("cell line to disease or phenotypic feature association_id") REFERENCES "cell line to disease or phenotypic feature association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "cell line to disease or phenotypic feature association_original_knowledge_source" (
	"cell line to disease or phenotypic feature association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("cell line to disease or phenotypic feature association_id", original_knowledge_source), 
	FOREIGN KEY("cell line to disease or phenotypic feature association_id") REFERENCES "cell line to disease or phenotypic feature association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "cell line to disease or phenotypic feature association_primary_knowledge_source" (
	"cell line to disease or phenotypic feature association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("cell line to disease or phenotypic feature association_id", primary_knowledge_source), 
	FOREIGN KEY("cell line to disease or phenotypic feature association_id") REFERENCES "cell line to disease or phenotypic feature association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "cell line to disease or phenotypic feature association_aggregator_knowledge_source" (
	"cell line to disease or phenotypic feature association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("cell line to disease or phenotypic feature association_id", aggregator_knowledge_source), 
	FOREIGN KEY("cell line to disease or phenotypic feature association_id") REFERENCES "cell line to disease or phenotypic feature association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "cell line to disease or phenotypic feature association_category" (
	"cell line to disease or phenotypic feature association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("cell line to disease or phenotypic feature association_id", category), 
	FOREIGN KEY("cell line to disease or phenotypic feature association_id") REFERENCES "cell line to disease or phenotypic feature association" (id)
);
CREATE TABLE "cell line to disease or phenotypic feature association_has_attribute" (
	"cell line to disease or phenotypic feature association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("cell line to disease or phenotypic feature association_id", has_attribute_id), 
	FOREIGN KEY("cell line to disease or phenotypic feature association_id") REFERENCES "cell line to disease or phenotypic feature association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "chemical to chemical association_qualifier" (
	"chemical to chemical association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("chemical to chemical association_id", qualifier_id), 
	FOREIGN KEY("chemical to chemical association_id") REFERENCES "chemical to chemical association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical to chemical association_publication" (
	"chemical to chemical association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("chemical to chemical association_id", publication), 
	FOREIGN KEY("chemical to chemical association_id") REFERENCES "chemical to chemical association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "chemical to chemical association_has_evidence" (
	"chemical to chemical association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("chemical to chemical association_id", has_evidence), 
	FOREIGN KEY("chemical to chemical association_id") REFERENCES "chemical to chemical association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "chemical to chemical association_knowledge_source" (
	"chemical to chemical association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("chemical to chemical association_id", knowledge_source), 
	FOREIGN KEY("chemical to chemical association_id") REFERENCES "chemical to chemical association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "chemical to chemical association_original_knowledge_source" (
	"chemical to chemical association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("chemical to chemical association_id", original_knowledge_source), 
	FOREIGN KEY("chemical to chemical association_id") REFERENCES "chemical to chemical association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "chemical to chemical association_primary_knowledge_source" (
	"chemical to chemical association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("chemical to chemical association_id", primary_knowledge_source), 
	FOREIGN KEY("chemical to chemical association_id") REFERENCES "chemical to chemical association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "chemical to chemical association_aggregator_knowledge_source" (
	"chemical to chemical association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("chemical to chemical association_id", aggregator_knowledge_source), 
	FOREIGN KEY("chemical to chemical association_id") REFERENCES "chemical to chemical association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "chemical to chemical association_category" (
	"chemical to chemical association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("chemical to chemical association_id", category), 
	FOREIGN KEY("chemical to chemical association_id") REFERENCES "chemical to chemical association" (id)
);
CREATE TABLE "chemical to chemical association_has_attribute" (
	"chemical to chemical association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("chemical to chemical association_id", has_attribute_id), 
	FOREIGN KEY("chemical to chemical association_id") REFERENCES "chemical to chemical association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "chemical to chemical derivation association_catalyst_qualifier" (
	"chemical to chemical derivation association_id" TEXT, 
	catalyst_qualifier_id TEXT, 
	PRIMARY KEY ("chemical to chemical derivation association_id", catalyst_qualifier_id), 
	FOREIGN KEY("chemical to chemical derivation association_id") REFERENCES "chemical to chemical derivation association" (id), 
	FOREIGN KEY(catalyst_qualifier_id) REFERENCES "macromolecular machine mixin" (id)
);
CREATE TABLE "chemical to chemical derivation association_qualifier" (
	"chemical to chemical derivation association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("chemical to chemical derivation association_id", qualifier_id), 
	FOREIGN KEY("chemical to chemical derivation association_id") REFERENCES "chemical to chemical derivation association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical to chemical derivation association_publication" (
	"chemical to chemical derivation association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("chemical to chemical derivation association_id", publication), 
	FOREIGN KEY("chemical to chemical derivation association_id") REFERENCES "chemical to chemical derivation association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "chemical to chemical derivation association_has_evidence" (
	"chemical to chemical derivation association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("chemical to chemical derivation association_id", has_evidence), 
	FOREIGN KEY("chemical to chemical derivation association_id") REFERENCES "chemical to chemical derivation association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "chemical to chemical derivation association_knowledge_source" (
	"chemical to chemical derivation association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("chemical to chemical derivation association_id", knowledge_source), 
	FOREIGN KEY("chemical to chemical derivation association_id") REFERENCES "chemical to chemical derivation association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "chemical to chemical derivation association_original_knowledge_source" (
	"chemical to chemical derivation association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("chemical to chemical derivation association_id", original_knowledge_source), 
	FOREIGN KEY("chemical to chemical derivation association_id") REFERENCES "chemical to chemical derivation association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "chemical to chemical derivation association_primary_knowledge_source" (
	"chemical to chemical derivation association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("chemical to chemical derivation association_id", primary_knowledge_source), 
	FOREIGN KEY("chemical to chemical derivation association_id") REFERENCES "chemical to chemical derivation association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "chemical to chemical derivation association_aggregator_knowledge_source" (
	"chemical to chemical derivation association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("chemical to chemical derivation association_id", aggregator_knowledge_source), 
	FOREIGN KEY("chemical to chemical derivation association_id") REFERENCES "chemical to chemical derivation association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "chemical to chemical derivation association_category" (
	"chemical to chemical derivation association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("chemical to chemical derivation association_id", category), 
	FOREIGN KEY("chemical to chemical derivation association_id") REFERENCES "chemical to chemical derivation association" (id)
);
CREATE TABLE "chemical to chemical derivation association_has_attribute" (
	"chemical to chemical derivation association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("chemical to chemical derivation association_id", has_attribute_id), 
	FOREIGN KEY("chemical to chemical derivation association_id") REFERENCES "chemical to chemical derivation association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "chemical to disease or phenotypic feature association_qualifier" (
	"chemical to disease or phenotypic feature association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("chemical to disease or phenotypic feature association_id", qualifier_id), 
	FOREIGN KEY("chemical to disease or phenotypic feature association_id") REFERENCES "chemical to disease or phenotypic feature association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical to disease or phenotypic feature association_publication" (
	"chemical to disease or phenotypic feature association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("chemical to disease or phenotypic feature association_id", publication), 
	FOREIGN KEY("chemical to disease or phenotypic feature association_id") REFERENCES "chemical to disease or phenotypic feature association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "chemical to disease or phenotypic feature association_has_evidence" (
	"chemical to disease or phenotypic feature association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("chemical to disease or phenotypic feature association_id", has_evidence), 
	FOREIGN KEY("chemical to disease or phenotypic feature association_id") REFERENCES "chemical to disease or phenotypic feature association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "chemical to disease or phenotypic feature association_knowledge_source" (
	"chemical to disease or phenotypic feature association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("chemical to disease or phenotypic feature association_id", knowledge_source), 
	FOREIGN KEY("chemical to disease or phenotypic feature association_id") REFERENCES "chemical to disease or phenotypic feature association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "chemical to disease or phenotypic feature association_original_knowledge_source" (
	"chemical to disease or phenotypic feature association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("chemical to disease or phenotypic feature association_id", original_knowledge_source), 
	FOREIGN KEY("chemical to disease or phenotypic feature association_id") REFERENCES "chemical to disease or phenotypic feature association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "chemical to disease or phenotypic feature association_primary_knowledge_source" (
	"chemical to disease or phenotypic feature association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("chemical to disease or phenotypic feature association_id", primary_knowledge_source), 
	FOREIGN KEY("chemical to disease or phenotypic feature association_id") REFERENCES "chemical to disease or phenotypic feature association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "chemical to disease or phenotypic feature association_aggregator_knowledge_source" (
	"chemical to disease or phenotypic feature association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("chemical to disease or phenotypic feature association_id", aggregator_knowledge_source), 
	FOREIGN KEY("chemical to disease or phenotypic feature association_id") REFERENCES "chemical to disease or phenotypic feature association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "chemical to disease or phenotypic feature association_category" (
	"chemical to disease or phenotypic feature association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("chemical to disease or phenotypic feature association_id", category), 
	FOREIGN KEY("chemical to disease or phenotypic feature association_id") REFERENCES "chemical to disease or phenotypic feature association" (id)
);
CREATE TABLE "chemical to disease or phenotypic feature association_has_attribute" (
	"chemical to disease or phenotypic feature association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("chemical to disease or phenotypic feature association_id", has_attribute_id), 
	FOREIGN KEY("chemical to disease or phenotypic feature association_id") REFERENCES "chemical to disease or phenotypic feature association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "chemical to pathway association_qualifier" (
	"chemical to pathway association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("chemical to pathway association_id", qualifier_id), 
	FOREIGN KEY("chemical to pathway association_id") REFERENCES "chemical to pathway association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical to pathway association_publication" (
	"chemical to pathway association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("chemical to pathway association_id", publication), 
	FOREIGN KEY("chemical to pathway association_id") REFERENCES "chemical to pathway association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "chemical to pathway association_has_evidence" (
	"chemical to pathway association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("chemical to pathway association_id", has_evidence), 
	FOREIGN KEY("chemical to pathway association_id") REFERENCES "chemical to pathway association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "chemical to pathway association_knowledge_source" (
	"chemical to pathway association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("chemical to pathway association_id", knowledge_source), 
	FOREIGN KEY("chemical to pathway association_id") REFERENCES "chemical to pathway association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "chemical to pathway association_original_knowledge_source" (
	"chemical to pathway association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("chemical to pathway association_id", original_knowledge_source), 
	FOREIGN KEY("chemical to pathway association_id") REFERENCES "chemical to pathway association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "chemical to pathway association_primary_knowledge_source" (
	"chemical to pathway association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("chemical to pathway association_id", primary_knowledge_source), 
	FOREIGN KEY("chemical to pathway association_id") REFERENCES "chemical to pathway association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "chemical to pathway association_aggregator_knowledge_source" (
	"chemical to pathway association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("chemical to pathway association_id", aggregator_knowledge_source), 
	FOREIGN KEY("chemical to pathway association_id") REFERENCES "chemical to pathway association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "chemical to pathway association_category" (
	"chemical to pathway association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("chemical to pathway association_id", category), 
	FOREIGN KEY("chemical to pathway association_id") REFERENCES "chemical to pathway association" (id)
);
CREATE TABLE "chemical to pathway association_has_attribute" (
	"chemical to pathway association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("chemical to pathway association_id", has_attribute_id), 
	FOREIGN KEY("chemical to pathway association_id") REFERENCES "chemical to pathway association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "chemical to gene association_qualifier" (
	"chemical to gene association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("chemical to gene association_id", qualifier_id), 
	FOREIGN KEY("chemical to gene association_id") REFERENCES "chemical to gene association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical to gene association_publication" (
	"chemical to gene association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("chemical to gene association_id", publication), 
	FOREIGN KEY("chemical to gene association_id") REFERENCES "chemical to gene association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "chemical to gene association_has_evidence" (
	"chemical to gene association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("chemical to gene association_id", has_evidence), 
	FOREIGN KEY("chemical to gene association_id") REFERENCES "chemical to gene association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "chemical to gene association_knowledge_source" (
	"chemical to gene association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("chemical to gene association_id", knowledge_source), 
	FOREIGN KEY("chemical to gene association_id") REFERENCES "chemical to gene association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "chemical to gene association_original_knowledge_source" (
	"chemical to gene association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("chemical to gene association_id", original_knowledge_source), 
	FOREIGN KEY("chemical to gene association_id") REFERENCES "chemical to gene association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "chemical to gene association_primary_knowledge_source" (
	"chemical to gene association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("chemical to gene association_id", primary_knowledge_source), 
	FOREIGN KEY("chemical to gene association_id") REFERENCES "chemical to gene association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "chemical to gene association_aggregator_knowledge_source" (
	"chemical to gene association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("chemical to gene association_id", aggregator_knowledge_source), 
	FOREIGN KEY("chemical to gene association_id") REFERENCES "chemical to gene association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "chemical to gene association_category" (
	"chemical to gene association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("chemical to gene association_id", category), 
	FOREIGN KEY("chemical to gene association_id") REFERENCES "chemical to gene association" (id)
);
CREATE TABLE "chemical to gene association_has_attribute" (
	"chemical to gene association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("chemical to gene association_id", has_attribute_id), 
	FOREIGN KEY("chemical to gene association_id") REFERENCES "chemical to gene association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "material sample derivation association_qualifier" (
	"material sample derivation association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("material sample derivation association_id", qualifier_id), 
	FOREIGN KEY("material sample derivation association_id") REFERENCES "material sample derivation association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "material sample derivation association_publication" (
	"material sample derivation association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("material sample derivation association_id", publication), 
	FOREIGN KEY("material sample derivation association_id") REFERENCES "material sample derivation association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "material sample derivation association_has_evidence" (
	"material sample derivation association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("material sample derivation association_id", has_evidence), 
	FOREIGN KEY("material sample derivation association_id") REFERENCES "material sample derivation association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "material sample derivation association_knowledge_source" (
	"material sample derivation association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("material sample derivation association_id", knowledge_source), 
	FOREIGN KEY("material sample derivation association_id") REFERENCES "material sample derivation association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "material sample derivation association_original_knowledge_source" (
	"material sample derivation association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("material sample derivation association_id", original_knowledge_source), 
	FOREIGN KEY("material sample derivation association_id") REFERENCES "material sample derivation association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "material sample derivation association_primary_knowledge_source" (
	"material sample derivation association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("material sample derivation association_id", primary_knowledge_source), 
	FOREIGN KEY("material sample derivation association_id") REFERENCES "material sample derivation association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "material sample derivation association_aggregator_knowledge_source" (
	"material sample derivation association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("material sample derivation association_id", aggregator_knowledge_source), 
	FOREIGN KEY("material sample derivation association_id") REFERENCES "material sample derivation association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "material sample derivation association_category" (
	"material sample derivation association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("material sample derivation association_id", category), 
	FOREIGN KEY("material sample derivation association_id") REFERENCES "material sample derivation association" (id)
);
CREATE TABLE "material sample derivation association_has_attribute" (
	"material sample derivation association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("material sample derivation association_id", has_attribute_id), 
	FOREIGN KEY("material sample derivation association_id") REFERENCES "material sample derivation association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "material sample to disease or phenotypic feature association_qualifier" (
	"material sample to disease or phenotypic feature association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("material sample to disease or phenotypic feature association_id", qualifier_id), 
	FOREIGN KEY("material sample to disease or phenotypic feature association_id") REFERENCES "material sample to disease or phenotypic feature association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "material sample to disease or phenotypic feature association_publication" (
	"material sample to disease or phenotypic feature association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("material sample to disease or phenotypic feature association_id", publication), 
	FOREIGN KEY("material sample to disease or phenotypic feature association_id") REFERENCES "material sample to disease or phenotypic feature association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "material sample to disease or phenotypic feature association_has_evidence" (
	"material sample to disease or phenotypic feature association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("material sample to disease or phenotypic feature association_id", has_evidence), 
	FOREIGN KEY("material sample to disease or phenotypic feature association_id") REFERENCES "material sample to disease or phenotypic feature association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "material sample to disease or phenotypic feature association_knowledge_source" (
	"material sample to disease or phenotypic feature association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("material sample to disease or phenotypic feature association_id", knowledge_source), 
	FOREIGN KEY("material sample to disease or phenotypic feature association_id") REFERENCES "material sample to disease or phenotypic feature association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "material sample to disease or phenotypic feature association_original_knowledge_source" (
	"material sample to disease or phenotypic feature association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("material sample to disease or phenotypic feature association_id", original_knowledge_source), 
	FOREIGN KEY("material sample to disease or phenotypic feature association_id") REFERENCES "material sample to disease or phenotypic feature association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "material sample to disease or phenotypic feature association_primary_knowledge_source" (
	"material sample to disease or phenotypic feature association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("material sample to disease or phenotypic feature association_id", primary_knowledge_source), 
	FOREIGN KEY("material sample to disease or phenotypic feature association_id") REFERENCES "material sample to disease or phenotypic feature association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "material sample to disease or phenotypic feature association_aggregator_knowledge_source" (
	"material sample to disease or phenotypic feature association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("material sample to disease or phenotypic feature association_id", aggregator_knowledge_source), 
	FOREIGN KEY("material sample to disease or phenotypic feature association_id") REFERENCES "material sample to disease or phenotypic feature association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "material sample to disease or phenotypic feature association_category" (
	"material sample to disease or phenotypic feature association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("material sample to disease or phenotypic feature association_id", category), 
	FOREIGN KEY("material sample to disease or phenotypic feature association_id") REFERENCES "material sample to disease or phenotypic feature association" (id)
);
CREATE TABLE "material sample to disease or phenotypic feature association_has_attribute" (
	"material sample to disease or phenotypic feature association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("material sample to disease or phenotypic feature association_id", has_attribute_id), 
	FOREIGN KEY("material sample to disease or phenotypic feature association_id") REFERENCES "material sample to disease or phenotypic feature association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "disease to exposure event association_qualifier" (
	"disease to exposure event association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("disease to exposure event association_id", qualifier_id), 
	FOREIGN KEY("disease to exposure event association_id") REFERENCES "disease to exposure event association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "disease to exposure event association_publication" (
	"disease to exposure event association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("disease to exposure event association_id", publication), 
	FOREIGN KEY("disease to exposure event association_id") REFERENCES "disease to exposure event association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "disease to exposure event association_has_evidence" (
	"disease to exposure event association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("disease to exposure event association_id", has_evidence), 
	FOREIGN KEY("disease to exposure event association_id") REFERENCES "disease to exposure event association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "disease to exposure event association_knowledge_source" (
	"disease to exposure event association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("disease to exposure event association_id", knowledge_source), 
	FOREIGN KEY("disease to exposure event association_id") REFERENCES "disease to exposure event association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "disease to exposure event association_original_knowledge_source" (
	"disease to exposure event association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("disease to exposure event association_id", original_knowledge_source), 
	FOREIGN KEY("disease to exposure event association_id") REFERENCES "disease to exposure event association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "disease to exposure event association_primary_knowledge_source" (
	"disease to exposure event association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("disease to exposure event association_id", primary_knowledge_source), 
	FOREIGN KEY("disease to exposure event association_id") REFERENCES "disease to exposure event association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "disease to exposure event association_aggregator_knowledge_source" (
	"disease to exposure event association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("disease to exposure event association_id", aggregator_knowledge_source), 
	FOREIGN KEY("disease to exposure event association_id") REFERENCES "disease to exposure event association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "disease to exposure event association_category" (
	"disease to exposure event association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("disease to exposure event association_id", category), 
	FOREIGN KEY("disease to exposure event association_id") REFERENCES "disease to exposure event association" (id)
);
CREATE TABLE "disease to exposure event association_has_attribute" (
	"disease to exposure event association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("disease to exposure event association_id", has_attribute_id), 
	FOREIGN KEY("disease to exposure event association_id") REFERENCES "disease to exposure event association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "exposure event to outcome association_qualifier" (
	"exposure event to outcome association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("exposure event to outcome association_id", qualifier_id), 
	FOREIGN KEY("exposure event to outcome association_id") REFERENCES "exposure event to outcome association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "exposure event to outcome association_publication" (
	"exposure event to outcome association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("exposure event to outcome association_id", publication), 
	FOREIGN KEY("exposure event to outcome association_id") REFERENCES "exposure event to outcome association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "exposure event to outcome association_has_evidence" (
	"exposure event to outcome association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("exposure event to outcome association_id", has_evidence), 
	FOREIGN KEY("exposure event to outcome association_id") REFERENCES "exposure event to outcome association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "exposure event to outcome association_knowledge_source" (
	"exposure event to outcome association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("exposure event to outcome association_id", knowledge_source), 
	FOREIGN KEY("exposure event to outcome association_id") REFERENCES "exposure event to outcome association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "exposure event to outcome association_original_knowledge_source" (
	"exposure event to outcome association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("exposure event to outcome association_id", original_knowledge_source), 
	FOREIGN KEY("exposure event to outcome association_id") REFERENCES "exposure event to outcome association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "exposure event to outcome association_primary_knowledge_source" (
	"exposure event to outcome association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("exposure event to outcome association_id", primary_knowledge_source), 
	FOREIGN KEY("exposure event to outcome association_id") REFERENCES "exposure event to outcome association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "exposure event to outcome association_aggregator_knowledge_source" (
	"exposure event to outcome association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("exposure event to outcome association_id", aggregator_knowledge_source), 
	FOREIGN KEY("exposure event to outcome association_id") REFERENCES "exposure event to outcome association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "exposure event to outcome association_category" (
	"exposure event to outcome association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("exposure event to outcome association_id", category), 
	FOREIGN KEY("exposure event to outcome association_id") REFERENCES "exposure event to outcome association" (id)
);
CREATE TABLE "exposure event to outcome association_has_attribute" (
	"exposure event to outcome association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("exposure event to outcome association_id", has_attribute_id), 
	FOREIGN KEY("exposure event to outcome association_id") REFERENCES "exposure event to outcome association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "information content entity to named thing association_qualifier" (
	"information content entity to named thing association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("information content entity to named thing association_id", qualifier_id), 
	FOREIGN KEY("information content entity to named thing association_id") REFERENCES "information content entity to named thing association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "information content entity to named thing association_publication" (
	"information content entity to named thing association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("information content entity to named thing association_id", publication), 
	FOREIGN KEY("information content entity to named thing association_id") REFERENCES "information content entity to named thing association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "information content entity to named thing association_has_evidence" (
	"information content entity to named thing association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("information content entity to named thing association_id", has_evidence), 
	FOREIGN KEY("information content entity to named thing association_id") REFERENCES "information content entity to named thing association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "information content entity to named thing association_knowledge_source" (
	"information content entity to named thing association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("information content entity to named thing association_id", knowledge_source), 
	FOREIGN KEY("information content entity to named thing association_id") REFERENCES "information content entity to named thing association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "information content entity to named thing association_original_knowledge_source" (
	"information content entity to named thing association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("information content entity to named thing association_id", original_knowledge_source), 
	FOREIGN KEY("information content entity to named thing association_id") REFERENCES "information content entity to named thing association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "information content entity to named thing association_primary_knowledge_source" (
	"information content entity to named thing association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("information content entity to named thing association_id", primary_knowledge_source), 
	FOREIGN KEY("information content entity to named thing association_id") REFERENCES "information content entity to named thing association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "information content entity to named thing association_aggregator_knowledge_source" (
	"information content entity to named thing association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("information content entity to named thing association_id", aggregator_knowledge_source), 
	FOREIGN KEY("information content entity to named thing association_id") REFERENCES "information content entity to named thing association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "information content entity to named thing association_category" (
	"information content entity to named thing association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("information content entity to named thing association_id", category), 
	FOREIGN KEY("information content entity to named thing association_id") REFERENCES "information content entity to named thing association" (id)
);
CREATE TABLE "information content entity to named thing association_has_attribute" (
	"information content entity to named thing association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("information content entity to named thing association_id", has_attribute_id), 
	FOREIGN KEY("information content entity to named thing association_id") REFERENCES "information content entity to named thing association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "disease or phenotypic feature to location association_qualifier" (
	"disease or phenotypic feature to location association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("disease or phenotypic feature to location association_id", qualifier_id), 
	FOREIGN KEY("disease or phenotypic feature to location association_id") REFERENCES "disease or phenotypic feature to location association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "disease or phenotypic feature to location association_publication" (
	"disease or phenotypic feature to location association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("disease or phenotypic feature to location association_id", publication), 
	FOREIGN KEY("disease or phenotypic feature to location association_id") REFERENCES "disease or phenotypic feature to location association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "disease or phenotypic feature to location association_has_evidence" (
	"disease or phenotypic feature to location association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("disease or phenotypic feature to location association_id", has_evidence), 
	FOREIGN KEY("disease or phenotypic feature to location association_id") REFERENCES "disease or phenotypic feature to location association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "disease or phenotypic feature to location association_knowledge_source" (
	"disease or phenotypic feature to location association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("disease or phenotypic feature to location association_id", knowledge_source), 
	FOREIGN KEY("disease or phenotypic feature to location association_id") REFERENCES "disease or phenotypic feature to location association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "disease or phenotypic feature to location association_original_knowledge_source" (
	"disease or phenotypic feature to location association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("disease or phenotypic feature to location association_id", original_knowledge_source), 
	FOREIGN KEY("disease or phenotypic feature to location association_id") REFERENCES "disease or phenotypic feature to location association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "disease or phenotypic feature to location association_primary_knowledge_source" (
	"disease or phenotypic feature to location association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("disease or phenotypic feature to location association_id", primary_knowledge_source), 
	FOREIGN KEY("disease or phenotypic feature to location association_id") REFERENCES "disease or phenotypic feature to location association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "disease or phenotypic feature to location association_aggregator_knowledge_source" (
	"disease or phenotypic feature to location association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("disease or phenotypic feature to location association_id", aggregator_knowledge_source), 
	FOREIGN KEY("disease or phenotypic feature to location association_id") REFERENCES "disease or phenotypic feature to location association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "disease or phenotypic feature to location association_category" (
	"disease or phenotypic feature to location association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("disease or phenotypic feature to location association_id", category), 
	FOREIGN KEY("disease or phenotypic feature to location association_id") REFERENCES "disease or phenotypic feature to location association" (id)
);
CREATE TABLE "disease or phenotypic feature to location association_has_attribute" (
	"disease or phenotypic feature to location association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("disease or phenotypic feature to location association_id", has_attribute_id), 
	FOREIGN KEY("disease or phenotypic feature to location association_id") REFERENCES "disease or phenotypic feature to location association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "variant to gene association_qualifier" (
	"variant to gene association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("variant to gene association_id", qualifier_id), 
	FOREIGN KEY("variant to gene association_id") REFERENCES "variant to gene association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "variant to gene association_publication" (
	"variant to gene association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("variant to gene association_id", publication), 
	FOREIGN KEY("variant to gene association_id") REFERENCES "variant to gene association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "variant to gene association_has_evidence" (
	"variant to gene association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("variant to gene association_id", has_evidence), 
	FOREIGN KEY("variant to gene association_id") REFERENCES "variant to gene association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "variant to gene association_knowledge_source" (
	"variant to gene association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("variant to gene association_id", knowledge_source), 
	FOREIGN KEY("variant to gene association_id") REFERENCES "variant to gene association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "variant to gene association_original_knowledge_source" (
	"variant to gene association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("variant to gene association_id", original_knowledge_source), 
	FOREIGN KEY("variant to gene association_id") REFERENCES "variant to gene association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "variant to gene association_primary_knowledge_source" (
	"variant to gene association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("variant to gene association_id", primary_knowledge_source), 
	FOREIGN KEY("variant to gene association_id") REFERENCES "variant to gene association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "variant to gene association_aggregator_knowledge_source" (
	"variant to gene association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("variant to gene association_id", aggregator_knowledge_source), 
	FOREIGN KEY("variant to gene association_id") REFERENCES "variant to gene association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "variant to gene association_category" (
	"variant to gene association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("variant to gene association_id", category), 
	FOREIGN KEY("variant to gene association_id") REFERENCES "variant to gene association" (id)
);
CREATE TABLE "variant to gene association_has_attribute" (
	"variant to gene association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("variant to gene association_id", has_attribute_id), 
	FOREIGN KEY("variant to gene association_id") REFERENCES "variant to gene association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "variant to gene expression association_qualifier" (
	"variant to gene expression association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("variant to gene expression association_id", qualifier_id), 
	FOREIGN KEY("variant to gene expression association_id") REFERENCES "variant to gene expression association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "variant to gene expression association_publication" (
	"variant to gene expression association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("variant to gene expression association_id", publication), 
	FOREIGN KEY("variant to gene expression association_id") REFERENCES "variant to gene expression association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "variant to gene expression association_has_evidence" (
	"variant to gene expression association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("variant to gene expression association_id", has_evidence), 
	FOREIGN KEY("variant to gene expression association_id") REFERENCES "variant to gene expression association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "variant to gene expression association_knowledge_source" (
	"variant to gene expression association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("variant to gene expression association_id", knowledge_source), 
	FOREIGN KEY("variant to gene expression association_id") REFERENCES "variant to gene expression association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "variant to gene expression association_original_knowledge_source" (
	"variant to gene expression association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("variant to gene expression association_id", original_knowledge_source), 
	FOREIGN KEY("variant to gene expression association_id") REFERENCES "variant to gene expression association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "variant to gene expression association_primary_knowledge_source" (
	"variant to gene expression association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("variant to gene expression association_id", primary_knowledge_source), 
	FOREIGN KEY("variant to gene expression association_id") REFERENCES "variant to gene expression association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "variant to gene expression association_aggregator_knowledge_source" (
	"variant to gene expression association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("variant to gene expression association_id", aggregator_knowledge_source), 
	FOREIGN KEY("variant to gene expression association_id") REFERENCES "variant to gene expression association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "variant to gene expression association_category" (
	"variant to gene expression association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("variant to gene expression association_id", category), 
	FOREIGN KEY("variant to gene expression association_id") REFERENCES "variant to gene expression association" (id)
);
CREATE TABLE "variant to gene expression association_has_attribute" (
	"variant to gene expression association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("variant to gene expression association_id", has_attribute_id), 
	FOREIGN KEY("variant to gene expression association_id") REFERENCES "variant to gene expression association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "variant to population association_qualifier" (
	"variant to population association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("variant to population association_id", qualifier_id), 
	FOREIGN KEY("variant to population association_id") REFERENCES "variant to population association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "variant to population association_publication" (
	"variant to population association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("variant to population association_id", publication), 
	FOREIGN KEY("variant to population association_id") REFERENCES "variant to population association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "variant to population association_has_evidence" (
	"variant to population association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("variant to population association_id", has_evidence), 
	FOREIGN KEY("variant to population association_id") REFERENCES "variant to population association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "variant to population association_knowledge_source" (
	"variant to population association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("variant to population association_id", knowledge_source), 
	FOREIGN KEY("variant to population association_id") REFERENCES "variant to population association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "variant to population association_original_knowledge_source" (
	"variant to population association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("variant to population association_id", original_knowledge_source), 
	FOREIGN KEY("variant to population association_id") REFERENCES "variant to population association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "variant to population association_primary_knowledge_source" (
	"variant to population association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("variant to population association_id", primary_knowledge_source), 
	FOREIGN KEY("variant to population association_id") REFERENCES "variant to population association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "variant to population association_aggregator_knowledge_source" (
	"variant to population association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("variant to population association_id", aggregator_knowledge_source), 
	FOREIGN KEY("variant to population association_id") REFERENCES "variant to population association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "variant to population association_category" (
	"variant to population association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("variant to population association_id", category), 
	FOREIGN KEY("variant to population association_id") REFERENCES "variant to population association" (id)
);
CREATE TABLE "variant to population association_has_attribute" (
	"variant to population association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("variant to population association_id", has_attribute_id), 
	FOREIGN KEY("variant to population association_id") REFERENCES "variant to population association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "population to population association_qualifier" (
	"population to population association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("population to population association_id", qualifier_id), 
	FOREIGN KEY("population to population association_id") REFERENCES "population to population association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "population to population association_publication" (
	"population to population association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("population to population association_id", publication), 
	FOREIGN KEY("population to population association_id") REFERENCES "population to population association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "population to population association_has_evidence" (
	"population to population association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("population to population association_id", has_evidence), 
	FOREIGN KEY("population to population association_id") REFERENCES "population to population association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "population to population association_knowledge_source" (
	"population to population association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("population to population association_id", knowledge_source), 
	FOREIGN KEY("population to population association_id") REFERENCES "population to population association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "population to population association_original_knowledge_source" (
	"population to population association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("population to population association_id", original_knowledge_source), 
	FOREIGN KEY("population to population association_id") REFERENCES "population to population association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "population to population association_primary_knowledge_source" (
	"population to population association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("population to population association_id", primary_knowledge_source), 
	FOREIGN KEY("population to population association_id") REFERENCES "population to population association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "population to population association_aggregator_knowledge_source" (
	"population to population association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("population to population association_id", aggregator_knowledge_source), 
	FOREIGN KEY("population to population association_id") REFERENCES "population to population association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "population to population association_category" (
	"population to population association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("population to population association_id", category), 
	FOREIGN KEY("population to population association_id") REFERENCES "population to population association" (id)
);
CREATE TABLE "population to population association_has_attribute" (
	"population to population association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("population to population association_id", has_attribute_id), 
	FOREIGN KEY("population to population association_id") REFERENCES "population to population association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "organism to organism association_qualifier" (
	"organism to organism association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("organism to organism association_id", qualifier_id), 
	FOREIGN KEY("organism to organism association_id") REFERENCES "organism to organism association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "organism to organism association_publication" (
	"organism to organism association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("organism to organism association_id", publication), 
	FOREIGN KEY("organism to organism association_id") REFERENCES "organism to organism association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "organism to organism association_has_evidence" (
	"organism to organism association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("organism to organism association_id", has_evidence), 
	FOREIGN KEY("organism to organism association_id") REFERENCES "organism to organism association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "organism to organism association_knowledge_source" (
	"organism to organism association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("organism to organism association_id", knowledge_source), 
	FOREIGN KEY("organism to organism association_id") REFERENCES "organism to organism association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "organism to organism association_original_knowledge_source" (
	"organism to organism association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("organism to organism association_id", original_knowledge_source), 
	FOREIGN KEY("organism to organism association_id") REFERENCES "organism to organism association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "organism to organism association_primary_knowledge_source" (
	"organism to organism association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("organism to organism association_id", primary_knowledge_source), 
	FOREIGN KEY("organism to organism association_id") REFERENCES "organism to organism association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "organism to organism association_aggregator_knowledge_source" (
	"organism to organism association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("organism to organism association_id", aggregator_knowledge_source), 
	FOREIGN KEY("organism to organism association_id") REFERENCES "organism to organism association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "organism to organism association_category" (
	"organism to organism association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("organism to organism association_id", category), 
	FOREIGN KEY("organism to organism association_id") REFERENCES "organism to organism association" (id)
);
CREATE TABLE "organism to organism association_has_attribute" (
	"organism to organism association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("organism to organism association_id", has_attribute_id), 
	FOREIGN KEY("organism to organism association_id") REFERENCES "organism to organism association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "taxon to taxon association_qualifier" (
	"taxon to taxon association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("taxon to taxon association_id", qualifier_id), 
	FOREIGN KEY("taxon to taxon association_id") REFERENCES "taxon to taxon association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "taxon to taxon association_publication" (
	"taxon to taxon association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("taxon to taxon association_id", publication), 
	FOREIGN KEY("taxon to taxon association_id") REFERENCES "taxon to taxon association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "taxon to taxon association_has_evidence" (
	"taxon to taxon association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("taxon to taxon association_id", has_evidence), 
	FOREIGN KEY("taxon to taxon association_id") REFERENCES "taxon to taxon association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "taxon to taxon association_knowledge_source" (
	"taxon to taxon association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("taxon to taxon association_id", knowledge_source), 
	FOREIGN KEY("taxon to taxon association_id") REFERENCES "taxon to taxon association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "taxon to taxon association_original_knowledge_source" (
	"taxon to taxon association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("taxon to taxon association_id", original_knowledge_source), 
	FOREIGN KEY("taxon to taxon association_id") REFERENCES "taxon to taxon association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "taxon to taxon association_primary_knowledge_source" (
	"taxon to taxon association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("taxon to taxon association_id", primary_knowledge_source), 
	FOREIGN KEY("taxon to taxon association_id") REFERENCES "taxon to taxon association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "taxon to taxon association_aggregator_knowledge_source" (
	"taxon to taxon association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("taxon to taxon association_id", aggregator_knowledge_source), 
	FOREIGN KEY("taxon to taxon association_id") REFERENCES "taxon to taxon association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "taxon to taxon association_category" (
	"taxon to taxon association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("taxon to taxon association_id", category), 
	FOREIGN KEY("taxon to taxon association_id") REFERENCES "taxon to taxon association" (id)
);
CREATE TABLE "taxon to taxon association_has_attribute" (
	"taxon to taxon association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("taxon to taxon association_id", has_attribute_id), 
	FOREIGN KEY("taxon to taxon association_id") REFERENCES "taxon to taxon association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "gene to expression site association_qualifier" (
	"gene to expression site association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("gene to expression site association_id", qualifier_id), 
	FOREIGN KEY("gene to expression site association_id") REFERENCES "gene to expression site association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to expression site association_publication" (
	"gene to expression site association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("gene to expression site association_id", publication), 
	FOREIGN KEY("gene to expression site association_id") REFERENCES "gene to expression site association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "gene to expression site association_has_evidence" (
	"gene to expression site association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("gene to expression site association_id", has_evidence), 
	FOREIGN KEY("gene to expression site association_id") REFERENCES "gene to expression site association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "gene to expression site association_knowledge_source" (
	"gene to expression site association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("gene to expression site association_id", knowledge_source), 
	FOREIGN KEY("gene to expression site association_id") REFERENCES "gene to expression site association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene to expression site association_original_knowledge_source" (
	"gene to expression site association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("gene to expression site association_id", original_knowledge_source), 
	FOREIGN KEY("gene to expression site association_id") REFERENCES "gene to expression site association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene to expression site association_primary_knowledge_source" (
	"gene to expression site association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("gene to expression site association_id", primary_knowledge_source), 
	FOREIGN KEY("gene to expression site association_id") REFERENCES "gene to expression site association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene to expression site association_aggregator_knowledge_source" (
	"gene to expression site association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("gene to expression site association_id", aggregator_knowledge_source), 
	FOREIGN KEY("gene to expression site association_id") REFERENCES "gene to expression site association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene to expression site association_category" (
	"gene to expression site association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("gene to expression site association_id", category), 
	FOREIGN KEY("gene to expression site association_id") REFERENCES "gene to expression site association" (id)
);
CREATE TABLE "gene to expression site association_has_attribute" (
	"gene to expression site association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("gene to expression site association_id", has_attribute_id), 
	FOREIGN KEY("gene to expression site association_id") REFERENCES "gene to expression site association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "sequence variant modulates treatment association_qualifier" (
	"sequence variant modulates treatment association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("sequence variant modulates treatment association_id", qualifier_id), 
	FOREIGN KEY("sequence variant modulates treatment association_id") REFERENCES "sequence variant modulates treatment association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "sequence variant modulates treatment association_publication" (
	"sequence variant modulates treatment association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("sequence variant modulates treatment association_id", publication), 
	FOREIGN KEY("sequence variant modulates treatment association_id") REFERENCES "sequence variant modulates treatment association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "sequence variant modulates treatment association_has_evidence" (
	"sequence variant modulates treatment association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("sequence variant modulates treatment association_id", has_evidence), 
	FOREIGN KEY("sequence variant modulates treatment association_id") REFERENCES "sequence variant modulates treatment association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "sequence variant modulates treatment association_knowledge_source" (
	"sequence variant modulates treatment association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("sequence variant modulates treatment association_id", knowledge_source), 
	FOREIGN KEY("sequence variant modulates treatment association_id") REFERENCES "sequence variant modulates treatment association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "sequence variant modulates treatment association_original_knowledge_source" (
	"sequence variant modulates treatment association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("sequence variant modulates treatment association_id", original_knowledge_source), 
	FOREIGN KEY("sequence variant modulates treatment association_id") REFERENCES "sequence variant modulates treatment association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "sequence variant modulates treatment association_primary_knowledge_source" (
	"sequence variant modulates treatment association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("sequence variant modulates treatment association_id", primary_knowledge_source), 
	FOREIGN KEY("sequence variant modulates treatment association_id") REFERENCES "sequence variant modulates treatment association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "sequence variant modulates treatment association_aggregator_knowledge_source" (
	"sequence variant modulates treatment association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("sequence variant modulates treatment association_id", aggregator_knowledge_source), 
	FOREIGN KEY("sequence variant modulates treatment association_id") REFERENCES "sequence variant modulates treatment association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "sequence variant modulates treatment association_category" (
	"sequence variant modulates treatment association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("sequence variant modulates treatment association_id", category), 
	FOREIGN KEY("sequence variant modulates treatment association_id") REFERENCES "sequence variant modulates treatment association" (id)
);
CREATE TABLE "sequence variant modulates treatment association_has_attribute" (
	"sequence variant modulates treatment association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("sequence variant modulates treatment association_id", has_attribute_id), 
	FOREIGN KEY("sequence variant modulates treatment association_id") REFERENCES "sequence variant modulates treatment association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "functional association_qualifier" (
	"functional association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("functional association_id", qualifier_id), 
	FOREIGN KEY("functional association_id") REFERENCES "functional association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "functional association_publication" (
	"functional association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("functional association_id", publication), 
	FOREIGN KEY("functional association_id") REFERENCES "functional association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "functional association_has_evidence" (
	"functional association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("functional association_id", has_evidence), 
	FOREIGN KEY("functional association_id") REFERENCES "functional association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "functional association_knowledge_source" (
	"functional association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("functional association_id", knowledge_source), 
	FOREIGN KEY("functional association_id") REFERENCES "functional association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "functional association_original_knowledge_source" (
	"functional association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("functional association_id", original_knowledge_source), 
	FOREIGN KEY("functional association_id") REFERENCES "functional association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "functional association_primary_knowledge_source" (
	"functional association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("functional association_id", primary_knowledge_source), 
	FOREIGN KEY("functional association_id") REFERENCES "functional association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "functional association_aggregator_knowledge_source" (
	"functional association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("functional association_id", aggregator_knowledge_source), 
	FOREIGN KEY("functional association_id") REFERENCES "functional association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "functional association_category" (
	"functional association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("functional association_id", category), 
	FOREIGN KEY("functional association_id") REFERENCES "functional association" (id)
);
CREATE TABLE "functional association_has_attribute" (
	"functional association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("functional association_id", has_attribute_id), 
	FOREIGN KEY("functional association_id") REFERENCES "functional association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "macromolecular machine to molecular activity association_qualifier" (
	"macromolecular machine to molecular activity association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("macromolecular machine to molecular activity association_id", qualifier_id), 
	FOREIGN KEY("macromolecular machine to molecular activity association_id") REFERENCES "macromolecular machine to molecular activity association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "macromolecular machine to molecular activity association_publication" (
	"macromolecular machine to molecular activity association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("macromolecular machine to molecular activity association_id", publication), 
	FOREIGN KEY("macromolecular machine to molecular activity association_id") REFERENCES "macromolecular machine to molecular activity association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "macromolecular machine to molecular activity association_has_evidence" (
	"macromolecular machine to molecular activity association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("macromolecular machine to molecular activity association_id", has_evidence), 
	FOREIGN KEY("macromolecular machine to molecular activity association_id") REFERENCES "macromolecular machine to molecular activity association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "macromolecular machine to molecular activity association_knowledge_source" (
	"macromolecular machine to molecular activity association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("macromolecular machine to molecular activity association_id", knowledge_source), 
	FOREIGN KEY("macromolecular machine to molecular activity association_id") REFERENCES "macromolecular machine to molecular activity association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "macromolecular machine to molecular activity association_original_knowledge_source" (
	"macromolecular machine to molecular activity association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("macromolecular machine to molecular activity association_id", original_knowledge_source), 
	FOREIGN KEY("macromolecular machine to molecular activity association_id") REFERENCES "macromolecular machine to molecular activity association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "macromolecular machine to molecular activity association_primary_knowledge_source" (
	"macromolecular machine to molecular activity association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("macromolecular machine to molecular activity association_id", primary_knowledge_source), 
	FOREIGN KEY("macromolecular machine to molecular activity association_id") REFERENCES "macromolecular machine to molecular activity association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "macromolecular machine to molecular activity association_aggregator_knowledge_source" (
	"macromolecular machine to molecular activity association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("macromolecular machine to molecular activity association_id", aggregator_knowledge_source), 
	FOREIGN KEY("macromolecular machine to molecular activity association_id") REFERENCES "macromolecular machine to molecular activity association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "macromolecular machine to molecular activity association_category" (
	"macromolecular machine to molecular activity association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("macromolecular machine to molecular activity association_id", category), 
	FOREIGN KEY("macromolecular machine to molecular activity association_id") REFERENCES "macromolecular machine to molecular activity association" (id)
);
CREATE TABLE "macromolecular machine to molecular activity association_has_attribute" (
	"macromolecular machine to molecular activity association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("macromolecular machine to molecular activity association_id", has_attribute_id), 
	FOREIGN KEY("macromolecular machine to molecular activity association_id") REFERENCES "macromolecular machine to molecular activity association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "macromolecular machine to biological process association_qualifier" (
	"macromolecular machine to biological process association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("macromolecular machine to biological process association_id", qualifier_id), 
	FOREIGN KEY("macromolecular machine to biological process association_id") REFERENCES "macromolecular machine to biological process association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "macromolecular machine to biological process association_publication" (
	"macromolecular machine to biological process association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("macromolecular machine to biological process association_id", publication), 
	FOREIGN KEY("macromolecular machine to biological process association_id") REFERENCES "macromolecular machine to biological process association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "macromolecular machine to biological process association_has_evidence" (
	"macromolecular machine to biological process association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("macromolecular machine to biological process association_id", has_evidence), 
	FOREIGN KEY("macromolecular machine to biological process association_id") REFERENCES "macromolecular machine to biological process association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "macromolecular machine to biological process association_knowledge_source" (
	"macromolecular machine to biological process association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("macromolecular machine to biological process association_id", knowledge_source), 
	FOREIGN KEY("macromolecular machine to biological process association_id") REFERENCES "macromolecular machine to biological process association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "macromolecular machine to biological process association_original_knowledge_source" (
	"macromolecular machine to biological process association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("macromolecular machine to biological process association_id", original_knowledge_source), 
	FOREIGN KEY("macromolecular machine to biological process association_id") REFERENCES "macromolecular machine to biological process association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "macromolecular machine to biological process association_primary_knowledge_source" (
	"macromolecular machine to biological process association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("macromolecular machine to biological process association_id", primary_knowledge_source), 
	FOREIGN KEY("macromolecular machine to biological process association_id") REFERENCES "macromolecular machine to biological process association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "macromolecular machine to biological process association_aggregator_knowledge_source" (
	"macromolecular machine to biological process association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("macromolecular machine to biological process association_id", aggregator_knowledge_source), 
	FOREIGN KEY("macromolecular machine to biological process association_id") REFERENCES "macromolecular machine to biological process association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "macromolecular machine to biological process association_category" (
	"macromolecular machine to biological process association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("macromolecular machine to biological process association_id", category), 
	FOREIGN KEY("macromolecular machine to biological process association_id") REFERENCES "macromolecular machine to biological process association" (id)
);
CREATE TABLE "macromolecular machine to biological process association_has_attribute" (
	"macromolecular machine to biological process association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("macromolecular machine to biological process association_id", has_attribute_id), 
	FOREIGN KEY("macromolecular machine to biological process association_id") REFERENCES "macromolecular machine to biological process association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "macromolecular machine to cellular component association_qualifier" (
	"macromolecular machine to cellular component association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("macromolecular machine to cellular component association_id", qualifier_id), 
	FOREIGN KEY("macromolecular machine to cellular component association_id") REFERENCES "macromolecular machine to cellular component association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "macromolecular machine to cellular component association_publication" (
	"macromolecular machine to cellular component association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("macromolecular machine to cellular component association_id", publication), 
	FOREIGN KEY("macromolecular machine to cellular component association_id") REFERENCES "macromolecular machine to cellular component association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "macromolecular machine to cellular component association_has_evidence" (
	"macromolecular machine to cellular component association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("macromolecular machine to cellular component association_id", has_evidence), 
	FOREIGN KEY("macromolecular machine to cellular component association_id") REFERENCES "macromolecular machine to cellular component association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "macromolecular machine to cellular component association_knowledge_source" (
	"macromolecular machine to cellular component association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("macromolecular machine to cellular component association_id", knowledge_source), 
	FOREIGN KEY("macromolecular machine to cellular component association_id") REFERENCES "macromolecular machine to cellular component association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "macromolecular machine to cellular component association_original_knowledge_source" (
	"macromolecular machine to cellular component association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("macromolecular machine to cellular component association_id", original_knowledge_source), 
	FOREIGN KEY("macromolecular machine to cellular component association_id") REFERENCES "macromolecular machine to cellular component association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "macromolecular machine to cellular component association_primary_knowledge_source" (
	"macromolecular machine to cellular component association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("macromolecular machine to cellular component association_id", primary_knowledge_source), 
	FOREIGN KEY("macromolecular machine to cellular component association_id") REFERENCES "macromolecular machine to cellular component association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "macromolecular machine to cellular component association_aggregator_knowledge_source" (
	"macromolecular machine to cellular component association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("macromolecular machine to cellular component association_id", aggregator_knowledge_source), 
	FOREIGN KEY("macromolecular machine to cellular component association_id") REFERENCES "macromolecular machine to cellular component association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "macromolecular machine to cellular component association_category" (
	"macromolecular machine to cellular component association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("macromolecular machine to cellular component association_id", category), 
	FOREIGN KEY("macromolecular machine to cellular component association_id") REFERENCES "macromolecular machine to cellular component association" (id)
);
CREATE TABLE "macromolecular machine to cellular component association_has_attribute" (
	"macromolecular machine to cellular component association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("macromolecular machine to cellular component association_id", has_attribute_id), 
	FOREIGN KEY("macromolecular machine to cellular component association_id") REFERENCES "macromolecular machine to cellular component association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "molecular activity to chemical entity association_qualifier" (
	"molecular activity to chemical entity association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("molecular activity to chemical entity association_id", qualifier_id), 
	FOREIGN KEY("molecular activity to chemical entity association_id") REFERENCES "molecular activity to chemical entity association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "molecular activity to chemical entity association_publication" (
	"molecular activity to chemical entity association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("molecular activity to chemical entity association_id", publication), 
	FOREIGN KEY("molecular activity to chemical entity association_id") REFERENCES "molecular activity to chemical entity association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "molecular activity to chemical entity association_has_evidence" (
	"molecular activity to chemical entity association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("molecular activity to chemical entity association_id", has_evidence), 
	FOREIGN KEY("molecular activity to chemical entity association_id") REFERENCES "molecular activity to chemical entity association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "molecular activity to chemical entity association_knowledge_source" (
	"molecular activity to chemical entity association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("molecular activity to chemical entity association_id", knowledge_source), 
	FOREIGN KEY("molecular activity to chemical entity association_id") REFERENCES "molecular activity to chemical entity association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "molecular activity to chemical entity association_original_knowledge_source" (
	"molecular activity to chemical entity association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("molecular activity to chemical entity association_id", original_knowledge_source), 
	FOREIGN KEY("molecular activity to chemical entity association_id") REFERENCES "molecular activity to chemical entity association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "molecular activity to chemical entity association_primary_knowledge_source" (
	"molecular activity to chemical entity association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("molecular activity to chemical entity association_id", primary_knowledge_source), 
	FOREIGN KEY("molecular activity to chemical entity association_id") REFERENCES "molecular activity to chemical entity association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "molecular activity to chemical entity association_aggregator_knowledge_source" (
	"molecular activity to chemical entity association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("molecular activity to chemical entity association_id", aggregator_knowledge_source), 
	FOREIGN KEY("molecular activity to chemical entity association_id") REFERENCES "molecular activity to chemical entity association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "molecular activity to chemical entity association_category" (
	"molecular activity to chemical entity association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("molecular activity to chemical entity association_id", category), 
	FOREIGN KEY("molecular activity to chemical entity association_id") REFERENCES "molecular activity to chemical entity association" (id)
);
CREATE TABLE "molecular activity to chemical entity association_has_attribute" (
	"molecular activity to chemical entity association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("molecular activity to chemical entity association_id", has_attribute_id), 
	FOREIGN KEY("molecular activity to chemical entity association_id") REFERENCES "molecular activity to chemical entity association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "molecular activity to molecular activity association_qualifier" (
	"molecular activity to molecular activity association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("molecular activity to molecular activity association_id", qualifier_id), 
	FOREIGN KEY("molecular activity to molecular activity association_id") REFERENCES "molecular activity to molecular activity association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "molecular activity to molecular activity association_publication" (
	"molecular activity to molecular activity association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("molecular activity to molecular activity association_id", publication), 
	FOREIGN KEY("molecular activity to molecular activity association_id") REFERENCES "molecular activity to molecular activity association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "molecular activity to molecular activity association_has_evidence" (
	"molecular activity to molecular activity association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("molecular activity to molecular activity association_id", has_evidence), 
	FOREIGN KEY("molecular activity to molecular activity association_id") REFERENCES "molecular activity to molecular activity association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "molecular activity to molecular activity association_knowledge_source" (
	"molecular activity to molecular activity association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("molecular activity to molecular activity association_id", knowledge_source), 
	FOREIGN KEY("molecular activity to molecular activity association_id") REFERENCES "molecular activity to molecular activity association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "molecular activity to molecular activity association_original_knowledge_source" (
	"molecular activity to molecular activity association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("molecular activity to molecular activity association_id", original_knowledge_source), 
	FOREIGN KEY("molecular activity to molecular activity association_id") REFERENCES "molecular activity to molecular activity association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "molecular activity to molecular activity association_primary_knowledge_source" (
	"molecular activity to molecular activity association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("molecular activity to molecular activity association_id", primary_knowledge_source), 
	FOREIGN KEY("molecular activity to molecular activity association_id") REFERENCES "molecular activity to molecular activity association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "molecular activity to molecular activity association_aggregator_knowledge_source" (
	"molecular activity to molecular activity association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("molecular activity to molecular activity association_id", aggregator_knowledge_source), 
	FOREIGN KEY("molecular activity to molecular activity association_id") REFERENCES "molecular activity to molecular activity association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "molecular activity to molecular activity association_category" (
	"molecular activity to molecular activity association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("molecular activity to molecular activity association_id", category), 
	FOREIGN KEY("molecular activity to molecular activity association_id") REFERENCES "molecular activity to molecular activity association" (id)
);
CREATE TABLE "molecular activity to molecular activity association_has_attribute" (
	"molecular activity to molecular activity association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("molecular activity to molecular activity association_id", has_attribute_id), 
	FOREIGN KEY("molecular activity to molecular activity association_id") REFERENCES "molecular activity to molecular activity association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "gene to go term association_qualifier" (
	"gene to go term association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("gene to go term association_id", qualifier_id), 
	FOREIGN KEY("gene to go term association_id") REFERENCES "gene to go term association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to go term association_publication" (
	"gene to go term association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("gene to go term association_id", publication), 
	FOREIGN KEY("gene to go term association_id") REFERENCES "gene to go term association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "gene to go term association_has_evidence" (
	"gene to go term association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("gene to go term association_id", has_evidence), 
	FOREIGN KEY("gene to go term association_id") REFERENCES "gene to go term association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "gene to go term association_knowledge_source" (
	"gene to go term association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("gene to go term association_id", knowledge_source), 
	FOREIGN KEY("gene to go term association_id") REFERENCES "gene to go term association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene to go term association_original_knowledge_source" (
	"gene to go term association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("gene to go term association_id", original_knowledge_source), 
	FOREIGN KEY("gene to go term association_id") REFERENCES "gene to go term association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene to go term association_primary_knowledge_source" (
	"gene to go term association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("gene to go term association_id", primary_knowledge_source), 
	FOREIGN KEY("gene to go term association_id") REFERENCES "gene to go term association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene to go term association_aggregator_knowledge_source" (
	"gene to go term association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("gene to go term association_id", aggregator_knowledge_source), 
	FOREIGN KEY("gene to go term association_id") REFERENCES "gene to go term association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene to go term association_category" (
	"gene to go term association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("gene to go term association_id", category), 
	FOREIGN KEY("gene to go term association_id") REFERENCES "gene to go term association" (id)
);
CREATE TABLE "gene to go term association_has_attribute" (
	"gene to go term association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("gene to go term association_id", has_attribute_id), 
	FOREIGN KEY("gene to go term association_id") REFERENCES "gene to go term association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "entity to disease association_qualifier" (
	"entity to disease association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("entity to disease association_id", qualifier_id), 
	FOREIGN KEY("entity to disease association_id") REFERENCES "entity to disease association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "entity to disease association_publication" (
	"entity to disease association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("entity to disease association_id", publication), 
	FOREIGN KEY("entity to disease association_id") REFERENCES "entity to disease association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "entity to disease association_has_evidence" (
	"entity to disease association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("entity to disease association_id", has_evidence), 
	FOREIGN KEY("entity to disease association_id") REFERENCES "entity to disease association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "entity to disease association_knowledge_source" (
	"entity to disease association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("entity to disease association_id", knowledge_source), 
	FOREIGN KEY("entity to disease association_id") REFERENCES "entity to disease association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "entity to disease association_original_knowledge_source" (
	"entity to disease association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("entity to disease association_id", original_knowledge_source), 
	FOREIGN KEY("entity to disease association_id") REFERENCES "entity to disease association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "entity to disease association_primary_knowledge_source" (
	"entity to disease association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("entity to disease association_id", primary_knowledge_source), 
	FOREIGN KEY("entity to disease association_id") REFERENCES "entity to disease association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "entity to disease association_aggregator_knowledge_source" (
	"entity to disease association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("entity to disease association_id", aggregator_knowledge_source), 
	FOREIGN KEY("entity to disease association_id") REFERENCES "entity to disease association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "entity to disease association_category" (
	"entity to disease association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("entity to disease association_id", category), 
	FOREIGN KEY("entity to disease association_id") REFERENCES "entity to disease association" (id)
);
CREATE TABLE "entity to disease association_has_attribute" (
	"entity to disease association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("entity to disease association_id", has_attribute_id), 
	FOREIGN KEY("entity to disease association_id") REFERENCES "entity to disease association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "entity to phenotypic feature association_qualifier" (
	"entity to phenotypic feature association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("entity to phenotypic feature association_id", qualifier_id), 
	FOREIGN KEY("entity to phenotypic feature association_id") REFERENCES "entity to phenotypic feature association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "entity to phenotypic feature association_publication" (
	"entity to phenotypic feature association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("entity to phenotypic feature association_id", publication), 
	FOREIGN KEY("entity to phenotypic feature association_id") REFERENCES "entity to phenotypic feature association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "entity to phenotypic feature association_has_evidence" (
	"entity to phenotypic feature association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("entity to phenotypic feature association_id", has_evidence), 
	FOREIGN KEY("entity to phenotypic feature association_id") REFERENCES "entity to phenotypic feature association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "entity to phenotypic feature association_knowledge_source" (
	"entity to phenotypic feature association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("entity to phenotypic feature association_id", knowledge_source), 
	FOREIGN KEY("entity to phenotypic feature association_id") REFERENCES "entity to phenotypic feature association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "entity to phenotypic feature association_original_knowledge_source" (
	"entity to phenotypic feature association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("entity to phenotypic feature association_id", original_knowledge_source), 
	FOREIGN KEY("entity to phenotypic feature association_id") REFERENCES "entity to phenotypic feature association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "entity to phenotypic feature association_primary_knowledge_source" (
	"entity to phenotypic feature association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("entity to phenotypic feature association_id", primary_knowledge_source), 
	FOREIGN KEY("entity to phenotypic feature association_id") REFERENCES "entity to phenotypic feature association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "entity to phenotypic feature association_aggregator_knowledge_source" (
	"entity to phenotypic feature association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("entity to phenotypic feature association_id", aggregator_knowledge_source), 
	FOREIGN KEY("entity to phenotypic feature association_id") REFERENCES "entity to phenotypic feature association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "entity to phenotypic feature association_category" (
	"entity to phenotypic feature association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("entity to phenotypic feature association_id", category), 
	FOREIGN KEY("entity to phenotypic feature association_id") REFERENCES "entity to phenotypic feature association" (id)
);
CREATE TABLE "entity to phenotypic feature association_has_attribute" (
	"entity to phenotypic feature association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("entity to phenotypic feature association_id", has_attribute_id), 
	FOREIGN KEY("entity to phenotypic feature association_id") REFERENCES "entity to phenotypic feature association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "sequence association_qualifier" (
	"sequence association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("sequence association_id", qualifier_id), 
	FOREIGN KEY("sequence association_id") REFERENCES "sequence association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "sequence association_publication" (
	"sequence association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("sequence association_id", publication), 
	FOREIGN KEY("sequence association_id") REFERENCES "sequence association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "sequence association_has_evidence" (
	"sequence association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("sequence association_id", has_evidence), 
	FOREIGN KEY("sequence association_id") REFERENCES "sequence association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "sequence association_knowledge_source" (
	"sequence association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("sequence association_id", knowledge_source), 
	FOREIGN KEY("sequence association_id") REFERENCES "sequence association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "sequence association_original_knowledge_source" (
	"sequence association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("sequence association_id", original_knowledge_source), 
	FOREIGN KEY("sequence association_id") REFERENCES "sequence association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "sequence association_primary_knowledge_source" (
	"sequence association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("sequence association_id", primary_knowledge_source), 
	FOREIGN KEY("sequence association_id") REFERENCES "sequence association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "sequence association_aggregator_knowledge_source" (
	"sequence association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("sequence association_id", aggregator_knowledge_source), 
	FOREIGN KEY("sequence association_id") REFERENCES "sequence association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "sequence association_category" (
	"sequence association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("sequence association_id", category), 
	FOREIGN KEY("sequence association_id") REFERENCES "sequence association" (id)
);
CREATE TABLE "sequence association_has_attribute" (
	"sequence association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("sequence association_id", has_attribute_id), 
	FOREIGN KEY("sequence association_id") REFERENCES "sequence association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "gene to gene product relationship_qualifier" (
	"gene to gene product relationship_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("gene to gene product relationship_id", qualifier_id), 
	FOREIGN KEY("gene to gene product relationship_id") REFERENCES "gene to gene product relationship" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to gene product relationship_publication" (
	"gene to gene product relationship_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("gene to gene product relationship_id", publication), 
	FOREIGN KEY("gene to gene product relationship_id") REFERENCES "gene to gene product relationship" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "gene to gene product relationship_has_evidence" (
	"gene to gene product relationship_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("gene to gene product relationship_id", has_evidence), 
	FOREIGN KEY("gene to gene product relationship_id") REFERENCES "gene to gene product relationship" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "gene to gene product relationship_knowledge_source" (
	"gene to gene product relationship_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("gene to gene product relationship_id", knowledge_source), 
	FOREIGN KEY("gene to gene product relationship_id") REFERENCES "gene to gene product relationship" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene to gene product relationship_original_knowledge_source" (
	"gene to gene product relationship_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("gene to gene product relationship_id", original_knowledge_source), 
	FOREIGN KEY("gene to gene product relationship_id") REFERENCES "gene to gene product relationship" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene to gene product relationship_primary_knowledge_source" (
	"gene to gene product relationship_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("gene to gene product relationship_id", primary_knowledge_source), 
	FOREIGN KEY("gene to gene product relationship_id") REFERENCES "gene to gene product relationship" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene to gene product relationship_aggregator_knowledge_source" (
	"gene to gene product relationship_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("gene to gene product relationship_id", aggregator_knowledge_source), 
	FOREIGN KEY("gene to gene product relationship_id") REFERENCES "gene to gene product relationship" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene to gene product relationship_category" (
	"gene to gene product relationship_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("gene to gene product relationship_id", category), 
	FOREIGN KEY("gene to gene product relationship_id") REFERENCES "gene to gene product relationship" (id)
);
CREATE TABLE "gene to gene product relationship_has_attribute" (
	"gene to gene product relationship_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("gene to gene product relationship_id", has_attribute_id), 
	FOREIGN KEY("gene to gene product relationship_id") REFERENCES "gene to gene product relationship" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "gene regulatory relationship_qualifier" (
	"gene regulatory relationship_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("gene regulatory relationship_id", qualifier_id), 
	FOREIGN KEY("gene regulatory relationship_id") REFERENCES "gene regulatory relationship" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene regulatory relationship_publication" (
	"gene regulatory relationship_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("gene regulatory relationship_id", publication), 
	FOREIGN KEY("gene regulatory relationship_id") REFERENCES "gene regulatory relationship" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "gene regulatory relationship_has_evidence" (
	"gene regulatory relationship_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("gene regulatory relationship_id", has_evidence), 
	FOREIGN KEY("gene regulatory relationship_id") REFERENCES "gene regulatory relationship" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "gene regulatory relationship_knowledge_source" (
	"gene regulatory relationship_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("gene regulatory relationship_id", knowledge_source), 
	FOREIGN KEY("gene regulatory relationship_id") REFERENCES "gene regulatory relationship" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene regulatory relationship_original_knowledge_source" (
	"gene regulatory relationship_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("gene regulatory relationship_id", original_knowledge_source), 
	FOREIGN KEY("gene regulatory relationship_id") REFERENCES "gene regulatory relationship" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene regulatory relationship_primary_knowledge_source" (
	"gene regulatory relationship_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("gene regulatory relationship_id", primary_knowledge_source), 
	FOREIGN KEY("gene regulatory relationship_id") REFERENCES "gene regulatory relationship" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene regulatory relationship_aggregator_knowledge_source" (
	"gene regulatory relationship_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("gene regulatory relationship_id", aggregator_knowledge_source), 
	FOREIGN KEY("gene regulatory relationship_id") REFERENCES "gene regulatory relationship" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene regulatory relationship_category" (
	"gene regulatory relationship_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("gene regulatory relationship_id", category), 
	FOREIGN KEY("gene regulatory relationship_id") REFERENCES "gene regulatory relationship" (id)
);
CREATE TABLE "gene regulatory relationship_has_attribute" (
	"gene regulatory relationship_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("gene regulatory relationship_id", has_attribute_id), 
	FOREIGN KEY("gene regulatory relationship_id") REFERENCES "gene regulatory relationship" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "anatomical entity to anatomical entity association_qualifier" (
	"anatomical entity to anatomical entity association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity association_id", qualifier_id), 
	FOREIGN KEY("anatomical entity to anatomical entity association_id") REFERENCES "anatomical entity to anatomical entity association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "anatomical entity to anatomical entity association_publication" (
	"anatomical entity to anatomical entity association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity association_id", publication), 
	FOREIGN KEY("anatomical entity to anatomical entity association_id") REFERENCES "anatomical entity to anatomical entity association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "anatomical entity to anatomical entity association_has_evidence" (
	"anatomical entity to anatomical entity association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity association_id", has_evidence), 
	FOREIGN KEY("anatomical entity to anatomical entity association_id") REFERENCES "anatomical entity to anatomical entity association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "anatomical entity to anatomical entity association_knowledge_source" (
	"anatomical entity to anatomical entity association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity association_id", knowledge_source), 
	FOREIGN KEY("anatomical entity to anatomical entity association_id") REFERENCES "anatomical entity to anatomical entity association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "anatomical entity to anatomical entity association_original_knowledge_source" (
	"anatomical entity to anatomical entity association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity association_id", original_knowledge_source), 
	FOREIGN KEY("anatomical entity to anatomical entity association_id") REFERENCES "anatomical entity to anatomical entity association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "anatomical entity to anatomical entity association_primary_knowledge_source" (
	"anatomical entity to anatomical entity association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity association_id", primary_knowledge_source), 
	FOREIGN KEY("anatomical entity to anatomical entity association_id") REFERENCES "anatomical entity to anatomical entity association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "anatomical entity to anatomical entity association_aggregator_knowledge_source" (
	"anatomical entity to anatomical entity association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity association_id", aggregator_knowledge_source), 
	FOREIGN KEY("anatomical entity to anatomical entity association_id") REFERENCES "anatomical entity to anatomical entity association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "anatomical entity to anatomical entity association_category" (
	"anatomical entity to anatomical entity association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity association_id", category), 
	FOREIGN KEY("anatomical entity to anatomical entity association_id") REFERENCES "anatomical entity to anatomical entity association" (id)
);
CREATE TABLE "anatomical entity to anatomical entity association_has_attribute" (
	"anatomical entity to anatomical entity association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity association_id", has_attribute_id), 
	FOREIGN KEY("anatomical entity to anatomical entity association_id") REFERENCES "anatomical entity to anatomical entity association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "anatomical entity to anatomical entity part of association_qualifier" (
	"anatomical entity to anatomical entity part of association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity part of association_id", qualifier_id), 
	FOREIGN KEY("anatomical entity to anatomical entity part of association_id") REFERENCES "anatomical entity to anatomical entity part of association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "anatomical entity to anatomical entity part of association_publication" (
	"anatomical entity to anatomical entity part of association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity part of association_id", publication), 
	FOREIGN KEY("anatomical entity to anatomical entity part of association_id") REFERENCES "anatomical entity to anatomical entity part of association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "anatomical entity to anatomical entity part of association_has_evidence" (
	"anatomical entity to anatomical entity part of association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity part of association_id", has_evidence), 
	FOREIGN KEY("anatomical entity to anatomical entity part of association_id") REFERENCES "anatomical entity to anatomical entity part of association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "anatomical entity to anatomical entity part of association_knowledge_source" (
	"anatomical entity to anatomical entity part of association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity part of association_id", knowledge_source), 
	FOREIGN KEY("anatomical entity to anatomical entity part of association_id") REFERENCES "anatomical entity to anatomical entity part of association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "anatomical entity to anatomical entity part of association_original_knowledge_source" (
	"anatomical entity to anatomical entity part of association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity part of association_id", original_knowledge_source), 
	FOREIGN KEY("anatomical entity to anatomical entity part of association_id") REFERENCES "anatomical entity to anatomical entity part of association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "anatomical entity to anatomical entity part of association_primary_knowledge_source" (
	"anatomical entity to anatomical entity part of association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity part of association_id", primary_knowledge_source), 
	FOREIGN KEY("anatomical entity to anatomical entity part of association_id") REFERENCES "anatomical entity to anatomical entity part of association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "anatomical entity to anatomical entity part of association_aggregator_knowledge_source" (
	"anatomical entity to anatomical entity part of association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity part of association_id", aggregator_knowledge_source), 
	FOREIGN KEY("anatomical entity to anatomical entity part of association_id") REFERENCES "anatomical entity to anatomical entity part of association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "anatomical entity to anatomical entity part of association_category" (
	"anatomical entity to anatomical entity part of association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity part of association_id", category), 
	FOREIGN KEY("anatomical entity to anatomical entity part of association_id") REFERENCES "anatomical entity to anatomical entity part of association" (id)
);
CREATE TABLE "anatomical entity to anatomical entity part of association_has_attribute" (
	"anatomical entity to anatomical entity part of association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity part of association_id", has_attribute_id), 
	FOREIGN KEY("anatomical entity to anatomical entity part of association_id") REFERENCES "anatomical entity to anatomical entity part of association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "anatomical entity to anatomical entity ontogenic association_qualifier" (
	"anatomical entity to anatomical entity ontogenic association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity ontogenic association_id", qualifier_id), 
	FOREIGN KEY("anatomical entity to anatomical entity ontogenic association_id") REFERENCES "anatomical entity to anatomical entity ontogenic association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "anatomical entity to anatomical entity ontogenic association_publication" (
	"anatomical entity to anatomical entity ontogenic association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity ontogenic association_id", publication), 
	FOREIGN KEY("anatomical entity to anatomical entity ontogenic association_id") REFERENCES "anatomical entity to anatomical entity ontogenic association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "anatomical entity to anatomical entity ontogenic association_has_evidence" (
	"anatomical entity to anatomical entity ontogenic association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity ontogenic association_id", has_evidence), 
	FOREIGN KEY("anatomical entity to anatomical entity ontogenic association_id") REFERENCES "anatomical entity to anatomical entity ontogenic association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "anatomical entity to anatomical entity ontogenic association_knowledge_source" (
	"anatomical entity to anatomical entity ontogenic association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity ontogenic association_id", knowledge_source), 
	FOREIGN KEY("anatomical entity to anatomical entity ontogenic association_id") REFERENCES "anatomical entity to anatomical entity ontogenic association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "anatomical entity to anatomical entity ontogenic association_original_knowledge_source" (
	"anatomical entity to anatomical entity ontogenic association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity ontogenic association_id", original_knowledge_source), 
	FOREIGN KEY("anatomical entity to anatomical entity ontogenic association_id") REFERENCES "anatomical entity to anatomical entity ontogenic association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "anatomical entity to anatomical entity ontogenic association_primary_knowledge_source" (
	"anatomical entity to anatomical entity ontogenic association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity ontogenic association_id", primary_knowledge_source), 
	FOREIGN KEY("anatomical entity to anatomical entity ontogenic association_id") REFERENCES "anatomical entity to anatomical entity ontogenic association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "anatomical entity to anatomical entity ontogenic association_aggregator_knowledge_source" (
	"anatomical entity to anatomical entity ontogenic association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity ontogenic association_id", aggregator_knowledge_source), 
	FOREIGN KEY("anatomical entity to anatomical entity ontogenic association_id") REFERENCES "anatomical entity to anatomical entity ontogenic association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "anatomical entity to anatomical entity ontogenic association_category" (
	"anatomical entity to anatomical entity ontogenic association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity ontogenic association_id", category), 
	FOREIGN KEY("anatomical entity to anatomical entity ontogenic association_id") REFERENCES "anatomical entity to anatomical entity ontogenic association" (id)
);
CREATE TABLE "anatomical entity to anatomical entity ontogenic association_has_attribute" (
	"anatomical entity to anatomical entity ontogenic association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity ontogenic association_id", has_attribute_id), 
	FOREIGN KEY("anatomical entity to anatomical entity ontogenic association_id") REFERENCES "anatomical entity to anatomical entity ontogenic association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "organism taxon to organism taxon association_qualifier" (
	"organism taxon to organism taxon association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon association_id", qualifier_id), 
	FOREIGN KEY("organism taxon to organism taxon association_id") REFERENCES "organism taxon to organism taxon association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "organism taxon to organism taxon association_publication" (
	"organism taxon to organism taxon association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon association_id", publication), 
	FOREIGN KEY("organism taxon to organism taxon association_id") REFERENCES "organism taxon to organism taxon association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "organism taxon to organism taxon association_has_evidence" (
	"organism taxon to organism taxon association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon association_id", has_evidence), 
	FOREIGN KEY("organism taxon to organism taxon association_id") REFERENCES "organism taxon to organism taxon association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "organism taxon to organism taxon association_knowledge_source" (
	"organism taxon to organism taxon association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon association_id", knowledge_source), 
	FOREIGN KEY("organism taxon to organism taxon association_id") REFERENCES "organism taxon to organism taxon association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "organism taxon to organism taxon association_original_knowledge_source" (
	"organism taxon to organism taxon association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon association_id", original_knowledge_source), 
	FOREIGN KEY("organism taxon to organism taxon association_id") REFERENCES "organism taxon to organism taxon association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "organism taxon to organism taxon association_primary_knowledge_source" (
	"organism taxon to organism taxon association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon association_id", primary_knowledge_source), 
	FOREIGN KEY("organism taxon to organism taxon association_id") REFERENCES "organism taxon to organism taxon association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "organism taxon to organism taxon association_aggregator_knowledge_source" (
	"organism taxon to organism taxon association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon association_id", aggregator_knowledge_source), 
	FOREIGN KEY("organism taxon to organism taxon association_id") REFERENCES "organism taxon to organism taxon association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "organism taxon to organism taxon association_category" (
	"organism taxon to organism taxon association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon association_id", category), 
	FOREIGN KEY("organism taxon to organism taxon association_id") REFERENCES "organism taxon to organism taxon association" (id)
);
CREATE TABLE "organism taxon to organism taxon association_has_attribute" (
	"organism taxon to organism taxon association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon association_id", has_attribute_id), 
	FOREIGN KEY("organism taxon to organism taxon association_id") REFERENCES "organism taxon to organism taxon association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "organism taxon to organism taxon specialization_qualifier" (
	"organism taxon to organism taxon specialization_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon specialization_id", qualifier_id), 
	FOREIGN KEY("organism taxon to organism taxon specialization_id") REFERENCES "organism taxon to organism taxon specialization" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "organism taxon to organism taxon specialization_publication" (
	"organism taxon to organism taxon specialization_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon specialization_id", publication), 
	FOREIGN KEY("organism taxon to organism taxon specialization_id") REFERENCES "organism taxon to organism taxon specialization" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "organism taxon to organism taxon specialization_has_evidence" (
	"organism taxon to organism taxon specialization_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon specialization_id", has_evidence), 
	FOREIGN KEY("organism taxon to organism taxon specialization_id") REFERENCES "organism taxon to organism taxon specialization" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "organism taxon to organism taxon specialization_knowledge_source" (
	"organism taxon to organism taxon specialization_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon specialization_id", knowledge_source), 
	FOREIGN KEY("organism taxon to organism taxon specialization_id") REFERENCES "organism taxon to organism taxon specialization" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "organism taxon to organism taxon specialization_original_knowledge_source" (
	"organism taxon to organism taxon specialization_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon specialization_id", original_knowledge_source), 
	FOREIGN KEY("organism taxon to organism taxon specialization_id") REFERENCES "organism taxon to organism taxon specialization" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "organism taxon to organism taxon specialization_primary_knowledge_source" (
	"organism taxon to organism taxon specialization_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon specialization_id", primary_knowledge_source), 
	FOREIGN KEY("organism taxon to organism taxon specialization_id") REFERENCES "organism taxon to organism taxon specialization" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "organism taxon to organism taxon specialization_aggregator_knowledge_source" (
	"organism taxon to organism taxon specialization_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon specialization_id", aggregator_knowledge_source), 
	FOREIGN KEY("organism taxon to organism taxon specialization_id") REFERENCES "organism taxon to organism taxon specialization" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "organism taxon to organism taxon specialization_category" (
	"organism taxon to organism taxon specialization_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon specialization_id", category), 
	FOREIGN KEY("organism taxon to organism taxon specialization_id") REFERENCES "organism taxon to organism taxon specialization" (id)
);
CREATE TABLE "organism taxon to organism taxon specialization_has_attribute" (
	"organism taxon to organism taxon specialization_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon specialization_id", has_attribute_id), 
	FOREIGN KEY("organism taxon to organism taxon specialization_id") REFERENCES "organism taxon to organism taxon specialization" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "organism taxon to organism taxon interaction_qualifier" (
	"organism taxon to organism taxon interaction_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon interaction_id", qualifier_id), 
	FOREIGN KEY("organism taxon to organism taxon interaction_id") REFERENCES "organism taxon to organism taxon interaction" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "organism taxon to organism taxon interaction_publication" (
	"organism taxon to organism taxon interaction_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon interaction_id", publication), 
	FOREIGN KEY("organism taxon to organism taxon interaction_id") REFERENCES "organism taxon to organism taxon interaction" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "organism taxon to organism taxon interaction_has_evidence" (
	"organism taxon to organism taxon interaction_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon interaction_id", has_evidence), 
	FOREIGN KEY("organism taxon to organism taxon interaction_id") REFERENCES "organism taxon to organism taxon interaction" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "organism taxon to organism taxon interaction_knowledge_source" (
	"organism taxon to organism taxon interaction_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon interaction_id", knowledge_source), 
	FOREIGN KEY("organism taxon to organism taxon interaction_id") REFERENCES "organism taxon to organism taxon interaction" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "organism taxon to organism taxon interaction_original_knowledge_source" (
	"organism taxon to organism taxon interaction_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon interaction_id", original_knowledge_source), 
	FOREIGN KEY("organism taxon to organism taxon interaction_id") REFERENCES "organism taxon to organism taxon interaction" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "organism taxon to organism taxon interaction_primary_knowledge_source" (
	"organism taxon to organism taxon interaction_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon interaction_id", primary_knowledge_source), 
	FOREIGN KEY("organism taxon to organism taxon interaction_id") REFERENCES "organism taxon to organism taxon interaction" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "organism taxon to organism taxon interaction_aggregator_knowledge_source" (
	"organism taxon to organism taxon interaction_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon interaction_id", aggregator_knowledge_source), 
	FOREIGN KEY("organism taxon to organism taxon interaction_id") REFERENCES "organism taxon to organism taxon interaction" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "organism taxon to organism taxon interaction_category" (
	"organism taxon to organism taxon interaction_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon interaction_id", category), 
	FOREIGN KEY("organism taxon to organism taxon interaction_id") REFERENCES "organism taxon to organism taxon interaction" (id)
);
CREATE TABLE "organism taxon to organism taxon interaction_has_attribute" (
	"organism taxon to organism taxon interaction_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon interaction_id", has_attribute_id), 
	FOREIGN KEY("organism taxon to organism taxon interaction_id") REFERENCES "organism taxon to organism taxon interaction" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "organism taxon to environment association_qualifier" (
	"organism taxon to environment association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("organism taxon to environment association_id", qualifier_id), 
	FOREIGN KEY("organism taxon to environment association_id") REFERENCES "organism taxon to environment association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "organism taxon to environment association_publication" (
	"organism taxon to environment association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("organism taxon to environment association_id", publication), 
	FOREIGN KEY("organism taxon to environment association_id") REFERENCES "organism taxon to environment association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "organism taxon to environment association_has_evidence" (
	"organism taxon to environment association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("organism taxon to environment association_id", has_evidence), 
	FOREIGN KEY("organism taxon to environment association_id") REFERENCES "organism taxon to environment association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "organism taxon to environment association_knowledge_source" (
	"organism taxon to environment association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("organism taxon to environment association_id", knowledge_source), 
	FOREIGN KEY("organism taxon to environment association_id") REFERENCES "organism taxon to environment association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "organism taxon to environment association_original_knowledge_source" (
	"organism taxon to environment association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("organism taxon to environment association_id", original_knowledge_source), 
	FOREIGN KEY("organism taxon to environment association_id") REFERENCES "organism taxon to environment association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "organism taxon to environment association_primary_knowledge_source" (
	"organism taxon to environment association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("organism taxon to environment association_id", primary_knowledge_source), 
	FOREIGN KEY("organism taxon to environment association_id") REFERENCES "organism taxon to environment association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "organism taxon to environment association_aggregator_knowledge_source" (
	"organism taxon to environment association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("organism taxon to environment association_id", aggregator_knowledge_source), 
	FOREIGN KEY("organism taxon to environment association_id") REFERENCES "organism taxon to environment association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "organism taxon to environment association_category" (
	"organism taxon to environment association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("organism taxon to environment association_id", category), 
	FOREIGN KEY("organism taxon to environment association_id") REFERENCES "organism taxon to environment association" (id)
);
CREATE TABLE "organism taxon to environment association_has_attribute" (
	"organism taxon to environment association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("organism taxon to environment association_id", has_attribute_id), 
	FOREIGN KEY("organism taxon to environment association_id") REFERENCES "organism taxon to environment association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "genotype to genotype part association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES genotype (id), 
	FOREIGN KEY(object) REFERENCES genotype (id)
);
CREATE TABLE "genotype to gene association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES genotype (id), 
	FOREIGN KEY(object) REFERENCES gene (id)
);
CREATE TABLE "genotype to variant association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES genotype (id), 
	FOREIGN KEY(object) REFERENCES "sequence variant" (id)
);
CREATE TABLE "drug to gene association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	object_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES drug (id), 
	FOREIGN KEY(object_id) REFERENCES "gene or gene product" (id)
);
CREATE TABLE "genotype to phenotypic feature association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	frequency_qualifier TEXT, 
	sex_qualifier_id TEXT, 
	severity_qualifier_id TEXT, 
	onset_qualifier_id TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES genotype (id), 
	FOREIGN KEY(object) REFERENCES "phenotypic feature" (id), 
	FOREIGN KEY(sex_qualifier_id) REFERENCES "biological sex" (id), 
	FOREIGN KEY(severity_qualifier_id) REFERENCES "severity value" (id), 
	FOREIGN KEY(onset_qualifier_id) REFERENCES onset (id)
);
CREATE TABLE "genotype to disease association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	frequency_qualifier TEXT, 
	severity_qualifier_id TEXT, 
	onset_qualifier_id TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES genotype (id), 
	FOREIGN KEY(object) REFERENCES disease (id), 
	FOREIGN KEY(severity_qualifier_id) REFERENCES "severity value" (id), 
	FOREIGN KEY(onset_qualifier_id) REFERENCES onset (id)
);
CREATE TABLE "genotype as a model of disease association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	relation TEXT, 
	negated BOOLEAN, 
	id TEXT NOT NULL, 
	iri TEXT, 
	type TEXT, 
	name TEXT, 
	description TEXT, 
	source TEXT, 
	frequency_qualifier TEXT, 
	severity_qualifier_id TEXT, 
	onset_qualifier_id TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES genotype (id), 
	FOREIGN KEY(object) REFERENCES disease (id), 
	FOREIGN KEY(severity_qualifier_id) REFERENCES "severity value" (id), 
	FOREIGN KEY(onset_qualifier_id) REFERENCES onset (id)
);
CREATE TABLE "molecular mixture_routes_of_delivery" (
	"molecular mixture_id" TEXT, 
	routes_of_delivery VARCHAR(27), 
	PRIMARY KEY ("molecular mixture_id", routes_of_delivery), 
	FOREIGN KEY("molecular mixture_id") REFERENCES "molecular mixture" (id)
);
CREATE TABLE "molecular mixture_available_from" (
	"molecular mixture_id" TEXT, 
	available_from VARCHAR(16), 
	PRIMARY KEY ("molecular mixture_id", available_from), 
	FOREIGN KEY("molecular mixture_id") REFERENCES "molecular mixture" (id)
);
CREATE TABLE "molecular mixture_has_chemical_role" (
	"molecular mixture_id" TEXT, 
	has_chemical_role_id TEXT, 
	PRIMARY KEY ("molecular mixture_id", has_chemical_role_id), 
	FOREIGN KEY("molecular mixture_id") REFERENCES "molecular mixture" (id), 
	FOREIGN KEY(has_chemical_role_id) REFERENCES "chemical role" (id)
);
CREATE TABLE "molecular mixture_provided_by" (
	"molecular mixture_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("molecular mixture_id", provided_by), 
	FOREIGN KEY("molecular mixture_id") REFERENCES "molecular mixture" (id)
);
CREATE TABLE "molecular mixture_category" (
	"molecular mixture_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("molecular mixture_id", category), 
	FOREIGN KEY("molecular mixture_id") REFERENCES "molecular mixture" (id)
);
CREATE TABLE "molecular mixture_has_attribute" (
	"molecular mixture_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("molecular mixture_id", has_attribute_id), 
	FOREIGN KEY("molecular mixture_id") REFERENCES "molecular mixture" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "complex molecular mixture_routes_of_delivery" (
	"complex molecular mixture_id" TEXT, 
	routes_of_delivery VARCHAR(27), 
	PRIMARY KEY ("complex molecular mixture_id", routes_of_delivery), 
	FOREIGN KEY("complex molecular mixture_id") REFERENCES "complex molecular mixture" (id)
);
CREATE TABLE "complex molecular mixture_available_from" (
	"complex molecular mixture_id" TEXT, 
	available_from VARCHAR(16), 
	PRIMARY KEY ("complex molecular mixture_id", available_from), 
	FOREIGN KEY("complex molecular mixture_id") REFERENCES "complex molecular mixture" (id)
);
CREATE TABLE "complex molecular mixture_has_chemical_role" (
	"complex molecular mixture_id" TEXT, 
	has_chemical_role_id TEXT, 
	PRIMARY KEY ("complex molecular mixture_id", has_chemical_role_id), 
	FOREIGN KEY("complex molecular mixture_id") REFERENCES "complex molecular mixture" (id), 
	FOREIGN KEY(has_chemical_role_id) REFERENCES "chemical role" (id)
);
CREATE TABLE "complex molecular mixture_provided_by" (
	"complex molecular mixture_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("complex molecular mixture_id", provided_by), 
	FOREIGN KEY("complex molecular mixture_id") REFERENCES "complex molecular mixture" (id)
);
CREATE TABLE "complex molecular mixture_category" (
	"complex molecular mixture_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("complex molecular mixture_id", category), 
	FOREIGN KEY("complex molecular mixture_id") REFERENCES "complex molecular mixture" (id)
);
CREATE TABLE "complex molecular mixture_has_attribute" (
	"complex molecular mixture_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("complex molecular mixture_id", has_attribute_id), 
	FOREIGN KEY("complex molecular mixture_id") REFERENCES "complex molecular mixture" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "processed material_routes_of_delivery" (
	"processed material_id" TEXT, 
	routes_of_delivery VARCHAR(27), 
	PRIMARY KEY ("processed material_id", routes_of_delivery), 
	FOREIGN KEY("processed material_id") REFERENCES "processed material" (id)
);
CREATE TABLE "processed material_available_from" (
	"processed material_id" TEXT, 
	available_from VARCHAR(16), 
	PRIMARY KEY ("processed material_id", available_from), 
	FOREIGN KEY("processed material_id") REFERENCES "processed material" (id)
);
CREATE TABLE "processed material_has_chemical_role" (
	"processed material_id" TEXT, 
	has_chemical_role_id TEXT, 
	PRIMARY KEY ("processed material_id", has_chemical_role_id), 
	FOREIGN KEY("processed material_id") REFERENCES "processed material" (id), 
	FOREIGN KEY(has_chemical_role_id) REFERENCES "chemical role" (id)
);
CREATE TABLE "processed material_provided_by" (
	"processed material_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("processed material_id", provided_by), 
	FOREIGN KEY("processed material_id") REFERENCES "processed material" (id)
);
CREATE TABLE "processed material_category" (
	"processed material_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("processed material_id", category), 
	FOREIGN KEY("processed material_id") REFERENCES "processed material" (id)
);
CREATE TABLE "processed material_has_attribute" (
	"processed material_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("processed material_id", has_attribute_id), 
	FOREIGN KEY("processed material_id") REFERENCES "processed material" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE drug_routes_of_delivery (
	drug_id TEXT, 
	routes_of_delivery VARCHAR(27), 
	PRIMARY KEY (drug_id, routes_of_delivery), 
	FOREIGN KEY(drug_id) REFERENCES drug (id)
);
CREATE TABLE drug_available_from (
	drug_id TEXT, 
	available_from VARCHAR(16), 
	PRIMARY KEY (drug_id, available_from), 
	FOREIGN KEY(drug_id) REFERENCES drug (id)
);
CREATE TABLE drug_has_chemical_role (
	drug_id TEXT, 
	has_chemical_role_id TEXT, 
	PRIMARY KEY (drug_id, has_chemical_role_id), 
	FOREIGN KEY(drug_id) REFERENCES drug (id), 
	FOREIGN KEY(has_chemical_role_id) REFERENCES "chemical role" (id)
);
CREATE TABLE drug_provided_by (
	drug_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (drug_id, provided_by), 
	FOREIGN KEY(drug_id) REFERENCES drug (id)
);
CREATE TABLE drug_category (
	drug_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (drug_id, category), 
	FOREIGN KEY(drug_id) REFERENCES drug (id)
);
CREATE TABLE drug_has_attribute (
	drug_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (drug_id, has_attribute_id), 
	FOREIGN KEY(drug_id) REFERENCES drug (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE food_routes_of_delivery (
	food_id TEXT, 
	routes_of_delivery VARCHAR(27), 
	PRIMARY KEY (food_id, routes_of_delivery), 
	FOREIGN KEY(food_id) REFERENCES food (id)
);
CREATE TABLE food_available_from (
	food_id TEXT, 
	available_from VARCHAR(16), 
	PRIMARY KEY (food_id, available_from), 
	FOREIGN KEY(food_id) REFERENCES food (id)
);
CREATE TABLE food_has_chemical_role (
	food_id TEXT, 
	has_chemical_role_id TEXT, 
	PRIMARY KEY (food_id, has_chemical_role_id), 
	FOREIGN KEY(food_id) REFERENCES food (id), 
	FOREIGN KEY(has_chemical_role_id) REFERENCES "chemical role" (id)
);
CREATE TABLE food_provided_by (
	food_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (food_id, provided_by), 
	FOREIGN KEY(food_id) REFERENCES food (id)
);
CREATE TABLE food_category (
	food_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (food_id, category), 
	FOREIGN KEY(food_id) REFERENCES food (id)
);
CREATE TABLE food_has_attribute (
	food_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (food_id, has_attribute_id), 
	FOREIGN KEY(food_id) REFERENCES food (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE genotype_provided_by (
	genotype_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (genotype_id, provided_by), 
	FOREIGN KEY(genotype_id) REFERENCES genotype (id)
);
CREATE TABLE genotype_category (
	genotype_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (genotype_id, category), 
	FOREIGN KEY(genotype_id) REFERENCES genotype (id)
);
CREATE TABLE genotype_has_attribute (
	genotype_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (genotype_id, has_attribute_id), 
	FOREIGN KEY(genotype_id) REFERENCES genotype (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE genotype_in_taxon (
	genotype_id TEXT, 
	in_taxon TEXT, 
	PRIMARY KEY (genotype_id, in_taxon), 
	FOREIGN KEY(genotype_id) REFERENCES genotype (id), 
	FOREIGN KEY(in_taxon) REFERENCES "organism taxon" (id)
);
CREATE TABLE treatment_has_drug (
	treatment_id TEXT, 
	has_drug TEXT, 
	PRIMARY KEY (treatment_id, has_drug), 
	FOREIGN KEY(treatment_id) REFERENCES treatment (id), 
	FOREIGN KEY(has_drug) REFERENCES drug (id)
);
CREATE TABLE "pairwise molecular interaction_qualifier" (
	"pairwise molecular interaction_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("pairwise molecular interaction_id", qualifier_id), 
	FOREIGN KEY("pairwise molecular interaction_id") REFERENCES "pairwise molecular interaction" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "pairwise molecular interaction_publication" (
	"pairwise molecular interaction_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("pairwise molecular interaction_id", publication), 
	FOREIGN KEY("pairwise molecular interaction_id") REFERENCES "pairwise molecular interaction" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "pairwise molecular interaction_has_evidence" (
	"pairwise molecular interaction_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("pairwise molecular interaction_id", has_evidence), 
	FOREIGN KEY("pairwise molecular interaction_id") REFERENCES "pairwise molecular interaction" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "pairwise molecular interaction_knowledge_source" (
	"pairwise molecular interaction_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("pairwise molecular interaction_id", knowledge_source), 
	FOREIGN KEY("pairwise molecular interaction_id") REFERENCES "pairwise molecular interaction" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "pairwise molecular interaction_original_knowledge_source" (
	"pairwise molecular interaction_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("pairwise molecular interaction_id", original_knowledge_source), 
	FOREIGN KEY("pairwise molecular interaction_id") REFERENCES "pairwise molecular interaction" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "pairwise molecular interaction_primary_knowledge_source" (
	"pairwise molecular interaction_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("pairwise molecular interaction_id", primary_knowledge_source), 
	FOREIGN KEY("pairwise molecular interaction_id") REFERENCES "pairwise molecular interaction" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "pairwise molecular interaction_aggregator_knowledge_source" (
	"pairwise molecular interaction_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("pairwise molecular interaction_id", aggregator_knowledge_source), 
	FOREIGN KEY("pairwise molecular interaction_id") REFERENCES "pairwise molecular interaction" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "pairwise molecular interaction_category" (
	"pairwise molecular interaction_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("pairwise molecular interaction_id", category), 
	FOREIGN KEY("pairwise molecular interaction_id") REFERENCES "pairwise molecular interaction" (id)
);
CREATE TABLE "pairwise molecular interaction_has_attribute" (
	"pairwise molecular interaction_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("pairwise molecular interaction_id", has_attribute_id), 
	FOREIGN KEY("pairwise molecular interaction_id") REFERENCES "pairwise molecular interaction" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "reaction to participant association_qualifier" (
	"reaction to participant association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("reaction to participant association_id", qualifier_id), 
	FOREIGN KEY("reaction to participant association_id") REFERENCES "reaction to participant association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "reaction to participant association_publication" (
	"reaction to participant association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("reaction to participant association_id", publication), 
	FOREIGN KEY("reaction to participant association_id") REFERENCES "reaction to participant association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "reaction to participant association_has_evidence" (
	"reaction to participant association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("reaction to participant association_id", has_evidence), 
	FOREIGN KEY("reaction to participant association_id") REFERENCES "reaction to participant association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "reaction to participant association_knowledge_source" (
	"reaction to participant association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("reaction to participant association_id", knowledge_source), 
	FOREIGN KEY("reaction to participant association_id") REFERENCES "reaction to participant association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "reaction to participant association_original_knowledge_source" (
	"reaction to participant association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("reaction to participant association_id", original_knowledge_source), 
	FOREIGN KEY("reaction to participant association_id") REFERENCES "reaction to participant association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "reaction to participant association_primary_knowledge_source" (
	"reaction to participant association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("reaction to participant association_id", primary_knowledge_source), 
	FOREIGN KEY("reaction to participant association_id") REFERENCES "reaction to participant association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "reaction to participant association_aggregator_knowledge_source" (
	"reaction to participant association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("reaction to participant association_id", aggregator_knowledge_source), 
	FOREIGN KEY("reaction to participant association_id") REFERENCES "reaction to participant association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "reaction to participant association_category" (
	"reaction to participant association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("reaction to participant association_id", category), 
	FOREIGN KEY("reaction to participant association_id") REFERENCES "reaction to participant association" (id)
);
CREATE TABLE "reaction to participant association_has_attribute" (
	"reaction to participant association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("reaction to participant association_id", has_attribute_id), 
	FOREIGN KEY("reaction to participant association_id") REFERENCES "reaction to participant association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "reaction to catalyst association_qualifier" (
	"reaction to catalyst association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("reaction to catalyst association_id", qualifier_id), 
	FOREIGN KEY("reaction to catalyst association_id") REFERENCES "reaction to catalyst association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "reaction to catalyst association_publication" (
	"reaction to catalyst association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("reaction to catalyst association_id", publication), 
	FOREIGN KEY("reaction to catalyst association_id") REFERENCES "reaction to catalyst association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "reaction to catalyst association_has_evidence" (
	"reaction to catalyst association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("reaction to catalyst association_id", has_evidence), 
	FOREIGN KEY("reaction to catalyst association_id") REFERENCES "reaction to catalyst association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "reaction to catalyst association_knowledge_source" (
	"reaction to catalyst association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("reaction to catalyst association_id", knowledge_source), 
	FOREIGN KEY("reaction to catalyst association_id") REFERENCES "reaction to catalyst association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "reaction to catalyst association_original_knowledge_source" (
	"reaction to catalyst association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("reaction to catalyst association_id", original_knowledge_source), 
	FOREIGN KEY("reaction to catalyst association_id") REFERENCES "reaction to catalyst association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "reaction to catalyst association_primary_knowledge_source" (
	"reaction to catalyst association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("reaction to catalyst association_id", primary_knowledge_source), 
	FOREIGN KEY("reaction to catalyst association_id") REFERENCES "reaction to catalyst association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "reaction to catalyst association_aggregator_knowledge_source" (
	"reaction to catalyst association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("reaction to catalyst association_id", aggregator_knowledge_source), 
	FOREIGN KEY("reaction to catalyst association_id") REFERENCES "reaction to catalyst association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "reaction to catalyst association_category" (
	"reaction to catalyst association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("reaction to catalyst association_id", category), 
	FOREIGN KEY("reaction to catalyst association_id") REFERENCES "reaction to catalyst association" (id)
);
CREATE TABLE "reaction to catalyst association_has_attribute" (
	"reaction to catalyst association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("reaction to catalyst association_id", has_attribute_id), 
	FOREIGN KEY("reaction to catalyst association_id") REFERENCES "reaction to catalyst association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "exposure event to phenotypic feature association_qualifier" (
	"exposure event to phenotypic feature association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("exposure event to phenotypic feature association_id", qualifier_id), 
	FOREIGN KEY("exposure event to phenotypic feature association_id") REFERENCES "exposure event to phenotypic feature association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "exposure event to phenotypic feature association_publication" (
	"exposure event to phenotypic feature association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("exposure event to phenotypic feature association_id", publication), 
	FOREIGN KEY("exposure event to phenotypic feature association_id") REFERENCES "exposure event to phenotypic feature association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "exposure event to phenotypic feature association_has_evidence" (
	"exposure event to phenotypic feature association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("exposure event to phenotypic feature association_id", has_evidence), 
	FOREIGN KEY("exposure event to phenotypic feature association_id") REFERENCES "exposure event to phenotypic feature association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "exposure event to phenotypic feature association_knowledge_source" (
	"exposure event to phenotypic feature association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("exposure event to phenotypic feature association_id", knowledge_source), 
	FOREIGN KEY("exposure event to phenotypic feature association_id") REFERENCES "exposure event to phenotypic feature association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "exposure event to phenotypic feature association_original_knowledge_source" (
	"exposure event to phenotypic feature association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("exposure event to phenotypic feature association_id", original_knowledge_source), 
	FOREIGN KEY("exposure event to phenotypic feature association_id") REFERENCES "exposure event to phenotypic feature association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "exposure event to phenotypic feature association_primary_knowledge_source" (
	"exposure event to phenotypic feature association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("exposure event to phenotypic feature association_id", primary_knowledge_source), 
	FOREIGN KEY("exposure event to phenotypic feature association_id") REFERENCES "exposure event to phenotypic feature association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "exposure event to phenotypic feature association_aggregator_knowledge_source" (
	"exposure event to phenotypic feature association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("exposure event to phenotypic feature association_id", aggregator_knowledge_source), 
	FOREIGN KEY("exposure event to phenotypic feature association_id") REFERENCES "exposure event to phenotypic feature association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "exposure event to phenotypic feature association_category" (
	"exposure event to phenotypic feature association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("exposure event to phenotypic feature association_id", category), 
	FOREIGN KEY("exposure event to phenotypic feature association_id") REFERENCES "exposure event to phenotypic feature association" (id)
);
CREATE TABLE "exposure event to phenotypic feature association_has_attribute" (
	"exposure event to phenotypic feature association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("exposure event to phenotypic feature association_id", has_attribute_id), 
	FOREIGN KEY("exposure event to phenotypic feature association_id") REFERENCES "exposure event to phenotypic feature association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "disease to phenotypic feature association_qualifier" (
	"disease to phenotypic feature association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("disease to phenotypic feature association_id", qualifier_id), 
	FOREIGN KEY("disease to phenotypic feature association_id") REFERENCES "disease to phenotypic feature association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "disease to phenotypic feature association_publication" (
	"disease to phenotypic feature association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("disease to phenotypic feature association_id", publication), 
	FOREIGN KEY("disease to phenotypic feature association_id") REFERENCES "disease to phenotypic feature association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "disease to phenotypic feature association_has_evidence" (
	"disease to phenotypic feature association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("disease to phenotypic feature association_id", has_evidence), 
	FOREIGN KEY("disease to phenotypic feature association_id") REFERENCES "disease to phenotypic feature association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "disease to phenotypic feature association_knowledge_source" (
	"disease to phenotypic feature association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("disease to phenotypic feature association_id", knowledge_source), 
	FOREIGN KEY("disease to phenotypic feature association_id") REFERENCES "disease to phenotypic feature association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "disease to phenotypic feature association_original_knowledge_source" (
	"disease to phenotypic feature association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("disease to phenotypic feature association_id", original_knowledge_source), 
	FOREIGN KEY("disease to phenotypic feature association_id") REFERENCES "disease to phenotypic feature association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "disease to phenotypic feature association_primary_knowledge_source" (
	"disease to phenotypic feature association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("disease to phenotypic feature association_id", primary_knowledge_source), 
	FOREIGN KEY("disease to phenotypic feature association_id") REFERENCES "disease to phenotypic feature association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "disease to phenotypic feature association_aggregator_knowledge_source" (
	"disease to phenotypic feature association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("disease to phenotypic feature association_id", aggregator_knowledge_source), 
	FOREIGN KEY("disease to phenotypic feature association_id") REFERENCES "disease to phenotypic feature association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "disease to phenotypic feature association_category" (
	"disease to phenotypic feature association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("disease to phenotypic feature association_id", category), 
	FOREIGN KEY("disease to phenotypic feature association_id") REFERENCES "disease to phenotypic feature association" (id)
);
CREATE TABLE "disease to phenotypic feature association_has_attribute" (
	"disease to phenotypic feature association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("disease to phenotypic feature association_id", has_attribute_id), 
	FOREIGN KEY("disease to phenotypic feature association_id") REFERENCES "disease to phenotypic feature association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "case to phenotypic feature association_qualifier" (
	"case to phenotypic feature association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("case to phenotypic feature association_id", qualifier_id), 
	FOREIGN KEY("case to phenotypic feature association_id") REFERENCES "case to phenotypic feature association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "case to phenotypic feature association_publication" (
	"case to phenotypic feature association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("case to phenotypic feature association_id", publication), 
	FOREIGN KEY("case to phenotypic feature association_id") REFERENCES "case to phenotypic feature association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "case to phenotypic feature association_has_evidence" (
	"case to phenotypic feature association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("case to phenotypic feature association_id", has_evidence), 
	FOREIGN KEY("case to phenotypic feature association_id") REFERENCES "case to phenotypic feature association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "case to phenotypic feature association_knowledge_source" (
	"case to phenotypic feature association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("case to phenotypic feature association_id", knowledge_source), 
	FOREIGN KEY("case to phenotypic feature association_id") REFERENCES "case to phenotypic feature association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "case to phenotypic feature association_original_knowledge_source" (
	"case to phenotypic feature association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("case to phenotypic feature association_id", original_knowledge_source), 
	FOREIGN KEY("case to phenotypic feature association_id") REFERENCES "case to phenotypic feature association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "case to phenotypic feature association_primary_knowledge_source" (
	"case to phenotypic feature association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("case to phenotypic feature association_id", primary_knowledge_source), 
	FOREIGN KEY("case to phenotypic feature association_id") REFERENCES "case to phenotypic feature association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "case to phenotypic feature association_aggregator_knowledge_source" (
	"case to phenotypic feature association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("case to phenotypic feature association_id", aggregator_knowledge_source), 
	FOREIGN KEY("case to phenotypic feature association_id") REFERENCES "case to phenotypic feature association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "case to phenotypic feature association_category" (
	"case to phenotypic feature association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("case to phenotypic feature association_id", category), 
	FOREIGN KEY("case to phenotypic feature association_id") REFERENCES "case to phenotypic feature association" (id)
);
CREATE TABLE "case to phenotypic feature association_has_attribute" (
	"case to phenotypic feature association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("case to phenotypic feature association_id", has_attribute_id), 
	FOREIGN KEY("case to phenotypic feature association_id") REFERENCES "case to phenotypic feature association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "behavior to behavioral feature association_qualifier" (
	"behavior to behavioral feature association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("behavior to behavioral feature association_id", qualifier_id), 
	FOREIGN KEY("behavior to behavioral feature association_id") REFERENCES "behavior to behavioral feature association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "behavior to behavioral feature association_publication" (
	"behavior to behavioral feature association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("behavior to behavioral feature association_id", publication), 
	FOREIGN KEY("behavior to behavioral feature association_id") REFERENCES "behavior to behavioral feature association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "behavior to behavioral feature association_has_evidence" (
	"behavior to behavioral feature association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("behavior to behavioral feature association_id", has_evidence), 
	FOREIGN KEY("behavior to behavioral feature association_id") REFERENCES "behavior to behavioral feature association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "behavior to behavioral feature association_knowledge_source" (
	"behavior to behavioral feature association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("behavior to behavioral feature association_id", knowledge_source), 
	FOREIGN KEY("behavior to behavioral feature association_id") REFERENCES "behavior to behavioral feature association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "behavior to behavioral feature association_original_knowledge_source" (
	"behavior to behavioral feature association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("behavior to behavioral feature association_id", original_knowledge_source), 
	FOREIGN KEY("behavior to behavioral feature association_id") REFERENCES "behavior to behavioral feature association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "behavior to behavioral feature association_primary_knowledge_source" (
	"behavior to behavioral feature association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("behavior to behavioral feature association_id", primary_knowledge_source), 
	FOREIGN KEY("behavior to behavioral feature association_id") REFERENCES "behavior to behavioral feature association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "behavior to behavioral feature association_aggregator_knowledge_source" (
	"behavior to behavioral feature association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("behavior to behavioral feature association_id", aggregator_knowledge_source), 
	FOREIGN KEY("behavior to behavioral feature association_id") REFERENCES "behavior to behavioral feature association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "behavior to behavioral feature association_category" (
	"behavior to behavioral feature association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("behavior to behavioral feature association_id", category), 
	FOREIGN KEY("behavior to behavioral feature association_id") REFERENCES "behavior to behavioral feature association" (id)
);
CREATE TABLE "behavior to behavioral feature association_has_attribute" (
	"behavior to behavioral feature association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("behavior to behavioral feature association_id", has_attribute_id), 
	FOREIGN KEY("behavior to behavioral feature association_id") REFERENCES "behavior to behavioral feature association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "gene to phenotypic feature association_qualifier" (
	"gene to phenotypic feature association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("gene to phenotypic feature association_id", qualifier_id), 
	FOREIGN KEY("gene to phenotypic feature association_id") REFERENCES "gene to phenotypic feature association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to phenotypic feature association_publication" (
	"gene to phenotypic feature association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("gene to phenotypic feature association_id", publication), 
	FOREIGN KEY("gene to phenotypic feature association_id") REFERENCES "gene to phenotypic feature association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "gene to phenotypic feature association_has_evidence" (
	"gene to phenotypic feature association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("gene to phenotypic feature association_id", has_evidence), 
	FOREIGN KEY("gene to phenotypic feature association_id") REFERENCES "gene to phenotypic feature association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "gene to phenotypic feature association_knowledge_source" (
	"gene to phenotypic feature association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("gene to phenotypic feature association_id", knowledge_source), 
	FOREIGN KEY("gene to phenotypic feature association_id") REFERENCES "gene to phenotypic feature association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene to phenotypic feature association_original_knowledge_source" (
	"gene to phenotypic feature association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("gene to phenotypic feature association_id", original_knowledge_source), 
	FOREIGN KEY("gene to phenotypic feature association_id") REFERENCES "gene to phenotypic feature association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene to phenotypic feature association_primary_knowledge_source" (
	"gene to phenotypic feature association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("gene to phenotypic feature association_id", primary_knowledge_source), 
	FOREIGN KEY("gene to phenotypic feature association_id") REFERENCES "gene to phenotypic feature association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene to phenotypic feature association_aggregator_knowledge_source" (
	"gene to phenotypic feature association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("gene to phenotypic feature association_id", aggregator_knowledge_source), 
	FOREIGN KEY("gene to phenotypic feature association_id") REFERENCES "gene to phenotypic feature association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene to phenotypic feature association_category" (
	"gene to phenotypic feature association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("gene to phenotypic feature association_id", category), 
	FOREIGN KEY("gene to phenotypic feature association_id") REFERENCES "gene to phenotypic feature association" (id)
);
CREATE TABLE "gene to phenotypic feature association_has_attribute" (
	"gene to phenotypic feature association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("gene to phenotypic feature association_id", has_attribute_id), 
	FOREIGN KEY("gene to phenotypic feature association_id") REFERENCES "gene to phenotypic feature association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "gene to disease association_qualifier" (
	"gene to disease association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("gene to disease association_id", qualifier_id), 
	FOREIGN KEY("gene to disease association_id") REFERENCES "gene to disease association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to disease association_publication" (
	"gene to disease association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("gene to disease association_id", publication), 
	FOREIGN KEY("gene to disease association_id") REFERENCES "gene to disease association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "gene to disease association_has_evidence" (
	"gene to disease association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("gene to disease association_id", has_evidence), 
	FOREIGN KEY("gene to disease association_id") REFERENCES "gene to disease association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "gene to disease association_knowledge_source" (
	"gene to disease association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("gene to disease association_id", knowledge_source), 
	FOREIGN KEY("gene to disease association_id") REFERENCES "gene to disease association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene to disease association_original_knowledge_source" (
	"gene to disease association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("gene to disease association_id", original_knowledge_source), 
	FOREIGN KEY("gene to disease association_id") REFERENCES "gene to disease association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene to disease association_primary_knowledge_source" (
	"gene to disease association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("gene to disease association_id", primary_knowledge_source), 
	FOREIGN KEY("gene to disease association_id") REFERENCES "gene to disease association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene to disease association_aggregator_knowledge_source" (
	"gene to disease association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("gene to disease association_id", aggregator_knowledge_source), 
	FOREIGN KEY("gene to disease association_id") REFERENCES "gene to disease association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene to disease association_category" (
	"gene to disease association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("gene to disease association_id", category), 
	FOREIGN KEY("gene to disease association_id") REFERENCES "gene to disease association" (id)
);
CREATE TABLE "gene to disease association_has_attribute" (
	"gene to disease association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("gene to disease association_id", has_attribute_id), 
	FOREIGN KEY("gene to disease association_id") REFERENCES "gene to disease association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "druggable gene to disease association_qualifier" (
	"druggable gene to disease association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("druggable gene to disease association_id", qualifier_id), 
	FOREIGN KEY("druggable gene to disease association_id") REFERENCES "druggable gene to disease association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "druggable gene to disease association_publication" (
	"druggable gene to disease association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("druggable gene to disease association_id", publication), 
	FOREIGN KEY("druggable gene to disease association_id") REFERENCES "druggable gene to disease association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "druggable gene to disease association_has_evidence" (
	"druggable gene to disease association_id" TEXT, 
	has_evidence VARCHAR(5), 
	PRIMARY KEY ("druggable gene to disease association_id", has_evidence), 
	FOREIGN KEY("druggable gene to disease association_id") REFERENCES "druggable gene to disease association" (id)
);
CREATE TABLE "druggable gene to disease association_knowledge_source" (
	"druggable gene to disease association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("druggable gene to disease association_id", knowledge_source), 
	FOREIGN KEY("druggable gene to disease association_id") REFERENCES "druggable gene to disease association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "druggable gene to disease association_original_knowledge_source" (
	"druggable gene to disease association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("druggable gene to disease association_id", original_knowledge_source), 
	FOREIGN KEY("druggable gene to disease association_id") REFERENCES "druggable gene to disease association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "druggable gene to disease association_primary_knowledge_source" (
	"druggable gene to disease association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("druggable gene to disease association_id", primary_knowledge_source), 
	FOREIGN KEY("druggable gene to disease association_id") REFERENCES "druggable gene to disease association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "druggable gene to disease association_aggregator_knowledge_source" (
	"druggable gene to disease association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("druggable gene to disease association_id", aggregator_knowledge_source), 
	FOREIGN KEY("druggable gene to disease association_id") REFERENCES "druggable gene to disease association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "druggable gene to disease association_category" (
	"druggable gene to disease association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("druggable gene to disease association_id", category), 
	FOREIGN KEY("druggable gene to disease association_id") REFERENCES "druggable gene to disease association" (id)
);
CREATE TABLE "druggable gene to disease association_has_attribute" (
	"druggable gene to disease association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("druggable gene to disease association_id", has_attribute_id), 
	FOREIGN KEY("druggable gene to disease association_id") REFERENCES "druggable gene to disease association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "variant to phenotypic feature association_qualifier" (
	"variant to phenotypic feature association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("variant to phenotypic feature association_id", qualifier_id), 
	FOREIGN KEY("variant to phenotypic feature association_id") REFERENCES "variant to phenotypic feature association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "variant to phenotypic feature association_publication" (
	"variant to phenotypic feature association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("variant to phenotypic feature association_id", publication), 
	FOREIGN KEY("variant to phenotypic feature association_id") REFERENCES "variant to phenotypic feature association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "variant to phenotypic feature association_has_evidence" (
	"variant to phenotypic feature association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("variant to phenotypic feature association_id", has_evidence), 
	FOREIGN KEY("variant to phenotypic feature association_id") REFERENCES "variant to phenotypic feature association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "variant to phenotypic feature association_knowledge_source" (
	"variant to phenotypic feature association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("variant to phenotypic feature association_id", knowledge_source), 
	FOREIGN KEY("variant to phenotypic feature association_id") REFERENCES "variant to phenotypic feature association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "variant to phenotypic feature association_original_knowledge_source" (
	"variant to phenotypic feature association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("variant to phenotypic feature association_id", original_knowledge_source), 
	FOREIGN KEY("variant to phenotypic feature association_id") REFERENCES "variant to phenotypic feature association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "variant to phenotypic feature association_primary_knowledge_source" (
	"variant to phenotypic feature association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("variant to phenotypic feature association_id", primary_knowledge_source), 
	FOREIGN KEY("variant to phenotypic feature association_id") REFERENCES "variant to phenotypic feature association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "variant to phenotypic feature association_aggregator_knowledge_source" (
	"variant to phenotypic feature association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("variant to phenotypic feature association_id", aggregator_knowledge_source), 
	FOREIGN KEY("variant to phenotypic feature association_id") REFERENCES "variant to phenotypic feature association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "variant to phenotypic feature association_category" (
	"variant to phenotypic feature association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("variant to phenotypic feature association_id", category), 
	FOREIGN KEY("variant to phenotypic feature association_id") REFERENCES "variant to phenotypic feature association" (id)
);
CREATE TABLE "variant to phenotypic feature association_has_attribute" (
	"variant to phenotypic feature association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("variant to phenotypic feature association_id", has_attribute_id), 
	FOREIGN KEY("variant to phenotypic feature association_id") REFERENCES "variant to phenotypic feature association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "variant to disease association_qualifier" (
	"variant to disease association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("variant to disease association_id", qualifier_id), 
	FOREIGN KEY("variant to disease association_id") REFERENCES "variant to disease association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "variant to disease association_publication" (
	"variant to disease association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("variant to disease association_id", publication), 
	FOREIGN KEY("variant to disease association_id") REFERENCES "variant to disease association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "variant to disease association_has_evidence" (
	"variant to disease association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("variant to disease association_id", has_evidence), 
	FOREIGN KEY("variant to disease association_id") REFERENCES "variant to disease association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "variant to disease association_knowledge_source" (
	"variant to disease association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("variant to disease association_id", knowledge_source), 
	FOREIGN KEY("variant to disease association_id") REFERENCES "variant to disease association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "variant to disease association_original_knowledge_source" (
	"variant to disease association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("variant to disease association_id", original_knowledge_source), 
	FOREIGN KEY("variant to disease association_id") REFERENCES "variant to disease association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "variant to disease association_primary_knowledge_source" (
	"variant to disease association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("variant to disease association_id", primary_knowledge_source), 
	FOREIGN KEY("variant to disease association_id") REFERENCES "variant to disease association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "variant to disease association_aggregator_knowledge_source" (
	"variant to disease association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("variant to disease association_id", aggregator_knowledge_source), 
	FOREIGN KEY("variant to disease association_id") REFERENCES "variant to disease association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "variant to disease association_category" (
	"variant to disease association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("variant to disease association_id", category), 
	FOREIGN KEY("variant to disease association_id") REFERENCES "variant to disease association" (id)
);
CREATE TABLE "variant to disease association_has_attribute" (
	"variant to disease association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("variant to disease association_id", has_attribute_id), 
	FOREIGN KEY("variant to disease association_id") REFERENCES "variant to disease association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "gene as a model of disease association_qualifier" (
	"gene as a model of disease association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("gene as a model of disease association_id", qualifier_id), 
	FOREIGN KEY("gene as a model of disease association_id") REFERENCES "gene as a model of disease association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene as a model of disease association_publication" (
	"gene as a model of disease association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("gene as a model of disease association_id", publication), 
	FOREIGN KEY("gene as a model of disease association_id") REFERENCES "gene as a model of disease association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "gene as a model of disease association_has_evidence" (
	"gene as a model of disease association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("gene as a model of disease association_id", has_evidence), 
	FOREIGN KEY("gene as a model of disease association_id") REFERENCES "gene as a model of disease association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "gene as a model of disease association_knowledge_source" (
	"gene as a model of disease association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("gene as a model of disease association_id", knowledge_source), 
	FOREIGN KEY("gene as a model of disease association_id") REFERENCES "gene as a model of disease association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene as a model of disease association_original_knowledge_source" (
	"gene as a model of disease association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("gene as a model of disease association_id", original_knowledge_source), 
	FOREIGN KEY("gene as a model of disease association_id") REFERENCES "gene as a model of disease association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene as a model of disease association_primary_knowledge_source" (
	"gene as a model of disease association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("gene as a model of disease association_id", primary_knowledge_source), 
	FOREIGN KEY("gene as a model of disease association_id") REFERENCES "gene as a model of disease association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene as a model of disease association_aggregator_knowledge_source" (
	"gene as a model of disease association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("gene as a model of disease association_id", aggregator_knowledge_source), 
	FOREIGN KEY("gene as a model of disease association_id") REFERENCES "gene as a model of disease association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene as a model of disease association_category" (
	"gene as a model of disease association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("gene as a model of disease association_id", category), 
	FOREIGN KEY("gene as a model of disease association_id") REFERENCES "gene as a model of disease association" (id)
);
CREATE TABLE "gene as a model of disease association_has_attribute" (
	"gene as a model of disease association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("gene as a model of disease association_id", has_attribute_id), 
	FOREIGN KEY("gene as a model of disease association_id") REFERENCES "gene as a model of disease association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "variant as a model of disease association_qualifier" (
	"variant as a model of disease association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("variant as a model of disease association_id", qualifier_id), 
	FOREIGN KEY("variant as a model of disease association_id") REFERENCES "variant as a model of disease association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "variant as a model of disease association_publication" (
	"variant as a model of disease association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("variant as a model of disease association_id", publication), 
	FOREIGN KEY("variant as a model of disease association_id") REFERENCES "variant as a model of disease association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "variant as a model of disease association_has_evidence" (
	"variant as a model of disease association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("variant as a model of disease association_id", has_evidence), 
	FOREIGN KEY("variant as a model of disease association_id") REFERENCES "variant as a model of disease association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "variant as a model of disease association_knowledge_source" (
	"variant as a model of disease association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("variant as a model of disease association_id", knowledge_source), 
	FOREIGN KEY("variant as a model of disease association_id") REFERENCES "variant as a model of disease association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "variant as a model of disease association_original_knowledge_source" (
	"variant as a model of disease association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("variant as a model of disease association_id", original_knowledge_source), 
	FOREIGN KEY("variant as a model of disease association_id") REFERENCES "variant as a model of disease association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "variant as a model of disease association_primary_knowledge_source" (
	"variant as a model of disease association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("variant as a model of disease association_id", primary_knowledge_source), 
	FOREIGN KEY("variant as a model of disease association_id") REFERENCES "variant as a model of disease association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "variant as a model of disease association_aggregator_knowledge_source" (
	"variant as a model of disease association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("variant as a model of disease association_id", aggregator_knowledge_source), 
	FOREIGN KEY("variant as a model of disease association_id") REFERENCES "variant as a model of disease association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "variant as a model of disease association_category" (
	"variant as a model of disease association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("variant as a model of disease association_id", category), 
	FOREIGN KEY("variant as a model of disease association_id") REFERENCES "variant as a model of disease association" (id)
);
CREATE TABLE "variant as a model of disease association_has_attribute" (
	"variant as a model of disease association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("variant as a model of disease association_id", has_attribute_id), 
	FOREIGN KEY("variant as a model of disease association_id") REFERENCES "variant as a model of disease association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "cell line as a model of disease association_qualifier" (
	"cell line as a model of disease association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("cell line as a model of disease association_id", qualifier_id), 
	FOREIGN KEY("cell line as a model of disease association_id") REFERENCES "cell line as a model of disease association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "cell line as a model of disease association_publication" (
	"cell line as a model of disease association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("cell line as a model of disease association_id", publication), 
	FOREIGN KEY("cell line as a model of disease association_id") REFERENCES "cell line as a model of disease association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "cell line as a model of disease association_has_evidence" (
	"cell line as a model of disease association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("cell line as a model of disease association_id", has_evidence), 
	FOREIGN KEY("cell line as a model of disease association_id") REFERENCES "cell line as a model of disease association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "cell line as a model of disease association_knowledge_source" (
	"cell line as a model of disease association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("cell line as a model of disease association_id", knowledge_source), 
	FOREIGN KEY("cell line as a model of disease association_id") REFERENCES "cell line as a model of disease association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "cell line as a model of disease association_original_knowledge_source" (
	"cell line as a model of disease association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("cell line as a model of disease association_id", original_knowledge_source), 
	FOREIGN KEY("cell line as a model of disease association_id") REFERENCES "cell line as a model of disease association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "cell line as a model of disease association_primary_knowledge_source" (
	"cell line as a model of disease association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("cell line as a model of disease association_id", primary_knowledge_source), 
	FOREIGN KEY("cell line as a model of disease association_id") REFERENCES "cell line as a model of disease association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "cell line as a model of disease association_aggregator_knowledge_source" (
	"cell line as a model of disease association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("cell line as a model of disease association_id", aggregator_knowledge_source), 
	FOREIGN KEY("cell line as a model of disease association_id") REFERENCES "cell line as a model of disease association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "cell line as a model of disease association_category" (
	"cell line as a model of disease association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("cell line as a model of disease association_id", category), 
	FOREIGN KEY("cell line as a model of disease association_id") REFERENCES "cell line as a model of disease association" (id)
);
CREATE TABLE "cell line as a model of disease association_has_attribute" (
	"cell line as a model of disease association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("cell line as a model of disease association_id", has_attribute_id), 
	FOREIGN KEY("cell line as a model of disease association_id") REFERENCES "cell line as a model of disease association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "organismal entity as a model of disease association_qualifier" (
	"organismal entity as a model of disease association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("organismal entity as a model of disease association_id", qualifier_id), 
	FOREIGN KEY("organismal entity as a model of disease association_id") REFERENCES "organismal entity as a model of disease association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "organismal entity as a model of disease association_publication" (
	"organismal entity as a model of disease association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("organismal entity as a model of disease association_id", publication), 
	FOREIGN KEY("organismal entity as a model of disease association_id") REFERENCES "organismal entity as a model of disease association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "organismal entity as a model of disease association_has_evidence" (
	"organismal entity as a model of disease association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("organismal entity as a model of disease association_id", has_evidence), 
	FOREIGN KEY("organismal entity as a model of disease association_id") REFERENCES "organismal entity as a model of disease association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "organismal entity as a model of disease association_knowledge_source" (
	"organismal entity as a model of disease association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("organismal entity as a model of disease association_id", knowledge_source), 
	FOREIGN KEY("organismal entity as a model of disease association_id") REFERENCES "organismal entity as a model of disease association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "organismal entity as a model of disease association_original_knowledge_source" (
	"organismal entity as a model of disease association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("organismal entity as a model of disease association_id", original_knowledge_source), 
	FOREIGN KEY("organismal entity as a model of disease association_id") REFERENCES "organismal entity as a model of disease association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "organismal entity as a model of disease association_primary_knowledge_source" (
	"organismal entity as a model of disease association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("organismal entity as a model of disease association_id", primary_knowledge_source), 
	FOREIGN KEY("organismal entity as a model of disease association_id") REFERENCES "organismal entity as a model of disease association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "organismal entity as a model of disease association_aggregator_knowledge_source" (
	"organismal entity as a model of disease association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("organismal entity as a model of disease association_id", aggregator_knowledge_source), 
	FOREIGN KEY("organismal entity as a model of disease association_id") REFERENCES "organismal entity as a model of disease association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "organismal entity as a model of disease association_category" (
	"organismal entity as a model of disease association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("organismal entity as a model of disease association_id", category), 
	FOREIGN KEY("organismal entity as a model of disease association_id") REFERENCES "organismal entity as a model of disease association" (id)
);
CREATE TABLE "organismal entity as a model of disease association_has_attribute" (
	"organismal entity as a model of disease association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("organismal entity as a model of disease association_id", has_attribute_id), 
	FOREIGN KEY("organismal entity as a model of disease association_id") REFERENCES "organismal entity as a model of disease association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "gene has variant that contributes to disease association_qualifier" (
	"gene has variant that contributes to disease association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("gene has variant that contributes to disease association_id", qualifier_id), 
	FOREIGN KEY("gene has variant that contributes to disease association_id") REFERENCES "gene has variant that contributes to disease association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene has variant that contributes to disease association_publication" (
	"gene has variant that contributes to disease association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("gene has variant that contributes to disease association_id", publication), 
	FOREIGN KEY("gene has variant that contributes to disease association_id") REFERENCES "gene has variant that contributes to disease association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "gene has variant that contributes to disease association_has_evidence" (
	"gene has variant that contributes to disease association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("gene has variant that contributes to disease association_id", has_evidence), 
	FOREIGN KEY("gene has variant that contributes to disease association_id") REFERENCES "gene has variant that contributes to disease association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "gene has variant that contributes to disease association_knowledge_source" (
	"gene has variant that contributes to disease association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("gene has variant that contributes to disease association_id", knowledge_source), 
	FOREIGN KEY("gene has variant that contributes to disease association_id") REFERENCES "gene has variant that contributes to disease association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene has variant that contributes to disease association_original_knowledge_source" (
	"gene has variant that contributes to disease association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("gene has variant that contributes to disease association_id", original_knowledge_source), 
	FOREIGN KEY("gene has variant that contributes to disease association_id") REFERENCES "gene has variant that contributes to disease association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene has variant that contributes to disease association_primary_knowledge_source" (
	"gene has variant that contributes to disease association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("gene has variant that contributes to disease association_id", primary_knowledge_source), 
	FOREIGN KEY("gene has variant that contributes to disease association_id") REFERENCES "gene has variant that contributes to disease association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene has variant that contributes to disease association_aggregator_knowledge_source" (
	"gene has variant that contributes to disease association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("gene has variant that contributes to disease association_id", aggregator_knowledge_source), 
	FOREIGN KEY("gene has variant that contributes to disease association_id") REFERENCES "gene has variant that contributes to disease association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "gene has variant that contributes to disease association_category" (
	"gene has variant that contributes to disease association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("gene has variant that contributes to disease association_id", category), 
	FOREIGN KEY("gene has variant that contributes to disease association_id") REFERENCES "gene has variant that contributes to disease association" (id)
);
CREATE TABLE "gene has variant that contributes to disease association_has_attribute" (
	"gene has variant that contributes to disease association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("gene has variant that contributes to disease association_id", has_attribute_id), 
	FOREIGN KEY("gene has variant that contributes to disease association_id") REFERENCES "gene has variant that contributes to disease association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "genomic sequence localization_qualifier" (
	"genomic sequence localization_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("genomic sequence localization_id", qualifier_id), 
	FOREIGN KEY("genomic sequence localization_id") REFERENCES "genomic sequence localization" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "genomic sequence localization_publication" (
	"genomic sequence localization_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("genomic sequence localization_id", publication), 
	FOREIGN KEY("genomic sequence localization_id") REFERENCES "genomic sequence localization" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "genomic sequence localization_has_evidence" (
	"genomic sequence localization_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("genomic sequence localization_id", has_evidence), 
	FOREIGN KEY("genomic sequence localization_id") REFERENCES "genomic sequence localization" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "genomic sequence localization_knowledge_source" (
	"genomic sequence localization_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("genomic sequence localization_id", knowledge_source), 
	FOREIGN KEY("genomic sequence localization_id") REFERENCES "genomic sequence localization" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "genomic sequence localization_original_knowledge_source" (
	"genomic sequence localization_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("genomic sequence localization_id", original_knowledge_source), 
	FOREIGN KEY("genomic sequence localization_id") REFERENCES "genomic sequence localization" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "genomic sequence localization_primary_knowledge_source" (
	"genomic sequence localization_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("genomic sequence localization_id", primary_knowledge_source), 
	FOREIGN KEY("genomic sequence localization_id") REFERENCES "genomic sequence localization" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "genomic sequence localization_aggregator_knowledge_source" (
	"genomic sequence localization_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("genomic sequence localization_id", aggregator_knowledge_source), 
	FOREIGN KEY("genomic sequence localization_id") REFERENCES "genomic sequence localization" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "genomic sequence localization_category" (
	"genomic sequence localization_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("genomic sequence localization_id", category), 
	FOREIGN KEY("genomic sequence localization_id") REFERENCES "genomic sequence localization" (id)
);
CREATE TABLE "genomic sequence localization_has_attribute" (
	"genomic sequence localization_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("genomic sequence localization_id", has_attribute_id), 
	FOREIGN KEY("genomic sequence localization_id") REFERENCES "genomic sequence localization" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "sequence feature relationship_qualifier" (
	"sequence feature relationship_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("sequence feature relationship_id", qualifier_id), 
	FOREIGN KEY("sequence feature relationship_id") REFERENCES "sequence feature relationship" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "sequence feature relationship_publication" (
	"sequence feature relationship_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("sequence feature relationship_id", publication), 
	FOREIGN KEY("sequence feature relationship_id") REFERENCES "sequence feature relationship" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "sequence feature relationship_has_evidence" (
	"sequence feature relationship_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("sequence feature relationship_id", has_evidence), 
	FOREIGN KEY("sequence feature relationship_id") REFERENCES "sequence feature relationship" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "sequence feature relationship_knowledge_source" (
	"sequence feature relationship_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("sequence feature relationship_id", knowledge_source), 
	FOREIGN KEY("sequence feature relationship_id") REFERENCES "sequence feature relationship" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "sequence feature relationship_original_knowledge_source" (
	"sequence feature relationship_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("sequence feature relationship_id", original_knowledge_source), 
	FOREIGN KEY("sequence feature relationship_id") REFERENCES "sequence feature relationship" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "sequence feature relationship_primary_knowledge_source" (
	"sequence feature relationship_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("sequence feature relationship_id", primary_knowledge_source), 
	FOREIGN KEY("sequence feature relationship_id") REFERENCES "sequence feature relationship" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "sequence feature relationship_aggregator_knowledge_source" (
	"sequence feature relationship_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("sequence feature relationship_id", aggregator_knowledge_source), 
	FOREIGN KEY("sequence feature relationship_id") REFERENCES "sequence feature relationship" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "sequence feature relationship_category" (
	"sequence feature relationship_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("sequence feature relationship_id", category), 
	FOREIGN KEY("sequence feature relationship_id") REFERENCES "sequence feature relationship" (id)
);
CREATE TABLE "sequence feature relationship_has_attribute" (
	"sequence feature relationship_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("sequence feature relationship_id", has_attribute_id), 
	FOREIGN KEY("sequence feature relationship_id") REFERENCES "sequence feature relationship" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "transcript to gene relationship_qualifier" (
	"transcript to gene relationship_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("transcript to gene relationship_id", qualifier_id), 
	FOREIGN KEY("transcript to gene relationship_id") REFERENCES "transcript to gene relationship" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "transcript to gene relationship_publication" (
	"transcript to gene relationship_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("transcript to gene relationship_id", publication), 
	FOREIGN KEY("transcript to gene relationship_id") REFERENCES "transcript to gene relationship" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "transcript to gene relationship_has_evidence" (
	"transcript to gene relationship_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("transcript to gene relationship_id", has_evidence), 
	FOREIGN KEY("transcript to gene relationship_id") REFERENCES "transcript to gene relationship" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "transcript to gene relationship_knowledge_source" (
	"transcript to gene relationship_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("transcript to gene relationship_id", knowledge_source), 
	FOREIGN KEY("transcript to gene relationship_id") REFERENCES "transcript to gene relationship" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "transcript to gene relationship_original_knowledge_source" (
	"transcript to gene relationship_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("transcript to gene relationship_id", original_knowledge_source), 
	FOREIGN KEY("transcript to gene relationship_id") REFERENCES "transcript to gene relationship" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "transcript to gene relationship_primary_knowledge_source" (
	"transcript to gene relationship_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("transcript to gene relationship_id", primary_knowledge_source), 
	FOREIGN KEY("transcript to gene relationship_id") REFERENCES "transcript to gene relationship" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "transcript to gene relationship_aggregator_knowledge_source" (
	"transcript to gene relationship_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("transcript to gene relationship_id", aggregator_knowledge_source), 
	FOREIGN KEY("transcript to gene relationship_id") REFERENCES "transcript to gene relationship" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "transcript to gene relationship_category" (
	"transcript to gene relationship_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("transcript to gene relationship_id", category), 
	FOREIGN KEY("transcript to gene relationship_id") REFERENCES "transcript to gene relationship" (id)
);
CREATE TABLE "transcript to gene relationship_has_attribute" (
	"transcript to gene relationship_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("transcript to gene relationship_id", has_attribute_id), 
	FOREIGN KEY("transcript to gene relationship_id") REFERENCES "transcript to gene relationship" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "exon to transcript relationship_qualifier" (
	"exon to transcript relationship_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("exon to transcript relationship_id", qualifier_id), 
	FOREIGN KEY("exon to transcript relationship_id") REFERENCES "exon to transcript relationship" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "exon to transcript relationship_publication" (
	"exon to transcript relationship_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("exon to transcript relationship_id", publication), 
	FOREIGN KEY("exon to transcript relationship_id") REFERENCES "exon to transcript relationship" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "exon to transcript relationship_has_evidence" (
	"exon to transcript relationship_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("exon to transcript relationship_id", has_evidence), 
	FOREIGN KEY("exon to transcript relationship_id") REFERENCES "exon to transcript relationship" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "exon to transcript relationship_knowledge_source" (
	"exon to transcript relationship_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("exon to transcript relationship_id", knowledge_source), 
	FOREIGN KEY("exon to transcript relationship_id") REFERENCES "exon to transcript relationship" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "exon to transcript relationship_original_knowledge_source" (
	"exon to transcript relationship_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("exon to transcript relationship_id", original_knowledge_source), 
	FOREIGN KEY("exon to transcript relationship_id") REFERENCES "exon to transcript relationship" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "exon to transcript relationship_primary_knowledge_source" (
	"exon to transcript relationship_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("exon to transcript relationship_id", primary_knowledge_source), 
	FOREIGN KEY("exon to transcript relationship_id") REFERENCES "exon to transcript relationship" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "exon to transcript relationship_aggregator_knowledge_source" (
	"exon to transcript relationship_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("exon to transcript relationship_id", aggregator_knowledge_source), 
	FOREIGN KEY("exon to transcript relationship_id") REFERENCES "exon to transcript relationship" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "exon to transcript relationship_category" (
	"exon to transcript relationship_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("exon to transcript relationship_id", category), 
	FOREIGN KEY("exon to transcript relationship_id") REFERENCES "exon to transcript relationship" (id)
);
CREATE TABLE "exon to transcript relationship_has_attribute" (
	"exon to transcript relationship_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("exon to transcript relationship_id", has_attribute_id), 
	FOREIGN KEY("exon to transcript relationship_id") REFERENCES "exon to transcript relationship" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "genotype to genotype part association_qualifier" (
	"genotype to genotype part association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("genotype to genotype part association_id", qualifier_id), 
	FOREIGN KEY("genotype to genotype part association_id") REFERENCES "genotype to genotype part association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "genotype to genotype part association_publication" (
	"genotype to genotype part association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("genotype to genotype part association_id", publication), 
	FOREIGN KEY("genotype to genotype part association_id") REFERENCES "genotype to genotype part association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "genotype to genotype part association_has_evidence" (
	"genotype to genotype part association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("genotype to genotype part association_id", has_evidence), 
	FOREIGN KEY("genotype to genotype part association_id") REFERENCES "genotype to genotype part association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "genotype to genotype part association_knowledge_source" (
	"genotype to genotype part association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("genotype to genotype part association_id", knowledge_source), 
	FOREIGN KEY("genotype to genotype part association_id") REFERENCES "genotype to genotype part association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "genotype to genotype part association_original_knowledge_source" (
	"genotype to genotype part association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("genotype to genotype part association_id", original_knowledge_source), 
	FOREIGN KEY("genotype to genotype part association_id") REFERENCES "genotype to genotype part association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "genotype to genotype part association_primary_knowledge_source" (
	"genotype to genotype part association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("genotype to genotype part association_id", primary_knowledge_source), 
	FOREIGN KEY("genotype to genotype part association_id") REFERENCES "genotype to genotype part association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "genotype to genotype part association_aggregator_knowledge_source" (
	"genotype to genotype part association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("genotype to genotype part association_id", aggregator_knowledge_source), 
	FOREIGN KEY("genotype to genotype part association_id") REFERENCES "genotype to genotype part association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "genotype to genotype part association_category" (
	"genotype to genotype part association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("genotype to genotype part association_id", category), 
	FOREIGN KEY("genotype to genotype part association_id") REFERENCES "genotype to genotype part association" (id)
);
CREATE TABLE "genotype to genotype part association_has_attribute" (
	"genotype to genotype part association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("genotype to genotype part association_id", has_attribute_id), 
	FOREIGN KEY("genotype to genotype part association_id") REFERENCES "genotype to genotype part association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "genotype to gene association_qualifier" (
	"genotype to gene association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("genotype to gene association_id", qualifier_id), 
	FOREIGN KEY("genotype to gene association_id") REFERENCES "genotype to gene association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "genotype to gene association_publication" (
	"genotype to gene association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("genotype to gene association_id", publication), 
	FOREIGN KEY("genotype to gene association_id") REFERENCES "genotype to gene association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "genotype to gene association_has_evidence" (
	"genotype to gene association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("genotype to gene association_id", has_evidence), 
	FOREIGN KEY("genotype to gene association_id") REFERENCES "genotype to gene association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "genotype to gene association_knowledge_source" (
	"genotype to gene association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("genotype to gene association_id", knowledge_source), 
	FOREIGN KEY("genotype to gene association_id") REFERENCES "genotype to gene association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "genotype to gene association_original_knowledge_source" (
	"genotype to gene association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("genotype to gene association_id", original_knowledge_source), 
	FOREIGN KEY("genotype to gene association_id") REFERENCES "genotype to gene association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "genotype to gene association_primary_knowledge_source" (
	"genotype to gene association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("genotype to gene association_id", primary_knowledge_source), 
	FOREIGN KEY("genotype to gene association_id") REFERENCES "genotype to gene association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "genotype to gene association_aggregator_knowledge_source" (
	"genotype to gene association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("genotype to gene association_id", aggregator_knowledge_source), 
	FOREIGN KEY("genotype to gene association_id") REFERENCES "genotype to gene association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "genotype to gene association_category" (
	"genotype to gene association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("genotype to gene association_id", category), 
	FOREIGN KEY("genotype to gene association_id") REFERENCES "genotype to gene association" (id)
);
CREATE TABLE "genotype to gene association_has_attribute" (
	"genotype to gene association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("genotype to gene association_id", has_attribute_id), 
	FOREIGN KEY("genotype to gene association_id") REFERENCES "genotype to gene association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "genotype to variant association_qualifier" (
	"genotype to variant association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("genotype to variant association_id", qualifier_id), 
	FOREIGN KEY("genotype to variant association_id") REFERENCES "genotype to variant association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "genotype to variant association_publication" (
	"genotype to variant association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("genotype to variant association_id", publication), 
	FOREIGN KEY("genotype to variant association_id") REFERENCES "genotype to variant association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "genotype to variant association_has_evidence" (
	"genotype to variant association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("genotype to variant association_id", has_evidence), 
	FOREIGN KEY("genotype to variant association_id") REFERENCES "genotype to variant association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "genotype to variant association_knowledge_source" (
	"genotype to variant association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("genotype to variant association_id", knowledge_source), 
	FOREIGN KEY("genotype to variant association_id") REFERENCES "genotype to variant association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "genotype to variant association_original_knowledge_source" (
	"genotype to variant association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("genotype to variant association_id", original_knowledge_source), 
	FOREIGN KEY("genotype to variant association_id") REFERENCES "genotype to variant association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "genotype to variant association_primary_knowledge_source" (
	"genotype to variant association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("genotype to variant association_id", primary_knowledge_source), 
	FOREIGN KEY("genotype to variant association_id") REFERENCES "genotype to variant association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "genotype to variant association_aggregator_knowledge_source" (
	"genotype to variant association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("genotype to variant association_id", aggregator_knowledge_source), 
	FOREIGN KEY("genotype to variant association_id") REFERENCES "genotype to variant association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "genotype to variant association_category" (
	"genotype to variant association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("genotype to variant association_id", category), 
	FOREIGN KEY("genotype to variant association_id") REFERENCES "genotype to variant association" (id)
);
CREATE TABLE "genotype to variant association_has_attribute" (
	"genotype to variant association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("genotype to variant association_id", has_attribute_id), 
	FOREIGN KEY("genotype to variant association_id") REFERENCES "genotype to variant association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "drug to gene association_qualifier" (
	"drug to gene association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("drug to gene association_id", qualifier_id), 
	FOREIGN KEY("drug to gene association_id") REFERENCES "drug to gene association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "drug to gene association_publication" (
	"drug to gene association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("drug to gene association_id", publication), 
	FOREIGN KEY("drug to gene association_id") REFERENCES "drug to gene association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "drug to gene association_has_evidence" (
	"drug to gene association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("drug to gene association_id", has_evidence), 
	FOREIGN KEY("drug to gene association_id") REFERENCES "drug to gene association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "drug to gene association_knowledge_source" (
	"drug to gene association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("drug to gene association_id", knowledge_source), 
	FOREIGN KEY("drug to gene association_id") REFERENCES "drug to gene association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "drug to gene association_original_knowledge_source" (
	"drug to gene association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("drug to gene association_id", original_knowledge_source), 
	FOREIGN KEY("drug to gene association_id") REFERENCES "drug to gene association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "drug to gene association_primary_knowledge_source" (
	"drug to gene association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("drug to gene association_id", primary_knowledge_source), 
	FOREIGN KEY("drug to gene association_id") REFERENCES "drug to gene association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "drug to gene association_aggregator_knowledge_source" (
	"drug to gene association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("drug to gene association_id", aggregator_knowledge_source), 
	FOREIGN KEY("drug to gene association_id") REFERENCES "drug to gene association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "drug to gene association_category" (
	"drug to gene association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("drug to gene association_id", category), 
	FOREIGN KEY("drug to gene association_id") REFERENCES "drug to gene association" (id)
);
CREATE TABLE "drug to gene association_has_attribute" (
	"drug to gene association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("drug to gene association_id", has_attribute_id), 
	FOREIGN KEY("drug to gene association_id") REFERENCES "drug to gene association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "genotype to phenotypic feature association_qualifier" (
	"genotype to phenotypic feature association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("genotype to phenotypic feature association_id", qualifier_id), 
	FOREIGN KEY("genotype to phenotypic feature association_id") REFERENCES "genotype to phenotypic feature association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "genotype to phenotypic feature association_publication" (
	"genotype to phenotypic feature association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("genotype to phenotypic feature association_id", publication), 
	FOREIGN KEY("genotype to phenotypic feature association_id") REFERENCES "genotype to phenotypic feature association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "genotype to phenotypic feature association_has_evidence" (
	"genotype to phenotypic feature association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("genotype to phenotypic feature association_id", has_evidence), 
	FOREIGN KEY("genotype to phenotypic feature association_id") REFERENCES "genotype to phenotypic feature association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "genotype to phenotypic feature association_knowledge_source" (
	"genotype to phenotypic feature association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("genotype to phenotypic feature association_id", knowledge_source), 
	FOREIGN KEY("genotype to phenotypic feature association_id") REFERENCES "genotype to phenotypic feature association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "genotype to phenotypic feature association_original_knowledge_source" (
	"genotype to phenotypic feature association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("genotype to phenotypic feature association_id", original_knowledge_source), 
	FOREIGN KEY("genotype to phenotypic feature association_id") REFERENCES "genotype to phenotypic feature association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "genotype to phenotypic feature association_primary_knowledge_source" (
	"genotype to phenotypic feature association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("genotype to phenotypic feature association_id", primary_knowledge_source), 
	FOREIGN KEY("genotype to phenotypic feature association_id") REFERENCES "genotype to phenotypic feature association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "genotype to phenotypic feature association_aggregator_knowledge_source" (
	"genotype to phenotypic feature association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("genotype to phenotypic feature association_id", aggregator_knowledge_source), 
	FOREIGN KEY("genotype to phenotypic feature association_id") REFERENCES "genotype to phenotypic feature association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "genotype to phenotypic feature association_category" (
	"genotype to phenotypic feature association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("genotype to phenotypic feature association_id", category), 
	FOREIGN KEY("genotype to phenotypic feature association_id") REFERENCES "genotype to phenotypic feature association" (id)
);
CREATE TABLE "genotype to phenotypic feature association_has_attribute" (
	"genotype to phenotypic feature association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("genotype to phenotypic feature association_id", has_attribute_id), 
	FOREIGN KEY("genotype to phenotypic feature association_id") REFERENCES "genotype to phenotypic feature association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "genotype to disease association_qualifier" (
	"genotype to disease association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("genotype to disease association_id", qualifier_id), 
	FOREIGN KEY("genotype to disease association_id") REFERENCES "genotype to disease association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "genotype to disease association_publication" (
	"genotype to disease association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("genotype to disease association_id", publication), 
	FOREIGN KEY("genotype to disease association_id") REFERENCES "genotype to disease association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "genotype to disease association_has_evidence" (
	"genotype to disease association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("genotype to disease association_id", has_evidence), 
	FOREIGN KEY("genotype to disease association_id") REFERENCES "genotype to disease association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "genotype to disease association_knowledge_source" (
	"genotype to disease association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("genotype to disease association_id", knowledge_source), 
	FOREIGN KEY("genotype to disease association_id") REFERENCES "genotype to disease association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "genotype to disease association_original_knowledge_source" (
	"genotype to disease association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("genotype to disease association_id", original_knowledge_source), 
	FOREIGN KEY("genotype to disease association_id") REFERENCES "genotype to disease association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "genotype to disease association_primary_knowledge_source" (
	"genotype to disease association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("genotype to disease association_id", primary_knowledge_source), 
	FOREIGN KEY("genotype to disease association_id") REFERENCES "genotype to disease association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "genotype to disease association_aggregator_knowledge_source" (
	"genotype to disease association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("genotype to disease association_id", aggregator_knowledge_source), 
	FOREIGN KEY("genotype to disease association_id") REFERENCES "genotype to disease association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "genotype to disease association_category" (
	"genotype to disease association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("genotype to disease association_id", category), 
	FOREIGN KEY("genotype to disease association_id") REFERENCES "genotype to disease association" (id)
);
CREATE TABLE "genotype to disease association_has_attribute" (
	"genotype to disease association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("genotype to disease association_id", has_attribute_id), 
	FOREIGN KEY("genotype to disease association_id") REFERENCES "genotype to disease association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "genotype as a model of disease association_qualifier" (
	"genotype as a model of disease association_id" TEXT, 
	qualifier_id TEXT, 
	PRIMARY KEY ("genotype as a model of disease association_id", qualifier_id), 
	FOREIGN KEY("genotype as a model of disease association_id") REFERENCES "genotype as a model of disease association" (id), 
	FOREIGN KEY(qualifier_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "genotype as a model of disease association_publication" (
	"genotype as a model of disease association_id" TEXT, 
	publication TEXT, 
	PRIMARY KEY ("genotype as a model of disease association_id", publication), 
	FOREIGN KEY("genotype as a model of disease association_id") REFERENCES "genotype as a model of disease association" (id), 
	FOREIGN KEY(publication) REFERENCES publication (id)
);
CREATE TABLE "genotype as a model of disease association_has_evidence" (
	"genotype as a model of disease association_id" TEXT, 
	has_evidence TEXT, 
	PRIMARY KEY ("genotype as a model of disease association_id", has_evidence), 
	FOREIGN KEY("genotype as a model of disease association_id") REFERENCES "genotype as a model of disease association" (id), 
	FOREIGN KEY(has_evidence) REFERENCES "evidence type" (id)
);
CREATE TABLE "genotype as a model of disease association_knowledge_source" (
	"genotype as a model of disease association_id" TEXT, 
	knowledge_source TEXT, 
	PRIMARY KEY ("genotype as a model of disease association_id", knowledge_source), 
	FOREIGN KEY("genotype as a model of disease association_id") REFERENCES "genotype as a model of disease association" (id), 
	FOREIGN KEY(knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "genotype as a model of disease association_original_knowledge_source" (
	"genotype as a model of disease association_id" TEXT, 
	original_knowledge_source TEXT, 
	PRIMARY KEY ("genotype as a model of disease association_id", original_knowledge_source), 
	FOREIGN KEY("genotype as a model of disease association_id") REFERENCES "genotype as a model of disease association" (id), 
	FOREIGN KEY(original_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "genotype as a model of disease association_primary_knowledge_source" (
	"genotype as a model of disease association_id" TEXT, 
	primary_knowledge_source TEXT, 
	PRIMARY KEY ("genotype as a model of disease association_id", primary_knowledge_source), 
	FOREIGN KEY("genotype as a model of disease association_id") REFERENCES "genotype as a model of disease association" (id), 
	FOREIGN KEY(primary_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "genotype as a model of disease association_aggregator_knowledge_source" (
	"genotype as a model of disease association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("genotype as a model of disease association_id", aggregator_knowledge_source), 
	FOREIGN KEY("genotype as a model of disease association_id") REFERENCES "genotype as a model of disease association" (id), 
	FOREIGN KEY(aggregator_knowledge_source) REFERENCES "information resource" (id)
);
CREATE TABLE "genotype as a model of disease association_category" (
	"genotype as a model of disease association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("genotype as a model of disease association_id", category), 
	FOREIGN KEY("genotype as a model of disease association_id") REFERENCES "genotype as a model of disease association" (id)
);
CREATE TABLE "genotype as a model of disease association_has_attribute" (
	"genotype as a model of disease association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("genotype as a model of disease association_id", has_attribute_id), 
	FOREIGN KEY("genotype as a model of disease association_id") REFERENCES "genotype as a model of disease association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
