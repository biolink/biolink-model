-- # Class: "mapping collection" Description: "A collection of deprecated mappings."
--     * Slot: id Description: 
-- # Class: "predicate mapping" Description: "A deprecated predicate mapping object contains the deprecated predicate and an example of the rewiring that should be done to use a qualified statement in its place."
--     * Slot: id Description: 
--     * Slot: mapped_predicate Description: The predicate that is being replaced by the fully qualified representation of predicate + subject and object qualifiers.  Only to be used in test data and mapping data to help with the transition to the fully qualified predicate model. Not to be used in knowledge graphs.
--     * Slot: subject_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the subject of an association (aka: statement).
--     * Slot: subject_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the subject of an association (aka: statement).
--     * Slot: subject_form_or_variant_qualifier Description: A qualifier that composes with a core subject/object concept to define a specific type, variant, alternative version of this concept. The composed concept remains a subtype or instance of the core concept. For example, the qualifier ‘mutation’ combines with the core concept ‘Gene X’ to express the compose concept ‘a mutation of Gene X’.  This qualifier specifies a change in the subject of an association (aka: statement).
--     * Slot: subject_part_qualifier Description: defines a specific part/component of the core concept (used in cases there this specific part has no IRI we can use to directly represent it, e.g. 'ESR1 transcript' q: polyA tail).  This qualifier is for the  subject of an association (or statement).
--     * Slot: subject_derivative_qualifier Description: A qualifier that composes with a core subject/object  concept to describe something that is derived from the core concept.  For example, the qualifier ‘metabolite’ combines with a ‘Chemical X’ core concept to express the composed concept ‘a metabolite of Chemical X’.  This qualifier is for the subject of an association  (or statement).
--     * Slot: subject_context_qualifier Description: 
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: qualified_predicate Description: Predicate to be used in an association when subject and object qualifiers are present and the full reading of the statement requires a qualification to the predicate in use in order to refine or increase the specificity of the full statement reading.  This qualifier holds a relationship to be used instead of that expressed by the primary predicate, in a ‘full statement’ reading of the association, where qualifier-based semantics are included.  This is necessary only in cases where the primary predicate does not work in a full statement reading.
--     * Slot: object_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the object of an association (aka: statement).
--     * Slot: object_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the object of an association (aka: statement).
--     * Slot: object_form_or_variant_qualifier Description: A qualifier that composes with a core subject/object concept to define a specific type, variant, alternative version of this concept. The composed concept remains a subtype or instance of the core concept. For example, the qualifier ‘mutation’ combines with the core concept ‘Gene X’ to express the compose concept ‘a mutation of Gene X’.  This qualifier specifies a change in the object of an association (aka: statement).
--     * Slot: object_part_qualifier Description: defines a specific part/component of the core concept (used in cases there this specific part has no IRI we can use to directly represent it, e.g. 'ESR1 transcript' q: polyA tail).  This qualifier is for the  object of an association (or statement).
--     * Slot: object_derivative_qualifier Description: A qualifier that composes with a core subject/object  concept to describe something that is derived from the core concept.  For example, the qualifier ‘metabolite’ combines with a ‘Chemical X’ core concept to express the composed concept ‘a metabolite of Chemical X’.  This qualifier is for the object of an association  (or statement).
--     * Slot: object_context_qualifier Description: 
--     * Slot: causal_mechanism_qualifier Description: A statement qualifier representing a type of molecular control mechanism through which an effect of a chemical on a gene or gene product is mediated (e.g. 'agonism', 'inhibition', 'allosteric modulation', 'channel blocker')
--     * Slot: anatomical_context_qualifier Description: A statement qualifier representing an anatomical location where an relationship expressed in an association took place (can be a tissue, cell type, or sub-cellular location).
--     * Slot: species_context_qualifier Description: A statement qualifier representing a taxonomic category of species in which a relationship expressed in an association took place.
--     * Slot: mapping collection_id Description: Autocreated FK slot
-- # Class: "ontology class" Description: "a concept or class in an ontology, vocabulary or thesaurus. Note that nodes in a biolink compatible KG can be considered both instances of biolink classes, and OWL classes in their own right. In general you should not need to use this class directly. Instead, use the appropriate biolink class. For example, for the GO concept of endocytosis (GO:0006897), use bl:BiologicalProcess as the type."
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
-- # Class: "annotation" Description: "Biolink Model root class for entity annotations."
--     * Slot: id Description: 
-- # Class: "quantity value" Description: "A value of an attribute that is quantitative and measurable, expressed as a combination of a unit and a numeric value"
--     * Slot: id Description: 
--     * Slot: has_unit Description: connects a quantity value to a unit
--     * Slot: has_numeric_value Description: connects a quantity value to a number
-- # Class: "attribute" Description: "A property or characteristic of an entity. For example, an apple may have properties such as color, shape, age, crispiness. An environmental sample may have attributes such as depth, lat, long, material."
--     * Slot: name Description: The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.
--     * Slot: has_attribute_type Description: connects an attribute to a class that describes it
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "chemical role" Description: "A role played by the molecular entity or part thereof within a chemical context."
--     * Slot: name Description: The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.
--     * Slot: has_attribute_type Description: connects an attribute to a class that describes it
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "biological sex" Description: ""
--     * Slot: name Description: The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.
--     * Slot: has_attribute_type Description: connects an attribute to a class that describes it
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "phenotypic sex" Description: "An attribute corresponding to the phenotypic sex of the individual, based upon the reproductive organs present."
--     * Slot: name Description: The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.
--     * Slot: has_attribute_type Description: connects an attribute to a class that describes it
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "genotypic sex" Description: "An attribute corresponding to the genotypic sex of the individual, based upon genotypic composition of sex chromosomes."
--     * Slot: name Description: The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.
--     * Slot: has_attribute_type Description: connects an attribute to a class that describes it
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "severity value" Description: "describes the severity of a phenotypic feature or disease"
--     * Slot: name Description: The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.
--     * Slot: has_attribute_type Description: connects an attribute to a class that describes it
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "relationship quantifier" Description: ""
--     * Slot: id Description: 
-- # Class: "sensitivity quantifier" Description: ""
--     * Slot: id Description: 
-- # Class: "specificity quantifier" Description: ""
--     * Slot: id Description: 
-- # Class: "pathognomonicity quantifier" Description: "A relationship quantifier between a variant or symptom and a disease, which is high when the presence of the feature implies the existence of the disease"
--     * Slot: id Description: 
-- # Class: "frequency quantifier" Description: ""
--     * Slot: id Description: 
--     * Slot: has_count Description: number of things with a particular property
--     * Slot: has_total Description: total number of things in a particular reference set
--     * Slot: has_quotient Description: 
--     * Slot: has_percentage Description: equivalent to has quotient multiplied by 100
-- # Class: "chemical or drug or treatment" Description: ""
--     * Slot: id Description: 
-- # Class: "entity" Description: "Root Biolink Model class for all things and informational relationships, real or imagined."
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "named thing" Description: "a databased entity or concept/class"
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "relationship type" Description: "An OWL property used as an edge label"
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
-- # Class: "taxonomic rank" Description: "A descriptor for the rank within a taxonomic classification. Example instance: TAXRANK:0000017 (kingdom)"
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
-- # Class: "organism taxon" Description: "A classification of a set of organisms. Example instances: NCBITaxon:9606 (Homo sapiens), NCBITaxon:2 (Bacteria). Can also be used to represent strains or subspecies."
--     * Slot: has_taxonomic_rank Description: 
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "event" Description: "Something that happens at a given place and time."
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "administrative entity" Description: ""
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "study result" Description: "A collection of data items from a study that are about a particular study subject or experimental unit (the 'focus' of the Result) - optionally with context/provenance metadata that may be relevant to the interpretation of this data as evidence."
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "study" Description: "a detailed investigation and/or analysis"
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "study variable" Description: "a variable that is used as a measure in the investigation of a study"
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "common data element" Description: "A Common Data Element (CDE) is a standardized, precisely defined question, paired with a set of allowable responses, used systematically across different sites, studies, or clinical trials to ensure consistent data collection. Multiple CDEs (from one or more Collections) can be curated into Forms. (https://cde.nlm.nih.gov/home)"
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "concept count analysis result" Description: "A result of a concept count analysis."
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "observed expected frequency analysis result" Description: "A result of a observed expected frequency analysis."
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "relative frequency analysis result" Description: "A result of a relative frequency analysis."
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "text mining result" Description: "A result of text mining."
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "chi squared analysis result" Description: "A result of a chi squared analysis."
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "log odds analysis result" Description: "A result of a log odds ratio analysis."
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "agent" Description: "person, group, organization or project that provides a piece of information (i.e. a knowledge association)"
--     * Slot: address Description: the particulars of the place where someone or an organization is situated.  For now, this slot is a simple text "blob" containing all relevant details of the given location for fitness of purpose. For the moment, this "address" can include other contact details such as email and phone number(?).
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: Different classes of agents have distinct preferred identifiers. For publishers, use the ISBN publisher code. See https://grp.isbn-international.org/ for publisher code lookups. For editors, authors and  individual providers, use the individual's ORCID if available; Otherwise, a ScopusID, ResearchID or Google Scholar ID ('GSID') may be used if the author ORCID is unknown. Institutional agents could be identified by an International Standard Name Identifier ('ISNI') code.
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: it is recommended that an author's 'name' property be formatted as "surname, firstname initial."
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "information content entity" Description: "a piece of information that typically describes some topic of discourse or is used as support."
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "dataset" Description: "an item that refers to a collection of data from a data source."
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "dataset distribution" Description: "an item that holds distribution level information about a dataset."
--     * Slot: distribution_download_url Description: 
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "dataset version" Description: "an item that holds version level information about a dataset."
--     * Slot: has_dataset Description: 
--     * Slot: ingest_date Description: 
--     * Slot: has_distribution Description: 
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "dataset summary" Description: "an item that holds summary level information about a dataset."
--     * Slot: source_web_page Description: 
--     * Slot: source_logo Description: 
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "confidence level" Description: "Level of confidence in a statement"
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "evidence type" Description: "Class of evidence that supports an association"
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "publication" Description: "Any ‘published’ piece of information. Publications are considered broadly to include any document or document part made available in print or on the web - which may include scientific journal issues, individual articles, and books - as well as things like pre-prints, white papers, patents, drug labels, web pages, protocol documents,  and even a part of a publication if of significant knowledge scope (e.g. a figure, figure legend, or section highlighted by NLP)."
--     * Slot: summary Description: executive  summary of a publication
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: Different kinds of publication subtypes will have different preferred identifiers (curies when feasible). Precedence of identifiers for scientific articles is as follows: PMID if available; DOI if not; actual alternate CURIE otherwise. Enclosing publications (i.e. referenced by 'published in' node property) such as books and journals, should have industry-standard identifier such as from ISBN and ISSN.
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: the 'title' of the publication is generally recorded in the 'name' property (inherited from NamedThing). The field name 'title' is now also tagged as an acceptable alias for the node property 'name' (just in case).
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "book" Description: "This class may rarely be instantiated except if use cases of a given knowledge graph support its utility."
--     * Slot: summary Description: executive  summary of a publication
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: Books should have industry-standard identifier such as from ISBN.
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: the 'title' of the publication is generally recorded in the 'name' property (inherited from NamedThing). The field name 'title' is now also tagged as an acceptable alias for the node property 'name' (just in case).
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "book chapter" Description: ""
--     * Slot: published_in Description: The enclosing parent book containing the chapter should have industry-standard identifier from ISBN.
--     * Slot: volume Description: volume of a book or music release in a collection/series or a published collection of journal issues in a serial publication
--     * Slot: chapter Description: chapter of a book
--     * Slot: summary Description: executive  summary of a publication
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: Different kinds of publication subtypes will have different preferred identifiers (curies when feasible). Precedence of identifiers for scientific articles is as follows: PMID if available; DOI if not; actual alternate CURIE otherwise. Enclosing publications (i.e. referenced by 'published in' node property) such as books and journals, should have industry-standard identifier such as from ISBN and ISSN.
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: the 'title' of the publication is generally recorded in the 'name' property (inherited from NamedThing). The field name 'title' is now also tagged as an acceptable alias for the node property 'name' (just in case).
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "serial" Description: "This class may rarely be instantiated except if use cases of a given knowledge graph support its utility."
--     * Slot: iso_abbreviation Description: Standard abbreviation for periodicals in the International Organization for Standardization (ISO) 4 system See https://www.issn.org/services/online-services/access-to-the-ltwa/. If the 'published in' property is set, then the iso abbreviation pertains to the broader publication context (the journal) within which the given publication node is embedded, not the publication itself.
--     * Slot: volume Description: volume of a book or music release in a collection/series or a published collection of journal issues in a serial publication
--     * Slot: issue Description: issue of a newspaper, a scientific journal or magazine for reference purpose
--     * Slot: summary Description: executive  summary of a publication
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: Serials (journals) should have industry-standard identifier such as from ISSN.
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: the 'title' of the publication is generally recorded in the 'name' property (inherited from NamedThing). The field name 'title' is now also tagged as an acceptable alias for the node property 'name' (just in case).
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "article" Description: "a piece of writing on a particular topic presented as a stand-alone section of a larger publication"
--     * Slot: published_in Description: The enclosing parent serial containing the article should have industry-standard identifier from ISSN.
--     * Slot: iso_abbreviation Description: Optional value, if used locally as a convenience, is set to the iso abbreviation of the 'published in' parent.
--     * Slot: volume Description: volume of a book or music release in a collection/series or a published collection of journal issues in a serial publication
--     * Slot: issue Description: issue of a newspaper, a scientific journal or magazine for reference purpose
--     * Slot: summary Description: executive  summary of a publication
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: Different kinds of publication subtypes will have different preferred identifiers (curies when feasible). Precedence of identifiers for scientific articles is as follows: PMID if available; DOI if not; actual alternate CURIE otherwise. Enclosing publications (i.e. referenced by 'published in' node property) such as books and journals, should have industry-standard identifier such as from ISBN and ISSN.
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: the 'title' of the publication is generally recorded in the 'name' property (inherited from NamedThing). The field name 'title' is now also tagged as an acceptable alias for the node property 'name' (just in case).
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "journal article" Description: "an article, typically presenting results of research, that is published in an issue of a scientific journal."
--     * Slot: published_in Description: The enclosing parent serial containing the article should have industry-standard identifier from ISSN.
--     * Slot: iso_abbreviation Description: Optional value, if used locally as a convenience, is set to the iso abbreviation of the 'published in' parent.
--     * Slot: volume Description: volume of a book or music release in a collection/series or a published collection of journal issues in a serial publication
--     * Slot: issue Description: issue of a newspaper, a scientific journal or magazine for reference purpose
--     * Slot: summary Description: executive  summary of a publication
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: Different kinds of publication subtypes will have different preferred identifiers (curies when feasible). Precedence of identifiers for scientific articles is as follows: PMID if available; DOI if not; actual alternate CURIE otherwise. Enclosing publications (i.e. referenced by 'published in' node property) such as books and journals, should have industry-standard identifier such as from ISBN and ISSN.
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: the 'title' of the publication is generally recorded in the 'name' property (inherited from NamedThing). The field name 'title' is now also tagged as an acceptable alias for the node property 'name' (just in case).
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "patent" Description: "a legal document granted by a patent issuing authority which confers upon the patenter the sole right to make, use and sell an invention for a set period of time."
--     * Slot: summary Description: executive  summary of a publication
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: Different kinds of publication subtypes will have different preferred identifiers (curies when feasible). Precedence of identifiers for scientific articles is as follows: PMID if available; DOI if not; actual alternate CURIE otherwise. Enclosing publications (i.e. referenced by 'published in' node property) such as books and journals, should have industry-standard identifier such as from ISBN and ISSN.
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: the 'title' of the publication is generally recorded in the 'name' property (inherited from NamedThing). The field name 'title' is now also tagged as an acceptable alias for the node property 'name' (just in case).
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "web page" Description: "a document that is published according to World Wide Web standards, which may incorporate text, graphics, sound, and/or other features."
--     * Slot: summary Description: executive  summary of a publication
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: Different kinds of publication subtypes will have different preferred identifiers (curies when feasible). Precedence of identifiers for scientific articles is as follows: PMID if available; DOI if not; actual alternate CURIE otherwise. Enclosing publications (i.e. referenced by 'published in' node property) such as books and journals, should have industry-standard identifier such as from ISBN and ISSN.
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: the 'title' of the publication is generally recorded in the 'name' property (inherited from NamedThing). The field name 'title' is now also tagged as an acceptable alias for the node property 'name' (just in case).
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "preprint publication" Description: "a document reresenting an early version of an author's original scholarly work, such as a research paper or a review, prior to formal peer review and publication in a peer-reviewed scholarly or scientific journal."
--     * Slot: summary Description: executive  summary of a publication
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: Different kinds of publication subtypes will have different preferred identifiers (curies when feasible). Precedence of identifiers for scientific articles is as follows: PMID if available; DOI if not; actual alternate CURIE otherwise. Enclosing publications (i.e. referenced by 'published in' node property) such as books and journals, should have industry-standard identifier such as from ISBN and ISSN.
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: the 'title' of the publication is generally recorded in the 'name' property (inherited from NamedThing). The field name 'title' is now also tagged as an acceptable alias for the node property 'name' (just in case).
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "drug label" Description: "a document accompanying a drug or its container that provides written, printed or graphic information about the drug, including drug contents, specific instructions or warnings for administration, storage and disposal instructions, etc."
--     * Slot: summary Description: executive  summary of a publication
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: Different kinds of publication subtypes will have different preferred identifiers (curies when feasible). Precedence of identifiers for scientific articles is as follows: PMID if available; DOI if not; actual alternate CURIE otherwise. Enclosing publications (i.e. referenced by 'published in' node property) such as books and journals, should have industry-standard identifier such as from ISBN and ISSN.
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: the 'title' of the publication is generally recorded in the 'name' property (inherited from NamedThing). The field name 'title' is now also tagged as an acceptable alias for the node property 'name' (just in case).
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "retrieval source" Description: "Provides information about how a particular InformationResource served as a source from which knowledge expressed in an Edge, or data used to generate this knowledge, was retrieved."
--     * Slot: resource_id Description: The InformationResource that served as a source for the knowledge expressed in an Edge, or data used to generate this knowledge.
--     * Slot: resource_role Description: The role of the InformationResource in the retrieval of the knowledge expressed in an Edge, or data used to generate this knowledge.
--     * Slot: upstream_resource_ids Description: The InformationResources that served as a source for the InformationResource that served as a source for the knowledge expressed in an Edge, or data used to generate this knowledge.
--     * Slot: license Description: 
--     * Slot: rights Description: 
--     * Slot: format Description: 
--     * Slot: creation_date Description: date on which an entity was created. This can be applied to nodes or edges
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "physical essence or occurrent" Description: "Either a physical or processual entity."
--     * Slot: id Description: 
-- # Class: "physical essence" Description: "Semantic mixin concept.  Pertains to entities that have physical properties such as mass, volume, or charge."
--     * Slot: id Description: 
-- # Class: "physical entity" Description: "An entity that has material reality (a.k.a. physical essence)."
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "occurrent" Description: "A processual entity."
--     * Slot: id Description: 
-- # Class: "activity and behavior" Description: "Activity or behavior of any independent integral living, organization or mechanical actor in the world"
--     * Slot: id Description: 
-- # Class: "activity" Description: "An activity is something that occurs over a period of time and acts upon or with entities; it may include consuming, processing, transforming, modifying, relocating, using, or generating entities."
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "procedure" Description: "A series of actions conducted in a certain order or manner"
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "phenomenon" Description: "a fact or situation that is observed to exist or happen, especially one whose cause or explanation is in question"
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "device" Description: "A thing made or adapted for a particular purpose, especially a piece of mechanical or electronic equipment"
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "diagnostic aid" Description: "A device or substance used to help diagnose disease or injury"
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "study population" Description: "A group of people banded together or treated as a group as participants in a research study."
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "subject of investigation" Description: "An entity that has the role of being studied in an investigation, study, or experiment"
--     * Slot: id Description: 
-- # Class: "material sample" Description: "A sample is a limited quantity of something (e.g. an individual or set of individuals from a population, or a portion of a substance) to be used for testing, analysis, inspection, investigation, demonstration, or trial use. [SIO]"
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "planetary entity" Description: "Any entity or process that exists at the level of the whole planet"
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "environmental process" Description: ""
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "environmental feature" Description: ""
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "geographic location" Description: "a location that can be described in lat/long coordinates"
--     * Slot: latitude Description: latitude
--     * Slot: longitude Description: longitude
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "geographic location at time" Description: "a location that can be described in lat/long coordinates, for a particular time"
--     * Slot: timepoint Description: a point in time
--     * Slot: latitude Description: latitude
--     * Slot: longitude Description: longitude
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "thing with taxon" Description: "A mixin that can be used on any entity that can be taxonomically classified. This includes individual organisms; genes, their products and other molecular entities; body parts; biological processes"
--     * Slot: id Description: 
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
-- # Class: "biological entity" Description: ""
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "genomic entity" Description: ""
--     * Slot: id Description: 
--     * Slot: has_biological_sequence Description: connects a genomic feature to its sequence
-- # Class: "epigenomic entity" Description: ""
--     * Slot: id Description: 
--     * Slot: has_biological_sequence Description: connects a genomic feature to its sequence
-- # Class: "molecular entity" Description: "A molecular entity is a chemical entity composed of individual or covalently bonded atoms."
--     * Slot: is_metabolite Description: indicates whether a molecular entity is a metabolite
--     * Slot: trade_name Description: 
--     * Slot: max_tolerated_dose Description: The highest dose of a drug or treatment that does not cause unacceptable side effects. The maximum tolerated dose is determined in clinical trials by testing increasing doses on different groups of people until the highest dose with acceptable side effects is found. Also called MTD.
--     * Slot: is_toxic Description: 
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "chemical entity" Description: "A chemical entity is a physical entity that pertains to chemistry or biochemistry."
--     * Slot: trade_name Description: 
--     * Slot: max_tolerated_dose Description: The highest dose of a drug or treatment that does not cause unacceptable side effects. The maximum tolerated dose is determined in clinical trials by testing increasing doses on different groups of people until the highest dose with acceptable side effects is found. Also called MTD.
--     * Slot: is_toxic Description: 
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "small molecule" Description: "A small molecule entity is a molecular entity characterized by availability in small-molecule databases of SMILES, InChI, IUPAC, or other unambiguous representation of its precise chemical structure; for convenience of representation, any valid chemical representation is included, even if it is not strictly molecular (e.g., sodium ion)."
--     * Slot: is_metabolite Description: indicates whether a molecular entity is a metabolite
--     * Slot: trade_name Description: 
--     * Slot: max_tolerated_dose Description: The highest dose of a drug or treatment that does not cause unacceptable side effects. The maximum tolerated dose is determined in clinical trials by testing increasing doses on different groups of people until the highest dose with acceptable side effects is found. Also called MTD.
--     * Slot: is_toxic Description: 
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "chemical mixture" Description: "A chemical mixture is a chemical entity composed of two or more molecular entities."
--     * Slot: is_supplement Description: 
--     * Slot: highest_FDA_approval_status Description: Should be the highest level of FDA approval this chemical entity or device has, regardless of which disease, condition or phenotype it is currently being reviewed to treat.  For specific levels of FDA approval for a specific condition, disease, phenotype, etc., see the association slot, 'clinical approval status.'
--     * Slot: drug_regulatory_status_world_wide Description: An agglomeration of drug regulatory status worldwide. Not specific to FDA.
--     * Slot: trade_name Description: 
--     * Slot: max_tolerated_dose Description: The highest dose of a drug or treatment that does not cause unacceptable side effects. The maximum tolerated dose is determined in clinical trials by testing increasing doses on different groups of people until the highest dose with acceptable side effects is found. Also called MTD.
--     * Slot: is_toxic Description: 
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "nucleic acid entity" Description: "A nucleic acid entity is a molecular entity characterized by availability in gene databases of nucleotide-based sequence representations of its precise sequence; for convenience of representation, partial sequences of various kinds are included."
--     * Slot: has_biological_sequence Description: connects a genomic feature to its sequence
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: is_metabolite Description: indicates whether a molecular entity is a metabolite
--     * Slot: trade_name Description: 
--     * Slot: max_tolerated_dose Description: The highest dose of a drug or treatment that does not cause unacceptable side effects. The maximum tolerated dose is determined in clinical trials by testing increasing doses on different groups of people until the highest dose with acceptable side effects is found. Also called MTD.
--     * Slot: is_toxic Description: 
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "regulatory region" Description: "A region (or regions) of the genome that contains known or putative regulatory elements that act in cis- or trans- to affect the transcription of gene"
--     * Slot: has_biological_sequence Description: connects a genomic feature to its sequence
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "accessible dna region" Description: "A region (or regions) of a chromatinized genome that has been measured to be more accessible to an enzyme such as DNase-I or Tn5 Transpose"
--     * Slot: has_biological_sequence Description: connects a genomic feature to its sequence
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "transcription factor binding site" Description: "A region (or regions) of the genome that contains a region of DNA known or predicted to bind a protein that modulates gene transcription"
--     * Slot: has_biological_sequence Description: connects a genomic feature to its sequence
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "molecular mixture" Description: "A molecular mixture is a chemical mixture composed of two or more molecular entities with known concentration and stoichiometry."
--     * Slot: is_supplement Description: 
--     * Slot: highest_FDA_approval_status Description: Should be the highest level of FDA approval this chemical entity or device has, regardless of which disease, condition or phenotype it is currently being reviewed to treat.  For specific levels of FDA approval for a specific condition, disease, phenotype, etc., see the association slot, 'clinical approval status.'
--     * Slot: drug_regulatory_status_world_wide Description: An agglomeration of drug regulatory status worldwide. Not specific to FDA.
--     * Slot: trade_name Description: 
--     * Slot: max_tolerated_dose Description: The highest dose of a drug or treatment that does not cause unacceptable side effects. The maximum tolerated dose is determined in clinical trials by testing increasing doses on different groups of people until the highest dose with acceptable side effects is found. Also called MTD.
--     * Slot: is_toxic Description: 
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "complex molecular mixture" Description: "A complex molecular mixture is a chemical mixture composed of two or more molecular entities with unknown concentration and stoichiometry."
--     * Slot: is_supplement Description: 
--     * Slot: highest_FDA_approval_status Description: Should be the highest level of FDA approval this chemical entity or device has, regardless of which disease, condition or phenotype it is currently being reviewed to treat.  For specific levels of FDA approval for a specific condition, disease, phenotype, etc., see the association slot, 'clinical approval status.'
--     * Slot: drug_regulatory_status_world_wide Description: An agglomeration of drug regulatory status worldwide. Not specific to FDA.
--     * Slot: trade_name Description: 
--     * Slot: max_tolerated_dose Description: The highest dose of a drug or treatment that does not cause unacceptable side effects. The maximum tolerated dose is determined in clinical trials by testing increasing doses on different groups of people until the highest dose with acceptable side effects is found. Also called MTD.
--     * Slot: is_toxic Description: 
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "biological process or activity" Description: "Either an individual molecular activity, or a collection of causally connected molecular activities in a biological system."
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "molecular activity" Description: "An execution of a molecular function carried out by a gene product or macromolecular complex."
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "biological process" Description: "One or more causally connected executions of molecular functions"
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "pathway" Description: ""
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "physiological process" Description: ""
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "behavior" Description: ""
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "processed material" Description: "A chemical entity (often a mixture) processed for consumption for nutritional, medical or technical use. Is a material entity that is created or changed during material processing."
--     * Slot: is_supplement Description: 
--     * Slot: highest_FDA_approval_status Description: Should be the highest level of FDA approval this chemical entity or device has, regardless of which disease, condition or phenotype it is currently being reviewed to treat.  For specific levels of FDA approval for a specific condition, disease, phenotype, etc., see the association slot, 'clinical approval status.'
--     * Slot: drug_regulatory_status_world_wide Description: An agglomeration of drug regulatory status worldwide. Not specific to FDA.
--     * Slot: trade_name Description: 
--     * Slot: max_tolerated_dose Description: The highest dose of a drug or treatment that does not cause unacceptable side effects. The maximum tolerated dose is determined in clinical trials by testing increasing doses on different groups of people until the highest dose with acceptable side effects is found. Also called MTD.
--     * Slot: is_toxic Description: 
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "drug" Description: "A substance intended for use in the diagnosis, cure, mitigation, treatment, or prevention of disease"
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: is_supplement Description: 
--     * Slot: highest_FDA_approval_status Description: Should be the highest level of FDA approval this chemical entity or device has, regardless of which disease, condition or phenotype it is currently being reviewed to treat.  For specific levels of FDA approval for a specific condition, disease, phenotype, etc., see the association slot, 'clinical approval status.'
--     * Slot: drug_regulatory_status_world_wide Description: An agglomeration of drug regulatory status worldwide. Not specific to FDA.
--     * Slot: trade_name Description: 
--     * Slot: max_tolerated_dose Description: The highest dose of a drug or treatment that does not cause unacceptable side effects. The maximum tolerated dose is determined in clinical trials by testing increasing doses on different groups of people until the highest dose with acceptable side effects is found. Also called MTD.
--     * Slot: is_toxic Description: 
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "environmental food contaminant" Description: ""
--     * Slot: trade_name Description: 
--     * Slot: max_tolerated_dose Description: The highest dose of a drug or treatment that does not cause unacceptable side effects. The maximum tolerated dose is determined in clinical trials by testing increasing doses on different groups of people until the highest dose with acceptable side effects is found. Also called MTD.
--     * Slot: is_toxic Description: 
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "food additive" Description: ""
--     * Slot: trade_name Description: 
--     * Slot: max_tolerated_dose Description: The highest dose of a drug or treatment that does not cause unacceptable side effects. The maximum tolerated dose is determined in clinical trials by testing increasing doses on different groups of people until the highest dose with acceptable side effects is found. Also called MTD.
--     * Slot: is_toxic Description: 
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "food" Description: "A substance consumed by a living organism as a source of nutrition"
--     * Slot: is_supplement Description: 
--     * Slot: highest_FDA_approval_status Description: Should be the highest level of FDA approval this chemical entity or device has, regardless of which disease, condition or phenotype it is currently being reviewed to treat.  For specific levels of FDA approval for a specific condition, disease, phenotype, etc., see the association slot, 'clinical approval status.'
--     * Slot: drug_regulatory_status_world_wide Description: An agglomeration of drug regulatory status worldwide. Not specific to FDA.
--     * Slot: trade_name Description: 
--     * Slot: max_tolerated_dose Description: The highest dose of a drug or treatment that does not cause unacceptable side effects. The maximum tolerated dose is determined in clinical trials by testing increasing doses on different groups of people until the highest dose with acceptable side effects is found. Also called MTD.
--     * Slot: is_toxic Description: 
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "organism attribute" Description: "describes a characteristic of an organismal entity."
--     * Slot: name Description: The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.
--     * Slot: has_attribute_type Description: connects an attribute to a class that describes it
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "phenotypic quality" Description: "A property of a phenotype"
--     * Slot: name Description: The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.
--     * Slot: has_attribute_type Description: connects an attribute to a class that describes it
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "genetic inheritance" Description: "The pattern or 'mode' in which a particular genetic trait or disorder is passed from one generation to the next, e.g. autosomal dominant, autosomal recessive, etc."
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "organismal entity" Description: "A named entity that is either a part of an organism, a whole organism, population or clade of organisms, excluding chemical entities"
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "bacterium" Description: "A member of a group of unicellular microorganisms lacking a nuclear membrane, that reproduce by binary fission and are often motile."
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "virus" Description: "A virus is a microorganism that replicates itself as a microRNA and infects the host cell."
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "cellular organism" Description: ""
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "mammal" Description: "A member of the class Mammalia, a clade of endothermic amniotes distinguished from reptiles and birds by the possession of hair, three middle ear bones, mammary glands, and a neocortex"
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "human" Description: "A member of the the species Homo sapiens."
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "plant" Description: ""
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "invertebrate" Description: "An animal lacking a vertebral column. This group consists of 98% of all animal species."
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "vertebrate" Description: "A sub-phylum of animals consisting of those having a bony or cartilaginous vertebral column."
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "fungus" Description: "A kingdom of eukaryotic, heterotrophic organisms that live as saprobes or parasites, including mushrooms, yeasts, smuts, molds, etc. They reproduce either sexually or asexually, and have life cycles that range from simple to complex. Filamentous fungi refer to those that grow as multicellular colonies (mushrooms and molds)."
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "life stage" Description: "A stage of development or growth of an organism, including post-natal adult stages"
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "individual organism" Description: "An instance of an organism. For example, Richard Nixon, Charles Darwin, my pet cat. Example ID: ORCID:0000-0002-5355-2576"
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "population of individual organisms" Description: "A collection of individuals from the same taxonomic class distinguished by one or more characteristics.  Characteristics can include, but are not limited to, shared geographic location, genetics, phenotypes."
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "disease or phenotypic feature" Description: "Either one of a disease or an individual phenotypic feature. Some knowledge resources such as Monarch treat these as distinct, others such as MESH conflate.  Please see definitions of phenotypic feature and disease in this model for their independent descriptions.  This class is helpful to enforce domains and ranges that may involve either a disease or a phenotypic feature."
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "disease" Description: "A disorder of structure or function, especially one that produces specific signs, phenotypes or symptoms or that affects a specific location and is not simply a direct result of physical injury.  A disposition to undergo pathological processes that exists in an organism because of one or more disorders in that organism."
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "phenotypic feature" Description: "A combination of entity and quality that makes up a phenotyping statement. An observable characteristic of an individual resulting from the interaction of its genotype with its molecular and physical environment."
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "behavioral feature" Description: "A phenotypic feature which is behavioral in nature."
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "anatomical entity" Description: "A subcellular location, cell type or gross anatomical part"
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "cellular component" Description: "A location in or around a cell"
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "cell" Description: ""
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "cell line" Description: ""
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "gross anatomical structure" Description: ""
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "chemical entity or gene or gene product" Description: "A union of chemical entities and children, and gene or gene product. This mixin is helpful to use when searching across chemical entities that must include genes and their children as chemical entities."
--     * Slot: id Description: 
-- # Class: "chemical entity or protein or polypeptide" Description: "A union of chemical entities and children, and protein and polypeptide. This mixin is helpful to use when searching across chemical entities that must include genes and their children as chemical entities."
--     * Slot: id Description: 
-- # Class: "macromolecular machine mixin" Description: "A union of gene locus, gene product, and macromolecular complex. These are the basic units of function in a cell. They either carry out individual biological activities, or they encode molecules which do this."
--     * Slot: id Description: 
--     * Slot: name Description: genes are typically designated by a short symbol and a full name. We map the symbol to the default display name and use an additional slot for full name
-- # Class: "gene or gene product" Description: "A union of gene loci or gene products. Frequently an identifier for one will be used as proxy for another"
--     * Slot: id Description: 
--     * Slot: name Description: genes are typically designated by a short symbol and a full name. We map the symbol to the default display name and use an additional slot for full name
-- # Class: "gene" Description: "A region (or regions) that includes all of the sequence elements necessary to encode a functional transcript. A gene locus may include regulatory regions, transcribed regions and/or other functional sequence regions."
--     * Slot: symbol Description: Symbol for a particular thing
--     * Slot: has_biological_sequence Description: connects a genomic feature to its sequence
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: genes are typically designated by a short symbol and a full name. We map the symbol to the default display name and use an additional slot for full name
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "gene product mixin" Description: "The functional molecular product of a single gene locus. Gene products are either proteins or functional RNA molecules."
--     * Slot: id Description: 
--     * Slot: name Description: genes are typically designated by a short symbol and a full name. We map the symbol to the default display name and use an additional slot for full name
-- # Class: "gene product isoform mixin" Description: "This is an abstract class that can be mixed in with different kinds of gene products to indicate that the gene product is intended to represent a specific isoform rather than a canonical or reference or generic product. The designation of canonical or reference may be arbitrary, or it may represent the superclass of all isoforms."
--     * Slot: id Description: 
--     * Slot: name Description: genes are typically designated by a short symbol and a full name. We map the symbol to the default display name and use an additional slot for full name
-- # Class: "macromolecular complex" Description: "A stable assembly of two or more macromolecules, i.e. proteins, nucleic acids, carbohydrates or lipids, in which at least one component is a protein and the constituent parts function together."
--     * Slot: name Description: genes are typically designated by a short symbol and a full name. We map the symbol to the default display name and use an additional slot for full name
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "nucleosome modification" Description: "A chemical modification of a histone protein within a nucleosome octomer or a substitution of a histone with a variant histone isoform. e.g. Histone 4 Lysine 20 methylation (H4K20me), histone variant H2AZ substituting H2A."
--     * Slot: has_biological_sequence Description: connects a genomic feature to its sequence
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: genes are typically designated by a short symbol and a full name. We map the symbol to the default display name and use an additional slot for full name
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "genome" Description: "A genome is the sum of genetic material within a cell or virion."
--     * Slot: has_biological_sequence Description: connects a genomic feature to its sequence
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "exon" Description: "A region of the transcript sequence within a gene which is not removed from the primary RNA transcript by RNA splicing."
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "transcript" Description: "An RNA synthesized on a DNA or RNA template by an RNA polymerase."
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "coding sequence" Description: ""
--     * Slot: has_biological_sequence Description: connects a genomic feature to its sequence
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "polypeptide" Description: "A polypeptide is a molecular entity characterized by availability in protein databases of amino-acid-based sequence representations of its precise primary structure; for convenience of representation, partial sequences of various kinds are included, even if they do not represent a physical molecule."
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "protein" Description: "A gene product that is composed of a chain of amino acid sequences and is produced by ribosome-mediated translation of mRNA"
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: genes are typically designated by a short symbol and a full name. We map the symbol to the default display name and use an additional slot for full name
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "protein isoform" Description: "Represents a protein that is a specific isoform of the canonical or reference protein. See https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4114032/"
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: genes are typically designated by a short symbol and a full name. We map the symbol to the default display name and use an additional slot for full name
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "protein domain" Description: "A conserved part of protein sequence and (tertiary) structure that can evolve, function, and exist independently of the rest of the protein chain. Protein domains maintain their structure and function independently of the proteins in which they are found. e.g. an SH3 domain."
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "posttranslational modification" Description: "A chemical modification of a polypeptide or protein that occurs after translation. e.g. polypeptide cleavage to form separate proteins, methylation or acetylation of histone tail amino acids, protein ubiquitination."
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: genes are typically designated by a short symbol and a full name. We map the symbol to the default display name and use an additional slot for full name
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "protein family" Description: ""
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "nucleic acid sequence motif" Description: "A linear nucleotide sequence pattern that is widespread and has, or is conjectured to have, a biological significance. e.g. the TATA box promoter motif, transcription factor binding consensus sequences."
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "RNA product" Description: ""
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: genes are typically designated by a short symbol and a full name. We map the symbol to the default display name and use an additional slot for full name
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "RNA product isoform" Description: "Represents a protein that is a specific isoform of the canonical or reference RNA"
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: genes are typically designated by a short symbol and a full name. We map the symbol to the default display name and use an additional slot for full name
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "noncoding RNA product" Description: ""
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: genes are typically designated by a short symbol and a full name. We map the symbol to the default display name and use an additional slot for full name
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "microRNA" Description: ""
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: genes are typically designated by a short symbol and a full name. We map the symbol to the default display name and use an additional slot for full name
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "siRNA" Description: "A small RNA molecule that is the product of a longer exogenous or endogenous dsRNA, which is either a bimolecular duplex or very long hairpin, processed (via the Dicer pathway) such that numerous siRNAs accumulate from both strands of the dsRNA. SRNAs trigger the cleavage of their target molecules."
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: genes are typically designated by a short symbol and a full name. We map the symbol to the default display name and use an additional slot for full name
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "gene grouping mixin" Description: "any grouping of multiple genes or gene products"
--     * Slot: id Description: 
-- # Class: "gene family" Description: "any grouping of multiple genes or gene products related by common descent"
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "zygosity" Description: ""
--     * Slot: name Description: The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.
--     * Slot: has_attribute_type Description: connects an attribute to a class that describes it
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "genotype" Description: "An information content entity that describes a genome by specifying the total variation in genomic sequence and/or gene expression, relative to some established background"
--     * Slot: has_zygosity Description: 
--     * Slot: has_biological_sequence Description: connects a genomic feature to its sequence
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "haplotype" Description: "A set of zero or more Alleles on a single instance of a Sequence[VMC]"
--     * Slot: has_biological_sequence Description: connects a genomic feature to its sequence
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "sequence variant" Description: "A sequence_variant is a non exact copy of a sequence_feature or genome exhibiting one or more sequence_alteration."
--     * Slot: has_biological_sequence Description: The state of the sequence w.r.t a reference sequence
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "snv" Description: "SNVs are single nucleotide positions in genomic DNA at which different sequence alternatives exist"
--     * Slot: has_biological_sequence Description: The state of the sequence w.r.t a reference sequence
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "reagent targeted gene" Description: "A gene altered in its expression level in the context of some experiment as a result of being targeted by gene-knockdown reagent(s) such as a morpholino or RNAi."
--     * Slot: has_biological_sequence Description: connects a genomic feature to its sequence
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "clinical attribute" Description: "Attributes relating to a clinical manifestation"
--     * Slot: name Description: The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.
--     * Slot: has_attribute_type Description: connects an attribute to a class that describes it
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "clinical measurement" Description: "A clinical measurement is a special kind of attribute which results from a laboratory observation from a subject individual or sample. Measurements can be connected to their subject by the 'has attribute' slot."
--     * Slot: name Description: The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.
--     * Slot: has_attribute_type Description: connects an attribute to a class that describes it
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "clinical modifier" Description: "Used to characterize and specify the phenotypic abnormalities defined in the phenotypic abnormality sub-ontology, with respect to severity, laterality, and other aspects"
--     * Slot: name Description: The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.
--     * Slot: has_attribute_type Description: connects an attribute to a class that describes it
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "clinical course" Description: "The course a disease typically takes from its onset, progression in time, and eventual resolution or death of the affected individual"
--     * Slot: name Description: The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.
--     * Slot: has_attribute_type Description: connects an attribute to a class that describes it
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "onset" Description: "The age group in which (disease) symptom manifestations appear"
--     * Slot: name Description: The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.
--     * Slot: has_attribute_type Description: connects an attribute to a class that describes it
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "clinical entity" Description: "Any entity or process that exists in the clinical domain and outside the biological realm. Diseases are placed under biological entities"
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "clinical trial" Description: ""
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "clinical intervention" Description: ""
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "clinical finding" Description: "this category is currently considered broad enough to tag clinical lab measurements and other biological attributes taken as 'clinical traits' with some statistical score, for example, a p value in genetic associations."
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "hospitalization" Description: ""
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "socioeconomic attribute" Description: "Attributes relating to a socioeconomic manifestation"
--     * Slot: name Description: The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.
--     * Slot: has_attribute_type Description: connects an attribute to a class that describes it
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "case" Description: "An individual (human) organism that has a patient role in some clinical context."
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "cohort" Description: "A group of people banded together or treated as a group who share common characteristics. A cohort 'study' is a particular form of longitudinal study that samples a cohort, performing a cross-section at intervals through time."
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "exposure event" Description: "A (possibly time bounded) incidence of a feature of the environment of an organism that influences one or more phenotypic features of that organism, potentially mediated by genes"
--     * Slot: timepoint Description: a point in time
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
-- # Class: "genomic background exposure" Description: "A genomic background exposure is where an individual's specific genomic background of genes, sequence variants or other pre-existing genomic conditions constitute a kind of 'exposure' to the organism, leading to or influencing an outcome."
--     * Slot: timepoint Description: a point in time
--     * Slot: has_biological_sequence Description: connects a genomic feature to its sequence
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: name Description: The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.
--     * Slot: has_attribute_type Description: connects an attribute to a class that describes it
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "pathological entity mixin" Description: "A pathological (abnormal) structure or process."
--     * Slot: id Description: 
-- # Class: "pathological process" Description: "A biologic function or a process having an abnormal or deleterious effect at the subcellular, cellular, multicellular, or organismal level."
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "pathological process exposure" Description: "A pathological process, when viewed as an exposure, representing a precondition, leading to or influencing an outcome, e.g. autoimmunity leading to disease."
--     * Slot: timepoint Description: a point in time
--     * Slot: name Description: The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.
--     * Slot: has_attribute_type Description: connects an attribute to a class that describes it
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "pathological anatomical structure" Description: "An anatomical structure with the potential of have an abnormal or deleterious effect at the subcellular, cellular, multicellular, or organismal level."
--     * Slot: in_taxon_label Description: The human readable scientific name for the taxon of the entity.
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "pathological anatomical exposure" Description: "An abnormal anatomical structure, when viewed as an exposure, representing an precondition, leading to or influencing an outcome, e.g. thrombosis leading to an ischemic disease outcome."
--     * Slot: timepoint Description: a point in time
--     * Slot: name Description: The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.
--     * Slot: has_attribute_type Description: connects an attribute to a class that describes it
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "disease or phenotypic feature exposure" Description: "A disease or phenotypic feature state, when viewed as an exposure, represents an precondition, leading to or influencing an outcome, e.g. HIV predisposing an individual to infections; a relative deficiency of skin pigmentation predisposing an individual to skin cancer."
--     * Slot: timepoint Description: a point in time
--     * Slot: name Description: The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.
--     * Slot: has_attribute_type Description: connects an attribute to a class that describes it
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "chemical exposure" Description: "A chemical exposure is an intake of a particular chemical entity."
--     * Slot: timepoint Description: a point in time
--     * Slot: name Description: The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.
--     * Slot: has_attribute_type Description: connects an attribute to a class that describes it
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "complex chemical exposure" Description: "A complex chemical exposure is an intake of a chemical mixture (e.g. gasoline), other than a drug."
--     * Slot: name Description: The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.
--     * Slot: has_attribute_type Description: connects an attribute to a class that describes it
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "drug exposure" Description: "A drug exposure is an intake of a particular drug."
--     * Slot: timepoint Description: a point in time
--     * Slot: name Description: The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.
--     * Slot: has_attribute_type Description: connects an attribute to a class that describes it
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "drug to gene interaction exposure" Description: "drug to gene interaction exposure is a drug exposure is where the interactions of the drug with specific genes are known to constitute an 'exposure' to the organism, leading to or influencing an outcome."
--     * Slot: timepoint Description: a point in time
--     * Slot: name Description: The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.
--     * Slot: has_attribute_type Description: connects an attribute to a class that describes it
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "treatment" Description: "A treatment is targeted at a disease or phenotype and may involve multiple drug 'exposures', medical devices and/or procedures"
--     * Slot: timepoint Description: a point in time
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "biotic exposure" Description: "An external biotic exposure is an intake of (sometimes pathological) biological organisms (including viruses)."
--     * Slot: timepoint Description: a point in time
--     * Slot: name Description: The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.
--     * Slot: has_attribute_type Description: connects an attribute to a class that describes it
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "geographic exposure" Description: "A geographic exposure is a factor relating to geographic proximity to some impactful entity."
--     * Slot: timepoint Description: a point in time
--     * Slot: name Description: The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.
--     * Slot: has_attribute_type Description: connects an attribute to a class that describes it
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "environmental exposure" Description: "A environmental exposure is a factor relating to abiotic processes in the environment including sunlight (UV-B), atmospheric (heat, cold, general pollution) and water-born contaminants."
--     * Slot: timepoint Description: a point in time
--     * Slot: name Description: The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.
--     * Slot: has_attribute_type Description: connects an attribute to a class that describes it
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "behavioral exposure" Description: "A behavioral exposure is a factor relating to behavior impacting an individual."
--     * Slot: timepoint Description: a point in time
--     * Slot: name Description: The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.
--     * Slot: has_attribute_type Description: connects an attribute to a class that describes it
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "socioeconomic exposure" Description: "A socioeconomic exposure is a factor relating to social and financial status of an affected individual (e.g. poverty)."
--     * Slot: timepoint Description: a point in time
--     * Slot: name Description: The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.
--     * Slot: has_attribute_type Description: connects an attribute to a class that describes it
--     * Slot: has_qualitative_value Description: connects an attribute to a value
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: full_name Description: a long-form human readable name for a thing
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "outcome" Description: "An entity that has the role of being the consequence of an exposure event. This is an abstract mixin grouping of various categories of possible biological or non-biological (e.g. clinical) outcomes."
--     * Slot: id Description: 
-- # Class: "pathological process outcome" Description: "An outcome resulting from an exposure event which is the manifestation of a pathological process."
--     * Slot: id Description: 
-- # Class: "pathological anatomical outcome" Description: "An outcome resulting from an exposure event which is the manifestation of an abnormal anatomical structure."
--     * Slot: id Description: 
-- # Class: "disease or phenotypic feature outcome" Description: "Physiological outcomes resulting from an exposure event which is the manifestation of a disease or other characteristic phenotype."
--     * Slot: id Description: 
-- # Class: "behavioral outcome" Description: "An outcome resulting from an exposure event which is the manifestation of human behavior."
--     * Slot: id Description: 
-- # Class: "hospitalization outcome" Description: "An outcome resulting from an exposure event which is the increased manifestation of acute (e.g. emergency room visit) or chronic (inpatient) hospitalization."
--     * Slot: id Description: 
-- # Class: "mortality outcome" Description: "An outcome of death from resulting from an exposure event."
--     * Slot: id Description: 
-- # Class: "epidemiological outcome" Description: "An epidemiological outcome, such as societal disease burden, resulting from an exposure event."
--     * Slot: id Description: 
-- # Class: "socioeconomic outcome" Description: "An general social or economic outcome, such as healthcare costs, utilization, etc., resulting from an exposure event"
--     * Slot: id Description: 
-- # Class: "association" Description: "A typed association between two entities, supported by evidence"
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "chemical entity assesses named thing association" Description: ""
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "contributor association" Description: "Any association between an entity (such as a publication) and various agents that contribute to its realisation"
--     * Slot: subject Description: information content entity which an agent has helped realise
--     * Slot: predicate Description: generally one of the predicate values 'provider', 'publisher', 'editor' or 'author'
--     * Slot: object Description: agent helping to realise the given entity (e.g. such as a publication)
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "genotype to genotype part association" Description: "Any association between one genotype and a genotypic entity that is a sub-component of it"
--     * Slot: subject Description: parent genotype
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: child genotype
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "genotype to gene association" Description: "Any association between a genotype and a gene. The genotype have have multiple variants in that gene or a single one. There is no assumption of cardinality"
--     * Slot: subject Description: parent genotype
--     * Slot: predicate Description: the relationship type used to connect genotype to gene
--     * Slot: object Description: gene implicated in genotype
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "genotype to variant association" Description: "Any association between a genotype and a sequence variant."
--     * Slot: subject Description: parent genotype
--     * Slot: predicate Description: the relationship type used to connect genotype to gene
--     * Slot: object Description: gene implicated in genotype
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "gene to gene association" Description: "abstract parent class for different kinds of gene-gene or gene product to gene product relationships. Includes homology and interaction."
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: subject_id Description: the subject gene in the association. If the relation is symmetric, subject vs object is arbitrary. We allow a gene product to stand as a proxy for the gene or vice versa.
--     * Slot: object_id Description: the object gene in the association. If the relation is symmetric, subject vs object is arbitrary. We allow a gene product to stand as a proxy for the gene or vice versa.
-- # Class: "gene to gene homology association" Description: "A homology association between two genes. May be orthology (in which case the species of subject and object should differ) or paralogy (in which case the species may be the same)"
--     * Slot: predicate Description: homology relationship type
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: subject_id Description: the subject gene in the association. If the relation is symmetric, subject vs object is arbitrary. We allow a gene product to stand as a proxy for the gene or vice versa.
--     * Slot: object_id Description: the object gene in the association. If the relation is symmetric, subject vs object is arbitrary. We allow a gene product to stand as a proxy for the gene or vice versa.
-- # Class: "gene to gene family association" Description: "Set membership of a gene in a family of genes related by common evolutionary ancestry usually inferred by sequence comparisons. The genes in a given family generally share common sequence motifs which generally map onto shared gene product structure-function relationships."
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: membership of the gene in the given gene family.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "gene expression mixin" Description: "Observed gene expression intensity, context (site, stage) and associated phenotypic status within which the expression occurs."
--     * Slot: id Description: 
--     * Slot: quantifier_qualifier Description: Optional quantitative value indicating degree of expression.
--     * Slot: expression_site Description: location in which gene or protein expression takes place. May be cell, tissue, or organ.
--     * Slot: stage_qualifier Description: stage during which gene or protein expression of takes place.
--     * Slot: phenotypic_state Description: in experiments (e.g. gene expression) assaying diseased or unhealthy tissue, the phenotypic state can be put here, e.g. MONDO ID. For healthy tissues, use XXX.
-- # Class: "gene to gene coexpression association" Description: "Indicates that two genes are co-expressed, generally under the same conditions."
--     * Slot: quantifier_qualifier Description: Optional quantitative value indicating degree of expression.
--     * Slot: expression_site Description: location in which gene or protein expression takes place. May be cell, tissue, or organ.
--     * Slot: stage_qualifier Description: stage during which gene or protein expression of takes place.
--     * Slot: phenotypic_state Description: in experiments (e.g. gene expression) assaying diseased or unhealthy tissue, the phenotypic state can be put here, e.g. MONDO ID. For healthy tissues, use XXX.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: subject_id Description: the subject gene in the association. If the relation is symmetric, subject vs object is arbitrary. We allow a gene product to stand as a proxy for the gene or vice versa.
--     * Slot: object_id Description: the object gene in the association. If the relation is symmetric, subject vs object is arbitrary. We allow a gene product to stand as a proxy for the gene or vice versa.
-- # Class: "pairwise gene to gene interaction" Description: "An interaction between two genes or two gene products. May be physical (e.g. protein binding) or genetic (between genes). May be symmetric (e.g. protein interaction) or directed (e.g. phosphorylation)"
--     * Slot: predicate Description: interaction relationship type
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: subject_id Description: the subject gene in the association. If the relation is symmetric, subject vs object is arbitrary. We allow a gene product to stand as a proxy for the gene or vice versa.
--     * Slot: object_id Description: the object gene in the association. If the relation is symmetric, subject vs object is arbitrary. We allow a gene product to stand as a proxy for the gene or vice versa.
-- # Class: "pairwise molecular interaction" Description: "An interaction at the molecular level between two physical entities"
--     * Slot: interacting_molecules_category Description: 
--     * Slot: subject Description: the subject gene in the association. If the relation is symmetric, subject vs object is arbitrary. We allow a gene product to stand as a proxy for the gene or vice versa.
--     * Slot: predicate Description: interaction relationship type
--     * Slot: object Description: the object gene in the association. If the relation is symmetric, subject vs object is arbitrary. We allow a gene product to stand as a proxy for the gene or vice versa.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: identifier for the interaction. This may come from an interaction database such as IMEX.
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "cell line to entity association mixin" Description: "An relationship between a cell line and another entity"
--     * Slot: id Description: 
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
-- # Class: "cell line to disease or phenotypic feature association" Description: "An relationship between a cell line and a disease or a phenotype, where the cell line is derived from an individual with that disease or phenotype."
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: disease or phenotype
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "chemical entity to entity association mixin" Description: "An interaction between a chemical entity and another entity"
--     * Slot: id Description: 
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: subject_id Description: the chemical entity that is an interactor
-- # Class: "drug to entity association mixin" Description: "An interaction between a drug and another entity"
--     * Slot: id Description: 
--     * Slot: subject Description: the drug that is an interactor
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
-- # Class: "chemical to entity association mixin" Description: "An interaction between a chemical entity and another entity"
--     * Slot: id Description: 
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: subject_id Description: the chemical entity or entity that is an interactor
-- # Class: "case to entity association mixin" Description: "An abstract association for use where the case is the subject"
--     * Slot: id Description: 
--     * Slot: subject Description: the case (e.g. patient) that has the property
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
-- # Class: "chemical to chemical association" Description: "A relationship between two chemical entities. This can encompass actual interactions as well as temporal causal edges, e.g. one chemical converted to another."
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: the chemical element that is the target of the statement
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: subject_id Description: the chemical entity or entity that is an interactor
-- # Class: "reaction to participant association" Description: ""
--     * Slot: stoichiometry Description: the relationship between the relative quantities of substances taking part in a reaction or forming a compound, typically a ratio of whole integers.
--     * Slot: reaction_direction Description: the direction of a reaction as constrained by the direction enum (ie: left_to_right, neutral, etc.)
--     * Slot: reaction_side Description: the side of a reaction being modeled (ie: left or right)
--     * Slot: subject Description: the chemical entity or entity that is an interactor
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: the chemical element that is the target of the statement
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "reaction to catalyst association" Description: ""
--     * Slot: stoichiometry Description: the relationship between the relative quantities of substances taking part in a reaction or forming a compound, typically a ratio of whole integers.
--     * Slot: reaction_direction Description: the direction of a reaction as constrained by the direction enum (ie: left_to_right, neutral, etc.)
--     * Slot: reaction_side Description: the side of a reaction being modeled (ie: left or right)
--     * Slot: subject Description: the chemical entity or entity that is an interactor
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: object_id Description: the chemical element that is the target of the statement
-- # Class: "chemical to chemical derivation association" Description: "A causal relationship between two chemical entities, where the subject represents the upstream entity and the object represents the downstream. For any such association there is an implicit reaction: IF R has-input C1 AND R has-output C2 AND R enabled-by P AND R type Reaction THEN C1 derives-into C2 catalyst qualifier P"
--     * Slot: subject Description: the upstream chemical entity
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: the downstream chemical entity
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "chemical to disease or phenotypic feature association" Description: "An interaction between a chemical entity and a phenotype or disease, where the presence of the chemical gives rise to or exacerbates the phenotype."
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: the disease or phenotype that is affected by the chemical
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: subject_id Description: the chemical entity or entity that is an interactor
-- # Class: "chemical or drug or treatment to disease or phenotypic feature association" Description: "This association defines a relationship between a chemical or treatment (or procedure) and a disease or phenotypic feature where the disesae or phenotypic feature is a secondary undesirable effect."
--     * Slot: FDA_adverse_event_level Description: 
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: disease or phenotype
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: subject_id Description: the chemical entity or entity that is an interactor
-- # Class: "chemical or drug or treatment side effect disease or phenotypic feature association" Description: "This association defines a relationship between a chemical or treatment (or procedure) and a disease or phenotypic feature where the disesae or phenotypic feature is a secondary, typically (but not always) undesirable effect."
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: disease or phenotype
--     * Slot: FDA_adverse_event_level Description: 
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: subject_id Description: the chemical entity or entity that is an interactor
-- # Class: "gene to pathway association" Description: "An interaction between a gene or gene product and a biological process or pathway."
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: the pathway that includes or is affected by the gene or gene product
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: subject_id Description: the gene or gene product entity that participates or influences the pathway
-- # Class: "molecular activity to pathway association" Description: "Association that holds the relationship between a reaction and the pathway it participates in."
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "chemical to pathway association" Description: "An interaction between a chemical entity and a biological process or pathway."
--     * Slot: subject Description: the chemical entity that is affecting the pathway
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: the pathway that is affected by the chemical
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "named thing associated with likelihood of named thing association" Description: ""
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: subject_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the subject of an association (aka: statement).
--     * Slot: subject_context_qualifier Description: 
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: object_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the object of an association (aka: statement).
--     * Slot: object_context_qualifier Description: 
--     * Slot: population_context_qualifier Description: a biological population (general, study, cohort, etc.) with a specific set of characteristics to constrain an association.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "chemical gene interaction association" Description: "describes a physical interaction between a chemical entity and a gene or gene product. Any biological or chemical effect resulting from such an interaction are out of scope, and covered by the ChemicalAffectsGeneAssociation type (e.g. impact of a chemical on the abundance, activity, structure, etc, of either participant in the interaction)"
--     * Slot: subject_form_or_variant_qualifier Description: A qualifier that composes with a core subject/object concept to define a specific type, variant, alternative version of this concept. The composed concept remains a subtype or instance of the core concept. For example, the qualifier ‘mutation’ combines with the core concept ‘Gene X’ to express the compose concept ‘a mutation of Gene X’.  This qualifier specifies a change in the subject of an association (aka: statement).
--     * Slot: subject_part_qualifier Description: defines a specific part/component of the core concept (used in cases there this specific part has no IRI we can use to directly represent it, e.g. 'ESR1 transcript' q: polyA tail).  This qualifier is for the  subject of an association (or statement).
--     * Slot: subject_derivative_qualifier Description: A qualifier that composes with a core subject/object  concept to describe something that is derived from the core concept.  For example, the qualifier ‘metabolite’ combines with a ‘Chemical X’ core concept to express the composed concept ‘a metabolite of Chemical X’.  This qualifier is for the subject of an association  (or statement).
--     * Slot: subject_context_qualifier Description: 
--     * Slot: object_form_or_variant_qualifier Description: A qualifier that composes with a core subject/object concept to define a specific type, variant, alternative version of this concept. The composed concept remains a subtype or instance of the core concept. For example, the qualifier ‘mutation’ combines with the core concept ‘Gene X’ to express the compose concept ‘a mutation of Gene X’.  This qualifier specifies a change in the object of an association (aka: statement).
--     * Slot: object_part_qualifier Description: defines a specific part/component of the core concept (used in cases there this specific part has no IRI we can use to directly represent it, e.g. 'ESR1 transcript' q: polyA tail).  This qualifier is for the  object of an association (or statement).
--     * Slot: object_context_qualifier Description: 
--     * Slot: anatomical_context_qualifier Description: A statement qualifier representing an anatomical location where an relationship expressed in an association took place (can be a tissue, cell type, or sub-cellular location).
--     * Slot: subject Description: the chemical entity or entity that is an interactor
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: object_id Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
-- # Class: "chemical affects gene association" Description: "Describes an effect that a chemical has on a gene or gene product (e.g. an impact of on its abundance, activity,localization, processing, expression, etc.)"
--     * Slot: subject_form_or_variant_qualifier Description: A qualifier that composes with a core subject/object concept to define a specific type, variant, alternative version of this concept. The composed concept remains a subtype or instance of the core concept. For example, the qualifier ‘mutation’ combines with the core concept ‘Gene X’ to express the compose concept ‘a mutation of Gene X’.  This qualifier specifies a change in the subject of an association (aka: statement).
--     * Slot: subject_part_qualifier Description: defines a specific part/component of the core concept (used in cases there this specific part has no IRI we can use to directly represent it, e.g. 'ESR1 transcript' q: polyA tail).  This qualifier is for the  subject of an association (or statement).
--     * Slot: subject_derivative_qualifier Description: A qualifier that composes with a core subject/object  concept to describe something that is derived from the core concept.  For example, the qualifier ‘metabolite’ combines with a ‘Chemical X’ core concept to express the composed concept ‘a metabolite of Chemical X’.  This qualifier is for the subject of an association  (or statement).
--     * Slot: subject_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the subject of an association (aka: statement).
--     * Slot: subject_context_qualifier Description: 
--     * Slot: subject_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the subject of an association (aka: statement).
--     * Slot: object_form_or_variant_qualifier Description: A qualifier that composes with a core subject/object concept to define a specific type, variant, alternative version of this concept. The composed concept remains a subtype or instance of the core concept. For example, the qualifier ‘mutation’ combines with the core concept ‘Gene X’ to express the compose concept ‘a mutation of Gene X’.  This qualifier specifies a change in the object of an association (aka: statement).
--     * Slot: object_part_qualifier Description: defines a specific part/component of the core concept (used in cases there this specific part has no IRI we can use to directly represent it, e.g. 'ESR1 transcript' q: polyA tail).  This qualifier is for the  object of an association (or statement).
--     * Slot: object_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the object of an association (aka: statement).
--     * Slot: object_context_qualifier Description: 
--     * Slot: object_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the object of an association (aka: statement).
--     * Slot: causal_mechanism_qualifier Description: A statement qualifier representing a type of molecular control mechanism through which an effect of a chemical on a gene or gene product is mediated (e.g. 'agonism', 'inhibition', 'allosteric modulation', 'channel blocker')
--     * Slot: anatomical_context_qualifier Description: A statement qualifier representing an anatomical location where an relationship expressed in an association took place (can be a tissue, cell type, or sub-cellular location).
--     * Slot: qualified_predicate Description: Predicate to be used in an association when subject and object qualifiers are present and the full reading of the statement requires a qualification to the predicate in use in order to refine or increase the specificity of the full statement reading.  This qualifier holds a relationship to be used instead of that expressed by the primary predicate, in a ‘full statement’ reading of the association, where qualifier-based semantics are included.  This is necessary only in cases where the primary predicate does not work in a full statement reading.
--     * Slot: species_context_qualifier Description: A statement qualifier representing a taxonomic category of species in which a relationship expressed in an association took place.
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: object_id Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
-- # Class: "gene affects chemical association" Description: "Describes an effect that a gene or gene product has on a chemical entity (e.g. an impact of on its abundance, activity, localization, processing, transport, etc.)"
--     * Slot: subject_form_or_variant_qualifier Description: A qualifier that composes with a core subject/object concept to define a specific type, variant, alternative version of this concept. The composed concept remains a subtype or instance of the core concept. For example, the qualifier ‘mutation’ combines with the core concept ‘Gene X’ to express the compose concept ‘a mutation of Gene X’.  This qualifier specifies a change in the subject of an association (aka: statement).
--     * Slot: subject_part_qualifier Description: defines a specific part/component of the core concept (used in cases there this specific part has no IRI we can use to directly represent it, e.g. 'ESR1 transcript' q: polyA tail).  This qualifier is for the  subject of an association (or statement).
--     * Slot: subject_derivative_qualifier Description: A qualifier that composes with a core subject/object  concept to describe something that is derived from the core concept.  For example, the qualifier ‘metabolite’ combines with a ‘Chemical X’ core concept to express the composed concept ‘a metabolite of Chemical X’.  This qualifier is for the subject of an association  (or statement).
--     * Slot: subject_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the subject of an association (aka: statement).
--     * Slot: subject_context_qualifier Description: 
--     * Slot: subject_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the subject of an association (aka: statement).
--     * Slot: object_form_or_variant_qualifier Description: A qualifier that composes with a core subject/object concept to define a specific type, variant, alternative version of this concept. The composed concept remains a subtype or instance of the core concept. For example, the qualifier ‘mutation’ combines with the core concept ‘Gene X’ to express the compose concept ‘a mutation of Gene X’.  This qualifier specifies a change in the object of an association (aka: statement).
--     * Slot: object_part_qualifier Description: defines a specific part/component of the core concept (used in cases there this specific part has no IRI we can use to directly represent it, e.g. 'ESR1 transcript' q: polyA tail).  This qualifier is for the  object of an association (or statement).
--     * Slot: object_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the object of an association (aka: statement).
--     * Slot: object_context_qualifier Description: 
--     * Slot: object_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the object of an association (aka: statement).
--     * Slot: object_derivative_qualifier Description: A qualifier that composes with a core subject/object  concept to describe something that is derived from the core concept.  For example, the qualifier ‘metabolite’ combines with a ‘Chemical X’ core concept to express the composed concept ‘a metabolite of Chemical X’.  This qualifier is for the object of an association  (or statement).
--     * Slot: causal_mechanism_qualifier Description: A statement qualifier representing a type of molecular control mechanism through which an effect of a chemical on a gene or gene product is mediated (e.g. 'agonism', 'inhibition', 'allosteric modulation', 'channel blocker')
--     * Slot: anatomical_context_qualifier Description: A statement qualifier representing an anatomical location where an relationship expressed in an association took place (can be a tissue, cell type, or sub-cellular location).
--     * Slot: qualified_predicate Description: Predicate to be used in an association when subject and object qualifiers are present and the full reading of the statement requires a qualification to the predicate in use in order to refine or increase the specificity of the full statement reading.  This qualifier holds a relationship to be used instead of that expressed by the primary predicate, in a ‘full statement’ reading of the association, where qualifier-based semantics are included.  This is necessary only in cases where the primary predicate does not work in a full statement reading.
--     * Slot: species_context_qualifier Description: A statement qualifier representing a taxonomic category of species in which a relationship expressed in an association took place.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: subject_id Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
-- # Class: "drug to gene association" Description: "An interaction between a drug and a gene or gene product."
--     * Slot: subject Description: the drug that is an interactor
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: object_id Description: the gene or gene product that is affected by the drug
-- # Class: "material sample to entity association mixin" Description: "An association between a material sample and something."
--     * Slot: id Description: 
--     * Slot: subject Description: the material sample being described
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
-- # Class: "material sample derivation association" Description: "An association between a material sample and the material entity from which it is derived."
--     * Slot: subject Description: the material sample being described
--     * Slot: predicate Description: derivation relationship
--     * Slot: object Description: the material entity the sample was derived from. This may be another material sample, or any other material entity, including for example an organism, a geographic feature, or some environmental material.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "material sample to disease or phenotypic feature association" Description: "An association between a material sample and a disease or phenotype."
--     * Slot: subject Description: the material sample being described
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: disease or phenotype
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "disease to entity association mixin" Description: ""
--     * Slot: id Description: 
--     * Slot: subject Description: disease class
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
-- # Class: "entity to exposure event association mixin" Description: "An association between some entity and an exposure event."
--     * Slot: id Description: 
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
-- # Class: "disease to exposure event association" Description: "An association between an exposure event and a disease."
--     * Slot: subject Description: disease class
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "entity to outcome association mixin" Description: "An association between some entity and an outcome"
--     * Slot: id Description: 
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object_id Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
-- # Class: "exposure event to outcome association" Description: "An association between an exposure event and an outcome."
--     * Slot: population_context_qualifier Description: a biological population (general, study, cohort, etc.) with a specific set of characteristics to constrain an association.
--     * Slot: temporal_context_qualifier Description: a constraint of time placed upon the truth value of an association. for time intervales, use temporal interval qualifier.
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: object_id Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
-- # Class: "frequency qualifier mixin" Description: "Qualifier for frequency type associations"
--     * Slot: id Description: 
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
-- # Class: "entity to feature or disease qualifiers mixin" Description: "Qualifiers for entity to disease or phenotype associations."
--     * Slot: id Description: 
--     * Slot: subject_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the subject of an association (aka: statement).
--     * Slot: subject_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the subject of an association (aka: statement).
--     * Slot: object_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the object of an association (aka: statement).
--     * Slot: object_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the object of an association (aka: statement).
--     * Slot: qualified_predicate Description: Predicate to be used in an association when subject and object qualifiers are present and the full reading of the statement requires a qualification to the predicate in use in order to refine or increase the specificity of the full statement reading.  This qualifier holds a relationship to be used instead of that expressed by the primary predicate, in a ‘full statement’ reading of the association, where qualifier-based semantics are included.  This is necessary only in cases where the primary predicate does not work in a full statement reading.
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
-- # Class: "feature or disease qualifiers to entity mixin" Description: "Qualifiers for disease or phenotype to entity associations."
--     * Slot: id Description: 
--     * Slot: subject_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the subject of an association (aka: statement).
--     * Slot: subject_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the subject of an association (aka: statement).
--     * Slot: object_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the object of an association (aka: statement).
--     * Slot: object_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the object of an association (aka: statement).
--     * Slot: qualified_predicate Description: Predicate to be used in an association when subject and object qualifiers are present and the full reading of the statement requires a qualification to the predicate in use in order to refine or increase the specificity of the full statement reading.  This qualifier holds a relationship to be used instead of that expressed by the primary predicate, in a ‘full statement’ reading of the association, where qualifier-based semantics are included.  This is necessary only in cases where the primary predicate does not work in a full statement reading.
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
-- # Class: "entity to phenotypic feature association mixin" Description: ""
--     * Slot: id Description: 
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: sex_qualifier Description: a qualifier used in a phenotypic association to state whether the association is specific to a particular sex.
--     * Slot: has_count Description: number of things with a particular property
--     * Slot: has_total Description: total number of things in a particular reference set
--     * Slot: has_quotient Description: 
--     * Slot: has_percentage Description: equivalent to has quotient multiplied by 100
--     * Slot: subject_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the subject of an association (aka: statement).
--     * Slot: subject_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the subject of an association (aka: statement).
--     * Slot: object_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the object of an association (aka: statement).
--     * Slot: object_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the object of an association (aka: statement).
--     * Slot: qualified_predicate Description: Predicate to be used in an association when subject and object qualifiers are present and the full reading of the statement requires a qualification to the predicate in use in order to refine or increase the specificity of the full statement reading.  This qualifier holds a relationship to be used instead of that expressed by the primary predicate, in a ‘full statement’ reading of the association, where qualifier-based semantics are included.  This is necessary only in cases where the primary predicate does not work in a full statement reading.
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
-- # Class: "phenotypic feature to entity association mixin" Description: ""
--     * Slot: id Description: 
--     * Slot: sex_qualifier Description: a qualifier used in a phenotypic association to state whether the association is specific to a particular sex.
--     * Slot: has_count Description: number of things with a particular property
--     * Slot: has_total Description: total number of things in a particular reference set
--     * Slot: has_quotient Description: 
--     * Slot: has_percentage Description: equivalent to has quotient multiplied by 100
--     * Slot: subject_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the subject of an association (aka: statement).
--     * Slot: subject_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the subject of an association (aka: statement).
--     * Slot: object_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the object of an association (aka: statement).
--     * Slot: object_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the object of an association (aka: statement).
--     * Slot: qualified_predicate Description: Predicate to be used in an association when subject and object qualifiers are present and the full reading of the statement requires a qualification to the predicate in use in order to refine or increase the specificity of the full statement reading.  This qualifier holds a relationship to be used instead of that expressed by the primary predicate, in a ‘full statement’ reading of the association, where qualifier-based semantics are included.  This is necessary only in cases where the primary predicate does not work in a full statement reading.
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
-- # Class: "information content entity to named thing association" Description: "association between a named thing and a information content entity where the specific context of the relationship between that named thing and the publication is unknown. For example, model organisms databases often capture the knowledge that a gene is found in a journal article, but not specifically the context in which that gene was documented in the article. In these cases, this association with the accompanying predicate 'mentions' could be used. Conversely, for more specific associations (like 'gene to disease association', the publication should be captured as an edge property)."
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "entity to disease association mixin" Description: "mixin class for any association whose object (target node) is a disease"
--     * Slot: id Description: 
--     * Slot: subject_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the subject of an association (aka: statement).
--     * Slot: subject_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the subject of an association (aka: statement).
--     * Slot: object_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the object of an association (aka: statement).
--     * Slot: object_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the object of an association (aka: statement).
--     * Slot: qualified_predicate Description: Predicate to be used in an association when subject and object qualifiers are present and the full reading of the statement requires a qualification to the predicate in use in order to refine or increase the specificity of the full statement reading.  This qualifier holds a relationship to be used instead of that expressed by the primary predicate, in a ‘full statement’ reading of the association, where qualifier-based semantics are included.  This is necessary only in cases where the primary predicate does not work in a full statement reading.
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: disease
-- # Class: "disease or phenotypic feature to entity association mixin" Description: ""
--     * Slot: id Description: 
--     * Slot: subject Description: disease or phenotype
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
-- # Class: "disease or phenotypic feature to location association" Description: "An association between either a disease or a phenotypic feature and an anatomical entity, where the disease/feature manifests in that site."
--     * Slot: subject Description: disease or phenotype
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: anatomical entity in which the disease or feature is found.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "disease or phenotypic feature to genetic inheritance association" Description: "An association between either a disease or a phenotypic feature and its mode of (genetic) inheritance."
--     * Slot: subject Description: disease or phenotype
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: genetic inheritance associated with the specified disease or phenotypic feature.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "entity to disease or phenotypic feature association mixin" Description: ""
--     * Slot: id Description: 
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: disease or phenotype
-- # Class: "genotype to entity association mixin" Description: ""
--     * Slot: id Description: 
--     * Slot: subject Description: genotype that is the subject of the association
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
-- # Class: "genotype to phenotypic feature association" Description: "Any association between one genotype and a phenotypic feature, where having the genotype confers the phenotype, either in isolation or through environment"
--     * Slot: subject Description: genotype that is associated with the phenotypic feature
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: sex_qualifier Description: a qualifier used in a phenotypic association to state whether the association is specific to a particular sex.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: has_count Description: number of things with a particular property
--     * Slot: has_total Description: total number of things in a particular reference set
--     * Slot: has_quotient Description: 
--     * Slot: has_percentage Description: equivalent to has quotient multiplied by 100
--     * Slot: subject_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the subject of an association (aka: statement).
--     * Slot: subject_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the subject of an association (aka: statement).
--     * Slot: object_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the object of an association (aka: statement).
--     * Slot: object_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the object of an association (aka: statement).
--     * Slot: qualified_predicate Description: Predicate to be used in an association when subject and object qualifiers are present and the full reading of the statement requires a qualification to the predicate in use in order to refine or increase the specificity of the full statement reading.  This qualifier holds a relationship to be used instead of that expressed by the primary predicate, in a ‘full statement’ reading of the association, where qualifier-based semantics are included.  This is necessary only in cases where the primary predicate does not work in a full statement reading.
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
-- # Class: "exposure event to phenotypic feature association" Description: "Any association between an environment and a phenotypic feature, where being in the environment influences the phenotype."
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: sex_qualifier Description: a qualifier used in a phenotypic association to state whether the association is specific to a particular sex.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: has_count Description: number of things with a particular property
--     * Slot: has_total Description: total number of things in a particular reference set
--     * Slot: has_quotient Description: 
--     * Slot: has_percentage Description: equivalent to has quotient multiplied by 100
--     * Slot: subject_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the subject of an association (aka: statement).
--     * Slot: subject_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the subject of an association (aka: statement).
--     * Slot: object_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the object of an association (aka: statement).
--     * Slot: object_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the object of an association (aka: statement).
--     * Slot: qualified_predicate Description: Predicate to be used in an association when subject and object qualifiers are present and the full reading of the statement requires a qualification to the predicate in use in order to refine or increase the specificity of the full statement reading.  This qualifier holds a relationship to be used instead of that expressed by the primary predicate, in a ‘full statement’ reading of the association, where qualifier-based semantics are included.  This is necessary only in cases where the primary predicate does not work in a full statement reading.
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
-- # Class: "disease to phenotypic feature association" Description: "An association between a disease and a phenotypic feature in which the phenotypic feature is associated with the disease in some way."
--     * Slot: has_count Description: number of things with a particular property
--     * Slot: has_total Description: total number of things in a particular reference set
--     * Slot: has_quotient Description: 
--     * Slot: has_percentage Description: equivalent to has quotient multiplied by 100
--     * Slot: subject Description: disease class
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: sex_qualifier Description: a qualifier used in a phenotypic association to state whether the association is specific to a particular sex.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: subject_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the subject of an association (aka: statement).
--     * Slot: subject_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the subject of an association (aka: statement).
--     * Slot: object_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the object of an association (aka: statement).
--     * Slot: object_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the object of an association (aka: statement).
--     * Slot: qualified_predicate Description: Predicate to be used in an association when subject and object qualifiers are present and the full reading of the statement requires a qualification to the predicate in use in order to refine or increase the specificity of the full statement reading.  This qualifier holds a relationship to be used instead of that expressed by the primary predicate, in a ‘full statement’ reading of the association, where qualifier-based semantics are included.  This is necessary only in cases where the primary predicate does not work in a full statement reading.
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
-- # Class: "case to phenotypic feature association" Description: "An association between a case (e.g. individual patient) and a phenotypic feature in which the individual has or has had the phenotype."
--     * Slot: subject Description: the case (e.g. patient) that has the property
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: sex_qualifier Description: a qualifier used in a phenotypic association to state whether the association is specific to a particular sex.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: has_count Description: number of things with a particular property
--     * Slot: has_total Description: total number of things in a particular reference set
--     * Slot: has_quotient Description: 
--     * Slot: has_percentage Description: equivalent to has quotient multiplied by 100
--     * Slot: subject_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the subject of an association (aka: statement).
--     * Slot: subject_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the subject of an association (aka: statement).
--     * Slot: object_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the object of an association (aka: statement).
--     * Slot: object_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the object of an association (aka: statement).
--     * Slot: qualified_predicate Description: Predicate to be used in an association when subject and object qualifiers are present and the full reading of the statement requires a qualification to the predicate in use in order to refine or increase the specificity of the full statement reading.  This qualifier holds a relationship to be used instead of that expressed by the primary predicate, in a ‘full statement’ reading of the association, where qualifier-based semantics are included.  This is necessary only in cases where the primary predicate does not work in a full statement reading.
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
-- # Class: "behavior to behavioral feature association" Description: "An association between an mixture behavior and a behavioral feature manifested by the individual exhibited or has exhibited the behavior."
--     * Slot: subject Description: behavior that is the subject of the association
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: behavioral feature that is the object of the association
--     * Slot: sex_qualifier Description: a qualifier used in a phenotypic association to state whether the association is specific to a particular sex.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: has_count Description: number of things with a particular property
--     * Slot: has_total Description: total number of things in a particular reference set
--     * Slot: has_quotient Description: 
--     * Slot: has_percentage Description: equivalent to has quotient multiplied by 100
--     * Slot: subject_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the subject of an association (aka: statement).
--     * Slot: subject_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the subject of an association (aka: statement).
--     * Slot: object_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the object of an association (aka: statement).
--     * Slot: object_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the object of an association (aka: statement).
--     * Slot: qualified_predicate Description: Predicate to be used in an association when subject and object qualifiers are present and the full reading of the statement requires a qualification to the predicate in use in order to refine or increase the specificity of the full statement reading.  This qualifier holds a relationship to be used instead of that expressed by the primary predicate, in a ‘full statement’ reading of the association, where qualifier-based semantics are included.  This is necessary only in cases where the primary predicate does not work in a full statement reading.
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
-- # Class: "gene to entity association mixin" Description: ""
--     * Slot: id Description: 
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: subject_id Description: gene that is the subject of the association
-- # Class: "variant to entity association mixin" Description: ""
--     * Slot: id Description: 
--     * Slot: subject Description: a sequence variant in which the allele state is associated with some other entity
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
-- # Class: "gene to disease or phenotypic feature association" Description: ""
--     * Slot: subject_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the subject of an association (aka: statement).
--     * Slot: object_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the object of an association (aka: statement).
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: sex_qualifier Description: a qualifier used in a phenotypic association to state whether the association is specific to a particular sex.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: has_count Description: number of things with a particular property
--     * Slot: has_total Description: total number of things in a particular reference set
--     * Slot: has_quotient Description: 
--     * Slot: has_percentage Description: equivalent to has quotient multiplied by 100
--     * Slot: subject_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the subject of an association (aka: statement).
--     * Slot: object_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the object of an association (aka: statement).
--     * Slot: qualified_predicate Description: Predicate to be used in an association when subject and object qualifiers are present and the full reading of the statement requires a qualification to the predicate in use in order to refine or increase the specificity of the full statement reading.  This qualifier holds a relationship to be used instead of that expressed by the primary predicate, in a ‘full statement’ reading of the association, where qualifier-based semantics are included.  This is necessary only in cases where the primary predicate does not work in a full statement reading.
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
--     * Slot: subject_id Description: gene in which variation is correlated with the phenotypic feature
-- # Class: "gene to phenotypic feature association" Description: ""
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: sex_qualifier Description: a qualifier used in a phenotypic association to state whether the association is specific to a particular sex.
--     * Slot: subject_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the subject of an association (aka: statement).
--     * Slot: object_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the object of an association (aka: statement).
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: has_count Description: number of things with a particular property
--     * Slot: has_total Description: total number of things in a particular reference set
--     * Slot: has_quotient Description: 
--     * Slot: has_percentage Description: equivalent to has quotient multiplied by 100
--     * Slot: subject_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the subject of an association (aka: statement).
--     * Slot: object_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the object of an association (aka: statement).
--     * Slot: qualified_predicate Description: Predicate to be used in an association when subject and object qualifiers are present and the full reading of the statement requires a qualification to the predicate in use in order to refine or increase the specificity of the full statement reading.  This qualifier holds a relationship to be used instead of that expressed by the primary predicate, in a ‘full statement’ reading of the association, where qualifier-based semantics are included.  This is necessary only in cases where the primary predicate does not work in a full statement reading.
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
--     * Slot: subject_id Description: gene in which variation is correlated with the phenotypic feature
-- # Class: "gene to disease association" Description: ""
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: disease
--     * Slot: subject_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the subject of an association (aka: statement).
--     * Slot: object_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the object of an association (aka: statement).
--     * Slot: sex_qualifier Description: a qualifier used in a phenotypic association to state whether the association is specific to a particular sex.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: has_count Description: number of things with a particular property
--     * Slot: has_total Description: total number of things in a particular reference set
--     * Slot: has_quotient Description: 
--     * Slot: has_percentage Description: equivalent to has quotient multiplied by 100
--     * Slot: subject_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the subject of an association (aka: statement).
--     * Slot: object_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the object of an association (aka: statement).
--     * Slot: qualified_predicate Description: Predicate to be used in an association when subject and object qualifiers are present and the full reading of the statement requires a qualification to the predicate in use in order to refine or increase the specificity of the full statement reading.  This qualifier holds a relationship to be used instead of that expressed by the primary predicate, in a ‘full statement’ reading of the association, where qualifier-based semantics are included.  This is necessary only in cases where the primary predicate does not work in a full statement reading.
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
--     * Slot: subject_id Description: gene in which variation is correlated with the disease, may be protective or causative or associative, or as a model
-- # Class: "causal gene to disease association" Description: ""
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: disease
--     * Slot: subject_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the subject of an association (aka: statement).
--     * Slot: object_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the object of an association (aka: statement).
--     * Slot: sex_qualifier Description: a qualifier used in a phenotypic association to state whether the association is specific to a particular sex.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: has_count Description: number of things with a particular property
--     * Slot: has_total Description: total number of things in a particular reference set
--     * Slot: has_quotient Description: 
--     * Slot: has_percentage Description: equivalent to has quotient multiplied by 100
--     * Slot: subject_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the subject of an association (aka: statement).
--     * Slot: object_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the object of an association (aka: statement).
--     * Slot: qualified_predicate Description: Predicate to be used in an association when subject and object qualifiers are present and the full reading of the statement requires a qualification to the predicate in use in order to refine or increase the specificity of the full statement reading.  This qualifier holds a relationship to be used instead of that expressed by the primary predicate, in a ‘full statement’ reading of the association, where qualifier-based semantics are included.  This is necessary only in cases where the primary predicate does not work in a full statement reading.
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
--     * Slot: subject_id Description: gene in which variation is shown to cause the disease.
-- # Class: "correlated gene to disease association" Description: ""
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: disease
--     * Slot: subject_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the subject of an association (aka: statement).
--     * Slot: object_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the object of an association (aka: statement).
--     * Slot: sex_qualifier Description: a qualifier used in a phenotypic association to state whether the association is specific to a particular sex.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: has_count Description: number of things with a particular property
--     * Slot: has_total Description: total number of things in a particular reference set
--     * Slot: has_quotient Description: 
--     * Slot: has_percentage Description: equivalent to has quotient multiplied by 100
--     * Slot: subject_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the subject of an association (aka: statement).
--     * Slot: object_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the object of an association (aka: statement).
--     * Slot: qualified_predicate Description: Predicate to be used in an association when subject and object qualifiers are present and the full reading of the statement requires a qualification to the predicate in use in order to refine or increase the specificity of the full statement reading.  This qualifier holds a relationship to be used instead of that expressed by the primary predicate, in a ‘full statement’ reading of the association, where qualifier-based semantics are included.  This is necessary only in cases where the primary predicate does not work in a full statement reading.
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
--     * Slot: subject_id Description: gene in which variation is shown to correlate with the disease.
-- # Class: "druggable gene to disease association" Description: ""
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: disease
--     * Slot: subject_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the subject of an association (aka: statement).
--     * Slot: object_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the object of an association (aka: statement).
--     * Slot: sex_qualifier Description: a qualifier used in a phenotypic association to state whether the association is specific to a particular sex.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: has_count Description: number of things with a particular property
--     * Slot: has_total Description: total number of things in a particular reference set
--     * Slot: has_quotient Description: 
--     * Slot: has_percentage Description: equivalent to has quotient multiplied by 100
--     * Slot: subject_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the subject of an association (aka: statement).
--     * Slot: object_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the object of an association (aka: statement).
--     * Slot: qualified_predicate Description: Predicate to be used in an association when subject and object qualifiers are present and the full reading of the statement requires a qualification to the predicate in use in order to refine or increase the specificity of the full statement reading.  This qualifier holds a relationship to be used instead of that expressed by the primary predicate, in a ‘full statement’ reading of the association, where qualifier-based semantics are included.  This is necessary only in cases where the primary predicate does not work in a full statement reading.
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
--     * Slot: subject_id Description: gene in which variation is correlated with the disease in a protective manner, or if the product produced by the gene can be targeted by a small molecule and this leads to a protective or improving disease state.
-- # Class: "phenotypic feature to disease association" Description: ""
--     * Slot: sex_qualifier Description: a qualifier used in a phenotypic association to state whether the association is specific to a particular sex.
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: disease
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: has_count Description: number of things with a particular property
--     * Slot: has_total Description: total number of things in a particular reference set
--     * Slot: has_quotient Description: 
--     * Slot: has_percentage Description: equivalent to has quotient multiplied by 100
--     * Slot: subject_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the subject of an association (aka: statement).
--     * Slot: subject_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the subject of an association (aka: statement).
--     * Slot: object_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the object of an association (aka: statement).
--     * Slot: object_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the object of an association (aka: statement).
--     * Slot: qualified_predicate Description: Predicate to be used in an association when subject and object qualifiers are present and the full reading of the statement requires a qualification to the predicate in use in order to refine or increase the specificity of the full statement reading.  This qualifier holds a relationship to be used instead of that expressed by the primary predicate, in a ‘full statement’ reading of the association, where qualifier-based semantics are included.  This is necessary only in cases where the primary predicate does not work in a full statement reading.
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
-- # Class: "variant to gene association" Description: "An association between a variant and a gene, where the variant has a genetic association with the gene (i.e. is in linkage disequilibrium)"
--     * Slot: subject Description: a sequence variant in which the allele state is associated with some other entity
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "variant to gene expression association" Description: "An association between a variant and expression of a gene (i.e. e-QTL)"
--     * Slot: quantifier_qualifier Description: Optional quantitative value indicating degree of expression.
--     * Slot: expression_site Description: location in which gene or protein expression takes place. May be cell, tissue, or organ.
--     * Slot: stage_qualifier Description: stage during which gene or protein expression of takes place.
--     * Slot: phenotypic_state Description: in experiments (e.g. gene expression) assaying diseased or unhealthy tissue, the phenotypic state can be put here, e.g. MONDO ID. For healthy tissues, use XXX.
--     * Slot: subject Description: a sequence variant in which the allele state is associated with some other entity
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "variant to population association" Description: "An association between a variant and a population, where the variant has particular frequency in the population"
--     * Slot: subject Description: an allele that has a certain frequency in a given population
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: the population that is observed to have the frequency
--     * Slot: has_count Description: number in object population that carry a particular allele, aka allele count
--     * Slot: has_total Description: number all populations that carry a particular allele, aka allele number
--     * Slot: has_quotient Description: frequency of allele in population, expressed as a number with allele divided by number in reference population, aka allele frequency
--     * Slot: has_percentage Description: equivalent to has quotient multiplied by 100
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "population to population association" Description: "An association between a two populations"
--     * Slot: subject Description: the population that form the subject of the association
--     * Slot: predicate Description: A relationship type that holds between the subject and object populations. Standard mereological relations can be used. E.g. subject part-of object, subject overlaps object. Derivation relationships can also be used
--     * Slot: object Description: the population that form the object of the association
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "variant to phenotypic feature association" Description: ""
--     * Slot: subject Description: a sequence variant in which the allele state is associated in some way with the phenotype state
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: sex_qualifier Description: a qualifier used in a phenotypic association to state whether the association is specific to a particular sex.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: has_count Description: number of things with a particular property
--     * Slot: has_total Description: total number of things in a particular reference set
--     * Slot: has_quotient Description: 
--     * Slot: has_percentage Description: equivalent to has quotient multiplied by 100
--     * Slot: subject_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the subject of an association (aka: statement).
--     * Slot: subject_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the subject of an association (aka: statement).
--     * Slot: object_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the object of an association (aka: statement).
--     * Slot: object_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the object of an association (aka: statement).
--     * Slot: qualified_predicate Description: Predicate to be used in an association when subject and object qualifiers are present and the full reading of the statement requires a qualification to the predicate in use in order to refine or increase the specificity of the full statement reading.  This qualifier holds a relationship to be used instead of that expressed by the primary predicate, in a ‘full statement’ reading of the association, where qualifier-based semantics are included.  This is necessary only in cases where the primary predicate does not work in a full statement reading.
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
-- # Class: "variant to disease association" Description: ""
--     * Slot: subject Description: a sequence variant in which the allele state is associated in some way with the disease state
--     * Slot: predicate Description: E.g. is pathogenic for
--     * Slot: object Description: a disease that is associated with that variant
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: subject_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the subject of an association (aka: statement).
--     * Slot: subject_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the subject of an association (aka: statement).
--     * Slot: object_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the object of an association (aka: statement).
--     * Slot: object_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the object of an association (aka: statement).
--     * Slot: qualified_predicate Description: Predicate to be used in an association when subject and object qualifiers are present and the full reading of the statement requires a qualification to the predicate in use in order to refine or increase the specificity of the full statement reading.  This qualifier holds a relationship to be used instead of that expressed by the primary predicate, in a ‘full statement’ reading of the association, where qualifier-based semantics are included.  This is necessary only in cases where the primary predicate does not work in a full statement reading.
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
-- # Class: "genotype to disease association" Description: ""
--     * Slot: subject Description: a genotype that is associated in some way with a disease state
--     * Slot: predicate Description: E.g. is pathogenic for
--     * Slot: object Description: a disease that is associated with that genotype
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: subject_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the subject of an association (aka: statement).
--     * Slot: subject_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the subject of an association (aka: statement).
--     * Slot: object_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the object of an association (aka: statement).
--     * Slot: object_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the object of an association (aka: statement).
--     * Slot: qualified_predicate Description: Predicate to be used in an association when subject and object qualifiers are present and the full reading of the statement requires a qualification to the predicate in use in order to refine or increase the specificity of the full statement reading.  This qualifier holds a relationship to be used instead of that expressed by the primary predicate, in a ‘full statement’ reading of the association, where qualifier-based semantics are included.  This is necessary only in cases where the primary predicate does not work in a full statement reading.
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
-- # Class: "model to disease association mixin" Description: "This mixin is used for any association class for which the subject (source node) plays the role of a 'model', in that it recapitulates some features of the disease in a way that is useful for studying the disease outside a patient carrying the disease"
--     * Slot: id Description: 
--     * Slot: subject Description: The entity that serves as the model of the disease. This may be an organism, a strain of organism, a genotype or variant that exhibits similar features, or a gene that when mutated exhibits features of the disease
--     * Slot: predicate Description: The relationship to the disease
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
-- # Class: "gene as a model of disease association" Description: ""
--     * Slot: predicate Description: The relationship to the disease
--     * Slot: object Description: disease
--     * Slot: subject_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the subject of an association (aka: statement).
--     * Slot: object_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the object of an association (aka: statement).
--     * Slot: sex_qualifier Description: a qualifier used in a phenotypic association to state whether the association is specific to a particular sex.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: has_count Description: number of things with a particular property
--     * Slot: has_total Description: total number of things in a particular reference set
--     * Slot: has_quotient Description: 
--     * Slot: has_percentage Description: equivalent to has quotient multiplied by 100
--     * Slot: subject_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the subject of an association (aka: statement).
--     * Slot: object_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the object of an association (aka: statement).
--     * Slot: qualified_predicate Description: Predicate to be used in an association when subject and object qualifiers are present and the full reading of the statement requires a qualification to the predicate in use in order to refine or increase the specificity of the full statement reading.  This qualifier holds a relationship to be used instead of that expressed by the primary predicate, in a ‘full statement’ reading of the association, where qualifier-based semantics are included.  This is necessary only in cases where the primary predicate does not work in a full statement reading.
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
--     * Slot: subject_id Description: A gene that has a role in modeling the disease. This may be a model organism ortholog of a known disease gene, or it may be a gene whose mutants recapitulate core features of the disease.
-- # Class: "variant as a model of disease association" Description: ""
--     * Slot: subject Description: A variant that has a role in modeling the disease.
--     * Slot: predicate Description: The relationship to the disease
--     * Slot: object Description: disease
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: subject_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the subject of an association (aka: statement).
--     * Slot: subject_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the subject of an association (aka: statement).
--     * Slot: object_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the object of an association (aka: statement).
--     * Slot: object_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the object of an association (aka: statement).
--     * Slot: qualified_predicate Description: Predicate to be used in an association when subject and object qualifiers are present and the full reading of the statement requires a qualification to the predicate in use in order to refine or increase the specificity of the full statement reading.  This qualifier holds a relationship to be used instead of that expressed by the primary predicate, in a ‘full statement’ reading of the association, where qualifier-based semantics are included.  This is necessary only in cases where the primary predicate does not work in a full statement reading.
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
-- # Class: "genotype as a model of disease association" Description: ""
--     * Slot: subject Description: A genotype that has a role in modeling the disease.
--     * Slot: predicate Description: The relationship to the disease
--     * Slot: object Description: disease
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: subject_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the subject of an association (aka: statement).
--     * Slot: subject_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the subject of an association (aka: statement).
--     * Slot: object_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the object of an association (aka: statement).
--     * Slot: object_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the object of an association (aka: statement).
--     * Slot: qualified_predicate Description: Predicate to be used in an association when subject and object qualifiers are present and the full reading of the statement requires a qualification to the predicate in use in order to refine or increase the specificity of the full statement reading.  This qualifier holds a relationship to be used instead of that expressed by the primary predicate, in a ‘full statement’ reading of the association, where qualifier-based semantics are included.  This is necessary only in cases where the primary predicate does not work in a full statement reading.
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
-- # Class: "cell line as a model of disease association" Description: ""
--     * Slot: subject Description: A cell line derived from an organismal entity with a disease state that is used as a model of that disease.
--     * Slot: predicate Description: The relationship to the disease
--     * Slot: object Description: disease
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: subject_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the subject of an association (aka: statement).
--     * Slot: subject_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the subject of an association (aka: statement).
--     * Slot: object_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the object of an association (aka: statement).
--     * Slot: object_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the object of an association (aka: statement).
--     * Slot: qualified_predicate Description: Predicate to be used in an association when subject and object qualifiers are present and the full reading of the statement requires a qualification to the predicate in use in order to refine or increase the specificity of the full statement reading.  This qualifier holds a relationship to be used instead of that expressed by the primary predicate, in a ‘full statement’ reading of the association, where qualifier-based semantics are included.  This is necessary only in cases where the primary predicate does not work in a full statement reading.
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
-- # Class: "organismal entity as a model of disease association" Description: ""
--     * Slot: subject Description: A organismal entity (strain, breed) with a predisposition to a disease, or bred/created specifically to model a disease.
--     * Slot: predicate Description: The relationship to the disease
--     * Slot: object Description: disease
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: subject_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the subject of an association (aka: statement).
--     * Slot: subject_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the subject of an association (aka: statement).
--     * Slot: object_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the object of an association (aka: statement).
--     * Slot: object_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the object of an association (aka: statement).
--     * Slot: qualified_predicate Description: Predicate to be used in an association when subject and object qualifiers are present and the full reading of the statement requires a qualification to the predicate in use in order to refine or increase the specificity of the full statement reading.  This qualifier holds a relationship to be used instead of that expressed by the primary predicate, in a ‘full statement’ reading of the association, where qualifier-based semantics are included.  This is necessary only in cases where the primary predicate does not work in a full statement reading.
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
-- # Class: "organism to organism association" Description: ""
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: An association between two individual organisms.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "taxon to taxon association" Description: ""
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: An association between individuals of different taxa.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "gene has variant that contributes to disease association" Description: ""
--     * Slot: subject_form_or_variant_qualifier Description: A qualifier that composes with a core subject/object concept to define a specific type, variant, alternative version of this concept. The composed concept remains a subtype or instance of the core concept. For example, the qualifier ‘mutation’ combines with the core concept ‘Gene X’ to express the compose concept ‘a mutation of Gene X’.  This qualifier specifies a change in the subject of an association (aka: statement).
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: disease
--     * Slot: subject_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the subject of an association (aka: statement).
--     * Slot: object_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the object of an association (aka: statement).
--     * Slot: sex_qualifier Description: a qualifier used in a phenotypic association to state whether the association is specific to a particular sex.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: has_count Description: number of things with a particular property
--     * Slot: has_total Description: total number of things in a particular reference set
--     * Slot: has_quotient Description: 
--     * Slot: has_percentage Description: equivalent to has quotient multiplied by 100
--     * Slot: subject_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the subject of an association (aka: statement).
--     * Slot: object_aspect_qualifier Description: Composes with the core concept to describe new concepts of a different ontological type. e.g. a process in which the core concept participates, a function/activity/role held by the core concept, or a characteristic/quality that inheres in the core concept.  The purpose of the aspect slot is to indicate what aspect is being affected in an 'affects' association.  This qualifier specifies a change in the object of an association (aka: statement).
--     * Slot: qualified_predicate Description: Predicate to be used in an association when subject and object qualifiers are present and the full reading of the statement requires a qualification to the predicate in use in order to refine or increase the specificity of the full statement reading.  This qualifier holds a relationship to be used instead of that expressed by the primary predicate, in a ‘full statement’ reading of the association, where qualifier-based semantics are included.  This is necessary only in cases where the primary predicate does not work in a full statement reading.
--     * Slot: frequency_qualifier Description: a qualifier used in a phenotypic association to state how frequent the phenotype is observed in the subject
--     * Slot: subject_id Description: A gene that has a role in modeling the disease. This may be a model organism ortholog of a known disease gene, or it may be a gene whose mutants recapitulate core features of the disease.
-- # Class: "gene to expression site association" Description: "An association between a gene and a gene expression site, possibly qualified by stage/timing info."
--     * Slot: stage_qualifier Description: stage at which the gene is expressed in the site
--     * Slot: quantifier_qualifier Description: can be used to indicate magnitude, or also ranking
--     * Slot: predicate Description: expression relationship
--     * Slot: object Description: location in which the gene is expressed
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: subject_id Description: Gene or gene product positively within the specified anatomical entity (or subclass, i.e. cellular component) location.
-- # Class: "sequence variant modulates treatment association" Description: "An association between a sequence variant and a treatment or health intervention. The treatment object itself encompasses both the disease and the drug used."
--     * Slot: subject Description: variant that modulates the treatment of some disease
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: treatment whose efficacy is modulated by the subject variant
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "functional association" Description: "An association between a macromolecular machine mixin (gene, gene product or complex of gene products) and either a molecular activity, a biological process or a cellular location in which a function is executed."
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: class describing the activity, process or localization of the gene product
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: subject_id Description: gene, product or macromolecular complex that has the function associated with the GO term
-- # Class: "macromolecular machine to entity association mixin" Description: "an association which has a macromolecular machine mixin as a subject"
--     * Slot: id Description: 
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
-- # Class: "macromolecular machine to molecular activity association" Description: "A functional association between a macromolecular machine (gene, gene product or complex) and a molecular activity (as represented in the GO molecular function branch), where the entity carries out the activity, or contributes to its execution."
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: class describing the activity, process or localization of the gene product
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: subject_id Description: gene, product or macromolecular complex that has the function associated with the GO term
-- # Class: "macromolecular machine to biological process association" Description: "A functional association between a macromolecular machine (gene, gene product or complex) and a biological process or pathway (as represented in the GO biological process branch), where the entity carries out some part of the process, regulates it, or acts upstream of it."
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: class describing the activity, process or localization of the gene product
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: subject_id Description: gene, product or macromolecular complex that has the function associated with the GO term
-- # Class: "macromolecular machine to cellular component association" Description: "A functional association between a macromolecular machine (gene, gene product or complex) and a cellular component (as represented in the GO cellular component branch), where the entity carries out its function in the cellular component."
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: class describing the activity, process or localization of the gene product
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: subject_id Description: gene, product or macromolecular complex that has the function associated with the GO term
-- # Class: "molecular activity to chemical entity association" Description: "Added in response to capturing relationship between microbiome activities as measured via measurements of blood analytes as collected via blood and stool samples"
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "molecular activity to molecular activity association" Description: "Added in response to capturing relationship between microbiome activities as measured via measurements of blood analytes as collected via blood and stool samples"
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "gene to go term association" Description: ""
--     * Slot: subject Description: gene, product or macromolecular complex that has the function associated with the GO term
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: class describing the activity, process or localization of the gene product
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "entity to disease association" Description: ""
--     * Slot: clinical_approval_status Description: 
--     * Slot: max_research_phase Description: 
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "entity to phenotypic feature association" Description: ""
--     * Slot: clinical_approval_status Description: 
--     * Slot: max_research_phase Description: 
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "sequence association" Description: "An association between a sequence feature and a nucleic acid entity it is localized to."
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "genomic sequence localization" Description: "A relationship between a sequence feature and a nucleic acid entity it is localized to. The reference entity may be a chromosome, chromosome region or information entity such as a contig."
--     * Slot: start_interbase_coordinate Description: The position at which the subject nucleic acid entity starts on the chromosome or other entity to which it is located on. (ie: the start of the sequence being referenced is 0).
--     * Slot: end_interbase_coordinate Description: The position at which the subject nucleic acid entity ends on the chromosome or other entity to which it is located on.
--     * Slot: genome_build Description: The version of the genome on which a feature is located. For example, GRCh38 for Homo sapiens.
--     * Slot: strand Description: The strand on which a feature is located. Has a value of '+' (sense strand or forward strand) or '-' (anti-sense strand or reverse strand).
--     * Slot: phase Description: The phase for a coding sequence entity. For example, phase of a CDS as represented in a GFF3 with a value of 0, 1 or 2.
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "sequence feature relationship" Description: "For example, a particular exon is part of a particular transcript or gene"
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "transcript to gene relationship" Description: "A gene is a collection of transcripts"
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "gene to gene product relationship" Description: "A gene is transcribed and potentially translated to a gene product"
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: object_id Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
-- # Class: "exon to transcript relationship" Description: "A transcript is formed from multiple exons"
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "chemical entity or gene or gene product regulates gene association" Description: "A regulatory relationship between two genes"
--     * Slot: object_direction_qualifier Description: Composes with the core concept (+ aspect if provided) to describe a change in its direction or degree. This qualifier qualifies the object of an association (aka: statement).
--     * Slot: predicate Description: the direction is always from regulator to regulated
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
--     * Slot: subject_id Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: object_id Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
-- # Class: "anatomical entity to anatomical entity association" Description: ""
--     * Slot: subject Description: connects an association to the subject of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "anatomical entity to anatomical entity part of association" Description: "A relationship between two anatomical entities where the relationship is mereological, i.e the two entities are related by parthood. This includes relationships between cellular components and cells, between cells and tissues, tissues and whole organisms"
--     * Slot: subject Description: the part
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: the whole
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "anatomical entity to anatomical entity ontogenic association" Description: "A relationship between two anatomical entities where the relationship is ontogenic, i.e. the two entities are related by development. A number of different relationship types can be used to specify the precise nature of the relationship."
--     * Slot: subject Description: the structure at a later time
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: the structure at an earlier time
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "organism taxon to entity association" Description: "An association between an organism taxon and another entity"
--     * Slot: id Description: 
--     * Slot: subject Description: organism taxon that is the subject of the association
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
-- # Class: "organism taxon to organism taxon association" Description: "A relationship between two organism taxon nodes"
--     * Slot: subject Description: organism taxon that is the subject of the association
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: connects an association to the object of the association. For example, in a gene-to-phenotype association, the gene is subject and phenotype is object.
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "organism taxon to organism taxon specialization" Description: "A child-parent relationship between two taxa. For example: Homo sapiens subclass_of Homo"
--     * Slot: subject Description: the more specific taxon
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: the more general taxon
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "organism taxon to organism taxon interaction" Description: "An interaction relationship between two taxa. This may be a symbiotic relationship (encompassing mutualism and parasitism), or it may be non-symbiotic. Example: plague transmitted_by flea; cattle domesticated_by Homo sapiens; plague infects Homo sapiens"
--     * Slot: associated_environmental_context Description: the environment in which the two taxa interact
--     * Slot: subject Description: the taxon that is the subject of the association
--     * Slot: predicate Description: A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.
--     * Slot: object Description: the taxon that is the subject of the association
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "organism taxon to environment association" Description: ""
--     * Slot: subject Description: the taxon that is the subject of the association
--     * Slot: predicate Description: predicate describing the relationship between the taxon and the environment
--     * Slot: object Description: the environment in which the organism occurs
--     * Slot: negated Description: if set to true, then the association is negated i.e. is not true
--     * Slot: qualifier Description: grouping slot for all qualifiers on an edge.  useful for testing compliance with association classes
--     * Slot: knowledge_source Description: An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.
--     * Slot: primary_knowledge_source Description: The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  "aggregator knowledge source" can be used to capture non-primary sources.
--     * Slot: timepoint Description: a point in time
--     * Slot: original_subject Description: used to hold the original subject of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_predicate Description: used to hold the original relation/predicate that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: original_object Description: used to hold the original object of a relation (or predicate) that an external knowledge source uses before transformation to match the biolink-model specification.
--     * Slot: subject_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_category Description: Used to hold the biolink class/category of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: subject_namespace Description: Used to hold the subject namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: object_namespace Description: Used to hold the object namespace of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
--     * Slot: id Description: A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI
--     * Slot: iri Description: An IRI for an entity. This is determined by the id using expansion rules.
--     * Slot: name Description: A human-readable name for an attribute or entity.
--     * Slot: description Description: a human-readable description of an entity
--     * Slot: deprecated Description: A boolean flag indicating that an entity is no longer considered current or valid.
-- # Class: "predicate mapping_exact_match" Description: ""
--     * Slot: predicate mapping_id Description: Autocreated FK slot
--     * Slot: exact_match_id Description: holds between two entities that have strictly equivalent meanings, with a high degree of confidence
-- # Class: "predicate mapping_narrow_match" Description: ""
--     * Slot: predicate mapping_id Description: Autocreated FK slot
--     * Slot: narrow_match_id Description: a list of terms from different schemas or terminology systems that have a narrower, more specific meaning. Narrower terms are typically shown as children in a hierarchy or tree.
-- # Class: "predicate mapping_broad_match" Description: ""
--     * Slot: predicate mapping_id Description: Autocreated FK slot
--     * Slot: broad_match_id Description: a list of terms from different schemas or terminology systems that have a broader, more general meaning. Broader terms are typically shown as parents in a hierarchy or tree.
-- # Class: "attribute_has_quantitative_value" Description: ""
--     * Slot: attribute_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "attribute_provided_by" Description: ""
--     * Slot: attribute_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "attribute_xref" Description: ""
--     * Slot: attribute_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "attribute_synonym" Description: ""
--     * Slot: attribute_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "attribute_category" Description: ""
--     * Slot: attribute_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "attribute_type" Description: ""
--     * Slot: attribute_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "attribute_has_attribute" Description: ""
--     * Slot: attribute_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "chemical role_has_quantitative_value" Description: ""
--     * Slot: chemical role_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "chemical role_provided_by" Description: ""
--     * Slot: chemical role_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "chemical role_xref" Description: ""
--     * Slot: chemical role_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "chemical role_synonym" Description: ""
--     * Slot: chemical role_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "chemical role_category" Description: ""
--     * Slot: chemical role_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "chemical role_type" Description: ""
--     * Slot: chemical role_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "chemical role_has_attribute" Description: ""
--     * Slot: chemical role_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "biological sex_has_quantitative_value" Description: ""
--     * Slot: biological sex_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "biological sex_provided_by" Description: ""
--     * Slot: biological sex_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "biological sex_xref" Description: ""
--     * Slot: biological sex_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "biological sex_synonym" Description: ""
--     * Slot: biological sex_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "biological sex_category" Description: ""
--     * Slot: biological sex_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "biological sex_type" Description: ""
--     * Slot: biological sex_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "biological sex_has_attribute" Description: ""
--     * Slot: biological sex_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "phenotypic sex_has_quantitative_value" Description: ""
--     * Slot: phenotypic sex_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "phenotypic sex_provided_by" Description: ""
--     * Slot: phenotypic sex_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "phenotypic sex_xref" Description: ""
--     * Slot: phenotypic sex_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "phenotypic sex_synonym" Description: ""
--     * Slot: phenotypic sex_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "phenotypic sex_category" Description: ""
--     * Slot: phenotypic sex_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "phenotypic sex_type" Description: ""
--     * Slot: phenotypic sex_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "phenotypic sex_has_attribute" Description: ""
--     * Slot: phenotypic sex_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "genotypic sex_has_quantitative_value" Description: ""
--     * Slot: genotypic sex_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "genotypic sex_provided_by" Description: ""
--     * Slot: genotypic sex_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "genotypic sex_xref" Description: ""
--     * Slot: genotypic sex_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "genotypic sex_synonym" Description: ""
--     * Slot: genotypic sex_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "genotypic sex_category" Description: ""
--     * Slot: genotypic sex_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "genotypic sex_type" Description: ""
--     * Slot: genotypic sex_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "genotypic sex_has_attribute" Description: ""
--     * Slot: genotypic sex_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "severity value_has_quantitative_value" Description: ""
--     * Slot: severity value_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "severity value_provided_by" Description: ""
--     * Slot: severity value_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "severity value_xref" Description: ""
--     * Slot: severity value_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "severity value_synonym" Description: ""
--     * Slot: severity value_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "severity value_category" Description: ""
--     * Slot: severity value_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "severity value_type" Description: ""
--     * Slot: severity value_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "severity value_has_attribute" Description: ""
--     * Slot: severity value_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "entity_category" Description: ""
--     * Slot: entity_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "entity_type" Description: ""
--     * Slot: entity_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "entity_has_attribute" Description: ""
--     * Slot: entity_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "named thing_provided_by" Description: ""
--     * Slot: named thing_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "named thing_xref" Description: ""
--     * Slot: named thing_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "named thing_synonym" Description: ""
--     * Slot: named thing_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "named thing_category" Description: ""
--     * Slot: named thing_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "named thing_type" Description: ""
--     * Slot: named thing_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "named thing_has_attribute" Description: ""
--     * Slot: named thing_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "organism taxon_provided_by" Description: ""
--     * Slot: organism taxon_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "organism taxon_xref" Description: ""
--     * Slot: organism taxon_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "organism taxon_synonym" Description: ""
--     * Slot: organism taxon_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "organism taxon_category" Description: ""
--     * Slot: organism taxon_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "organism taxon_type" Description: ""
--     * Slot: organism taxon_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "organism taxon_has_attribute" Description: ""
--     * Slot: organism taxon_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "event_provided_by" Description: ""
--     * Slot: event_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "event_xref" Description: ""
--     * Slot: event_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "event_synonym" Description: ""
--     * Slot: event_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "event_category" Description: ""
--     * Slot: event_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "event_type" Description: ""
--     * Slot: event_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "event_has_attribute" Description: ""
--     * Slot: event_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "administrative entity_provided_by" Description: ""
--     * Slot: administrative entity_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "administrative entity_xref" Description: ""
--     * Slot: administrative entity_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "administrative entity_synonym" Description: ""
--     * Slot: administrative entity_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "administrative entity_category" Description: ""
--     * Slot: administrative entity_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "administrative entity_type" Description: ""
--     * Slot: administrative entity_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "administrative entity_has_attribute" Description: ""
--     * Slot: administrative entity_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "study result_provided_by" Description: ""
--     * Slot: study result_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "study result_xref" Description: ""
--     * Slot: study result_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "study result_synonym" Description: ""
--     * Slot: study result_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "study result_category" Description: ""
--     * Slot: study result_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "study result_type" Description: ""
--     * Slot: study result_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "study result_has_attribute" Description: ""
--     * Slot: study result_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "study_provided_by" Description: ""
--     * Slot: study_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "study_xref" Description: ""
--     * Slot: study_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "study_synonym" Description: ""
--     * Slot: study_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "study_category" Description: ""
--     * Slot: study_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "study_type" Description: ""
--     * Slot: study_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "study_has_attribute" Description: ""
--     * Slot: study_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "study variable_provided_by" Description: ""
--     * Slot: study variable_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "study variable_xref" Description: ""
--     * Slot: study variable_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "study variable_synonym" Description: ""
--     * Slot: study variable_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "study variable_category" Description: ""
--     * Slot: study variable_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "study variable_type" Description: ""
--     * Slot: study variable_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "study variable_has_attribute" Description: ""
--     * Slot: study variable_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "common data element_provided_by" Description: ""
--     * Slot: common data element_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "common data element_xref" Description: ""
--     * Slot: common data element_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "common data element_synonym" Description: ""
--     * Slot: common data element_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "common data element_category" Description: ""
--     * Slot: common data element_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "common data element_type" Description: ""
--     * Slot: common data element_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "common data element_has_attribute" Description: ""
--     * Slot: common data element_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "concept count analysis result_provided_by" Description: ""
--     * Slot: concept count analysis result_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "concept count analysis result_xref" Description: ""
--     * Slot: concept count analysis result_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "concept count analysis result_synonym" Description: ""
--     * Slot: concept count analysis result_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "concept count analysis result_category" Description: ""
--     * Slot: concept count analysis result_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "concept count analysis result_type" Description: ""
--     * Slot: concept count analysis result_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "concept count analysis result_has_attribute" Description: ""
--     * Slot: concept count analysis result_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "observed expected frequency analysis result_provided_by" Description: ""
--     * Slot: observed expected frequency analysis result_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "observed expected frequency analysis result_xref" Description: ""
--     * Slot: observed expected frequency analysis result_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "observed expected frequency analysis result_synonym" Description: ""
--     * Slot: observed expected frequency analysis result_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "observed expected frequency analysis result_category" Description: ""
--     * Slot: observed expected frequency analysis result_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "observed expected frequency analysis result_type" Description: ""
--     * Slot: observed expected frequency analysis result_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "observed expected frequency analysis result_has_attribute" Description: ""
--     * Slot: observed expected frequency analysis result_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "relative frequency analysis result_provided_by" Description: ""
--     * Slot: relative frequency analysis result_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "relative frequency analysis result_xref" Description: ""
--     * Slot: relative frequency analysis result_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "relative frequency analysis result_synonym" Description: ""
--     * Slot: relative frequency analysis result_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "relative frequency analysis result_category" Description: ""
--     * Slot: relative frequency analysis result_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "relative frequency analysis result_type" Description: ""
--     * Slot: relative frequency analysis result_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "relative frequency analysis result_has_attribute" Description: ""
--     * Slot: relative frequency analysis result_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "text mining result_provided_by" Description: ""
--     * Slot: text mining result_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "text mining result_xref" Description: ""
--     * Slot: text mining result_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "text mining result_synonym" Description: ""
--     * Slot: text mining result_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "text mining result_category" Description: ""
--     * Slot: text mining result_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "text mining result_type" Description: ""
--     * Slot: text mining result_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "text mining result_has_attribute" Description: ""
--     * Slot: text mining result_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "chi squared analysis result_provided_by" Description: ""
--     * Slot: chi squared analysis result_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "chi squared analysis result_xref" Description: ""
--     * Slot: chi squared analysis result_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "chi squared analysis result_synonym" Description: ""
--     * Slot: chi squared analysis result_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "chi squared analysis result_category" Description: ""
--     * Slot: chi squared analysis result_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "chi squared analysis result_type" Description: ""
--     * Slot: chi squared analysis result_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "chi squared analysis result_has_attribute" Description: ""
--     * Slot: chi squared analysis result_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "log odds analysis result_provided_by" Description: ""
--     * Slot: log odds analysis result_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "log odds analysis result_xref" Description: ""
--     * Slot: log odds analysis result_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "log odds analysis result_synonym" Description: ""
--     * Slot: log odds analysis result_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "log odds analysis result_category" Description: ""
--     * Slot: log odds analysis result_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "log odds analysis result_type" Description: ""
--     * Slot: log odds analysis result_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "log odds analysis result_has_attribute" Description: ""
--     * Slot: log odds analysis result_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "agent_affiliation" Description: ""
--     * Slot: agent_id Description: Autocreated FK slot
--     * Slot: affiliation Description: a professional relationship between one provider (often a person) within another provider (often an organization). Target provider identity should be specified by a CURIE. Providers may have multiple affiliations.
-- # Class: "agent_provided_by" Description: ""
--     * Slot: agent_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "agent_xref" Description: ""
--     * Slot: agent_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "agent_synonym" Description: ""
--     * Slot: agent_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "agent_category" Description: ""
--     * Slot: agent_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "agent_type" Description: ""
--     * Slot: agent_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "agent_has_attribute" Description: ""
--     * Slot: agent_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "information content entity_provided_by" Description: ""
--     * Slot: information content entity_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "information content entity_xref" Description: ""
--     * Slot: information content entity_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "information content entity_synonym" Description: ""
--     * Slot: information content entity_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "information content entity_category" Description: ""
--     * Slot: information content entity_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "information content entity_type" Description: ""
--     * Slot: information content entity_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "information content entity_has_attribute" Description: ""
--     * Slot: information content entity_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "dataset_provided_by" Description: ""
--     * Slot: dataset_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "dataset_xref" Description: ""
--     * Slot: dataset_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "dataset_synonym" Description: ""
--     * Slot: dataset_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "dataset_category" Description: ""
--     * Slot: dataset_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "dataset_type" Description: ""
--     * Slot: dataset_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "dataset_has_attribute" Description: ""
--     * Slot: dataset_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "dataset distribution_provided_by" Description: ""
--     * Slot: dataset distribution_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "dataset distribution_xref" Description: ""
--     * Slot: dataset distribution_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "dataset distribution_synonym" Description: ""
--     * Slot: dataset distribution_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "dataset distribution_category" Description: ""
--     * Slot: dataset distribution_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "dataset distribution_type" Description: ""
--     * Slot: dataset distribution_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "dataset distribution_has_attribute" Description: ""
--     * Slot: dataset distribution_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "dataset version_provided_by" Description: ""
--     * Slot: dataset version_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "dataset version_xref" Description: ""
--     * Slot: dataset version_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "dataset version_synonym" Description: ""
--     * Slot: dataset version_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "dataset version_category" Description: ""
--     * Slot: dataset version_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "dataset version_type" Description: ""
--     * Slot: dataset version_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "dataset version_has_attribute" Description: ""
--     * Slot: dataset version_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "dataset summary_provided_by" Description: ""
--     * Slot: dataset summary_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "dataset summary_xref" Description: ""
--     * Slot: dataset summary_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "dataset summary_synonym" Description: ""
--     * Slot: dataset summary_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "dataset summary_category" Description: ""
--     * Slot: dataset summary_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "dataset summary_type" Description: ""
--     * Slot: dataset summary_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "dataset summary_has_attribute" Description: ""
--     * Slot: dataset summary_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "confidence level_provided_by" Description: ""
--     * Slot: confidence level_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "confidence level_xref" Description: ""
--     * Slot: confidence level_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "confidence level_synonym" Description: ""
--     * Slot: confidence level_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "confidence level_category" Description: ""
--     * Slot: confidence level_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "confidence level_type" Description: ""
--     * Slot: confidence level_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "confidence level_has_attribute" Description: ""
--     * Slot: confidence level_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "evidence type_provided_by" Description: ""
--     * Slot: evidence type_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "evidence type_xref" Description: ""
--     * Slot: evidence type_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "evidence type_synonym" Description: ""
--     * Slot: evidence type_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "evidence type_category" Description: ""
--     * Slot: evidence type_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "evidence type_type" Description: ""
--     * Slot: evidence type_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "evidence type_has_attribute" Description: ""
--     * Slot: evidence type_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "publication_authors" Description: ""
--     * Slot: publication_id Description: Autocreated FK slot
--     * Slot: authors_id Description: connects an publication to the list of authors who contributed to the publication. This property should be a comma-delimited list of author names. It is recommended that an author's name be formatted as "surname, firstname initial.".   Note that this property is a node annotation expressing the citation list of authorship which might typically otherwise be more completely documented in biolink:PublicationToProviderAssociation defined edges which point to full details about an author and possibly, some qualifiers which clarify the specific status of a given author in the publication.
-- # Class: "publication_pages" Description: ""
--     * Slot: publication_id Description: Autocreated FK slot
--     * Slot: pages Description: When a 2-tuple of page numbers are provided, they represent the start and end page of the publication within its parent publication context. For books, this may be set to the total number of pages of the book.
-- # Class: "publication_keywords" Description: ""
--     * Slot: publication_id Description: Autocreated FK slot
--     * Slot: keywords Description: keywords tagging a publication
-- # Class: "publication_mesh_terms" Description: ""
--     * Slot: publication_id Description: Autocreated FK slot
--     * Slot: mesh_terms Description: mesh terms tagging a publication
-- # Class: "publication_xref" Description: ""
--     * Slot: publication_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "publication_publication_type" Description: ""
--     * Slot: publication_id Description: Autocreated FK slot
--     * Slot: publication_type Description: Ontology term for publication type may be drawn from Dublin Core types (https://www.dublincore.org/specifications/dublin-core/dcmi-type-vocabulary/), FRBR-aligned Bibliographic Ontology (https://sparontologies.github.io/fabio/current/fabio.html), the MESH publication types (https://www.nlm.nih.gov/mesh/pubtypes.html), the Confederation of Open Access Repositories (COAR) Controlled Vocabulary for Resource Type Genres (http://vocabularies.coar-repositories.org/documentation/resource_types/), Wikidata (https://www.wikidata.org/wiki/Wikidata:Publication_types), or equivalent publication type ontology. When a given publication type ontology term is used within a given knowledge graph, then the CURIE identified term must be documented in the graph as a concept node of biolink:category biolink:OntologyClass.
-- # Class: "publication_provided_by" Description: ""
--     * Slot: publication_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "publication_synonym" Description: ""
--     * Slot: publication_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "publication_category" Description: ""
--     * Slot: publication_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "publication_type" Description: ""
--     * Slot: publication_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "publication_has_attribute" Description: ""
--     * Slot: publication_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "book_authors" Description: ""
--     * Slot: book_id Description: Autocreated FK slot
--     * Slot: authors_id Description: connects an publication to the list of authors who contributed to the publication. This property should be a comma-delimited list of author names. It is recommended that an author's name be formatted as "surname, firstname initial.".   Note that this property is a node annotation expressing the citation list of authorship which might typically otherwise be more completely documented in biolink:PublicationToProviderAssociation defined edges which point to full details about an author and possibly, some qualifiers which clarify the specific status of a given author in the publication.
-- # Class: "book_pages" Description: ""
--     * Slot: book_id Description: Autocreated FK slot
--     * Slot: pages Description: When a 2-tuple of page numbers are provided, they represent the start and end page of the publication within its parent publication context. For books, this may be set to the total number of pages of the book.
-- # Class: "book_keywords" Description: ""
--     * Slot: book_id Description: Autocreated FK slot
--     * Slot: keywords Description: keywords tagging a publication
-- # Class: "book_mesh_terms" Description: ""
--     * Slot: book_id Description: Autocreated FK slot
--     * Slot: mesh_terms Description: mesh terms tagging a publication
-- # Class: "book_xref" Description: ""
--     * Slot: book_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "book_publication_type" Description: ""
--     * Slot: book_id Description: Autocreated FK slot
--     * Slot: publication_type Description: Ontology term for publication type may be drawn from Dublin Core types (https://www.dublincore.org/specifications/dublin-core/dcmi-type-vocabulary/), FRBR-aligned Bibliographic Ontology (https://sparontologies.github.io/fabio/current/fabio.html), the MESH publication types (https://www.nlm.nih.gov/mesh/pubtypes.html), the Confederation of Open Access Repositories (COAR) Controlled Vocabulary for Resource Type Genres (http://vocabularies.coar-repositories.org/documentation/resource_types/), Wikidata (https://www.wikidata.org/wiki/Wikidata:Publication_types), or equivalent publication type ontology. When a given publication type ontology term is used within a given knowledge graph, then the CURIE identified term must be documented in the graph as a concept node of biolink:category biolink:OntologyClass.
-- # Class: "book_provided_by" Description: ""
--     * Slot: book_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "book_synonym" Description: ""
--     * Slot: book_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "book_category" Description: ""
--     * Slot: book_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "book_type" Description: ""
--     * Slot: book_id Description: Autocreated FK slot
--     * Slot: type Description: Should generally be set to an ontology class defined term for 'book'.
-- # Class: "book_has_attribute" Description: ""
--     * Slot: book_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "book chapter_authors" Description: ""
--     * Slot: book chapter_id Description: Autocreated FK slot
--     * Slot: authors_id Description: connects an publication to the list of authors who contributed to the publication. This property should be a comma-delimited list of author names. It is recommended that an author's name be formatted as "surname, firstname initial.".   Note that this property is a node annotation expressing the citation list of authorship which might typically otherwise be more completely documented in biolink:PublicationToProviderAssociation defined edges which point to full details about an author and possibly, some qualifiers which clarify the specific status of a given author in the publication.
-- # Class: "book chapter_pages" Description: ""
--     * Slot: book chapter_id Description: Autocreated FK slot
--     * Slot: pages Description: When a 2-tuple of page numbers are provided, they represent the start and end page of the publication within its parent publication context. For books, this may be set to the total number of pages of the book.
-- # Class: "book chapter_keywords" Description: ""
--     * Slot: book chapter_id Description: Autocreated FK slot
--     * Slot: keywords Description: keywords tagging a publication
-- # Class: "book chapter_mesh_terms" Description: ""
--     * Slot: book chapter_id Description: Autocreated FK slot
--     * Slot: mesh_terms Description: mesh terms tagging a publication
-- # Class: "book chapter_xref" Description: ""
--     * Slot: book chapter_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "book chapter_publication_type" Description: ""
--     * Slot: book chapter_id Description: Autocreated FK slot
--     * Slot: publication_type Description: Ontology term for publication type may be drawn from Dublin Core types (https://www.dublincore.org/specifications/dublin-core/dcmi-type-vocabulary/), FRBR-aligned Bibliographic Ontology (https://sparontologies.github.io/fabio/current/fabio.html), the MESH publication types (https://www.nlm.nih.gov/mesh/pubtypes.html), the Confederation of Open Access Repositories (COAR) Controlled Vocabulary for Resource Type Genres (http://vocabularies.coar-repositories.org/documentation/resource_types/), Wikidata (https://www.wikidata.org/wiki/Wikidata:Publication_types), or equivalent publication type ontology. When a given publication type ontology term is used within a given knowledge graph, then the CURIE identified term must be documented in the graph as a concept node of biolink:category biolink:OntologyClass.
-- # Class: "book chapter_provided_by" Description: ""
--     * Slot: book chapter_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "book chapter_synonym" Description: ""
--     * Slot: book chapter_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "book chapter_category" Description: ""
--     * Slot: book chapter_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "book chapter_type" Description: ""
--     * Slot: book chapter_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "book chapter_has_attribute" Description: ""
--     * Slot: book chapter_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "serial_authors" Description: ""
--     * Slot: serial_id Description: Autocreated FK slot
--     * Slot: authors_id Description: connects an publication to the list of authors who contributed to the publication. This property should be a comma-delimited list of author names. It is recommended that an author's name be formatted as "surname, firstname initial.".   Note that this property is a node annotation expressing the citation list of authorship which might typically otherwise be more completely documented in biolink:PublicationToProviderAssociation defined edges which point to full details about an author and possibly, some qualifiers which clarify the specific status of a given author in the publication.
-- # Class: "serial_pages" Description: ""
--     * Slot: serial_id Description: Autocreated FK slot
--     * Slot: pages Description: When a 2-tuple of page numbers are provided, they represent the start and end page of the publication within its parent publication context. For books, this may be set to the total number of pages of the book.
-- # Class: "serial_keywords" Description: ""
--     * Slot: serial_id Description: Autocreated FK slot
--     * Slot: keywords Description: keywords tagging a publication
-- # Class: "serial_mesh_terms" Description: ""
--     * Slot: serial_id Description: Autocreated FK slot
--     * Slot: mesh_terms Description: mesh terms tagging a publication
-- # Class: "serial_xref" Description: ""
--     * Slot: serial_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "serial_publication_type" Description: ""
--     * Slot: serial_id Description: Autocreated FK slot
--     * Slot: publication_type Description: Ontology term for publication type may be drawn from Dublin Core types (https://www.dublincore.org/specifications/dublin-core/dcmi-type-vocabulary/), FRBR-aligned Bibliographic Ontology (https://sparontologies.github.io/fabio/current/fabio.html), the MESH publication types (https://www.nlm.nih.gov/mesh/pubtypes.html), the Confederation of Open Access Repositories (COAR) Controlled Vocabulary for Resource Type Genres (http://vocabularies.coar-repositories.org/documentation/resource_types/), Wikidata (https://www.wikidata.org/wiki/Wikidata:Publication_types), or equivalent publication type ontology. When a given publication type ontology term is used within a given knowledge graph, then the CURIE identified term must be documented in the graph as a concept node of biolink:category biolink:OntologyClass.
-- # Class: "serial_provided_by" Description: ""
--     * Slot: serial_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "serial_synonym" Description: ""
--     * Slot: serial_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "serial_category" Description: ""
--     * Slot: serial_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "serial_type" Description: ""
--     * Slot: serial_id Description: Autocreated FK slot
--     * Slot: type Description: Should generally be set to an ontology class defined term for 'serial' or 'journal'.
-- # Class: "serial_has_attribute" Description: ""
--     * Slot: serial_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "article_authors" Description: ""
--     * Slot: article_id Description: Autocreated FK slot
--     * Slot: authors_id Description: connects an publication to the list of authors who contributed to the publication. This property should be a comma-delimited list of author names. It is recommended that an author's name be formatted as "surname, firstname initial.".   Note that this property is a node annotation expressing the citation list of authorship which might typically otherwise be more completely documented in biolink:PublicationToProviderAssociation defined edges which point to full details about an author and possibly, some qualifiers which clarify the specific status of a given author in the publication.
-- # Class: "article_pages" Description: ""
--     * Slot: article_id Description: Autocreated FK slot
--     * Slot: pages Description: When a 2-tuple of page numbers are provided, they represent the start and end page of the publication within its parent publication context. For books, this may be set to the total number of pages of the book.
-- # Class: "article_keywords" Description: ""
--     * Slot: article_id Description: Autocreated FK slot
--     * Slot: keywords Description: keywords tagging a publication
-- # Class: "article_mesh_terms" Description: ""
--     * Slot: article_id Description: Autocreated FK slot
--     * Slot: mesh_terms Description: mesh terms tagging a publication
-- # Class: "article_xref" Description: ""
--     * Slot: article_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "article_publication_type" Description: ""
--     * Slot: article_id Description: Autocreated FK slot
--     * Slot: publication_type Description: Ontology term for publication type may be drawn from Dublin Core types (https://www.dublincore.org/specifications/dublin-core/dcmi-type-vocabulary/), FRBR-aligned Bibliographic Ontology (https://sparontologies.github.io/fabio/current/fabio.html), the MESH publication types (https://www.nlm.nih.gov/mesh/pubtypes.html), the Confederation of Open Access Repositories (COAR) Controlled Vocabulary for Resource Type Genres (http://vocabularies.coar-repositories.org/documentation/resource_types/), Wikidata (https://www.wikidata.org/wiki/Wikidata:Publication_types), or equivalent publication type ontology. When a given publication type ontology term is used within a given knowledge graph, then the CURIE identified term must be documented in the graph as a concept node of biolink:category biolink:OntologyClass.
-- # Class: "article_provided_by" Description: ""
--     * Slot: article_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "article_synonym" Description: ""
--     * Slot: article_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "article_category" Description: ""
--     * Slot: article_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "article_type" Description: ""
--     * Slot: article_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "article_has_attribute" Description: ""
--     * Slot: article_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "journal article_authors" Description: ""
--     * Slot: journal article_id Description: Autocreated FK slot
--     * Slot: authors_id Description: connects an publication to the list of authors who contributed to the publication. This property should be a comma-delimited list of author names. It is recommended that an author's name be formatted as "surname, firstname initial.".   Note that this property is a node annotation expressing the citation list of authorship which might typically otherwise be more completely documented in biolink:PublicationToProviderAssociation defined edges which point to full details about an author and possibly, some qualifiers which clarify the specific status of a given author in the publication.
-- # Class: "journal article_pages" Description: ""
--     * Slot: journal article_id Description: Autocreated FK slot
--     * Slot: pages Description: When a 2-tuple of page numbers are provided, they represent the start and end page of the publication within its parent publication context. For books, this may be set to the total number of pages of the book.
-- # Class: "journal article_keywords" Description: ""
--     * Slot: journal article_id Description: Autocreated FK slot
--     * Slot: keywords Description: keywords tagging a publication
-- # Class: "journal article_mesh_terms" Description: ""
--     * Slot: journal article_id Description: Autocreated FK slot
--     * Slot: mesh_terms Description: mesh terms tagging a publication
-- # Class: "journal article_xref" Description: ""
--     * Slot: journal article_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "journal article_publication_type" Description: ""
--     * Slot: journal article_id Description: Autocreated FK slot
--     * Slot: publication_type Description: Ontology term for publication type may be drawn from Dublin Core types (https://www.dublincore.org/specifications/dublin-core/dcmi-type-vocabulary/), FRBR-aligned Bibliographic Ontology (https://sparontologies.github.io/fabio/current/fabio.html), the MESH publication types (https://www.nlm.nih.gov/mesh/pubtypes.html), the Confederation of Open Access Repositories (COAR) Controlled Vocabulary for Resource Type Genres (http://vocabularies.coar-repositories.org/documentation/resource_types/), Wikidata (https://www.wikidata.org/wiki/Wikidata:Publication_types), or equivalent publication type ontology. When a given publication type ontology term is used within a given knowledge graph, then the CURIE identified term must be documented in the graph as a concept node of biolink:category biolink:OntologyClass.
-- # Class: "journal article_provided_by" Description: ""
--     * Slot: journal article_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "journal article_synonym" Description: ""
--     * Slot: journal article_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "journal article_category" Description: ""
--     * Slot: journal article_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "journal article_type" Description: ""
--     * Slot: journal article_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "journal article_has_attribute" Description: ""
--     * Slot: journal article_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "patent_authors" Description: ""
--     * Slot: patent_id Description: Autocreated FK slot
--     * Slot: authors_id Description: connects an publication to the list of authors who contributed to the publication. This property should be a comma-delimited list of author names. It is recommended that an author's name be formatted as "surname, firstname initial.".   Note that this property is a node annotation expressing the citation list of authorship which might typically otherwise be more completely documented in biolink:PublicationToProviderAssociation defined edges which point to full details about an author and possibly, some qualifiers which clarify the specific status of a given author in the publication.
-- # Class: "patent_pages" Description: ""
--     * Slot: patent_id Description: Autocreated FK slot
--     * Slot: pages Description: When a 2-tuple of page numbers are provided, they represent the start and end page of the publication within its parent publication context. For books, this may be set to the total number of pages of the book.
-- # Class: "patent_keywords" Description: ""
--     * Slot: patent_id Description: Autocreated FK slot
--     * Slot: keywords Description: keywords tagging a publication
-- # Class: "patent_mesh_terms" Description: ""
--     * Slot: patent_id Description: Autocreated FK slot
--     * Slot: mesh_terms Description: mesh terms tagging a publication
-- # Class: "patent_xref" Description: ""
--     * Slot: patent_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "patent_publication_type" Description: ""
--     * Slot: patent_id Description: Autocreated FK slot
--     * Slot: publication_type Description: Ontology term for publication type may be drawn from Dublin Core types (https://www.dublincore.org/specifications/dublin-core/dcmi-type-vocabulary/), FRBR-aligned Bibliographic Ontology (https://sparontologies.github.io/fabio/current/fabio.html), the MESH publication types (https://www.nlm.nih.gov/mesh/pubtypes.html), the Confederation of Open Access Repositories (COAR) Controlled Vocabulary for Resource Type Genres (http://vocabularies.coar-repositories.org/documentation/resource_types/), Wikidata (https://www.wikidata.org/wiki/Wikidata:Publication_types), or equivalent publication type ontology. When a given publication type ontology term is used within a given knowledge graph, then the CURIE identified term must be documented in the graph as a concept node of biolink:category biolink:OntologyClass.
-- # Class: "patent_provided_by" Description: ""
--     * Slot: patent_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "patent_synonym" Description: ""
--     * Slot: patent_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "patent_category" Description: ""
--     * Slot: patent_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "patent_type" Description: ""
--     * Slot: patent_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "patent_has_attribute" Description: ""
--     * Slot: patent_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "web page_authors" Description: ""
--     * Slot: web page_id Description: Autocreated FK slot
--     * Slot: authors_id Description: connects an publication to the list of authors who contributed to the publication. This property should be a comma-delimited list of author names. It is recommended that an author's name be formatted as "surname, firstname initial.".   Note that this property is a node annotation expressing the citation list of authorship which might typically otherwise be more completely documented in biolink:PublicationToProviderAssociation defined edges which point to full details about an author and possibly, some qualifiers which clarify the specific status of a given author in the publication.
-- # Class: "web page_pages" Description: ""
--     * Slot: web page_id Description: Autocreated FK slot
--     * Slot: pages Description: When a 2-tuple of page numbers are provided, they represent the start and end page of the publication within its parent publication context. For books, this may be set to the total number of pages of the book.
-- # Class: "web page_keywords" Description: ""
--     * Slot: web page_id Description: Autocreated FK slot
--     * Slot: keywords Description: keywords tagging a publication
-- # Class: "web page_mesh_terms" Description: ""
--     * Slot: web page_id Description: Autocreated FK slot
--     * Slot: mesh_terms Description: mesh terms tagging a publication
-- # Class: "web page_xref" Description: ""
--     * Slot: web page_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "web page_publication_type" Description: ""
--     * Slot: web page_id Description: Autocreated FK slot
--     * Slot: publication_type Description: Ontology term for publication type may be drawn from Dublin Core types (https://www.dublincore.org/specifications/dublin-core/dcmi-type-vocabulary/), FRBR-aligned Bibliographic Ontology (https://sparontologies.github.io/fabio/current/fabio.html), the MESH publication types (https://www.nlm.nih.gov/mesh/pubtypes.html), the Confederation of Open Access Repositories (COAR) Controlled Vocabulary for Resource Type Genres (http://vocabularies.coar-repositories.org/documentation/resource_types/), Wikidata (https://www.wikidata.org/wiki/Wikidata:Publication_types), or equivalent publication type ontology. When a given publication type ontology term is used within a given knowledge graph, then the CURIE identified term must be documented in the graph as a concept node of biolink:category biolink:OntologyClass.
-- # Class: "web page_provided_by" Description: ""
--     * Slot: web page_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "web page_synonym" Description: ""
--     * Slot: web page_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "web page_category" Description: ""
--     * Slot: web page_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "web page_type" Description: ""
--     * Slot: web page_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "web page_has_attribute" Description: ""
--     * Slot: web page_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "preprint publication_authors" Description: ""
--     * Slot: preprint publication_id Description: Autocreated FK slot
--     * Slot: authors_id Description: connects an publication to the list of authors who contributed to the publication. This property should be a comma-delimited list of author names. It is recommended that an author's name be formatted as "surname, firstname initial.".   Note that this property is a node annotation expressing the citation list of authorship which might typically otherwise be more completely documented in biolink:PublicationToProviderAssociation defined edges which point to full details about an author and possibly, some qualifiers which clarify the specific status of a given author in the publication.
-- # Class: "preprint publication_pages" Description: ""
--     * Slot: preprint publication_id Description: Autocreated FK slot
--     * Slot: pages Description: When a 2-tuple of page numbers are provided, they represent the start and end page of the publication within its parent publication context. For books, this may be set to the total number of pages of the book.
-- # Class: "preprint publication_keywords" Description: ""
--     * Slot: preprint publication_id Description: Autocreated FK slot
--     * Slot: keywords Description: keywords tagging a publication
-- # Class: "preprint publication_mesh_terms" Description: ""
--     * Slot: preprint publication_id Description: Autocreated FK slot
--     * Slot: mesh_terms Description: mesh terms tagging a publication
-- # Class: "preprint publication_xref" Description: ""
--     * Slot: preprint publication_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "preprint publication_publication_type" Description: ""
--     * Slot: preprint publication_id Description: Autocreated FK slot
--     * Slot: publication_type Description: Ontology term for publication type may be drawn from Dublin Core types (https://www.dublincore.org/specifications/dublin-core/dcmi-type-vocabulary/), FRBR-aligned Bibliographic Ontology (https://sparontologies.github.io/fabio/current/fabio.html), the MESH publication types (https://www.nlm.nih.gov/mesh/pubtypes.html), the Confederation of Open Access Repositories (COAR) Controlled Vocabulary for Resource Type Genres (http://vocabularies.coar-repositories.org/documentation/resource_types/), Wikidata (https://www.wikidata.org/wiki/Wikidata:Publication_types), or equivalent publication type ontology. When a given publication type ontology term is used within a given knowledge graph, then the CURIE identified term must be documented in the graph as a concept node of biolink:category biolink:OntologyClass.
-- # Class: "preprint publication_provided_by" Description: ""
--     * Slot: preprint publication_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "preprint publication_synonym" Description: ""
--     * Slot: preprint publication_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "preprint publication_category" Description: ""
--     * Slot: preprint publication_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "preprint publication_type" Description: ""
--     * Slot: preprint publication_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "preprint publication_has_attribute" Description: ""
--     * Slot: preprint publication_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "drug label_authors" Description: ""
--     * Slot: drug label_id Description: Autocreated FK slot
--     * Slot: authors_id Description: connects an publication to the list of authors who contributed to the publication. This property should be a comma-delimited list of author names. It is recommended that an author's name be formatted as "surname, firstname initial.".   Note that this property is a node annotation expressing the citation list of authorship which might typically otherwise be more completely documented in biolink:PublicationToProviderAssociation defined edges which point to full details about an author and possibly, some qualifiers which clarify the specific status of a given author in the publication.
-- # Class: "drug label_pages" Description: ""
--     * Slot: drug label_id Description: Autocreated FK slot
--     * Slot: pages Description: When a 2-tuple of page numbers are provided, they represent the start and end page of the publication within its parent publication context. For books, this may be set to the total number of pages of the book.
-- # Class: "drug label_keywords" Description: ""
--     * Slot: drug label_id Description: Autocreated FK slot
--     * Slot: keywords Description: keywords tagging a publication
-- # Class: "drug label_mesh_terms" Description: ""
--     * Slot: drug label_id Description: Autocreated FK slot
--     * Slot: mesh_terms Description: mesh terms tagging a publication
-- # Class: "drug label_xref" Description: ""
--     * Slot: drug label_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "drug label_publication_type" Description: ""
--     * Slot: drug label_id Description: Autocreated FK slot
--     * Slot: publication_type Description: Ontology term for publication type may be drawn from Dublin Core types (https://www.dublincore.org/specifications/dublin-core/dcmi-type-vocabulary/), FRBR-aligned Bibliographic Ontology (https://sparontologies.github.io/fabio/current/fabio.html), the MESH publication types (https://www.nlm.nih.gov/mesh/pubtypes.html), the Confederation of Open Access Repositories (COAR) Controlled Vocabulary for Resource Type Genres (http://vocabularies.coar-repositories.org/documentation/resource_types/), Wikidata (https://www.wikidata.org/wiki/Wikidata:Publication_types), or equivalent publication type ontology. When a given publication type ontology term is used within a given knowledge graph, then the CURIE identified term must be documented in the graph as a concept node of biolink:category biolink:OntologyClass.
-- # Class: "drug label_provided_by" Description: ""
--     * Slot: drug label_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "drug label_synonym" Description: ""
--     * Slot: drug label_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "drug label_category" Description: ""
--     * Slot: drug label_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "drug label_type" Description: ""
--     * Slot: drug label_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "drug label_has_attribute" Description: ""
--     * Slot: drug label_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "retrieval source_xref" Description: ""
--     * Slot: retrieval source_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "retrieval source_provided_by" Description: ""
--     * Slot: retrieval source_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "retrieval source_synonym" Description: ""
--     * Slot: retrieval source_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "retrieval source_category" Description: ""
--     * Slot: retrieval source_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "retrieval source_type" Description: ""
--     * Slot: retrieval source_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "retrieval source_has_attribute" Description: ""
--     * Slot: retrieval source_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "physical entity_provided_by" Description: ""
--     * Slot: physical entity_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "physical entity_xref" Description: ""
--     * Slot: physical entity_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "physical entity_synonym" Description: ""
--     * Slot: physical entity_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "physical entity_category" Description: ""
--     * Slot: physical entity_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "physical entity_type" Description: ""
--     * Slot: physical entity_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "physical entity_has_attribute" Description: ""
--     * Slot: physical entity_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "activity_provided_by" Description: ""
--     * Slot: activity_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "activity_xref" Description: ""
--     * Slot: activity_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "activity_synonym" Description: ""
--     * Slot: activity_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "activity_category" Description: ""
--     * Slot: activity_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "activity_type" Description: ""
--     * Slot: activity_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "activity_has_attribute" Description: ""
--     * Slot: activity_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "procedure_provided_by" Description: ""
--     * Slot: procedure_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "procedure_xref" Description: ""
--     * Slot: procedure_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "procedure_synonym" Description: ""
--     * Slot: procedure_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "procedure_category" Description: ""
--     * Slot: procedure_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "procedure_type" Description: ""
--     * Slot: procedure_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "procedure_has_attribute" Description: ""
--     * Slot: procedure_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "phenomenon_provided_by" Description: ""
--     * Slot: phenomenon_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "phenomenon_xref" Description: ""
--     * Slot: phenomenon_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "phenomenon_synonym" Description: ""
--     * Slot: phenomenon_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "phenomenon_category" Description: ""
--     * Slot: phenomenon_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "phenomenon_type" Description: ""
--     * Slot: phenomenon_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "phenomenon_has_attribute" Description: ""
--     * Slot: phenomenon_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "device_provided_by" Description: ""
--     * Slot: device_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "device_xref" Description: ""
--     * Slot: device_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "device_synonym" Description: ""
--     * Slot: device_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "device_category" Description: ""
--     * Slot: device_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "device_type" Description: ""
--     * Slot: device_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "device_has_attribute" Description: ""
--     * Slot: device_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "diagnostic aid_provided_by" Description: ""
--     * Slot: diagnostic aid_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "diagnostic aid_xref" Description: ""
--     * Slot: diagnostic aid_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "diagnostic aid_synonym" Description: ""
--     * Slot: diagnostic aid_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "diagnostic aid_category" Description: ""
--     * Slot: diagnostic aid_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "diagnostic aid_type" Description: ""
--     * Slot: diagnostic aid_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "diagnostic aid_has_attribute" Description: ""
--     * Slot: diagnostic aid_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "study population_in_taxon" Description: ""
--     * Slot: study population_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "study population_provided_by" Description: ""
--     * Slot: study population_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "study population_xref" Description: ""
--     * Slot: study population_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "study population_synonym" Description: ""
--     * Slot: study population_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "study population_category" Description: ""
--     * Slot: study population_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "study population_type" Description: ""
--     * Slot: study population_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "study population_has_attribute" Description: ""
--     * Slot: study population_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: may often be an organism attribute
-- # Class: "material sample_provided_by" Description: ""
--     * Slot: material sample_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "material sample_xref" Description: ""
--     * Slot: material sample_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "material sample_synonym" Description: ""
--     * Slot: material sample_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "material sample_category" Description: ""
--     * Slot: material sample_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "material sample_type" Description: ""
--     * Slot: material sample_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "material sample_has_attribute" Description: ""
--     * Slot: material sample_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "planetary entity_provided_by" Description: ""
--     * Slot: planetary entity_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "planetary entity_xref" Description: ""
--     * Slot: planetary entity_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "planetary entity_synonym" Description: ""
--     * Slot: planetary entity_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "planetary entity_category" Description: ""
--     * Slot: planetary entity_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "planetary entity_type" Description: ""
--     * Slot: planetary entity_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "planetary entity_has_attribute" Description: ""
--     * Slot: planetary entity_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "environmental process_provided_by" Description: ""
--     * Slot: environmental process_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "environmental process_xref" Description: ""
--     * Slot: environmental process_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "environmental process_synonym" Description: ""
--     * Slot: environmental process_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "environmental process_category" Description: ""
--     * Slot: environmental process_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "environmental process_type" Description: ""
--     * Slot: environmental process_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "environmental process_has_attribute" Description: ""
--     * Slot: environmental process_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "environmental feature_provided_by" Description: ""
--     * Slot: environmental feature_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "environmental feature_xref" Description: ""
--     * Slot: environmental feature_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "environmental feature_synonym" Description: ""
--     * Slot: environmental feature_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "environmental feature_category" Description: ""
--     * Slot: environmental feature_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "environmental feature_type" Description: ""
--     * Slot: environmental feature_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "environmental feature_has_attribute" Description: ""
--     * Slot: environmental feature_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "geographic location_provided_by" Description: ""
--     * Slot: geographic location_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "geographic location_xref" Description: ""
--     * Slot: geographic location_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "geographic location_synonym" Description: ""
--     * Slot: geographic location_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "geographic location_category" Description: ""
--     * Slot: geographic location_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "geographic location_type" Description: ""
--     * Slot: geographic location_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "geographic location_has_attribute" Description: ""
--     * Slot: geographic location_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "geographic location at time_provided_by" Description: ""
--     * Slot: geographic location at time_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "geographic location at time_xref" Description: ""
--     * Slot: geographic location at time_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "geographic location at time_synonym" Description: ""
--     * Slot: geographic location at time_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "geographic location at time_category" Description: ""
--     * Slot: geographic location at time_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "geographic location at time_type" Description: ""
--     * Slot: geographic location at time_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "geographic location at time_has_attribute" Description: ""
--     * Slot: geographic location at time_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "thing with taxon_in_taxon" Description: ""
--     * Slot: thing with taxon_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "biological entity_in_taxon" Description: ""
--     * Slot: biological entity_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "biological entity_provided_by" Description: ""
--     * Slot: biological entity_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "biological entity_xref" Description: ""
--     * Slot: biological entity_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "biological entity_synonym" Description: ""
--     * Slot: biological entity_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "biological entity_category" Description: ""
--     * Slot: biological entity_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "biological entity_type" Description: ""
--     * Slot: biological entity_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "biological entity_has_attribute" Description: ""
--     * Slot: biological entity_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "molecular entity_available_from" Description: ""
--     * Slot: molecular entity_id Description: Autocreated FK slot
--     * Slot: available_from Description: 
-- # Class: "molecular entity_has_chemical_role" Description: ""
--     * Slot: molecular entity_id Description: Autocreated FK slot
--     * Slot: has_chemical_role_id Description: A role is particular behaviour which a chemical entity may exhibit.
-- # Class: "molecular entity_provided_by" Description: ""
--     * Slot: molecular entity_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "molecular entity_xref" Description: ""
--     * Slot: molecular entity_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "molecular entity_synonym" Description: ""
--     * Slot: molecular entity_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "molecular entity_category" Description: ""
--     * Slot: molecular entity_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "molecular entity_type" Description: ""
--     * Slot: molecular entity_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "molecular entity_has_attribute" Description: ""
--     * Slot: molecular entity_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "chemical entity_available_from" Description: ""
--     * Slot: chemical entity_id Description: Autocreated FK slot
--     * Slot: available_from Description: 
-- # Class: "chemical entity_has_chemical_role" Description: ""
--     * Slot: chemical entity_id Description: Autocreated FK slot
--     * Slot: has_chemical_role_id Description: A role is particular behaviour which a chemical entity may exhibit.
-- # Class: "chemical entity_provided_by" Description: ""
--     * Slot: chemical entity_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "chemical entity_xref" Description: ""
--     * Slot: chemical entity_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "chemical entity_synonym" Description: ""
--     * Slot: chemical entity_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "chemical entity_category" Description: ""
--     * Slot: chemical entity_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "chemical entity_type" Description: ""
--     * Slot: chemical entity_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "chemical entity_has_attribute" Description: ""
--     * Slot: chemical entity_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "small molecule_available_from" Description: ""
--     * Slot: small molecule_id Description: Autocreated FK slot
--     * Slot: available_from Description: 
-- # Class: "small molecule_has_chemical_role" Description: ""
--     * Slot: small molecule_id Description: Autocreated FK slot
--     * Slot: has_chemical_role_id Description: A role is particular behaviour which a chemical entity may exhibit.
-- # Class: "small molecule_provided_by" Description: ""
--     * Slot: small molecule_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "small molecule_xref" Description: ""
--     * Slot: small molecule_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "small molecule_synonym" Description: ""
--     * Slot: small molecule_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "small molecule_category" Description: ""
--     * Slot: small molecule_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "small molecule_type" Description: ""
--     * Slot: small molecule_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "small molecule_has_attribute" Description: ""
--     * Slot: small molecule_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "chemical mixture_routes_of_delivery" Description: ""
--     * Slot: chemical mixture_id Description: Autocreated FK slot
--     * Slot: routes_of_delivery Description: the method or process of administering a pharmaceutical compound to achieve a therapeutic effect in humans or animals.
-- # Class: "chemical mixture_available_from" Description: ""
--     * Slot: chemical mixture_id Description: Autocreated FK slot
--     * Slot: available_from Description: 
-- # Class: "chemical mixture_has_chemical_role" Description: ""
--     * Slot: chemical mixture_id Description: Autocreated FK slot
--     * Slot: has_chemical_role_id Description: A role is particular behaviour which a chemical entity may exhibit.
-- # Class: "chemical mixture_provided_by" Description: ""
--     * Slot: chemical mixture_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "chemical mixture_xref" Description: ""
--     * Slot: chemical mixture_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "chemical mixture_synonym" Description: ""
--     * Slot: chemical mixture_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "chemical mixture_category" Description: ""
--     * Slot: chemical mixture_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "chemical mixture_type" Description: ""
--     * Slot: chemical mixture_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "chemical mixture_has_attribute" Description: ""
--     * Slot: chemical mixture_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "nucleic acid entity_in_taxon" Description: ""
--     * Slot: nucleic acid entity_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "nucleic acid entity_available_from" Description: ""
--     * Slot: nucleic acid entity_id Description: Autocreated FK slot
--     * Slot: available_from Description: 
-- # Class: "nucleic acid entity_has_chemical_role" Description: ""
--     * Slot: nucleic acid entity_id Description: Autocreated FK slot
--     * Slot: has_chemical_role_id Description: A role is particular behaviour which a chemical entity may exhibit.
-- # Class: "nucleic acid entity_provided_by" Description: ""
--     * Slot: nucleic acid entity_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "nucleic acid entity_xref" Description: ""
--     * Slot: nucleic acid entity_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "nucleic acid entity_synonym" Description: ""
--     * Slot: nucleic acid entity_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "nucleic acid entity_category" Description: ""
--     * Slot: nucleic acid entity_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "nucleic acid entity_type" Description: ""
--     * Slot: nucleic acid entity_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "nucleic acid entity_has_attribute" Description: ""
--     * Slot: nucleic acid entity_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "regulatory region_in_taxon" Description: ""
--     * Slot: regulatory region_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "regulatory region_provided_by" Description: ""
--     * Slot: regulatory region_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "regulatory region_xref" Description: ""
--     * Slot: regulatory region_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "regulatory region_synonym" Description: ""
--     * Slot: regulatory region_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "regulatory region_category" Description: ""
--     * Slot: regulatory region_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "regulatory region_type" Description: ""
--     * Slot: regulatory region_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "regulatory region_has_attribute" Description: ""
--     * Slot: regulatory region_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "accessible dna region_in_taxon" Description: ""
--     * Slot: accessible dna region_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "accessible dna region_provided_by" Description: ""
--     * Slot: accessible dna region_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "accessible dna region_xref" Description: ""
--     * Slot: accessible dna region_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "accessible dna region_synonym" Description: ""
--     * Slot: accessible dna region_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "accessible dna region_category" Description: ""
--     * Slot: accessible dna region_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "accessible dna region_type" Description: ""
--     * Slot: accessible dna region_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "accessible dna region_has_attribute" Description: ""
--     * Slot: accessible dna region_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "transcription factor binding site_in_taxon" Description: ""
--     * Slot: transcription factor binding site_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "transcription factor binding site_provided_by" Description: ""
--     * Slot: transcription factor binding site_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "transcription factor binding site_xref" Description: ""
--     * Slot: transcription factor binding site_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "transcription factor binding site_synonym" Description: ""
--     * Slot: transcription factor binding site_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "transcription factor binding site_category" Description: ""
--     * Slot: transcription factor binding site_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "transcription factor binding site_type" Description: ""
--     * Slot: transcription factor binding site_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "transcription factor binding site_has_attribute" Description: ""
--     * Slot: transcription factor binding site_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "molecular mixture_routes_of_delivery" Description: ""
--     * Slot: molecular mixture_id Description: Autocreated FK slot
--     * Slot: routes_of_delivery Description: the method or process of administering a pharmaceutical compound to achieve a therapeutic effect in humans or animals.
-- # Class: "molecular mixture_available_from" Description: ""
--     * Slot: molecular mixture_id Description: Autocreated FK slot
--     * Slot: available_from Description: 
-- # Class: "molecular mixture_has_chemical_role" Description: ""
--     * Slot: molecular mixture_id Description: Autocreated FK slot
--     * Slot: has_chemical_role_id Description: A role is particular behaviour which a chemical entity may exhibit.
-- # Class: "molecular mixture_provided_by" Description: ""
--     * Slot: molecular mixture_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "molecular mixture_xref" Description: ""
--     * Slot: molecular mixture_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "molecular mixture_synonym" Description: ""
--     * Slot: molecular mixture_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "molecular mixture_category" Description: ""
--     * Slot: molecular mixture_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "molecular mixture_type" Description: ""
--     * Slot: molecular mixture_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "molecular mixture_has_attribute" Description: ""
--     * Slot: molecular mixture_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "complex molecular mixture_routes_of_delivery" Description: ""
--     * Slot: complex molecular mixture_id Description: Autocreated FK slot
--     * Slot: routes_of_delivery Description: the method or process of administering a pharmaceutical compound to achieve a therapeutic effect in humans or animals.
-- # Class: "complex molecular mixture_available_from" Description: ""
--     * Slot: complex molecular mixture_id Description: Autocreated FK slot
--     * Slot: available_from Description: 
-- # Class: "complex molecular mixture_has_chemical_role" Description: ""
--     * Slot: complex molecular mixture_id Description: Autocreated FK slot
--     * Slot: has_chemical_role_id Description: A role is particular behaviour which a chemical entity may exhibit.
-- # Class: "complex molecular mixture_provided_by" Description: ""
--     * Slot: complex molecular mixture_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "complex molecular mixture_xref" Description: ""
--     * Slot: complex molecular mixture_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "complex molecular mixture_synonym" Description: ""
--     * Slot: complex molecular mixture_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "complex molecular mixture_category" Description: ""
--     * Slot: complex molecular mixture_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "complex molecular mixture_type" Description: ""
--     * Slot: complex molecular mixture_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "complex molecular mixture_has_attribute" Description: ""
--     * Slot: complex molecular mixture_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "biological process or activity_has_input" Description: ""
--     * Slot: biological process or activity_id Description: Autocreated FK slot
--     * Slot: has_input_id Description: holds between a process and a continuant, where the continuant is an input into the process
-- # Class: "biological process or activity_has_output" Description: ""
--     * Slot: biological process or activity_id Description: Autocreated FK slot
--     * Slot: has_output_id Description: holds between a process and a continuant, where the continuant is an output of the process
-- # Class: "biological process or activity_enabled_by" Description: ""
--     * Slot: biological process or activity_id Description: Autocreated FK slot
--     * Slot: enabled_by_id Description: holds between a process and a physical entity, where the physical entity executes the process
-- # Class: "biological process or activity_in_taxon" Description: ""
--     * Slot: biological process or activity_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "biological process or activity_provided_by" Description: ""
--     * Slot: biological process or activity_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "biological process or activity_xref" Description: ""
--     * Slot: biological process or activity_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "biological process or activity_synonym" Description: ""
--     * Slot: biological process or activity_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "biological process or activity_category" Description: ""
--     * Slot: biological process or activity_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "biological process or activity_type" Description: ""
--     * Slot: biological process or activity_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "biological process or activity_has_attribute" Description: ""
--     * Slot: biological process or activity_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "molecular activity_has_input" Description: ""
--     * Slot: molecular activity_id Description: Autocreated FK slot
--     * Slot: has_input_id Description: A chemical entity that is the input for the reaction
-- # Class: "molecular activity_has_output" Description: ""
--     * Slot: molecular activity_id Description: Autocreated FK slot
--     * Slot: has_output_id Description: A chemical entity that is the output for the reaction
-- # Class: "molecular activity_enabled_by" Description: ""
--     * Slot: molecular activity_id Description: Autocreated FK slot
--     * Slot: enabled_by_id Description: The gene product, gene, or complex that catalyzes the reaction
-- # Class: "molecular activity_in_taxon" Description: ""
--     * Slot: molecular activity_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "molecular activity_provided_by" Description: ""
--     * Slot: molecular activity_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "molecular activity_xref" Description: ""
--     * Slot: molecular activity_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "molecular activity_synonym" Description: ""
--     * Slot: molecular activity_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "molecular activity_category" Description: ""
--     * Slot: molecular activity_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "molecular activity_type" Description: ""
--     * Slot: molecular activity_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "molecular activity_has_attribute" Description: ""
--     * Slot: molecular activity_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "biological process_has_input" Description: ""
--     * Slot: biological process_id Description: Autocreated FK slot
--     * Slot: has_input_id Description: holds between a process and a continuant, where the continuant is an input into the process
-- # Class: "biological process_has_output" Description: ""
--     * Slot: biological process_id Description: Autocreated FK slot
--     * Slot: has_output_id Description: holds between a process and a continuant, where the continuant is an output of the process
-- # Class: "biological process_enabled_by" Description: ""
--     * Slot: biological process_id Description: Autocreated FK slot
--     * Slot: enabled_by_id Description: holds between a process and a physical entity, where the physical entity executes the process
-- # Class: "biological process_in_taxon" Description: ""
--     * Slot: biological process_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "biological process_provided_by" Description: ""
--     * Slot: biological process_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "biological process_xref" Description: ""
--     * Slot: biological process_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "biological process_synonym" Description: ""
--     * Slot: biological process_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "biological process_category" Description: ""
--     * Slot: biological process_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "biological process_type" Description: ""
--     * Slot: biological process_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "biological process_has_attribute" Description: ""
--     * Slot: biological process_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "pathway_has_input" Description: ""
--     * Slot: pathway_id Description: Autocreated FK slot
--     * Slot: has_input_id Description: holds between a process and a continuant, where the continuant is an input into the process
-- # Class: "pathway_has_output" Description: ""
--     * Slot: pathway_id Description: Autocreated FK slot
--     * Slot: has_output_id Description: holds between a process and a continuant, where the continuant is an output of the process
-- # Class: "pathway_enabled_by" Description: ""
--     * Slot: pathway_id Description: Autocreated FK slot
--     * Slot: enabled_by_id Description: holds between a process and a physical entity, where the physical entity executes the process
-- # Class: "pathway_in_taxon" Description: ""
--     * Slot: pathway_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "pathway_provided_by" Description: ""
--     * Slot: pathway_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "pathway_xref" Description: ""
--     * Slot: pathway_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "pathway_synonym" Description: ""
--     * Slot: pathway_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "pathway_category" Description: ""
--     * Slot: pathway_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "pathway_type" Description: ""
--     * Slot: pathway_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "pathway_has_attribute" Description: ""
--     * Slot: pathway_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "physiological process_has_input" Description: ""
--     * Slot: physiological process_id Description: Autocreated FK slot
--     * Slot: has_input_id Description: holds between a process and a continuant, where the continuant is an input into the process
-- # Class: "physiological process_has_output" Description: ""
--     * Slot: physiological process_id Description: Autocreated FK slot
--     * Slot: has_output_id Description: holds between a process and a continuant, where the continuant is an output of the process
-- # Class: "physiological process_enabled_by" Description: ""
--     * Slot: physiological process_id Description: Autocreated FK slot
--     * Slot: enabled_by_id Description: holds between a process and a physical entity, where the physical entity executes the process
-- # Class: "physiological process_in_taxon" Description: ""
--     * Slot: physiological process_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "physiological process_provided_by" Description: ""
--     * Slot: physiological process_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "physiological process_xref" Description: ""
--     * Slot: physiological process_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "physiological process_synonym" Description: ""
--     * Slot: physiological process_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "physiological process_category" Description: ""
--     * Slot: physiological process_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "physiological process_type" Description: ""
--     * Slot: physiological process_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "physiological process_has_attribute" Description: ""
--     * Slot: physiological process_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "behavior_has_input" Description: ""
--     * Slot: behavior_id Description: Autocreated FK slot
--     * Slot: has_input_id Description: holds between a process and a continuant, where the continuant is an input into the process
-- # Class: "behavior_has_output" Description: ""
--     * Slot: behavior_id Description: Autocreated FK slot
--     * Slot: has_output_id Description: holds between a process and a continuant, where the continuant is an output of the process
-- # Class: "behavior_enabled_by" Description: ""
--     * Slot: behavior_id Description: Autocreated FK slot
--     * Slot: enabled_by_id Description: holds between a process and a physical entity, where the physical entity executes the process
-- # Class: "behavior_in_taxon" Description: ""
--     * Slot: behavior_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "behavior_provided_by" Description: ""
--     * Slot: behavior_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "behavior_xref" Description: ""
--     * Slot: behavior_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "behavior_synonym" Description: ""
--     * Slot: behavior_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "behavior_category" Description: ""
--     * Slot: behavior_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "behavior_type" Description: ""
--     * Slot: behavior_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "behavior_has_attribute" Description: ""
--     * Slot: behavior_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "processed material_routes_of_delivery" Description: ""
--     * Slot: processed material_id Description: Autocreated FK slot
--     * Slot: routes_of_delivery Description: the method or process of administering a pharmaceutical compound to achieve a therapeutic effect in humans or animals.
-- # Class: "processed material_available_from" Description: ""
--     * Slot: processed material_id Description: Autocreated FK slot
--     * Slot: available_from Description: 
-- # Class: "processed material_has_chemical_role" Description: ""
--     * Slot: processed material_id Description: Autocreated FK slot
--     * Slot: has_chemical_role_id Description: A role is particular behaviour which a chemical entity may exhibit.
-- # Class: "processed material_provided_by" Description: ""
--     * Slot: processed material_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "processed material_xref" Description: ""
--     * Slot: processed material_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "processed material_synonym" Description: ""
--     * Slot: processed material_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "processed material_category" Description: ""
--     * Slot: processed material_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "processed material_type" Description: ""
--     * Slot: processed material_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "processed material_has_attribute" Description: ""
--     * Slot: processed material_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "drug_routes_of_delivery" Description: ""
--     * Slot: drug_id Description: Autocreated FK slot
--     * Slot: routes_of_delivery Description: the method or process of administering a pharmaceutical compound to achieve a therapeutic effect in humans or animals.
-- # Class: "drug_available_from" Description: ""
--     * Slot: drug_id Description: Autocreated FK slot
--     * Slot: available_from Description: 
-- # Class: "drug_has_chemical_role" Description: ""
--     * Slot: drug_id Description: Autocreated FK slot
--     * Slot: has_chemical_role_id Description: A role is particular behaviour which a chemical entity may exhibit.
-- # Class: "drug_provided_by" Description: ""
--     * Slot: drug_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "drug_xref" Description: ""
--     * Slot: drug_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "drug_synonym" Description: ""
--     * Slot: drug_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "drug_category" Description: ""
--     * Slot: drug_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "drug_type" Description: ""
--     * Slot: drug_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "drug_has_attribute" Description: ""
--     * Slot: drug_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "environmental food contaminant_available_from" Description: ""
--     * Slot: environmental food contaminant_id Description: Autocreated FK slot
--     * Slot: available_from Description: 
-- # Class: "environmental food contaminant_has_chemical_role" Description: ""
--     * Slot: environmental food contaminant_id Description: Autocreated FK slot
--     * Slot: has_chemical_role_id Description: A role is particular behaviour which a chemical entity may exhibit.
-- # Class: "environmental food contaminant_provided_by" Description: ""
--     * Slot: environmental food contaminant_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "environmental food contaminant_xref" Description: ""
--     * Slot: environmental food contaminant_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "environmental food contaminant_synonym" Description: ""
--     * Slot: environmental food contaminant_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "environmental food contaminant_category" Description: ""
--     * Slot: environmental food contaminant_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "environmental food contaminant_type" Description: ""
--     * Slot: environmental food contaminant_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "environmental food contaminant_has_attribute" Description: ""
--     * Slot: environmental food contaminant_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "food additive_available_from" Description: ""
--     * Slot: food additive_id Description: Autocreated FK slot
--     * Slot: available_from Description: 
-- # Class: "food additive_has_chemical_role" Description: ""
--     * Slot: food additive_id Description: Autocreated FK slot
--     * Slot: has_chemical_role_id Description: A role is particular behaviour which a chemical entity may exhibit.
-- # Class: "food additive_provided_by" Description: ""
--     * Slot: food additive_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "food additive_xref" Description: ""
--     * Slot: food additive_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "food additive_synonym" Description: ""
--     * Slot: food additive_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "food additive_category" Description: ""
--     * Slot: food additive_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "food additive_type" Description: ""
--     * Slot: food additive_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "food additive_has_attribute" Description: ""
--     * Slot: food additive_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "food_routes_of_delivery" Description: ""
--     * Slot: food_id Description: Autocreated FK slot
--     * Slot: routes_of_delivery Description: the method or process of administering a pharmaceutical compound to achieve a therapeutic effect in humans or animals.
-- # Class: "food_available_from" Description: ""
--     * Slot: food_id Description: Autocreated FK slot
--     * Slot: available_from Description: 
-- # Class: "food_has_chemical_role" Description: ""
--     * Slot: food_id Description: Autocreated FK slot
--     * Slot: has_chemical_role_id Description: A role is particular behaviour which a chemical entity may exhibit.
-- # Class: "food_provided_by" Description: ""
--     * Slot: food_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "food_xref" Description: ""
--     * Slot: food_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "food_synonym" Description: ""
--     * Slot: food_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "food_category" Description: ""
--     * Slot: food_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "food_type" Description: ""
--     * Slot: food_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "food_has_attribute" Description: ""
--     * Slot: food_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "organism attribute_has_quantitative_value" Description: ""
--     * Slot: organism attribute_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "organism attribute_provided_by" Description: ""
--     * Slot: organism attribute_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "organism attribute_xref" Description: ""
--     * Slot: organism attribute_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "organism attribute_synonym" Description: ""
--     * Slot: organism attribute_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "organism attribute_category" Description: ""
--     * Slot: organism attribute_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "organism attribute_type" Description: ""
--     * Slot: organism attribute_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "organism attribute_has_attribute" Description: ""
--     * Slot: organism attribute_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "phenotypic quality_has_quantitative_value" Description: ""
--     * Slot: phenotypic quality_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "phenotypic quality_provided_by" Description: ""
--     * Slot: phenotypic quality_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "phenotypic quality_xref" Description: ""
--     * Slot: phenotypic quality_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "phenotypic quality_synonym" Description: ""
--     * Slot: phenotypic quality_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "phenotypic quality_category" Description: ""
--     * Slot: phenotypic quality_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "phenotypic quality_type" Description: ""
--     * Slot: phenotypic quality_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "phenotypic quality_has_attribute" Description: ""
--     * Slot: phenotypic quality_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "genetic inheritance_in_taxon" Description: ""
--     * Slot: genetic inheritance_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "genetic inheritance_provided_by" Description: ""
--     * Slot: genetic inheritance_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "genetic inheritance_xref" Description: ""
--     * Slot: genetic inheritance_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "genetic inheritance_synonym" Description: ""
--     * Slot: genetic inheritance_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "genetic inheritance_category" Description: ""
--     * Slot: genetic inheritance_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "genetic inheritance_type" Description: ""
--     * Slot: genetic inheritance_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "genetic inheritance_has_attribute" Description: ""
--     * Slot: genetic inheritance_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "organismal entity_in_taxon" Description: ""
--     * Slot: organismal entity_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "organismal entity_provided_by" Description: ""
--     * Slot: organismal entity_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "organismal entity_xref" Description: ""
--     * Slot: organismal entity_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "organismal entity_synonym" Description: ""
--     * Slot: organismal entity_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "organismal entity_category" Description: ""
--     * Slot: organismal entity_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "organismal entity_type" Description: ""
--     * Slot: organismal entity_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "organismal entity_has_attribute" Description: ""
--     * Slot: organismal entity_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: may often be an organism attribute
-- # Class: "bacterium_in_taxon" Description: ""
--     * Slot: bacterium_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "bacterium_provided_by" Description: ""
--     * Slot: bacterium_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "bacterium_xref" Description: ""
--     * Slot: bacterium_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "bacterium_synonym" Description: ""
--     * Slot: bacterium_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "bacterium_category" Description: ""
--     * Slot: bacterium_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "bacterium_type" Description: ""
--     * Slot: bacterium_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "bacterium_has_attribute" Description: ""
--     * Slot: bacterium_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: may often be an organism attribute
-- # Class: "virus_in_taxon" Description: ""
--     * Slot: virus_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "virus_provided_by" Description: ""
--     * Slot: virus_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "virus_xref" Description: ""
--     * Slot: virus_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "virus_synonym" Description: ""
--     * Slot: virus_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "virus_category" Description: ""
--     * Slot: virus_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "virus_type" Description: ""
--     * Slot: virus_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "virus_has_attribute" Description: ""
--     * Slot: virus_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: may often be an organism attribute
-- # Class: "cellular organism_in_taxon" Description: ""
--     * Slot: cellular organism_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "cellular organism_provided_by" Description: ""
--     * Slot: cellular organism_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "cellular organism_xref" Description: ""
--     * Slot: cellular organism_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "cellular organism_synonym" Description: ""
--     * Slot: cellular organism_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "cellular organism_category" Description: ""
--     * Slot: cellular organism_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "cellular organism_type" Description: ""
--     * Slot: cellular organism_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "cellular organism_has_attribute" Description: ""
--     * Slot: cellular organism_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: may often be an organism attribute
-- # Class: "mammal_in_taxon" Description: ""
--     * Slot: mammal_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "mammal_provided_by" Description: ""
--     * Slot: mammal_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "mammal_xref" Description: ""
--     * Slot: mammal_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "mammal_synonym" Description: ""
--     * Slot: mammal_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "mammal_category" Description: ""
--     * Slot: mammal_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "mammal_type" Description: ""
--     * Slot: mammal_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "mammal_has_attribute" Description: ""
--     * Slot: mammal_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: may often be an organism attribute
-- # Class: "human_in_taxon" Description: ""
--     * Slot: human_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "human_provided_by" Description: ""
--     * Slot: human_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "human_xref" Description: ""
--     * Slot: human_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "human_synonym" Description: ""
--     * Slot: human_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "human_category" Description: ""
--     * Slot: human_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "human_type" Description: ""
--     * Slot: human_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "human_has_attribute" Description: ""
--     * Slot: human_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: may often be an organism attribute
-- # Class: "plant_in_taxon" Description: ""
--     * Slot: plant_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "plant_provided_by" Description: ""
--     * Slot: plant_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "plant_xref" Description: ""
--     * Slot: plant_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "plant_synonym" Description: ""
--     * Slot: plant_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "plant_category" Description: ""
--     * Slot: plant_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "plant_type" Description: ""
--     * Slot: plant_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "plant_has_attribute" Description: ""
--     * Slot: plant_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: may often be an organism attribute
-- # Class: "invertebrate_in_taxon" Description: ""
--     * Slot: invertebrate_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "invertebrate_provided_by" Description: ""
--     * Slot: invertebrate_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "invertebrate_xref" Description: ""
--     * Slot: invertebrate_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "invertebrate_synonym" Description: ""
--     * Slot: invertebrate_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "invertebrate_category" Description: ""
--     * Slot: invertebrate_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "invertebrate_type" Description: ""
--     * Slot: invertebrate_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "invertebrate_has_attribute" Description: ""
--     * Slot: invertebrate_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: may often be an organism attribute
-- # Class: "vertebrate_in_taxon" Description: ""
--     * Slot: vertebrate_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "vertebrate_provided_by" Description: ""
--     * Slot: vertebrate_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "vertebrate_xref" Description: ""
--     * Slot: vertebrate_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "vertebrate_synonym" Description: ""
--     * Slot: vertebrate_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "vertebrate_category" Description: ""
--     * Slot: vertebrate_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "vertebrate_type" Description: ""
--     * Slot: vertebrate_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "vertebrate_has_attribute" Description: ""
--     * Slot: vertebrate_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: may often be an organism attribute
-- # Class: "fungus_in_taxon" Description: ""
--     * Slot: fungus_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "fungus_provided_by" Description: ""
--     * Slot: fungus_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "fungus_xref" Description: ""
--     * Slot: fungus_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "fungus_synonym" Description: ""
--     * Slot: fungus_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "fungus_category" Description: ""
--     * Slot: fungus_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "fungus_type" Description: ""
--     * Slot: fungus_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "fungus_has_attribute" Description: ""
--     * Slot: fungus_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: may often be an organism attribute
-- # Class: "life stage_in_taxon" Description: ""
--     * Slot: life stage_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "life stage_provided_by" Description: ""
--     * Slot: life stage_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "life stage_xref" Description: ""
--     * Slot: life stage_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "life stage_synonym" Description: ""
--     * Slot: life stage_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "life stage_category" Description: ""
--     * Slot: life stage_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "life stage_type" Description: ""
--     * Slot: life stage_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "life stage_has_attribute" Description: ""
--     * Slot: life stage_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: may often be an organism attribute
-- # Class: "individual organism_in_taxon" Description: ""
--     * Slot: individual organism_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "individual organism_provided_by" Description: ""
--     * Slot: individual organism_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "individual organism_xref" Description: ""
--     * Slot: individual organism_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "individual organism_synonym" Description: ""
--     * Slot: individual organism_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "individual organism_category" Description: ""
--     * Slot: individual organism_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "individual organism_type" Description: ""
--     * Slot: individual organism_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "individual organism_has_attribute" Description: ""
--     * Slot: individual organism_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: may often be an organism attribute
-- # Class: "population of individual organisms_in_taxon" Description: ""
--     * Slot: population of individual organisms_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "population of individual organisms_provided_by" Description: ""
--     * Slot: population of individual organisms_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "population of individual organisms_xref" Description: ""
--     * Slot: population of individual organisms_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "population of individual organisms_synonym" Description: ""
--     * Slot: population of individual organisms_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "population of individual organisms_category" Description: ""
--     * Slot: population of individual organisms_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "population of individual organisms_type" Description: ""
--     * Slot: population of individual organisms_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "population of individual organisms_has_attribute" Description: ""
--     * Slot: population of individual organisms_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: may often be an organism attribute
-- # Class: "disease or phenotypic feature_in_taxon" Description: ""
--     * Slot: disease or phenotypic feature_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "disease or phenotypic feature_provided_by" Description: ""
--     * Slot: disease or phenotypic feature_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "disease or phenotypic feature_xref" Description: ""
--     * Slot: disease or phenotypic feature_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "disease or phenotypic feature_synonym" Description: ""
--     * Slot: disease or phenotypic feature_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "disease or phenotypic feature_category" Description: ""
--     * Slot: disease or phenotypic feature_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "disease or phenotypic feature_type" Description: ""
--     * Slot: disease or phenotypic feature_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "disease or phenotypic feature_has_attribute" Description: ""
--     * Slot: disease or phenotypic feature_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "disease_in_taxon" Description: ""
--     * Slot: disease_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "disease_provided_by" Description: ""
--     * Slot: disease_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "disease_xref" Description: ""
--     * Slot: disease_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "disease_synonym" Description: ""
--     * Slot: disease_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "disease_category" Description: ""
--     * Slot: disease_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "disease_type" Description: ""
--     * Slot: disease_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "disease_has_attribute" Description: ""
--     * Slot: disease_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "phenotypic feature_in_taxon" Description: ""
--     * Slot: phenotypic feature_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "phenotypic feature_provided_by" Description: ""
--     * Slot: phenotypic feature_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "phenotypic feature_xref" Description: ""
--     * Slot: phenotypic feature_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "phenotypic feature_synonym" Description: ""
--     * Slot: phenotypic feature_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "phenotypic feature_category" Description: ""
--     * Slot: phenotypic feature_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "phenotypic feature_type" Description: ""
--     * Slot: phenotypic feature_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "phenotypic feature_has_attribute" Description: ""
--     * Slot: phenotypic feature_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "behavioral feature_in_taxon" Description: ""
--     * Slot: behavioral feature_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "behavioral feature_provided_by" Description: ""
--     * Slot: behavioral feature_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "behavioral feature_xref" Description: ""
--     * Slot: behavioral feature_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "behavioral feature_synonym" Description: ""
--     * Slot: behavioral feature_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "behavioral feature_category" Description: ""
--     * Slot: behavioral feature_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "behavioral feature_type" Description: ""
--     * Slot: behavioral feature_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "behavioral feature_has_attribute" Description: ""
--     * Slot: behavioral feature_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "anatomical entity_in_taxon" Description: ""
--     * Slot: anatomical entity_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "anatomical entity_provided_by" Description: ""
--     * Slot: anatomical entity_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "anatomical entity_xref" Description: ""
--     * Slot: anatomical entity_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "anatomical entity_synonym" Description: ""
--     * Slot: anatomical entity_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "anatomical entity_category" Description: ""
--     * Slot: anatomical entity_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "anatomical entity_type" Description: ""
--     * Slot: anatomical entity_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "anatomical entity_has_attribute" Description: ""
--     * Slot: anatomical entity_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: may often be an organism attribute
-- # Class: "cellular component_in_taxon" Description: ""
--     * Slot: cellular component_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "cellular component_provided_by" Description: ""
--     * Slot: cellular component_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "cellular component_xref" Description: ""
--     * Slot: cellular component_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "cellular component_synonym" Description: ""
--     * Slot: cellular component_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "cellular component_category" Description: ""
--     * Slot: cellular component_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "cellular component_type" Description: ""
--     * Slot: cellular component_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "cellular component_has_attribute" Description: ""
--     * Slot: cellular component_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: may often be an organism attribute
-- # Class: "cell_in_taxon" Description: ""
--     * Slot: cell_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "cell_provided_by" Description: ""
--     * Slot: cell_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "cell_xref" Description: ""
--     * Slot: cell_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "cell_synonym" Description: ""
--     * Slot: cell_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "cell_category" Description: ""
--     * Slot: cell_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "cell_type" Description: ""
--     * Slot: cell_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "cell_has_attribute" Description: ""
--     * Slot: cell_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: may often be an organism attribute
-- # Class: "cell line_in_taxon" Description: ""
--     * Slot: cell line_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "cell line_provided_by" Description: ""
--     * Slot: cell line_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "cell line_xref" Description: ""
--     * Slot: cell line_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "cell line_synonym" Description: ""
--     * Slot: cell line_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "cell line_category" Description: ""
--     * Slot: cell line_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "cell line_type" Description: ""
--     * Slot: cell line_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "cell line_has_attribute" Description: ""
--     * Slot: cell line_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: may often be an organism attribute
-- # Class: "gross anatomical structure_in_taxon" Description: ""
--     * Slot: gross anatomical structure_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "gross anatomical structure_provided_by" Description: ""
--     * Slot: gross anatomical structure_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "gross anatomical structure_xref" Description: ""
--     * Slot: gross anatomical structure_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "gross anatomical structure_synonym" Description: ""
--     * Slot: gross anatomical structure_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "gross anatomical structure_category" Description: ""
--     * Slot: gross anatomical structure_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "gross anatomical structure_type" Description: ""
--     * Slot: gross anatomical structure_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "gross anatomical structure_has_attribute" Description: ""
--     * Slot: gross anatomical structure_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: may often be an organism attribute
-- # Class: "gene_xref" Description: ""
--     * Slot: gene_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "gene_in_taxon" Description: ""
--     * Slot: gene_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "gene_provided_by" Description: ""
--     * Slot: gene_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "gene_synonym" Description: ""
--     * Slot: gene_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "gene_category" Description: ""
--     * Slot: gene_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "gene_type" Description: ""
--     * Slot: gene_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "gene_has_attribute" Description: ""
--     * Slot: gene_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "gene product mixin_synonym" Description: ""
--     * Slot: gene product mixin_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "gene product mixin_xref" Description: ""
--     * Slot: gene product mixin_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "gene product isoform mixin_synonym" Description: ""
--     * Slot: gene product isoform mixin_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "gene product isoform mixin_xref" Description: ""
--     * Slot: gene product isoform mixin_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "macromolecular complex_in_taxon" Description: ""
--     * Slot: macromolecular complex_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "macromolecular complex_provided_by" Description: ""
--     * Slot: macromolecular complex_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "macromolecular complex_xref" Description: ""
--     * Slot: macromolecular complex_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "macromolecular complex_synonym" Description: ""
--     * Slot: macromolecular complex_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "macromolecular complex_category" Description: ""
--     * Slot: macromolecular complex_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "macromolecular complex_type" Description: ""
--     * Slot: macromolecular complex_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "macromolecular complex_has_attribute" Description: ""
--     * Slot: macromolecular complex_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "nucleosome modification_in_taxon" Description: ""
--     * Slot: nucleosome modification_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "nucleosome modification_provided_by" Description: ""
--     * Slot: nucleosome modification_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "nucleosome modification_xref" Description: ""
--     * Slot: nucleosome modification_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "nucleosome modification_synonym" Description: ""
--     * Slot: nucleosome modification_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "nucleosome modification_category" Description: ""
--     * Slot: nucleosome modification_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "nucleosome modification_type" Description: ""
--     * Slot: nucleosome modification_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "nucleosome modification_has_attribute" Description: ""
--     * Slot: nucleosome modification_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "genome_in_taxon" Description: ""
--     * Slot: genome_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "genome_provided_by" Description: ""
--     * Slot: genome_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "genome_xref" Description: ""
--     * Slot: genome_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "genome_synonym" Description: ""
--     * Slot: genome_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "genome_category" Description: ""
--     * Slot: genome_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "genome_type" Description: ""
--     * Slot: genome_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "genome_has_attribute" Description: ""
--     * Slot: genome_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "exon_in_taxon" Description: ""
--     * Slot: exon_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "exon_provided_by" Description: ""
--     * Slot: exon_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "exon_xref" Description: ""
--     * Slot: exon_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "exon_synonym" Description: ""
--     * Slot: exon_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "exon_category" Description: ""
--     * Slot: exon_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "exon_type" Description: ""
--     * Slot: exon_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "exon_has_attribute" Description: ""
--     * Slot: exon_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "transcript_in_taxon" Description: ""
--     * Slot: transcript_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "transcript_provided_by" Description: ""
--     * Slot: transcript_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "transcript_xref" Description: ""
--     * Slot: transcript_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "transcript_synonym" Description: ""
--     * Slot: transcript_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "transcript_category" Description: ""
--     * Slot: transcript_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "transcript_type" Description: ""
--     * Slot: transcript_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "transcript_has_attribute" Description: ""
--     * Slot: transcript_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "coding sequence_in_taxon" Description: ""
--     * Slot: coding sequence_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "coding sequence_provided_by" Description: ""
--     * Slot: coding sequence_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "coding sequence_xref" Description: ""
--     * Slot: coding sequence_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "coding sequence_synonym" Description: ""
--     * Slot: coding sequence_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "coding sequence_category" Description: ""
--     * Slot: coding sequence_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "coding sequence_type" Description: ""
--     * Slot: coding sequence_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "coding sequence_has_attribute" Description: ""
--     * Slot: coding sequence_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "polypeptide_in_taxon" Description: ""
--     * Slot: polypeptide_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "polypeptide_provided_by" Description: ""
--     * Slot: polypeptide_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "polypeptide_xref" Description: ""
--     * Slot: polypeptide_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "polypeptide_synonym" Description: ""
--     * Slot: polypeptide_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "polypeptide_category" Description: ""
--     * Slot: polypeptide_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "polypeptide_type" Description: ""
--     * Slot: polypeptide_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "polypeptide_has_attribute" Description: ""
--     * Slot: polypeptide_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "protein_synonym" Description: ""
--     * Slot: protein_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "protein_xref" Description: ""
--     * Slot: protein_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "protein_in_taxon" Description: ""
--     * Slot: protein_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "protein_provided_by" Description: ""
--     * Slot: protein_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "protein_category" Description: ""
--     * Slot: protein_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "protein_type" Description: ""
--     * Slot: protein_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "protein_has_attribute" Description: ""
--     * Slot: protein_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "protein isoform_synonym" Description: ""
--     * Slot: protein isoform_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "protein isoform_xref" Description: ""
--     * Slot: protein isoform_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "protein isoform_in_taxon" Description: ""
--     * Slot: protein isoform_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "protein isoform_provided_by" Description: ""
--     * Slot: protein isoform_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "protein isoform_category" Description: ""
--     * Slot: protein isoform_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "protein isoform_type" Description: ""
--     * Slot: protein isoform_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "protein isoform_has_attribute" Description: ""
--     * Slot: protein isoform_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "protein domain_has_gene_or_gene_product" Description: ""
--     * Slot: protein domain_id Description: Autocreated FK slot
--     * Slot: has_gene_or_gene_product_id Description: connects an entity with one or more gene or gene products
-- # Class: "protein domain_in_taxon" Description: ""
--     * Slot: protein domain_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "protein domain_provided_by" Description: ""
--     * Slot: protein domain_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "protein domain_xref" Description: ""
--     * Slot: protein domain_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "protein domain_synonym" Description: ""
--     * Slot: protein domain_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "protein domain_category" Description: ""
--     * Slot: protein domain_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "protein domain_type" Description: ""
--     * Slot: protein domain_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "protein domain_has_attribute" Description: ""
--     * Slot: protein domain_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "posttranslational modification_in_taxon" Description: ""
--     * Slot: posttranslational modification_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "posttranslational modification_provided_by" Description: ""
--     * Slot: posttranslational modification_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "posttranslational modification_xref" Description: ""
--     * Slot: posttranslational modification_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "posttranslational modification_synonym" Description: ""
--     * Slot: posttranslational modification_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "posttranslational modification_category" Description: ""
--     * Slot: posttranslational modification_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "posttranslational modification_type" Description: ""
--     * Slot: posttranslational modification_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "posttranslational modification_has_attribute" Description: ""
--     * Slot: posttranslational modification_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "protein family_has_gene_or_gene_product" Description: ""
--     * Slot: protein family_id Description: Autocreated FK slot
--     * Slot: has_gene_or_gene_product_id Description: connects an entity with one or more gene or gene products
-- # Class: "protein family_in_taxon" Description: ""
--     * Slot: protein family_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "protein family_provided_by" Description: ""
--     * Slot: protein family_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "protein family_xref" Description: ""
--     * Slot: protein family_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "protein family_synonym" Description: ""
--     * Slot: protein family_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "protein family_category" Description: ""
--     * Slot: protein family_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "protein family_type" Description: ""
--     * Slot: protein family_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "protein family_has_attribute" Description: ""
--     * Slot: protein family_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "nucleic acid sequence motif_in_taxon" Description: ""
--     * Slot: nucleic acid sequence motif_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "nucleic acid sequence motif_provided_by" Description: ""
--     * Slot: nucleic acid sequence motif_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "nucleic acid sequence motif_xref" Description: ""
--     * Slot: nucleic acid sequence motif_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "nucleic acid sequence motif_synonym" Description: ""
--     * Slot: nucleic acid sequence motif_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "nucleic acid sequence motif_category" Description: ""
--     * Slot: nucleic acid sequence motif_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "nucleic acid sequence motif_type" Description: ""
--     * Slot: nucleic acid sequence motif_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "nucleic acid sequence motif_has_attribute" Description: ""
--     * Slot: nucleic acid sequence motif_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "RNA product_synonym" Description: ""
--     * Slot: RNA product_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "RNA product_xref" Description: ""
--     * Slot: RNA product_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "RNA product_in_taxon" Description: ""
--     * Slot: RNA product_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "RNA product_provided_by" Description: ""
--     * Slot: RNA product_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "RNA product_category" Description: ""
--     * Slot: RNA product_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "RNA product_type" Description: ""
--     * Slot: RNA product_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "RNA product_has_attribute" Description: ""
--     * Slot: RNA product_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "RNA product isoform_synonym" Description: ""
--     * Slot: RNA product isoform_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "RNA product isoform_xref" Description: ""
--     * Slot: RNA product isoform_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "RNA product isoform_in_taxon" Description: ""
--     * Slot: RNA product isoform_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "RNA product isoform_provided_by" Description: ""
--     * Slot: RNA product isoform_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "RNA product isoform_category" Description: ""
--     * Slot: RNA product isoform_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "RNA product isoform_type" Description: ""
--     * Slot: RNA product isoform_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "RNA product isoform_has_attribute" Description: ""
--     * Slot: RNA product isoform_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "noncoding RNA product_synonym" Description: ""
--     * Slot: noncoding RNA product_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "noncoding RNA product_xref" Description: ""
--     * Slot: noncoding RNA product_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "noncoding RNA product_in_taxon" Description: ""
--     * Slot: noncoding RNA product_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "noncoding RNA product_provided_by" Description: ""
--     * Slot: noncoding RNA product_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "noncoding RNA product_category" Description: ""
--     * Slot: noncoding RNA product_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "noncoding RNA product_type" Description: ""
--     * Slot: noncoding RNA product_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "noncoding RNA product_has_attribute" Description: ""
--     * Slot: noncoding RNA product_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "microRNA_synonym" Description: ""
--     * Slot: microRNA_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "microRNA_xref" Description: ""
--     * Slot: microRNA_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "microRNA_in_taxon" Description: ""
--     * Slot: microRNA_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "microRNA_provided_by" Description: ""
--     * Slot: microRNA_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "microRNA_category" Description: ""
--     * Slot: microRNA_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "microRNA_type" Description: ""
--     * Slot: microRNA_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "microRNA_has_attribute" Description: ""
--     * Slot: microRNA_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "siRNA_synonym" Description: ""
--     * Slot: siRNA_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "siRNA_xref" Description: ""
--     * Slot: siRNA_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "siRNA_in_taxon" Description: ""
--     * Slot: siRNA_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "siRNA_provided_by" Description: ""
--     * Slot: siRNA_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "siRNA_category" Description: ""
--     * Slot: siRNA_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "siRNA_type" Description: ""
--     * Slot: siRNA_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "siRNA_has_attribute" Description: ""
--     * Slot: siRNA_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "gene grouping mixin_has_gene_or_gene_product" Description: ""
--     * Slot: gene grouping mixin_id Description: Autocreated FK slot
--     * Slot: has_gene_or_gene_product_id Description: connects an entity with one or more gene or gene products
-- # Class: "gene family_has_gene_or_gene_product" Description: ""
--     * Slot: gene family_id Description: Autocreated FK slot
--     * Slot: has_gene_or_gene_product_id Description: connects an entity with one or more gene or gene products
-- # Class: "gene family_in_taxon" Description: ""
--     * Slot: gene family_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "gene family_provided_by" Description: ""
--     * Slot: gene family_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "gene family_xref" Description: ""
--     * Slot: gene family_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "gene family_synonym" Description: ""
--     * Slot: gene family_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "gene family_category" Description: ""
--     * Slot: gene family_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "gene family_type" Description: ""
--     * Slot: gene family_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "gene family_has_attribute" Description: ""
--     * Slot: gene family_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "zygosity_has_quantitative_value" Description: ""
--     * Slot: zygosity_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "zygosity_provided_by" Description: ""
--     * Slot: zygosity_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "zygosity_xref" Description: ""
--     * Slot: zygosity_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "zygosity_synonym" Description: ""
--     * Slot: zygosity_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "zygosity_category" Description: ""
--     * Slot: zygosity_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "zygosity_type" Description: ""
--     * Slot: zygosity_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "zygosity_has_attribute" Description: ""
--     * Slot: zygosity_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "genotype_in_taxon" Description: ""
--     * Slot: genotype_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "genotype_provided_by" Description: ""
--     * Slot: genotype_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "genotype_xref" Description: ""
--     * Slot: genotype_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "genotype_synonym" Description: ""
--     * Slot: genotype_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "genotype_category" Description: ""
--     * Slot: genotype_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "genotype_type" Description: ""
--     * Slot: genotype_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "genotype_has_attribute" Description: ""
--     * Slot: genotype_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "haplotype_in_taxon" Description: ""
--     * Slot: haplotype_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "haplotype_provided_by" Description: ""
--     * Slot: haplotype_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "haplotype_xref" Description: ""
--     * Slot: haplotype_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "haplotype_synonym" Description: ""
--     * Slot: haplotype_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "haplotype_category" Description: ""
--     * Slot: haplotype_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "haplotype_type" Description: ""
--     * Slot: haplotype_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "haplotype_has_attribute" Description: ""
--     * Slot: haplotype_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "sequence variant_has_gene" Description: ""
--     * Slot: sequence variant_id Description: Autocreated FK slot
--     * Slot: has_gene_id Description: Each allele can be associated with any number of genes
-- # Class: "sequence variant_in_taxon" Description: ""
--     * Slot: sequence variant_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "sequence variant_provided_by" Description: ""
--     * Slot: sequence variant_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "sequence variant_xref" Description: ""
--     * Slot: sequence variant_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "sequence variant_synonym" Description: ""
--     * Slot: sequence variant_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "sequence variant_category" Description: ""
--     * Slot: sequence variant_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "sequence variant_type" Description: ""
--     * Slot: sequence variant_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "sequence variant_has_attribute" Description: ""
--     * Slot: sequence variant_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "snv_has_gene" Description: ""
--     * Slot: snv_id Description: Autocreated FK slot
--     * Slot: has_gene_id Description: Each allele can be associated with any number of genes
-- # Class: "snv_in_taxon" Description: ""
--     * Slot: snv_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "snv_provided_by" Description: ""
--     * Slot: snv_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "snv_xref" Description: ""
--     * Slot: snv_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "snv_synonym" Description: ""
--     * Slot: snv_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "snv_category" Description: ""
--     * Slot: snv_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "snv_type" Description: ""
--     * Slot: snv_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "snv_has_attribute" Description: ""
--     * Slot: snv_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "reagent targeted gene_in_taxon" Description: ""
--     * Slot: reagent targeted gene_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "reagent targeted gene_provided_by" Description: ""
--     * Slot: reagent targeted gene_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "reagent targeted gene_xref" Description: ""
--     * Slot: reagent targeted gene_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "reagent targeted gene_synonym" Description: ""
--     * Slot: reagent targeted gene_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "reagent targeted gene_category" Description: ""
--     * Slot: reagent targeted gene_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "reagent targeted gene_type" Description: ""
--     * Slot: reagent targeted gene_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "reagent targeted gene_has_attribute" Description: ""
--     * Slot: reagent targeted gene_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "clinical attribute_has_quantitative_value" Description: ""
--     * Slot: clinical attribute_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "clinical attribute_provided_by" Description: ""
--     * Slot: clinical attribute_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "clinical attribute_xref" Description: ""
--     * Slot: clinical attribute_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "clinical attribute_synonym" Description: ""
--     * Slot: clinical attribute_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "clinical attribute_category" Description: ""
--     * Slot: clinical attribute_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "clinical attribute_type" Description: ""
--     * Slot: clinical attribute_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "clinical attribute_has_attribute" Description: ""
--     * Slot: clinical attribute_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "clinical measurement_has_quantitative_value" Description: ""
--     * Slot: clinical measurement_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "clinical measurement_provided_by" Description: ""
--     * Slot: clinical measurement_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "clinical measurement_xref" Description: ""
--     * Slot: clinical measurement_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "clinical measurement_synonym" Description: ""
--     * Slot: clinical measurement_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "clinical measurement_category" Description: ""
--     * Slot: clinical measurement_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "clinical measurement_type" Description: ""
--     * Slot: clinical measurement_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "clinical measurement_has_attribute" Description: ""
--     * Slot: clinical measurement_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "clinical modifier_has_quantitative_value" Description: ""
--     * Slot: clinical modifier_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "clinical modifier_provided_by" Description: ""
--     * Slot: clinical modifier_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "clinical modifier_xref" Description: ""
--     * Slot: clinical modifier_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "clinical modifier_synonym" Description: ""
--     * Slot: clinical modifier_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "clinical modifier_category" Description: ""
--     * Slot: clinical modifier_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "clinical modifier_type" Description: ""
--     * Slot: clinical modifier_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "clinical modifier_has_attribute" Description: ""
--     * Slot: clinical modifier_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "clinical course_has_quantitative_value" Description: ""
--     * Slot: clinical course_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "clinical course_provided_by" Description: ""
--     * Slot: clinical course_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "clinical course_xref" Description: ""
--     * Slot: clinical course_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "clinical course_synonym" Description: ""
--     * Slot: clinical course_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "clinical course_category" Description: ""
--     * Slot: clinical course_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "clinical course_type" Description: ""
--     * Slot: clinical course_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "clinical course_has_attribute" Description: ""
--     * Slot: clinical course_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "onset_has_quantitative_value" Description: ""
--     * Slot: onset_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "onset_provided_by" Description: ""
--     * Slot: onset_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "onset_xref" Description: ""
--     * Slot: onset_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "onset_synonym" Description: ""
--     * Slot: onset_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "onset_category" Description: ""
--     * Slot: onset_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "onset_type" Description: ""
--     * Slot: onset_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "onset_has_attribute" Description: ""
--     * Slot: onset_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "clinical entity_provided_by" Description: ""
--     * Slot: clinical entity_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "clinical entity_xref" Description: ""
--     * Slot: clinical entity_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "clinical entity_synonym" Description: ""
--     * Slot: clinical entity_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "clinical entity_category" Description: ""
--     * Slot: clinical entity_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "clinical entity_type" Description: ""
--     * Slot: clinical entity_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "clinical entity_has_attribute" Description: ""
--     * Slot: clinical entity_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "clinical trial_provided_by" Description: ""
--     * Slot: clinical trial_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "clinical trial_xref" Description: ""
--     * Slot: clinical trial_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "clinical trial_synonym" Description: ""
--     * Slot: clinical trial_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "clinical trial_category" Description: ""
--     * Slot: clinical trial_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "clinical trial_type" Description: ""
--     * Slot: clinical trial_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "clinical trial_has_attribute" Description: ""
--     * Slot: clinical trial_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "clinical intervention_provided_by" Description: ""
--     * Slot: clinical intervention_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "clinical intervention_xref" Description: ""
--     * Slot: clinical intervention_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "clinical intervention_synonym" Description: ""
--     * Slot: clinical intervention_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "clinical intervention_category" Description: ""
--     * Slot: clinical intervention_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "clinical intervention_type" Description: ""
--     * Slot: clinical intervention_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "clinical intervention_has_attribute" Description: ""
--     * Slot: clinical intervention_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "clinical finding_in_taxon" Description: ""
--     * Slot: clinical finding_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "clinical finding_provided_by" Description: ""
--     * Slot: clinical finding_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "clinical finding_xref" Description: ""
--     * Slot: clinical finding_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "clinical finding_synonym" Description: ""
--     * Slot: clinical finding_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "clinical finding_category" Description: ""
--     * Slot: clinical finding_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "clinical finding_type" Description: ""
--     * Slot: clinical finding_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "clinical finding_has_attribute" Description: ""
--     * Slot: clinical finding_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "hospitalization_provided_by" Description: ""
--     * Slot: hospitalization_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "hospitalization_xref" Description: ""
--     * Slot: hospitalization_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "hospitalization_synonym" Description: ""
--     * Slot: hospitalization_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "hospitalization_category" Description: ""
--     * Slot: hospitalization_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "hospitalization_type" Description: ""
--     * Slot: hospitalization_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "hospitalization_has_attribute" Description: ""
--     * Slot: hospitalization_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "socioeconomic attribute_has_quantitative_value" Description: ""
--     * Slot: socioeconomic attribute_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "socioeconomic attribute_provided_by" Description: ""
--     * Slot: socioeconomic attribute_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "socioeconomic attribute_xref" Description: ""
--     * Slot: socioeconomic attribute_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "socioeconomic attribute_synonym" Description: ""
--     * Slot: socioeconomic attribute_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "socioeconomic attribute_category" Description: ""
--     * Slot: socioeconomic attribute_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "socioeconomic attribute_type" Description: ""
--     * Slot: socioeconomic attribute_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "socioeconomic attribute_has_attribute" Description: ""
--     * Slot: socioeconomic attribute_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "case_in_taxon" Description: ""
--     * Slot: case_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "case_provided_by" Description: ""
--     * Slot: case_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "case_xref" Description: ""
--     * Slot: case_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "case_synonym" Description: ""
--     * Slot: case_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "case_category" Description: ""
--     * Slot: case_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "case_type" Description: ""
--     * Slot: case_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "case_has_attribute" Description: ""
--     * Slot: case_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: may often be an organism attribute
-- # Class: "cohort_in_taxon" Description: ""
--     * Slot: cohort_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "cohort_provided_by" Description: ""
--     * Slot: cohort_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "cohort_xref" Description: ""
--     * Slot: cohort_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "cohort_synonym" Description: ""
--     * Slot: cohort_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "cohort_category" Description: ""
--     * Slot: cohort_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "cohort_type" Description: ""
--     * Slot: cohort_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "cohort_has_attribute" Description: ""
--     * Slot: cohort_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: may often be an organism attribute
-- # Class: "genomic background exposure_has_gene_or_gene_product" Description: ""
--     * Slot: genomic background exposure_id Description: Autocreated FK slot
--     * Slot: has_gene_or_gene_product_id Description: connects an entity with one or more gene or gene products
-- # Class: "genomic background exposure_in_taxon" Description: ""
--     * Slot: genomic background exposure_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "genomic background exposure_has_quantitative_value" Description: ""
--     * Slot: genomic background exposure_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "genomic background exposure_provided_by" Description: ""
--     * Slot: genomic background exposure_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "genomic background exposure_xref" Description: ""
--     * Slot: genomic background exposure_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "genomic background exposure_synonym" Description: ""
--     * Slot: genomic background exposure_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "genomic background exposure_category" Description: ""
--     * Slot: genomic background exposure_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "genomic background exposure_type" Description: ""
--     * Slot: genomic background exposure_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "genomic background exposure_has_attribute" Description: ""
--     * Slot: genomic background exposure_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "pathological process_has_input" Description: ""
--     * Slot: pathological process_id Description: Autocreated FK slot
--     * Slot: has_input_id Description: holds between a process and a continuant, where the continuant is an input into the process
-- # Class: "pathological process_has_output" Description: ""
--     * Slot: pathological process_id Description: Autocreated FK slot
--     * Slot: has_output_id Description: holds between a process and a continuant, where the continuant is an output of the process
-- # Class: "pathological process_enabled_by" Description: ""
--     * Slot: pathological process_id Description: Autocreated FK slot
--     * Slot: enabled_by_id Description: holds between a process and a physical entity, where the physical entity executes the process
-- # Class: "pathological process_in_taxon" Description: ""
--     * Slot: pathological process_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "pathological process_provided_by" Description: ""
--     * Slot: pathological process_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "pathological process_xref" Description: ""
--     * Slot: pathological process_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "pathological process_synonym" Description: ""
--     * Slot: pathological process_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "pathological process_category" Description: ""
--     * Slot: pathological process_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "pathological process_type" Description: ""
--     * Slot: pathological process_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "pathological process_has_attribute" Description: ""
--     * Slot: pathological process_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "pathological process exposure_has_quantitative_value" Description: ""
--     * Slot: pathological process exposure_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "pathological process exposure_provided_by" Description: ""
--     * Slot: pathological process exposure_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "pathological process exposure_xref" Description: ""
--     * Slot: pathological process exposure_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "pathological process exposure_synonym" Description: ""
--     * Slot: pathological process exposure_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "pathological process exposure_category" Description: ""
--     * Slot: pathological process exposure_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "pathological process exposure_type" Description: ""
--     * Slot: pathological process exposure_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "pathological process exposure_has_attribute" Description: ""
--     * Slot: pathological process exposure_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "pathological anatomical structure_in_taxon" Description: ""
--     * Slot: pathological anatomical structure_id Description: Autocreated FK slot
--     * Slot: in_taxon_id Description: connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'
-- # Class: "pathological anatomical structure_provided_by" Description: ""
--     * Slot: pathological anatomical structure_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "pathological anatomical structure_xref" Description: ""
--     * Slot: pathological anatomical structure_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "pathological anatomical structure_synonym" Description: ""
--     * Slot: pathological anatomical structure_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "pathological anatomical structure_category" Description: ""
--     * Slot: pathological anatomical structure_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "pathological anatomical structure_type" Description: ""
--     * Slot: pathological anatomical structure_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "pathological anatomical structure_has_attribute" Description: ""
--     * Slot: pathological anatomical structure_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: may often be an organism attribute
-- # Class: "pathological anatomical exposure_has_quantitative_value" Description: ""
--     * Slot: pathological anatomical exposure_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "pathological anatomical exposure_provided_by" Description: ""
--     * Slot: pathological anatomical exposure_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "pathological anatomical exposure_xref" Description: ""
--     * Slot: pathological anatomical exposure_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "pathological anatomical exposure_synonym" Description: ""
--     * Slot: pathological anatomical exposure_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "pathological anatomical exposure_category" Description: ""
--     * Slot: pathological anatomical exposure_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "pathological anatomical exposure_type" Description: ""
--     * Slot: pathological anatomical exposure_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "pathological anatomical exposure_has_attribute" Description: ""
--     * Slot: pathological anatomical exposure_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "disease or phenotypic feature exposure_has_quantitative_value" Description: ""
--     * Slot: disease or phenotypic feature exposure_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "disease or phenotypic feature exposure_provided_by" Description: ""
--     * Slot: disease or phenotypic feature exposure_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "disease or phenotypic feature exposure_xref" Description: ""
--     * Slot: disease or phenotypic feature exposure_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "disease or phenotypic feature exposure_synonym" Description: ""
--     * Slot: disease or phenotypic feature exposure_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "disease or phenotypic feature exposure_category" Description: ""
--     * Slot: disease or phenotypic feature exposure_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "disease or phenotypic feature exposure_type" Description: ""
--     * Slot: disease or phenotypic feature exposure_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "disease or phenotypic feature exposure_has_attribute" Description: ""
--     * Slot: disease or phenotypic feature exposure_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "chemical exposure_has_quantitative_value" Description: ""
--     * Slot: chemical exposure_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "chemical exposure_provided_by" Description: ""
--     * Slot: chemical exposure_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "chemical exposure_xref" Description: ""
--     * Slot: chemical exposure_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "chemical exposure_synonym" Description: ""
--     * Slot: chemical exposure_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "chemical exposure_category" Description: ""
--     * Slot: chemical exposure_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "chemical exposure_type" Description: ""
--     * Slot: chemical exposure_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "chemical exposure_has_attribute" Description: ""
--     * Slot: chemical exposure_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "complex chemical exposure_has_quantitative_value" Description: ""
--     * Slot: complex chemical exposure_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "complex chemical exposure_provided_by" Description: ""
--     * Slot: complex chemical exposure_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "complex chemical exposure_xref" Description: ""
--     * Slot: complex chemical exposure_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "complex chemical exposure_synonym" Description: ""
--     * Slot: complex chemical exposure_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "complex chemical exposure_category" Description: ""
--     * Slot: complex chemical exposure_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "complex chemical exposure_type" Description: ""
--     * Slot: complex chemical exposure_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "complex chemical exposure_has_attribute" Description: ""
--     * Slot: complex chemical exposure_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "drug exposure_has_quantitative_value" Description: ""
--     * Slot: drug exposure_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "drug exposure_provided_by" Description: ""
--     * Slot: drug exposure_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "drug exposure_xref" Description: ""
--     * Slot: drug exposure_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "drug exposure_synonym" Description: ""
--     * Slot: drug exposure_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "drug exposure_category" Description: ""
--     * Slot: drug exposure_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "drug exposure_type" Description: ""
--     * Slot: drug exposure_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "drug exposure_has_attribute" Description: ""
--     * Slot: drug exposure_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "drug to gene interaction exposure_has_gene_or_gene_product" Description: ""
--     * Slot: drug to gene interaction exposure_id Description: Autocreated FK slot
--     * Slot: has_gene_or_gene_product_id Description: connects an entity with one or more gene or gene products
-- # Class: "drug to gene interaction exposure_has_quantitative_value" Description: ""
--     * Slot: drug to gene interaction exposure_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "drug to gene interaction exposure_provided_by" Description: ""
--     * Slot: drug to gene interaction exposure_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "drug to gene interaction exposure_xref" Description: ""
--     * Slot: drug to gene interaction exposure_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "drug to gene interaction exposure_synonym" Description: ""
--     * Slot: drug to gene interaction exposure_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "drug to gene interaction exposure_category" Description: ""
--     * Slot: drug to gene interaction exposure_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "drug to gene interaction exposure_type" Description: ""
--     * Slot: drug to gene interaction exposure_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "drug to gene interaction exposure_has_attribute" Description: ""
--     * Slot: drug to gene interaction exposure_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "treatment_has_drug" Description: ""
--     * Slot: treatment_id Description: Autocreated FK slot
--     * Slot: has_drug_id Description: connects an entity to one or more drugs
-- # Class: "treatment_has_device" Description: ""
--     * Slot: treatment_id Description: Autocreated FK slot
--     * Slot: has_device_id Description: connects an entity to one or more (medical) devices
-- # Class: "treatment_has_procedure" Description: ""
--     * Slot: treatment_id Description: Autocreated FK slot
--     * Slot: has_procedure_id Description: connects an entity to one or more (medical) procedures
-- # Class: "treatment_provided_by" Description: ""
--     * Slot: treatment_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "treatment_xref" Description: ""
--     * Slot: treatment_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "treatment_synonym" Description: ""
--     * Slot: treatment_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "treatment_category" Description: ""
--     * Slot: treatment_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "treatment_type" Description: ""
--     * Slot: treatment_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "treatment_has_attribute" Description: ""
--     * Slot: treatment_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "biotic exposure_has_quantitative_value" Description: ""
--     * Slot: biotic exposure_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "biotic exposure_provided_by" Description: ""
--     * Slot: biotic exposure_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "biotic exposure_xref" Description: ""
--     * Slot: biotic exposure_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "biotic exposure_synonym" Description: ""
--     * Slot: biotic exposure_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "biotic exposure_category" Description: ""
--     * Slot: biotic exposure_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "biotic exposure_type" Description: ""
--     * Slot: biotic exposure_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "biotic exposure_has_attribute" Description: ""
--     * Slot: biotic exposure_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "geographic exposure_has_quantitative_value" Description: ""
--     * Slot: geographic exposure_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "geographic exposure_provided_by" Description: ""
--     * Slot: geographic exposure_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "geographic exposure_xref" Description: ""
--     * Slot: geographic exposure_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "geographic exposure_synonym" Description: ""
--     * Slot: geographic exposure_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "geographic exposure_category" Description: ""
--     * Slot: geographic exposure_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "geographic exposure_type" Description: ""
--     * Slot: geographic exposure_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "geographic exposure_has_attribute" Description: ""
--     * Slot: geographic exposure_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "environmental exposure_has_quantitative_value" Description: ""
--     * Slot: environmental exposure_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "environmental exposure_provided_by" Description: ""
--     * Slot: environmental exposure_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "environmental exposure_xref" Description: ""
--     * Slot: environmental exposure_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "environmental exposure_synonym" Description: ""
--     * Slot: environmental exposure_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "environmental exposure_category" Description: ""
--     * Slot: environmental exposure_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "environmental exposure_type" Description: ""
--     * Slot: environmental exposure_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "environmental exposure_has_attribute" Description: ""
--     * Slot: environmental exposure_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "behavioral exposure_has_quantitative_value" Description: ""
--     * Slot: behavioral exposure_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "behavioral exposure_provided_by" Description: ""
--     * Slot: behavioral exposure_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "behavioral exposure_xref" Description: ""
--     * Slot: behavioral exposure_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "behavioral exposure_synonym" Description: ""
--     * Slot: behavioral exposure_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "behavioral exposure_category" Description: ""
--     * Slot: behavioral exposure_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "behavioral exposure_type" Description: ""
--     * Slot: behavioral exposure_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "behavioral exposure_has_attribute" Description: ""
--     * Slot: behavioral exposure_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "socioeconomic exposure_has_quantitative_value" Description: ""
--     * Slot: socioeconomic exposure_id Description: Autocreated FK slot
--     * Slot: has_quantitative_value_id Description: connects an attribute to a value
-- # Class: "socioeconomic exposure_provided_by" Description: ""
--     * Slot: socioeconomic exposure_id Description: Autocreated FK slot
--     * Slot: provided_by Description: The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.
-- # Class: "socioeconomic exposure_xref" Description: ""
--     * Slot: socioeconomic exposure_id Description: Autocreated FK slot
--     * Slot: xref Description: A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.
-- # Class: "socioeconomic exposure_synonym" Description: ""
--     * Slot: socioeconomic exposure_id Description: Autocreated FK slot
--     * Slot: synonym Description: Alternate human-readable names for a thing
-- # Class: "socioeconomic exposure_category" Description: ""
--     * Slot: socioeconomic exposure_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "socioeconomic exposure_type" Description: ""
--     * Slot: socioeconomic exposure_id Description: Autocreated FK slot
--     * Slot: type Description: 
-- # Class: "socioeconomic exposure_has_attribute" Description: ""
--     * Slot: socioeconomic exposure_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "association_qualifiers" Description: ""
--     * Slot: association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "association_publications" Description: ""
--     * Slot: association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "association_has_evidence" Description: ""
--     * Slot: association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "association_aggregator_knowledge_source" Description: ""
--     * Slot: association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "association_subject_closure" Description: ""
--     * Slot: association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "association_object_closure" Description: ""
--     * Slot: association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "association_subject_category_closure" Description: ""
--     * Slot: association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "association_object_category_closure" Description: ""
--     * Slot: association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "association_subject_label_closure" Description: ""
--     * Slot: association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "association_object_label_closure" Description: ""
--     * Slot: association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "association_retrieval_source_ids" Description: ""
--     * Slot: association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "association_category" Description: ""
--     * Slot: association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "association_type" Description: ""
--     * Slot: association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "association_has_attribute" Description: ""
--     * Slot: association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "chemical entity assesses named thing association_qualifiers" Description: ""
--     * Slot: chemical entity assesses named thing association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "chemical entity assesses named thing association_publications" Description: ""
--     * Slot: chemical entity assesses named thing association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "chemical entity assesses named thing association_has_evidence" Description: ""
--     * Slot: chemical entity assesses named thing association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "chemical entity assesses named thing association_aggregator_knowledge_source" Description: ""
--     * Slot: chemical entity assesses named thing association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "chemical entity assesses named thing association_subject_closure" Description: ""
--     * Slot: chemical entity assesses named thing association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical entity assesses named thing association_object_closure" Description: ""
--     * Slot: chemical entity assesses named thing association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical entity assesses named thing association_subject_category_closure" Description: ""
--     * Slot: chemical entity assesses named thing association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical entity assesses named thing association_object_category_closure" Description: ""
--     * Slot: chemical entity assesses named thing association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical entity assesses named thing association_subject_label_closure" Description: ""
--     * Slot: chemical entity assesses named thing association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical entity assesses named thing association_object_label_closure" Description: ""
--     * Slot: chemical entity assesses named thing association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical entity assesses named thing association_retrieval_source_ids" Description: ""
--     * Slot: chemical entity assesses named thing association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "chemical entity assesses named thing association_category" Description: ""
--     * Slot: chemical entity assesses named thing association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "chemical entity assesses named thing association_type" Description: ""
--     * Slot: chemical entity assesses named thing association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "chemical entity assesses named thing association_has_attribute" Description: ""
--     * Slot: chemical entity assesses named thing association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "contributor association_qualifiers" Description: ""
--     * Slot: contributor association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: this field can be used to annotate special characteristics of an agent relationship, such as the fact that a given author agent of a publication is the 'corresponding author'
-- # Class: "contributor association_publications" Description: ""
--     * Slot: contributor association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "contributor association_has_evidence" Description: ""
--     * Slot: contributor association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "contributor association_aggregator_knowledge_source" Description: ""
--     * Slot: contributor association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "contributor association_subject_closure" Description: ""
--     * Slot: contributor association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "contributor association_object_closure" Description: ""
--     * Slot: contributor association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "contributor association_subject_category_closure" Description: ""
--     * Slot: contributor association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "contributor association_object_category_closure" Description: ""
--     * Slot: contributor association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "contributor association_subject_label_closure" Description: ""
--     * Slot: contributor association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "contributor association_object_label_closure" Description: ""
--     * Slot: contributor association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "contributor association_retrieval_source_ids" Description: ""
--     * Slot: contributor association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "contributor association_category" Description: ""
--     * Slot: contributor association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "contributor association_type" Description: ""
--     * Slot: contributor association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "contributor association_has_attribute" Description: ""
--     * Slot: contributor association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "genotype to genotype part association_qualifiers" Description: ""
--     * Slot: genotype to genotype part association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "genotype to genotype part association_publications" Description: ""
--     * Slot: genotype to genotype part association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "genotype to genotype part association_has_evidence" Description: ""
--     * Slot: genotype to genotype part association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "genotype to genotype part association_aggregator_knowledge_source" Description: ""
--     * Slot: genotype to genotype part association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "genotype to genotype part association_subject_closure" Description: ""
--     * Slot: genotype to genotype part association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genotype to genotype part association_object_closure" Description: ""
--     * Slot: genotype to genotype part association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genotype to genotype part association_subject_category_closure" Description: ""
--     * Slot: genotype to genotype part association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genotype to genotype part association_object_category_closure" Description: ""
--     * Slot: genotype to genotype part association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genotype to genotype part association_subject_label_closure" Description: ""
--     * Slot: genotype to genotype part association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genotype to genotype part association_object_label_closure" Description: ""
--     * Slot: genotype to genotype part association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genotype to genotype part association_retrieval_source_ids" Description: ""
--     * Slot: genotype to genotype part association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "genotype to genotype part association_category" Description: ""
--     * Slot: genotype to genotype part association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "genotype to genotype part association_type" Description: ""
--     * Slot: genotype to genotype part association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "genotype to genotype part association_has_attribute" Description: ""
--     * Slot: genotype to genotype part association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "genotype to gene association_qualifiers" Description: ""
--     * Slot: genotype to gene association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "genotype to gene association_publications" Description: ""
--     * Slot: genotype to gene association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "genotype to gene association_has_evidence" Description: ""
--     * Slot: genotype to gene association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "genotype to gene association_aggregator_knowledge_source" Description: ""
--     * Slot: genotype to gene association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "genotype to gene association_subject_closure" Description: ""
--     * Slot: genotype to gene association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genotype to gene association_object_closure" Description: ""
--     * Slot: genotype to gene association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genotype to gene association_subject_category_closure" Description: ""
--     * Slot: genotype to gene association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genotype to gene association_object_category_closure" Description: ""
--     * Slot: genotype to gene association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genotype to gene association_subject_label_closure" Description: ""
--     * Slot: genotype to gene association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genotype to gene association_object_label_closure" Description: ""
--     * Slot: genotype to gene association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genotype to gene association_retrieval_source_ids" Description: ""
--     * Slot: genotype to gene association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "genotype to gene association_category" Description: ""
--     * Slot: genotype to gene association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "genotype to gene association_type" Description: ""
--     * Slot: genotype to gene association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "genotype to gene association_has_attribute" Description: ""
--     * Slot: genotype to gene association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "genotype to variant association_qualifiers" Description: ""
--     * Slot: genotype to variant association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "genotype to variant association_publications" Description: ""
--     * Slot: genotype to variant association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "genotype to variant association_has_evidence" Description: ""
--     * Slot: genotype to variant association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "genotype to variant association_aggregator_knowledge_source" Description: ""
--     * Slot: genotype to variant association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "genotype to variant association_subject_closure" Description: ""
--     * Slot: genotype to variant association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genotype to variant association_object_closure" Description: ""
--     * Slot: genotype to variant association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genotype to variant association_subject_category_closure" Description: ""
--     * Slot: genotype to variant association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genotype to variant association_object_category_closure" Description: ""
--     * Slot: genotype to variant association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genotype to variant association_subject_label_closure" Description: ""
--     * Slot: genotype to variant association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genotype to variant association_object_label_closure" Description: ""
--     * Slot: genotype to variant association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genotype to variant association_retrieval_source_ids" Description: ""
--     * Slot: genotype to variant association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "genotype to variant association_category" Description: ""
--     * Slot: genotype to variant association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "genotype to variant association_type" Description: ""
--     * Slot: genotype to variant association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "genotype to variant association_has_attribute" Description: ""
--     * Slot: genotype to variant association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "gene to gene association_qualifiers" Description: ""
--     * Slot: gene to gene association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "gene to gene association_publications" Description: ""
--     * Slot: gene to gene association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "gene to gene association_has_evidence" Description: ""
--     * Slot: gene to gene association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "gene to gene association_aggregator_knowledge_source" Description: ""
--     * Slot: gene to gene association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "gene to gene association_subject_closure" Description: ""
--     * Slot: gene to gene association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to gene association_object_closure" Description: ""
--     * Slot: gene to gene association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to gene association_subject_category_closure" Description: ""
--     * Slot: gene to gene association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to gene association_object_category_closure" Description: ""
--     * Slot: gene to gene association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to gene association_subject_label_closure" Description: ""
--     * Slot: gene to gene association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to gene association_object_label_closure" Description: ""
--     * Slot: gene to gene association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to gene association_retrieval_source_ids" Description: ""
--     * Slot: gene to gene association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "gene to gene association_category" Description: ""
--     * Slot: gene to gene association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "gene to gene association_type" Description: ""
--     * Slot: gene to gene association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "gene to gene association_has_attribute" Description: ""
--     * Slot: gene to gene association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "gene to gene homology association_qualifiers" Description: ""
--     * Slot: gene to gene homology association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "gene to gene homology association_publications" Description: ""
--     * Slot: gene to gene homology association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "gene to gene homology association_has_evidence" Description: ""
--     * Slot: gene to gene homology association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "gene to gene homology association_aggregator_knowledge_source" Description: ""
--     * Slot: gene to gene homology association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "gene to gene homology association_subject_closure" Description: ""
--     * Slot: gene to gene homology association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to gene homology association_object_closure" Description: ""
--     * Slot: gene to gene homology association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to gene homology association_subject_category_closure" Description: ""
--     * Slot: gene to gene homology association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to gene homology association_object_category_closure" Description: ""
--     * Slot: gene to gene homology association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to gene homology association_subject_label_closure" Description: ""
--     * Slot: gene to gene homology association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to gene homology association_object_label_closure" Description: ""
--     * Slot: gene to gene homology association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to gene homology association_retrieval_source_ids" Description: ""
--     * Slot: gene to gene homology association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "gene to gene homology association_category" Description: ""
--     * Slot: gene to gene homology association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "gene to gene homology association_type" Description: ""
--     * Slot: gene to gene homology association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "gene to gene homology association_has_attribute" Description: ""
--     * Slot: gene to gene homology association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "gene to gene family association_qualifiers" Description: ""
--     * Slot: gene to gene family association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "gene to gene family association_publications" Description: ""
--     * Slot: gene to gene family association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "gene to gene family association_has_evidence" Description: ""
--     * Slot: gene to gene family association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "gene to gene family association_aggregator_knowledge_source" Description: ""
--     * Slot: gene to gene family association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "gene to gene family association_subject_closure" Description: ""
--     * Slot: gene to gene family association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to gene family association_object_closure" Description: ""
--     * Slot: gene to gene family association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to gene family association_subject_category_closure" Description: ""
--     * Slot: gene to gene family association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to gene family association_object_category_closure" Description: ""
--     * Slot: gene to gene family association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to gene family association_subject_label_closure" Description: ""
--     * Slot: gene to gene family association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to gene family association_object_label_closure" Description: ""
--     * Slot: gene to gene family association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to gene family association_retrieval_source_ids" Description: ""
--     * Slot: gene to gene family association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "gene to gene family association_category" Description: ""
--     * Slot: gene to gene family association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "gene to gene family association_type" Description: ""
--     * Slot: gene to gene family association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "gene to gene family association_has_attribute" Description: ""
--     * Slot: gene to gene family association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "gene to gene coexpression association_qualifiers" Description: ""
--     * Slot: gene to gene coexpression association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "gene to gene coexpression association_publications" Description: ""
--     * Slot: gene to gene coexpression association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "gene to gene coexpression association_has_evidence" Description: ""
--     * Slot: gene to gene coexpression association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "gene to gene coexpression association_aggregator_knowledge_source" Description: ""
--     * Slot: gene to gene coexpression association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "gene to gene coexpression association_subject_closure" Description: ""
--     * Slot: gene to gene coexpression association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to gene coexpression association_object_closure" Description: ""
--     * Slot: gene to gene coexpression association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to gene coexpression association_subject_category_closure" Description: ""
--     * Slot: gene to gene coexpression association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to gene coexpression association_object_category_closure" Description: ""
--     * Slot: gene to gene coexpression association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to gene coexpression association_subject_label_closure" Description: ""
--     * Slot: gene to gene coexpression association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to gene coexpression association_object_label_closure" Description: ""
--     * Slot: gene to gene coexpression association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to gene coexpression association_retrieval_source_ids" Description: ""
--     * Slot: gene to gene coexpression association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "gene to gene coexpression association_category" Description: ""
--     * Slot: gene to gene coexpression association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "gene to gene coexpression association_type" Description: ""
--     * Slot: gene to gene coexpression association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "gene to gene coexpression association_has_attribute" Description: ""
--     * Slot: gene to gene coexpression association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "pairwise gene to gene interaction_qualifiers" Description: ""
--     * Slot: pairwise gene to gene interaction_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "pairwise gene to gene interaction_publications" Description: ""
--     * Slot: pairwise gene to gene interaction_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "pairwise gene to gene interaction_has_evidence" Description: ""
--     * Slot: pairwise gene to gene interaction_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "pairwise gene to gene interaction_aggregator_knowledge_source" Description: ""
--     * Slot: pairwise gene to gene interaction_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "pairwise gene to gene interaction_subject_closure" Description: ""
--     * Slot: pairwise gene to gene interaction_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "pairwise gene to gene interaction_object_closure" Description: ""
--     * Slot: pairwise gene to gene interaction_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "pairwise gene to gene interaction_subject_category_closure" Description: ""
--     * Slot: pairwise gene to gene interaction_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "pairwise gene to gene interaction_object_category_closure" Description: ""
--     * Slot: pairwise gene to gene interaction_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "pairwise gene to gene interaction_subject_label_closure" Description: ""
--     * Slot: pairwise gene to gene interaction_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "pairwise gene to gene interaction_object_label_closure" Description: ""
--     * Slot: pairwise gene to gene interaction_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "pairwise gene to gene interaction_retrieval_source_ids" Description: ""
--     * Slot: pairwise gene to gene interaction_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "pairwise gene to gene interaction_category" Description: ""
--     * Slot: pairwise gene to gene interaction_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "pairwise gene to gene interaction_type" Description: ""
--     * Slot: pairwise gene to gene interaction_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "pairwise gene to gene interaction_has_attribute" Description: ""
--     * Slot: pairwise gene to gene interaction_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "pairwise molecular interaction_qualifiers" Description: ""
--     * Slot: pairwise molecular interaction_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "pairwise molecular interaction_publications" Description: ""
--     * Slot: pairwise molecular interaction_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "pairwise molecular interaction_has_evidence" Description: ""
--     * Slot: pairwise molecular interaction_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "pairwise molecular interaction_aggregator_knowledge_source" Description: ""
--     * Slot: pairwise molecular interaction_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "pairwise molecular interaction_subject_closure" Description: ""
--     * Slot: pairwise molecular interaction_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "pairwise molecular interaction_object_closure" Description: ""
--     * Slot: pairwise molecular interaction_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "pairwise molecular interaction_subject_category_closure" Description: ""
--     * Slot: pairwise molecular interaction_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "pairwise molecular interaction_object_category_closure" Description: ""
--     * Slot: pairwise molecular interaction_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "pairwise molecular interaction_subject_label_closure" Description: ""
--     * Slot: pairwise molecular interaction_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "pairwise molecular interaction_object_label_closure" Description: ""
--     * Slot: pairwise molecular interaction_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "pairwise molecular interaction_retrieval_source_ids" Description: ""
--     * Slot: pairwise molecular interaction_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "pairwise molecular interaction_category" Description: ""
--     * Slot: pairwise molecular interaction_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "pairwise molecular interaction_type" Description: ""
--     * Slot: pairwise molecular interaction_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "pairwise molecular interaction_has_attribute" Description: ""
--     * Slot: pairwise molecular interaction_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "cell line to disease or phenotypic feature association_qualifiers" Description: ""
--     * Slot: cell line to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "cell line to disease or phenotypic feature association_publications" Description: ""
--     * Slot: cell line to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "cell line to disease or phenotypic feature association_has_evidence" Description: ""
--     * Slot: cell line to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "cell line to disease or phenotypic feature association_aggregator_knowledge_source" Description: ""
--     * Slot: cell line to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "cell line to disease or phenotypic feature association_subject_closure" Description: ""
--     * Slot: cell line to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "cell line to disease or phenotypic feature association_object_closure" Description: ""
--     * Slot: cell line to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "cell line to disease or phenotypic feature association_subject_category_closure" Description: ""
--     * Slot: cell line to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "cell line to disease or phenotypic feature association_object_category_closure" Description: ""
--     * Slot: cell line to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "cell line to disease or phenotypic feature association_subject_label_closure" Description: ""
--     * Slot: cell line to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "cell line to disease or phenotypic feature association_object_label_closure" Description: ""
--     * Slot: cell line to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "cell line to disease or phenotypic feature association_retrieval_source_ids" Description: ""
--     * Slot: cell line to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "cell line to disease or phenotypic feature association_category" Description: ""
--     * Slot: cell line to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "cell line to disease or phenotypic feature association_type" Description: ""
--     * Slot: cell line to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "cell line to disease or phenotypic feature association_has_attribute" Description: ""
--     * Slot: cell line to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "chemical to chemical association_qualifiers" Description: ""
--     * Slot: chemical to chemical association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "chemical to chemical association_publications" Description: ""
--     * Slot: chemical to chemical association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "chemical to chemical association_has_evidence" Description: ""
--     * Slot: chemical to chemical association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "chemical to chemical association_aggregator_knowledge_source" Description: ""
--     * Slot: chemical to chemical association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "chemical to chemical association_subject_closure" Description: ""
--     * Slot: chemical to chemical association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical to chemical association_object_closure" Description: ""
--     * Slot: chemical to chemical association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical to chemical association_subject_category_closure" Description: ""
--     * Slot: chemical to chemical association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical to chemical association_object_category_closure" Description: ""
--     * Slot: chemical to chemical association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical to chemical association_subject_label_closure" Description: ""
--     * Slot: chemical to chemical association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical to chemical association_object_label_closure" Description: ""
--     * Slot: chemical to chemical association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical to chemical association_retrieval_source_ids" Description: ""
--     * Slot: chemical to chemical association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "chemical to chemical association_category" Description: ""
--     * Slot: chemical to chemical association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "chemical to chemical association_type" Description: ""
--     * Slot: chemical to chemical association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "chemical to chemical association_has_attribute" Description: ""
--     * Slot: chemical to chemical association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "reaction to participant association_qualifiers" Description: ""
--     * Slot: reaction to participant association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "reaction to participant association_publications" Description: ""
--     * Slot: reaction to participant association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "reaction to participant association_has_evidence" Description: ""
--     * Slot: reaction to participant association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "reaction to participant association_aggregator_knowledge_source" Description: ""
--     * Slot: reaction to participant association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "reaction to participant association_subject_closure" Description: ""
--     * Slot: reaction to participant association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "reaction to participant association_object_closure" Description: ""
--     * Slot: reaction to participant association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "reaction to participant association_subject_category_closure" Description: ""
--     * Slot: reaction to participant association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "reaction to participant association_object_category_closure" Description: ""
--     * Slot: reaction to participant association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "reaction to participant association_subject_label_closure" Description: ""
--     * Slot: reaction to participant association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "reaction to participant association_object_label_closure" Description: ""
--     * Slot: reaction to participant association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "reaction to participant association_retrieval_source_ids" Description: ""
--     * Slot: reaction to participant association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "reaction to participant association_category" Description: ""
--     * Slot: reaction to participant association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "reaction to participant association_type" Description: ""
--     * Slot: reaction to participant association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "reaction to participant association_has_attribute" Description: ""
--     * Slot: reaction to participant association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "reaction to catalyst association_qualifiers" Description: ""
--     * Slot: reaction to catalyst association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "reaction to catalyst association_publications" Description: ""
--     * Slot: reaction to catalyst association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "reaction to catalyst association_has_evidence" Description: ""
--     * Slot: reaction to catalyst association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "reaction to catalyst association_aggregator_knowledge_source" Description: ""
--     * Slot: reaction to catalyst association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "reaction to catalyst association_subject_closure" Description: ""
--     * Slot: reaction to catalyst association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "reaction to catalyst association_object_closure" Description: ""
--     * Slot: reaction to catalyst association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "reaction to catalyst association_subject_category_closure" Description: ""
--     * Slot: reaction to catalyst association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "reaction to catalyst association_object_category_closure" Description: ""
--     * Slot: reaction to catalyst association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "reaction to catalyst association_subject_label_closure" Description: ""
--     * Slot: reaction to catalyst association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "reaction to catalyst association_object_label_closure" Description: ""
--     * Slot: reaction to catalyst association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "reaction to catalyst association_retrieval_source_ids" Description: ""
--     * Slot: reaction to catalyst association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "reaction to catalyst association_category" Description: ""
--     * Slot: reaction to catalyst association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "reaction to catalyst association_type" Description: ""
--     * Slot: reaction to catalyst association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "reaction to catalyst association_has_attribute" Description: ""
--     * Slot: reaction to catalyst association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "chemical to chemical derivation association_catalyst_qualifier" Description: ""
--     * Slot: chemical to chemical derivation association_id Description: Autocreated FK slot
--     * Slot: catalyst_qualifier_id Description: this connects the derivation edge to the chemical entity that catalyzes the reaction that causes the subject chemical to transform into the object chemical.
-- # Class: "chemical to chemical derivation association_qualifiers" Description: ""
--     * Slot: chemical to chemical derivation association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "chemical to chemical derivation association_publications" Description: ""
--     * Slot: chemical to chemical derivation association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "chemical to chemical derivation association_has_evidence" Description: ""
--     * Slot: chemical to chemical derivation association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "chemical to chemical derivation association_aggregator_knowledge_source" Description: ""
--     * Slot: chemical to chemical derivation association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "chemical to chemical derivation association_subject_closure" Description: ""
--     * Slot: chemical to chemical derivation association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical to chemical derivation association_object_closure" Description: ""
--     * Slot: chemical to chemical derivation association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical to chemical derivation association_subject_category_closure" Description: ""
--     * Slot: chemical to chemical derivation association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical to chemical derivation association_object_category_closure" Description: ""
--     * Slot: chemical to chemical derivation association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical to chemical derivation association_subject_label_closure" Description: ""
--     * Slot: chemical to chemical derivation association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical to chemical derivation association_object_label_closure" Description: ""
--     * Slot: chemical to chemical derivation association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical to chemical derivation association_retrieval_source_ids" Description: ""
--     * Slot: chemical to chemical derivation association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "chemical to chemical derivation association_category" Description: ""
--     * Slot: chemical to chemical derivation association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "chemical to chemical derivation association_type" Description: ""
--     * Slot: chemical to chemical derivation association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "chemical to chemical derivation association_has_attribute" Description: ""
--     * Slot: chemical to chemical derivation association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "chemical to disease or phenotypic feature association_qualifiers" Description: ""
--     * Slot: chemical to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "chemical to disease or phenotypic feature association_publications" Description: ""
--     * Slot: chemical to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "chemical to disease or phenotypic feature association_has_evidence" Description: ""
--     * Slot: chemical to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "chemical to disease or phenotypic feature association_aggregator_knowledge_source" Description: ""
--     * Slot: chemical to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "chemical to disease or phenotypic feature association_subject_closure" Description: ""
--     * Slot: chemical to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical to disease or phenotypic feature association_object_closure" Description: ""
--     * Slot: chemical to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical to disease or phenotypic feature association_subject_category_closure" Description: ""
--     * Slot: chemical to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical to disease or phenotypic feature association_object_category_closure" Description: ""
--     * Slot: chemical to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical to disease or phenotypic feature association_subject_label_closure" Description: ""
--     * Slot: chemical to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical to disease or phenotypic feature association_object_label_closure" Description: ""
--     * Slot: chemical to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical to disease or phenotypic feature association_retrieval_source_ids" Description: ""
--     * Slot: chemical to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "chemical to disease or phenotypic feature association_category" Description: ""
--     * Slot: chemical to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "chemical to disease or phenotypic feature association_type" Description: ""
--     * Slot: chemical to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "chemical to disease or phenotypic feature association_has_attribute" Description: ""
--     * Slot: chemical to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "chemical or drug or treatment to disease or phenotypic feature association_qualifiers" Description: ""
--     * Slot: chemical or drug or treatment to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "chemical or drug or treatment to disease or phenotypic feature association_publications" Description: ""
--     * Slot: chemical or drug or treatment to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "chemical or drug or treatment to disease or phenotypic feature association_has_evidence" Description: ""
--     * Slot: chemical or drug or treatment to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "chemical or drug or treatment to disease or phenotypic feature association_aggregator_knowledge_source" Description: ""
--     * Slot: chemical or drug or treatment to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "chemical or drug or treatment to disease or phenotypic feature association_subject_closure" Description: ""
--     * Slot: chemical or drug or treatment to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical or drug or treatment to disease or phenotypic feature association_object_closure" Description: ""
--     * Slot: chemical or drug or treatment to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical or drug or treatment to disease or phenotypic feature association_subject_category_closure" Description: ""
--     * Slot: chemical or drug or treatment to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical or drug or treatment to disease or phenotypic feature association_object_category_closure" Description: ""
--     * Slot: chemical or drug or treatment to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical or drug or treatment to disease or phenotypic feature association_subject_label_closure" Description: ""
--     * Slot: chemical or drug or treatment to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical or drug or treatment to disease or phenotypic feature association_object_label_closure" Description: ""
--     * Slot: chemical or drug or treatment to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical or drug or treatment to disease or phenotypic feature association_retrieval_source_ids" Description: ""
--     * Slot: chemical or drug or treatment to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "chemical or drug or treatment to disease or phenotypic feature association_category" Description: ""
--     * Slot: chemical or drug or treatment to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "chemical or drug or treatment to disease or phenotypic feature association_type" Description: ""
--     * Slot: chemical or drug or treatment to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "chemical or drug or treatment to disease or phenotypic feature association_has_attribute" Description: ""
--     * Slot: chemical or drug or treatment to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "chemical or drug or treatment side effect disease or phenotypic feature association_qualifiers" Description: ""
--     * Slot: chemical or drug or treatment side effect disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "chemical or drug or treatment side effect disease or phenotypic feature association_publications" Description: ""
--     * Slot: chemical or drug or treatment side effect disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "chemical or drug or treatment side effect disease or phenotypic feature association_has_evidence" Description: ""
--     * Slot: chemical or drug or treatment side effect disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "chemical or drug or treatment side effect disease or phenotypic feature association_aggregator_knowledge_source" Description: ""
--     * Slot: chemical or drug or treatment side effect disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "chemical or drug or treatment side effect disease or phenotypic feature association_subject_closure" Description: ""
--     * Slot: chemical or drug or treatment side effect disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical or drug or treatment side effect disease or phenotypic feature association_object_closure" Description: ""
--     * Slot: chemical or drug or treatment side effect disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical or drug or treatment side effect disease or phenotypic feature association_subject_category_closure" Description: ""
--     * Slot: chemical or drug or treatment side effect disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical or drug or treatment side effect disease or phenotypic feature association_object_category_closure" Description: ""
--     * Slot: chemical or drug or treatment side effect disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical or drug or treatment side effect disease or phenotypic feature association_subject_label_closure" Description: ""
--     * Slot: chemical or drug or treatment side effect disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical or drug or treatment side effect disease or phenotypic feature association_object_label_closure" Description: ""
--     * Slot: chemical or drug or treatment side effect disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical or drug or treatment side effect disease or phenotypic feature association_retrieval_source_ids" Description: ""
--     * Slot: chemical or drug or treatment side effect disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "chemical or drug or treatment side effect disease or phenotypic feature association_category" Description: ""
--     * Slot: chemical or drug or treatment side effect disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "chemical or drug or treatment side effect disease or phenotypic feature association_type" Description: ""
--     * Slot: chemical or drug or treatment side effect disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "chemical or drug or treatment side effect disease or phenotypic feature association_has_attribute" Description: ""
--     * Slot: chemical or drug or treatment side effect disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "gene to pathway association_qualifiers" Description: ""
--     * Slot: gene to pathway association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "gene to pathway association_publications" Description: ""
--     * Slot: gene to pathway association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "gene to pathway association_has_evidence" Description: ""
--     * Slot: gene to pathway association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "gene to pathway association_aggregator_knowledge_source" Description: ""
--     * Slot: gene to pathway association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "gene to pathway association_subject_closure" Description: ""
--     * Slot: gene to pathway association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to pathway association_object_closure" Description: ""
--     * Slot: gene to pathway association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to pathway association_subject_category_closure" Description: ""
--     * Slot: gene to pathway association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to pathway association_object_category_closure" Description: ""
--     * Slot: gene to pathway association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to pathway association_subject_label_closure" Description: ""
--     * Slot: gene to pathway association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to pathway association_object_label_closure" Description: ""
--     * Slot: gene to pathway association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to pathway association_retrieval_source_ids" Description: ""
--     * Slot: gene to pathway association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "gene to pathway association_category" Description: ""
--     * Slot: gene to pathway association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "gene to pathway association_type" Description: ""
--     * Slot: gene to pathway association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "gene to pathway association_has_attribute" Description: ""
--     * Slot: gene to pathway association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "molecular activity to pathway association_qualifiers" Description: ""
--     * Slot: molecular activity to pathway association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "molecular activity to pathway association_publications" Description: ""
--     * Slot: molecular activity to pathway association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "molecular activity to pathway association_has_evidence" Description: ""
--     * Slot: molecular activity to pathway association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "molecular activity to pathway association_aggregator_knowledge_source" Description: ""
--     * Slot: molecular activity to pathway association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "molecular activity to pathway association_subject_closure" Description: ""
--     * Slot: molecular activity to pathway association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "molecular activity to pathway association_object_closure" Description: ""
--     * Slot: molecular activity to pathway association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "molecular activity to pathway association_subject_category_closure" Description: ""
--     * Slot: molecular activity to pathway association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "molecular activity to pathway association_object_category_closure" Description: ""
--     * Slot: molecular activity to pathway association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "molecular activity to pathway association_subject_label_closure" Description: ""
--     * Slot: molecular activity to pathway association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "molecular activity to pathway association_object_label_closure" Description: ""
--     * Slot: molecular activity to pathway association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "molecular activity to pathway association_retrieval_source_ids" Description: ""
--     * Slot: molecular activity to pathway association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "molecular activity to pathway association_category" Description: ""
--     * Slot: molecular activity to pathway association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "molecular activity to pathway association_type" Description: ""
--     * Slot: molecular activity to pathway association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "molecular activity to pathway association_has_attribute" Description: ""
--     * Slot: molecular activity to pathway association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "chemical to pathway association_qualifiers" Description: ""
--     * Slot: chemical to pathway association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "chemical to pathway association_publications" Description: ""
--     * Slot: chemical to pathway association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "chemical to pathway association_has_evidence" Description: ""
--     * Slot: chemical to pathway association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "chemical to pathway association_aggregator_knowledge_source" Description: ""
--     * Slot: chemical to pathway association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "chemical to pathway association_subject_closure" Description: ""
--     * Slot: chemical to pathway association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical to pathway association_object_closure" Description: ""
--     * Slot: chemical to pathway association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical to pathway association_subject_category_closure" Description: ""
--     * Slot: chemical to pathway association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical to pathway association_object_category_closure" Description: ""
--     * Slot: chemical to pathway association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical to pathway association_subject_label_closure" Description: ""
--     * Slot: chemical to pathway association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical to pathway association_object_label_closure" Description: ""
--     * Slot: chemical to pathway association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical to pathway association_retrieval_source_ids" Description: ""
--     * Slot: chemical to pathway association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "chemical to pathway association_category" Description: ""
--     * Slot: chemical to pathway association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "chemical to pathway association_type" Description: ""
--     * Slot: chemical to pathway association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "chemical to pathway association_has_attribute" Description: ""
--     * Slot: chemical to pathway association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "named thing associated with likelihood of named thing association_qualifiers" Description: ""
--     * Slot: named thing associated with likelihood of named thing association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "named thing associated with likelihood of named thing association_publications" Description: ""
--     * Slot: named thing associated with likelihood of named thing association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "named thing associated with likelihood of named thing association_has_evidence" Description: ""
--     * Slot: named thing associated with likelihood of named thing association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "named thing associated with likelihood of named thing association_aggregator_knowledge_source" Description: ""
--     * Slot: named thing associated with likelihood of named thing association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "named thing associated with likelihood of named thing association_subject_closure" Description: ""
--     * Slot: named thing associated with likelihood of named thing association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "named thing associated with likelihood of named thing association_object_closure" Description: ""
--     * Slot: named thing associated with likelihood of named thing association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "named thing associated with likelihood of named thing association_subject_category_closure" Description: ""
--     * Slot: named thing associated with likelihood of named thing association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "named thing associated with likelihood of named thing association_object_category_closure" Description: ""
--     * Slot: named thing associated with likelihood of named thing association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "named thing associated with likelihood of named thing association_subject_label_closure" Description: ""
--     * Slot: named thing associated with likelihood of named thing association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "named thing associated with likelihood of named thing association_object_label_closure" Description: ""
--     * Slot: named thing associated with likelihood of named thing association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "named thing associated with likelihood of named thing association_retrieval_source_ids" Description: ""
--     * Slot: named thing associated with likelihood of named thing association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "named thing associated with likelihood of named thing association_category" Description: ""
--     * Slot: named thing associated with likelihood of named thing association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "named thing associated with likelihood of named thing association_type" Description: ""
--     * Slot: named thing associated with likelihood of named thing association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "named thing associated with likelihood of named thing association_has_attribute" Description: ""
--     * Slot: named thing associated with likelihood of named thing association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "chemical gene interaction association_qualifiers" Description: ""
--     * Slot: chemical gene interaction association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "chemical gene interaction association_publications" Description: ""
--     * Slot: chemical gene interaction association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "chemical gene interaction association_has_evidence" Description: ""
--     * Slot: chemical gene interaction association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "chemical gene interaction association_aggregator_knowledge_source" Description: ""
--     * Slot: chemical gene interaction association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "chemical gene interaction association_subject_closure" Description: ""
--     * Slot: chemical gene interaction association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical gene interaction association_object_closure" Description: ""
--     * Slot: chemical gene interaction association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical gene interaction association_subject_category_closure" Description: ""
--     * Slot: chemical gene interaction association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical gene interaction association_object_category_closure" Description: ""
--     * Slot: chemical gene interaction association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical gene interaction association_subject_label_closure" Description: ""
--     * Slot: chemical gene interaction association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical gene interaction association_object_label_closure" Description: ""
--     * Slot: chemical gene interaction association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical gene interaction association_retrieval_source_ids" Description: ""
--     * Slot: chemical gene interaction association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "chemical gene interaction association_category" Description: ""
--     * Slot: chemical gene interaction association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "chemical gene interaction association_type" Description: ""
--     * Slot: chemical gene interaction association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "chemical gene interaction association_has_attribute" Description: ""
--     * Slot: chemical gene interaction association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "chemical affects gene association_qualifiers" Description: ""
--     * Slot: chemical affects gene association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "chemical affects gene association_publications" Description: ""
--     * Slot: chemical affects gene association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "chemical affects gene association_has_evidence" Description: ""
--     * Slot: chemical affects gene association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "chemical affects gene association_aggregator_knowledge_source" Description: ""
--     * Slot: chemical affects gene association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "chemical affects gene association_subject_closure" Description: ""
--     * Slot: chemical affects gene association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical affects gene association_object_closure" Description: ""
--     * Slot: chemical affects gene association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical affects gene association_subject_category_closure" Description: ""
--     * Slot: chemical affects gene association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical affects gene association_object_category_closure" Description: ""
--     * Slot: chemical affects gene association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical affects gene association_subject_label_closure" Description: ""
--     * Slot: chemical affects gene association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical affects gene association_object_label_closure" Description: ""
--     * Slot: chemical affects gene association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical affects gene association_retrieval_source_ids" Description: ""
--     * Slot: chemical affects gene association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "chemical affects gene association_category" Description: ""
--     * Slot: chemical affects gene association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "chemical affects gene association_type" Description: ""
--     * Slot: chemical affects gene association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "chemical affects gene association_has_attribute" Description: ""
--     * Slot: chemical affects gene association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "gene affects chemical association_qualifiers" Description: ""
--     * Slot: gene affects chemical association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "gene affects chemical association_publications" Description: ""
--     * Slot: gene affects chemical association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "gene affects chemical association_has_evidence" Description: ""
--     * Slot: gene affects chemical association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "gene affects chemical association_aggregator_knowledge_source" Description: ""
--     * Slot: gene affects chemical association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "gene affects chemical association_subject_closure" Description: ""
--     * Slot: gene affects chemical association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene affects chemical association_object_closure" Description: ""
--     * Slot: gene affects chemical association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene affects chemical association_subject_category_closure" Description: ""
--     * Slot: gene affects chemical association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene affects chemical association_object_category_closure" Description: ""
--     * Slot: gene affects chemical association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene affects chemical association_subject_label_closure" Description: ""
--     * Slot: gene affects chemical association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene affects chemical association_object_label_closure" Description: ""
--     * Slot: gene affects chemical association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene affects chemical association_retrieval_source_ids" Description: ""
--     * Slot: gene affects chemical association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "gene affects chemical association_category" Description: ""
--     * Slot: gene affects chemical association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "gene affects chemical association_type" Description: ""
--     * Slot: gene affects chemical association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "gene affects chemical association_has_attribute" Description: ""
--     * Slot: gene affects chemical association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "drug to gene association_qualifiers" Description: ""
--     * Slot: drug to gene association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "drug to gene association_publications" Description: ""
--     * Slot: drug to gene association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "drug to gene association_has_evidence" Description: ""
--     * Slot: drug to gene association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "drug to gene association_aggregator_knowledge_source" Description: ""
--     * Slot: drug to gene association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "drug to gene association_subject_closure" Description: ""
--     * Slot: drug to gene association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "drug to gene association_object_closure" Description: ""
--     * Slot: drug to gene association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "drug to gene association_subject_category_closure" Description: ""
--     * Slot: drug to gene association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "drug to gene association_object_category_closure" Description: ""
--     * Slot: drug to gene association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "drug to gene association_subject_label_closure" Description: ""
--     * Slot: drug to gene association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "drug to gene association_object_label_closure" Description: ""
--     * Slot: drug to gene association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "drug to gene association_retrieval_source_ids" Description: ""
--     * Slot: drug to gene association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "drug to gene association_category" Description: ""
--     * Slot: drug to gene association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "drug to gene association_type" Description: ""
--     * Slot: drug to gene association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "drug to gene association_has_attribute" Description: ""
--     * Slot: drug to gene association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "material sample derivation association_qualifiers" Description: ""
--     * Slot: material sample derivation association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "material sample derivation association_publications" Description: ""
--     * Slot: material sample derivation association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "material sample derivation association_has_evidence" Description: ""
--     * Slot: material sample derivation association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "material sample derivation association_aggregator_knowledge_source" Description: ""
--     * Slot: material sample derivation association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "material sample derivation association_subject_closure" Description: ""
--     * Slot: material sample derivation association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "material sample derivation association_object_closure" Description: ""
--     * Slot: material sample derivation association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "material sample derivation association_subject_category_closure" Description: ""
--     * Slot: material sample derivation association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "material sample derivation association_object_category_closure" Description: ""
--     * Slot: material sample derivation association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "material sample derivation association_subject_label_closure" Description: ""
--     * Slot: material sample derivation association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "material sample derivation association_object_label_closure" Description: ""
--     * Slot: material sample derivation association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "material sample derivation association_retrieval_source_ids" Description: ""
--     * Slot: material sample derivation association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "material sample derivation association_category" Description: ""
--     * Slot: material sample derivation association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "material sample derivation association_type" Description: ""
--     * Slot: material sample derivation association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "material sample derivation association_has_attribute" Description: ""
--     * Slot: material sample derivation association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "material sample to disease or phenotypic feature association_qualifiers" Description: ""
--     * Slot: material sample to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "material sample to disease or phenotypic feature association_publications" Description: ""
--     * Slot: material sample to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "material sample to disease or phenotypic feature association_has_evidence" Description: ""
--     * Slot: material sample to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "material sample to disease or phenotypic feature association_aggregator_knowledge_source" Description: ""
--     * Slot: material sample to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "material sample to disease or phenotypic feature association_subject_closure" Description: ""
--     * Slot: material sample to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "material sample to disease or phenotypic feature association_object_closure" Description: ""
--     * Slot: material sample to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "material sample to disease or phenotypic feature association_subject_category_closure" Description: ""
--     * Slot: material sample to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "material sample to disease or phenotypic feature association_object_category_closure" Description: ""
--     * Slot: material sample to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "material sample to disease or phenotypic feature association_subject_label_closure" Description: ""
--     * Slot: material sample to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "material sample to disease or phenotypic feature association_object_label_closure" Description: ""
--     * Slot: material sample to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "material sample to disease or phenotypic feature association_retrieval_source_ids" Description: ""
--     * Slot: material sample to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "material sample to disease or phenotypic feature association_category" Description: ""
--     * Slot: material sample to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "material sample to disease or phenotypic feature association_type" Description: ""
--     * Slot: material sample to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "material sample to disease or phenotypic feature association_has_attribute" Description: ""
--     * Slot: material sample to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "disease to exposure event association_qualifiers" Description: ""
--     * Slot: disease to exposure event association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "disease to exposure event association_publications" Description: ""
--     * Slot: disease to exposure event association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "disease to exposure event association_has_evidence" Description: ""
--     * Slot: disease to exposure event association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "disease to exposure event association_aggregator_knowledge_source" Description: ""
--     * Slot: disease to exposure event association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "disease to exposure event association_subject_closure" Description: ""
--     * Slot: disease to exposure event association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "disease to exposure event association_object_closure" Description: ""
--     * Slot: disease to exposure event association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "disease to exposure event association_subject_category_closure" Description: ""
--     * Slot: disease to exposure event association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "disease to exposure event association_object_category_closure" Description: ""
--     * Slot: disease to exposure event association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "disease to exposure event association_subject_label_closure" Description: ""
--     * Slot: disease to exposure event association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "disease to exposure event association_object_label_closure" Description: ""
--     * Slot: disease to exposure event association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "disease to exposure event association_retrieval_source_ids" Description: ""
--     * Slot: disease to exposure event association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "disease to exposure event association_category" Description: ""
--     * Slot: disease to exposure event association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "disease to exposure event association_type" Description: ""
--     * Slot: disease to exposure event association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "disease to exposure event association_has_attribute" Description: ""
--     * Slot: disease to exposure event association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "exposure event to outcome association_qualifiers" Description: ""
--     * Slot: exposure event to outcome association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "exposure event to outcome association_publications" Description: ""
--     * Slot: exposure event to outcome association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "exposure event to outcome association_has_evidence" Description: ""
--     * Slot: exposure event to outcome association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "exposure event to outcome association_aggregator_knowledge_source" Description: ""
--     * Slot: exposure event to outcome association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "exposure event to outcome association_subject_closure" Description: ""
--     * Slot: exposure event to outcome association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "exposure event to outcome association_object_closure" Description: ""
--     * Slot: exposure event to outcome association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "exposure event to outcome association_subject_category_closure" Description: ""
--     * Slot: exposure event to outcome association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "exposure event to outcome association_object_category_closure" Description: ""
--     * Slot: exposure event to outcome association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "exposure event to outcome association_subject_label_closure" Description: ""
--     * Slot: exposure event to outcome association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "exposure event to outcome association_object_label_closure" Description: ""
--     * Slot: exposure event to outcome association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "exposure event to outcome association_retrieval_source_ids" Description: ""
--     * Slot: exposure event to outcome association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "exposure event to outcome association_category" Description: ""
--     * Slot: exposure event to outcome association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "exposure event to outcome association_type" Description: ""
--     * Slot: exposure event to outcome association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "exposure event to outcome association_has_attribute" Description: ""
--     * Slot: exposure event to outcome association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "information content entity to named thing association_qualifiers" Description: ""
--     * Slot: information content entity to named thing association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "information content entity to named thing association_publications" Description: ""
--     * Slot: information content entity to named thing association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "information content entity to named thing association_has_evidence" Description: ""
--     * Slot: information content entity to named thing association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "information content entity to named thing association_aggregator_knowledge_source" Description: ""
--     * Slot: information content entity to named thing association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "information content entity to named thing association_subject_closure" Description: ""
--     * Slot: information content entity to named thing association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "information content entity to named thing association_object_closure" Description: ""
--     * Slot: information content entity to named thing association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "information content entity to named thing association_subject_category_closure" Description: ""
--     * Slot: information content entity to named thing association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "information content entity to named thing association_object_category_closure" Description: ""
--     * Slot: information content entity to named thing association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "information content entity to named thing association_subject_label_closure" Description: ""
--     * Slot: information content entity to named thing association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "information content entity to named thing association_object_label_closure" Description: ""
--     * Slot: information content entity to named thing association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "information content entity to named thing association_retrieval_source_ids" Description: ""
--     * Slot: information content entity to named thing association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "information content entity to named thing association_category" Description: ""
--     * Slot: information content entity to named thing association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "information content entity to named thing association_type" Description: ""
--     * Slot: information content entity to named thing association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "information content entity to named thing association_has_attribute" Description: ""
--     * Slot: information content entity to named thing association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "disease or phenotypic feature to location association_qualifiers" Description: ""
--     * Slot: disease or phenotypic feature to location association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "disease or phenotypic feature to location association_publications" Description: ""
--     * Slot: disease or phenotypic feature to location association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "disease or phenotypic feature to location association_has_evidence" Description: ""
--     * Slot: disease or phenotypic feature to location association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "disease or phenotypic feature to location association_aggregator_knowledge_source" Description: ""
--     * Slot: disease or phenotypic feature to location association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "disease or phenotypic feature to location association_subject_closure" Description: ""
--     * Slot: disease or phenotypic feature to location association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "disease or phenotypic feature to location association_object_closure" Description: ""
--     * Slot: disease or phenotypic feature to location association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "disease or phenotypic feature to location association_subject_category_closure" Description: ""
--     * Slot: disease or phenotypic feature to location association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "disease or phenotypic feature to location association_object_category_closure" Description: ""
--     * Slot: disease or phenotypic feature to location association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "disease or phenotypic feature to location association_subject_label_closure" Description: ""
--     * Slot: disease or phenotypic feature to location association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "disease or phenotypic feature to location association_object_label_closure" Description: ""
--     * Slot: disease or phenotypic feature to location association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "disease or phenotypic feature to location association_retrieval_source_ids" Description: ""
--     * Slot: disease or phenotypic feature to location association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "disease or phenotypic feature to location association_category" Description: ""
--     * Slot: disease or phenotypic feature to location association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "disease or phenotypic feature to location association_type" Description: ""
--     * Slot: disease or phenotypic feature to location association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "disease or phenotypic feature to location association_has_attribute" Description: ""
--     * Slot: disease or phenotypic feature to location association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "disease or phenotypic feature to genetic inheritance association_qualifiers" Description: ""
--     * Slot: disease or phenotypic feature to genetic inheritance association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "disease or phenotypic feature to genetic inheritance association_publications" Description: ""
--     * Slot: disease or phenotypic feature to genetic inheritance association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "disease or phenotypic feature to genetic inheritance association_has_evidence" Description: ""
--     * Slot: disease or phenotypic feature to genetic inheritance association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "disease or phenotypic feature to genetic inheritance association_aggregator_knowledge_source" Description: ""
--     * Slot: disease or phenotypic feature to genetic inheritance association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "disease or phenotypic feature to genetic inheritance association_subject_closure" Description: ""
--     * Slot: disease or phenotypic feature to genetic inheritance association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "disease or phenotypic feature to genetic inheritance association_object_closure" Description: ""
--     * Slot: disease or phenotypic feature to genetic inheritance association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "disease or phenotypic feature to genetic inheritance association_subject_category_closure" Description: ""
--     * Slot: disease or phenotypic feature to genetic inheritance association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "disease or phenotypic feature to genetic inheritance association_object_category_closure" Description: ""
--     * Slot: disease or phenotypic feature to genetic inheritance association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "disease or phenotypic feature to genetic inheritance association_subject_label_closure" Description: ""
--     * Slot: disease or phenotypic feature to genetic inheritance association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "disease or phenotypic feature to genetic inheritance association_object_label_closure" Description: ""
--     * Slot: disease or phenotypic feature to genetic inheritance association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "disease or phenotypic feature to genetic inheritance association_retrieval_source_ids" Description: ""
--     * Slot: disease or phenotypic feature to genetic inheritance association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "disease or phenotypic feature to genetic inheritance association_category" Description: ""
--     * Slot: disease or phenotypic feature to genetic inheritance association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "disease or phenotypic feature to genetic inheritance association_type" Description: ""
--     * Slot: disease or phenotypic feature to genetic inheritance association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "disease or phenotypic feature to genetic inheritance association_has_attribute" Description: ""
--     * Slot: disease or phenotypic feature to genetic inheritance association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "genotype to phenotypic feature association_qualifiers" Description: ""
--     * Slot: genotype to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "genotype to phenotypic feature association_publications" Description: ""
--     * Slot: genotype to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "genotype to phenotypic feature association_has_evidence" Description: ""
--     * Slot: genotype to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "genotype to phenotypic feature association_aggregator_knowledge_source" Description: ""
--     * Slot: genotype to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "genotype to phenotypic feature association_subject_closure" Description: ""
--     * Slot: genotype to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genotype to phenotypic feature association_object_closure" Description: ""
--     * Slot: genotype to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genotype to phenotypic feature association_subject_category_closure" Description: ""
--     * Slot: genotype to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genotype to phenotypic feature association_object_category_closure" Description: ""
--     * Slot: genotype to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genotype to phenotypic feature association_subject_label_closure" Description: ""
--     * Slot: genotype to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genotype to phenotypic feature association_object_label_closure" Description: ""
--     * Slot: genotype to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genotype to phenotypic feature association_retrieval_source_ids" Description: ""
--     * Slot: genotype to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "genotype to phenotypic feature association_category" Description: ""
--     * Slot: genotype to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "genotype to phenotypic feature association_type" Description: ""
--     * Slot: genotype to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "genotype to phenotypic feature association_has_attribute" Description: ""
--     * Slot: genotype to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "exposure event to phenotypic feature association_qualifiers" Description: ""
--     * Slot: exposure event to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "exposure event to phenotypic feature association_publications" Description: ""
--     * Slot: exposure event to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "exposure event to phenotypic feature association_has_evidence" Description: ""
--     * Slot: exposure event to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "exposure event to phenotypic feature association_aggregator_knowledge_source" Description: ""
--     * Slot: exposure event to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "exposure event to phenotypic feature association_subject_closure" Description: ""
--     * Slot: exposure event to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "exposure event to phenotypic feature association_object_closure" Description: ""
--     * Slot: exposure event to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "exposure event to phenotypic feature association_subject_category_closure" Description: ""
--     * Slot: exposure event to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "exposure event to phenotypic feature association_object_category_closure" Description: ""
--     * Slot: exposure event to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "exposure event to phenotypic feature association_subject_label_closure" Description: ""
--     * Slot: exposure event to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "exposure event to phenotypic feature association_object_label_closure" Description: ""
--     * Slot: exposure event to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "exposure event to phenotypic feature association_retrieval_source_ids" Description: ""
--     * Slot: exposure event to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "exposure event to phenotypic feature association_category" Description: ""
--     * Slot: exposure event to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "exposure event to phenotypic feature association_type" Description: ""
--     * Slot: exposure event to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "exposure event to phenotypic feature association_has_attribute" Description: ""
--     * Slot: exposure event to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "disease to phenotypic feature association_qualifiers" Description: ""
--     * Slot: disease to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "disease to phenotypic feature association_publications" Description: ""
--     * Slot: disease to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "disease to phenotypic feature association_has_evidence" Description: ""
--     * Slot: disease to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "disease to phenotypic feature association_aggregator_knowledge_source" Description: ""
--     * Slot: disease to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "disease to phenotypic feature association_subject_closure" Description: ""
--     * Slot: disease to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "disease to phenotypic feature association_object_closure" Description: ""
--     * Slot: disease to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "disease to phenotypic feature association_subject_category_closure" Description: ""
--     * Slot: disease to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "disease to phenotypic feature association_object_category_closure" Description: ""
--     * Slot: disease to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "disease to phenotypic feature association_subject_label_closure" Description: ""
--     * Slot: disease to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "disease to phenotypic feature association_object_label_closure" Description: ""
--     * Slot: disease to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "disease to phenotypic feature association_retrieval_source_ids" Description: ""
--     * Slot: disease to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "disease to phenotypic feature association_category" Description: ""
--     * Slot: disease to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "disease to phenotypic feature association_type" Description: ""
--     * Slot: disease to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "disease to phenotypic feature association_has_attribute" Description: ""
--     * Slot: disease to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "case to phenotypic feature association_qualifiers" Description: ""
--     * Slot: case to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "case to phenotypic feature association_publications" Description: ""
--     * Slot: case to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "case to phenotypic feature association_has_evidence" Description: ""
--     * Slot: case to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "case to phenotypic feature association_aggregator_knowledge_source" Description: ""
--     * Slot: case to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "case to phenotypic feature association_subject_closure" Description: ""
--     * Slot: case to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "case to phenotypic feature association_object_closure" Description: ""
--     * Slot: case to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "case to phenotypic feature association_subject_category_closure" Description: ""
--     * Slot: case to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "case to phenotypic feature association_object_category_closure" Description: ""
--     * Slot: case to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "case to phenotypic feature association_subject_label_closure" Description: ""
--     * Slot: case to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "case to phenotypic feature association_object_label_closure" Description: ""
--     * Slot: case to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "case to phenotypic feature association_retrieval_source_ids" Description: ""
--     * Slot: case to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "case to phenotypic feature association_category" Description: ""
--     * Slot: case to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "case to phenotypic feature association_type" Description: ""
--     * Slot: case to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "case to phenotypic feature association_has_attribute" Description: ""
--     * Slot: case to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "behavior to behavioral feature association_qualifiers" Description: ""
--     * Slot: behavior to behavioral feature association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "behavior to behavioral feature association_publications" Description: ""
--     * Slot: behavior to behavioral feature association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "behavior to behavioral feature association_has_evidence" Description: ""
--     * Slot: behavior to behavioral feature association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "behavior to behavioral feature association_aggregator_knowledge_source" Description: ""
--     * Slot: behavior to behavioral feature association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "behavior to behavioral feature association_subject_closure" Description: ""
--     * Slot: behavior to behavioral feature association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "behavior to behavioral feature association_object_closure" Description: ""
--     * Slot: behavior to behavioral feature association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "behavior to behavioral feature association_subject_category_closure" Description: ""
--     * Slot: behavior to behavioral feature association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "behavior to behavioral feature association_object_category_closure" Description: ""
--     * Slot: behavior to behavioral feature association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "behavior to behavioral feature association_subject_label_closure" Description: ""
--     * Slot: behavior to behavioral feature association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "behavior to behavioral feature association_object_label_closure" Description: ""
--     * Slot: behavior to behavioral feature association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "behavior to behavioral feature association_retrieval_source_ids" Description: ""
--     * Slot: behavior to behavioral feature association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "behavior to behavioral feature association_category" Description: ""
--     * Slot: behavior to behavioral feature association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "behavior to behavioral feature association_type" Description: ""
--     * Slot: behavior to behavioral feature association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "behavior to behavioral feature association_has_attribute" Description: ""
--     * Slot: behavior to behavioral feature association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "gene to disease or phenotypic feature association_qualifiers" Description: ""
--     * Slot: gene to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "gene to disease or phenotypic feature association_publications" Description: ""
--     * Slot: gene to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "gene to disease or phenotypic feature association_has_evidence" Description: ""
--     * Slot: gene to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "gene to disease or phenotypic feature association_aggregator_knowledge_source" Description: ""
--     * Slot: gene to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "gene to disease or phenotypic feature association_subject_closure" Description: ""
--     * Slot: gene to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to disease or phenotypic feature association_object_closure" Description: ""
--     * Slot: gene to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to disease or phenotypic feature association_subject_category_closure" Description: ""
--     * Slot: gene to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to disease or phenotypic feature association_object_category_closure" Description: ""
--     * Slot: gene to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to disease or phenotypic feature association_subject_label_closure" Description: ""
--     * Slot: gene to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to disease or phenotypic feature association_object_label_closure" Description: ""
--     * Slot: gene to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to disease or phenotypic feature association_retrieval_source_ids" Description: ""
--     * Slot: gene to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "gene to disease or phenotypic feature association_category" Description: ""
--     * Slot: gene to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "gene to disease or phenotypic feature association_type" Description: ""
--     * Slot: gene to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "gene to disease or phenotypic feature association_has_attribute" Description: ""
--     * Slot: gene to disease or phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "gene to phenotypic feature association_qualifiers" Description: ""
--     * Slot: gene to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "gene to phenotypic feature association_publications" Description: ""
--     * Slot: gene to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "gene to phenotypic feature association_has_evidence" Description: ""
--     * Slot: gene to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "gene to phenotypic feature association_aggregator_knowledge_source" Description: ""
--     * Slot: gene to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "gene to phenotypic feature association_subject_closure" Description: ""
--     * Slot: gene to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to phenotypic feature association_object_closure" Description: ""
--     * Slot: gene to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to phenotypic feature association_subject_category_closure" Description: ""
--     * Slot: gene to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to phenotypic feature association_object_category_closure" Description: ""
--     * Slot: gene to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to phenotypic feature association_subject_label_closure" Description: ""
--     * Slot: gene to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to phenotypic feature association_object_label_closure" Description: ""
--     * Slot: gene to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to phenotypic feature association_retrieval_source_ids" Description: ""
--     * Slot: gene to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "gene to phenotypic feature association_category" Description: ""
--     * Slot: gene to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "gene to phenotypic feature association_type" Description: ""
--     * Slot: gene to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "gene to phenotypic feature association_has_attribute" Description: ""
--     * Slot: gene to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "gene to disease association_qualifiers" Description: ""
--     * Slot: gene to disease association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "gene to disease association_publications" Description: ""
--     * Slot: gene to disease association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "gene to disease association_has_evidence" Description: ""
--     * Slot: gene to disease association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "gene to disease association_aggregator_knowledge_source" Description: ""
--     * Slot: gene to disease association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "gene to disease association_subject_closure" Description: ""
--     * Slot: gene to disease association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to disease association_object_closure" Description: ""
--     * Slot: gene to disease association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to disease association_subject_category_closure" Description: ""
--     * Slot: gene to disease association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to disease association_object_category_closure" Description: ""
--     * Slot: gene to disease association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to disease association_subject_label_closure" Description: ""
--     * Slot: gene to disease association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to disease association_object_label_closure" Description: ""
--     * Slot: gene to disease association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to disease association_retrieval_source_ids" Description: ""
--     * Slot: gene to disease association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "gene to disease association_category" Description: ""
--     * Slot: gene to disease association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "gene to disease association_type" Description: ""
--     * Slot: gene to disease association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "gene to disease association_has_attribute" Description: ""
--     * Slot: gene to disease association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "causal gene to disease association_qualifiers" Description: ""
--     * Slot: causal gene to disease association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "causal gene to disease association_publications" Description: ""
--     * Slot: causal gene to disease association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "causal gene to disease association_has_evidence" Description: ""
--     * Slot: causal gene to disease association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "causal gene to disease association_aggregator_knowledge_source" Description: ""
--     * Slot: causal gene to disease association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "causal gene to disease association_subject_closure" Description: ""
--     * Slot: causal gene to disease association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "causal gene to disease association_object_closure" Description: ""
--     * Slot: causal gene to disease association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "causal gene to disease association_subject_category_closure" Description: ""
--     * Slot: causal gene to disease association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "causal gene to disease association_object_category_closure" Description: ""
--     * Slot: causal gene to disease association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "causal gene to disease association_subject_label_closure" Description: ""
--     * Slot: causal gene to disease association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "causal gene to disease association_object_label_closure" Description: ""
--     * Slot: causal gene to disease association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "causal gene to disease association_retrieval_source_ids" Description: ""
--     * Slot: causal gene to disease association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "causal gene to disease association_category" Description: ""
--     * Slot: causal gene to disease association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "causal gene to disease association_type" Description: ""
--     * Slot: causal gene to disease association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "causal gene to disease association_has_attribute" Description: ""
--     * Slot: causal gene to disease association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "correlated gene to disease association_qualifiers" Description: ""
--     * Slot: correlated gene to disease association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "correlated gene to disease association_publications" Description: ""
--     * Slot: correlated gene to disease association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "correlated gene to disease association_has_evidence" Description: ""
--     * Slot: correlated gene to disease association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "correlated gene to disease association_aggregator_knowledge_source" Description: ""
--     * Slot: correlated gene to disease association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "correlated gene to disease association_subject_closure" Description: ""
--     * Slot: correlated gene to disease association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "correlated gene to disease association_object_closure" Description: ""
--     * Slot: correlated gene to disease association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "correlated gene to disease association_subject_category_closure" Description: ""
--     * Slot: correlated gene to disease association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "correlated gene to disease association_object_category_closure" Description: ""
--     * Slot: correlated gene to disease association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "correlated gene to disease association_subject_label_closure" Description: ""
--     * Slot: correlated gene to disease association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "correlated gene to disease association_object_label_closure" Description: ""
--     * Slot: correlated gene to disease association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "correlated gene to disease association_retrieval_source_ids" Description: ""
--     * Slot: correlated gene to disease association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "correlated gene to disease association_category" Description: ""
--     * Slot: correlated gene to disease association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "correlated gene to disease association_type" Description: ""
--     * Slot: correlated gene to disease association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "correlated gene to disease association_has_attribute" Description: ""
--     * Slot: correlated gene to disease association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "druggable gene to disease association_qualifiers" Description: ""
--     * Slot: druggable gene to disease association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "druggable gene to disease association_publications" Description: ""
--     * Slot: druggable gene to disease association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "druggable gene to disease association_has_evidence" Description: ""
--     * Slot: druggable gene to disease association_id Description: Autocreated FK slot
--     * Slot: has_evidence Description: connects an association to an instance of supporting evidence
-- # Class: "druggable gene to disease association_aggregator_knowledge_source" Description: ""
--     * Slot: druggable gene to disease association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "druggable gene to disease association_subject_closure" Description: ""
--     * Slot: druggable gene to disease association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "druggable gene to disease association_object_closure" Description: ""
--     * Slot: druggable gene to disease association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "druggable gene to disease association_subject_category_closure" Description: ""
--     * Slot: druggable gene to disease association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "druggable gene to disease association_object_category_closure" Description: ""
--     * Slot: druggable gene to disease association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "druggable gene to disease association_subject_label_closure" Description: ""
--     * Slot: druggable gene to disease association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "druggable gene to disease association_object_label_closure" Description: ""
--     * Slot: druggable gene to disease association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "druggable gene to disease association_retrieval_source_ids" Description: ""
--     * Slot: druggable gene to disease association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "druggable gene to disease association_category" Description: ""
--     * Slot: druggable gene to disease association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "druggable gene to disease association_type" Description: ""
--     * Slot: druggable gene to disease association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "druggable gene to disease association_has_attribute" Description: ""
--     * Slot: druggable gene to disease association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "phenotypic feature to disease association_qualifiers" Description: ""
--     * Slot: phenotypic feature to disease association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "phenotypic feature to disease association_publications" Description: ""
--     * Slot: phenotypic feature to disease association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "phenotypic feature to disease association_has_evidence" Description: ""
--     * Slot: phenotypic feature to disease association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "phenotypic feature to disease association_aggregator_knowledge_source" Description: ""
--     * Slot: phenotypic feature to disease association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "phenotypic feature to disease association_subject_closure" Description: ""
--     * Slot: phenotypic feature to disease association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "phenotypic feature to disease association_object_closure" Description: ""
--     * Slot: phenotypic feature to disease association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "phenotypic feature to disease association_subject_category_closure" Description: ""
--     * Slot: phenotypic feature to disease association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "phenotypic feature to disease association_object_category_closure" Description: ""
--     * Slot: phenotypic feature to disease association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "phenotypic feature to disease association_subject_label_closure" Description: ""
--     * Slot: phenotypic feature to disease association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "phenotypic feature to disease association_object_label_closure" Description: ""
--     * Slot: phenotypic feature to disease association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "phenotypic feature to disease association_retrieval_source_ids" Description: ""
--     * Slot: phenotypic feature to disease association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "phenotypic feature to disease association_category" Description: ""
--     * Slot: phenotypic feature to disease association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "phenotypic feature to disease association_type" Description: ""
--     * Slot: phenotypic feature to disease association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "phenotypic feature to disease association_has_attribute" Description: ""
--     * Slot: phenotypic feature to disease association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "variant to gene association_qualifiers" Description: ""
--     * Slot: variant to gene association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "variant to gene association_publications" Description: ""
--     * Slot: variant to gene association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "variant to gene association_has_evidence" Description: ""
--     * Slot: variant to gene association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "variant to gene association_aggregator_knowledge_source" Description: ""
--     * Slot: variant to gene association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "variant to gene association_subject_closure" Description: ""
--     * Slot: variant to gene association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "variant to gene association_object_closure" Description: ""
--     * Slot: variant to gene association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "variant to gene association_subject_category_closure" Description: ""
--     * Slot: variant to gene association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "variant to gene association_object_category_closure" Description: ""
--     * Slot: variant to gene association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "variant to gene association_subject_label_closure" Description: ""
--     * Slot: variant to gene association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "variant to gene association_object_label_closure" Description: ""
--     * Slot: variant to gene association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "variant to gene association_retrieval_source_ids" Description: ""
--     * Slot: variant to gene association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "variant to gene association_category" Description: ""
--     * Slot: variant to gene association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "variant to gene association_type" Description: ""
--     * Slot: variant to gene association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "variant to gene association_has_attribute" Description: ""
--     * Slot: variant to gene association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "variant to gene expression association_qualifiers" Description: ""
--     * Slot: variant to gene expression association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "variant to gene expression association_publications" Description: ""
--     * Slot: variant to gene expression association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "variant to gene expression association_has_evidence" Description: ""
--     * Slot: variant to gene expression association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "variant to gene expression association_aggregator_knowledge_source" Description: ""
--     * Slot: variant to gene expression association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "variant to gene expression association_subject_closure" Description: ""
--     * Slot: variant to gene expression association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "variant to gene expression association_object_closure" Description: ""
--     * Slot: variant to gene expression association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "variant to gene expression association_subject_category_closure" Description: ""
--     * Slot: variant to gene expression association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "variant to gene expression association_object_category_closure" Description: ""
--     * Slot: variant to gene expression association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "variant to gene expression association_subject_label_closure" Description: ""
--     * Slot: variant to gene expression association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "variant to gene expression association_object_label_closure" Description: ""
--     * Slot: variant to gene expression association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "variant to gene expression association_retrieval_source_ids" Description: ""
--     * Slot: variant to gene expression association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "variant to gene expression association_category" Description: ""
--     * Slot: variant to gene expression association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "variant to gene expression association_type" Description: ""
--     * Slot: variant to gene expression association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "variant to gene expression association_has_attribute" Description: ""
--     * Slot: variant to gene expression association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "variant to population association_qualifiers" Description: ""
--     * Slot: variant to population association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "variant to population association_publications" Description: ""
--     * Slot: variant to population association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "variant to population association_has_evidence" Description: ""
--     * Slot: variant to population association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "variant to population association_aggregator_knowledge_source" Description: ""
--     * Slot: variant to population association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "variant to population association_subject_closure" Description: ""
--     * Slot: variant to population association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "variant to population association_object_closure" Description: ""
--     * Slot: variant to population association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "variant to population association_subject_category_closure" Description: ""
--     * Slot: variant to population association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "variant to population association_object_category_closure" Description: ""
--     * Slot: variant to population association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "variant to population association_subject_label_closure" Description: ""
--     * Slot: variant to population association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "variant to population association_object_label_closure" Description: ""
--     * Slot: variant to population association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "variant to population association_retrieval_source_ids" Description: ""
--     * Slot: variant to population association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "variant to population association_category" Description: ""
--     * Slot: variant to population association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "variant to population association_type" Description: ""
--     * Slot: variant to population association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "variant to population association_has_attribute" Description: ""
--     * Slot: variant to population association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "population to population association_qualifiers" Description: ""
--     * Slot: population to population association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "population to population association_publications" Description: ""
--     * Slot: population to population association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "population to population association_has_evidence" Description: ""
--     * Slot: population to population association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "population to population association_aggregator_knowledge_source" Description: ""
--     * Slot: population to population association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "population to population association_subject_closure" Description: ""
--     * Slot: population to population association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "population to population association_object_closure" Description: ""
--     * Slot: population to population association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "population to population association_subject_category_closure" Description: ""
--     * Slot: population to population association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "population to population association_object_category_closure" Description: ""
--     * Slot: population to population association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "population to population association_subject_label_closure" Description: ""
--     * Slot: population to population association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "population to population association_object_label_closure" Description: ""
--     * Slot: population to population association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "population to population association_retrieval_source_ids" Description: ""
--     * Slot: population to population association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "population to population association_category" Description: ""
--     * Slot: population to population association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "population to population association_type" Description: ""
--     * Slot: population to population association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "population to population association_has_attribute" Description: ""
--     * Slot: population to population association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "variant to phenotypic feature association_qualifiers" Description: ""
--     * Slot: variant to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "variant to phenotypic feature association_publications" Description: ""
--     * Slot: variant to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "variant to phenotypic feature association_has_evidence" Description: ""
--     * Slot: variant to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "variant to phenotypic feature association_aggregator_knowledge_source" Description: ""
--     * Slot: variant to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "variant to phenotypic feature association_subject_closure" Description: ""
--     * Slot: variant to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "variant to phenotypic feature association_object_closure" Description: ""
--     * Slot: variant to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "variant to phenotypic feature association_subject_category_closure" Description: ""
--     * Slot: variant to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "variant to phenotypic feature association_object_category_closure" Description: ""
--     * Slot: variant to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "variant to phenotypic feature association_subject_label_closure" Description: ""
--     * Slot: variant to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "variant to phenotypic feature association_object_label_closure" Description: ""
--     * Slot: variant to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "variant to phenotypic feature association_retrieval_source_ids" Description: ""
--     * Slot: variant to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "variant to phenotypic feature association_category" Description: ""
--     * Slot: variant to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "variant to phenotypic feature association_type" Description: ""
--     * Slot: variant to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "variant to phenotypic feature association_has_attribute" Description: ""
--     * Slot: variant to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "variant to disease association_qualifiers" Description: ""
--     * Slot: variant to disease association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "variant to disease association_publications" Description: ""
--     * Slot: variant to disease association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "variant to disease association_has_evidence" Description: ""
--     * Slot: variant to disease association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "variant to disease association_aggregator_knowledge_source" Description: ""
--     * Slot: variant to disease association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "variant to disease association_subject_closure" Description: ""
--     * Slot: variant to disease association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "variant to disease association_object_closure" Description: ""
--     * Slot: variant to disease association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "variant to disease association_subject_category_closure" Description: ""
--     * Slot: variant to disease association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "variant to disease association_object_category_closure" Description: ""
--     * Slot: variant to disease association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "variant to disease association_subject_label_closure" Description: ""
--     * Slot: variant to disease association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "variant to disease association_object_label_closure" Description: ""
--     * Slot: variant to disease association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "variant to disease association_retrieval_source_ids" Description: ""
--     * Slot: variant to disease association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "variant to disease association_category" Description: ""
--     * Slot: variant to disease association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "variant to disease association_type" Description: ""
--     * Slot: variant to disease association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "variant to disease association_has_attribute" Description: ""
--     * Slot: variant to disease association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "genotype to disease association_qualifiers" Description: ""
--     * Slot: genotype to disease association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "genotype to disease association_publications" Description: ""
--     * Slot: genotype to disease association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "genotype to disease association_has_evidence" Description: ""
--     * Slot: genotype to disease association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "genotype to disease association_aggregator_knowledge_source" Description: ""
--     * Slot: genotype to disease association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "genotype to disease association_subject_closure" Description: ""
--     * Slot: genotype to disease association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genotype to disease association_object_closure" Description: ""
--     * Slot: genotype to disease association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genotype to disease association_subject_category_closure" Description: ""
--     * Slot: genotype to disease association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genotype to disease association_object_category_closure" Description: ""
--     * Slot: genotype to disease association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genotype to disease association_subject_label_closure" Description: ""
--     * Slot: genotype to disease association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genotype to disease association_object_label_closure" Description: ""
--     * Slot: genotype to disease association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genotype to disease association_retrieval_source_ids" Description: ""
--     * Slot: genotype to disease association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "genotype to disease association_category" Description: ""
--     * Slot: genotype to disease association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "genotype to disease association_type" Description: ""
--     * Slot: genotype to disease association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "genotype to disease association_has_attribute" Description: ""
--     * Slot: genotype to disease association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "gene as a model of disease association_qualifiers" Description: ""
--     * Slot: gene as a model of disease association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "gene as a model of disease association_publications" Description: ""
--     * Slot: gene as a model of disease association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "gene as a model of disease association_has_evidence" Description: ""
--     * Slot: gene as a model of disease association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "gene as a model of disease association_aggregator_knowledge_source" Description: ""
--     * Slot: gene as a model of disease association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "gene as a model of disease association_subject_closure" Description: ""
--     * Slot: gene as a model of disease association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene as a model of disease association_object_closure" Description: ""
--     * Slot: gene as a model of disease association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene as a model of disease association_subject_category_closure" Description: ""
--     * Slot: gene as a model of disease association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene as a model of disease association_object_category_closure" Description: ""
--     * Slot: gene as a model of disease association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene as a model of disease association_subject_label_closure" Description: ""
--     * Slot: gene as a model of disease association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene as a model of disease association_object_label_closure" Description: ""
--     * Slot: gene as a model of disease association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene as a model of disease association_retrieval_source_ids" Description: ""
--     * Slot: gene as a model of disease association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "gene as a model of disease association_category" Description: ""
--     * Slot: gene as a model of disease association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "gene as a model of disease association_type" Description: ""
--     * Slot: gene as a model of disease association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "gene as a model of disease association_has_attribute" Description: ""
--     * Slot: gene as a model of disease association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "variant as a model of disease association_qualifiers" Description: ""
--     * Slot: variant as a model of disease association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "variant as a model of disease association_publications" Description: ""
--     * Slot: variant as a model of disease association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "variant as a model of disease association_has_evidence" Description: ""
--     * Slot: variant as a model of disease association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "variant as a model of disease association_aggregator_knowledge_source" Description: ""
--     * Slot: variant as a model of disease association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "variant as a model of disease association_subject_closure" Description: ""
--     * Slot: variant as a model of disease association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "variant as a model of disease association_object_closure" Description: ""
--     * Slot: variant as a model of disease association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "variant as a model of disease association_subject_category_closure" Description: ""
--     * Slot: variant as a model of disease association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "variant as a model of disease association_object_category_closure" Description: ""
--     * Slot: variant as a model of disease association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "variant as a model of disease association_subject_label_closure" Description: ""
--     * Slot: variant as a model of disease association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "variant as a model of disease association_object_label_closure" Description: ""
--     * Slot: variant as a model of disease association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "variant as a model of disease association_retrieval_source_ids" Description: ""
--     * Slot: variant as a model of disease association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "variant as a model of disease association_category" Description: ""
--     * Slot: variant as a model of disease association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "variant as a model of disease association_type" Description: ""
--     * Slot: variant as a model of disease association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "variant as a model of disease association_has_attribute" Description: ""
--     * Slot: variant as a model of disease association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "genotype as a model of disease association_qualifiers" Description: ""
--     * Slot: genotype as a model of disease association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "genotype as a model of disease association_publications" Description: ""
--     * Slot: genotype as a model of disease association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "genotype as a model of disease association_has_evidence" Description: ""
--     * Slot: genotype as a model of disease association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "genotype as a model of disease association_aggregator_knowledge_source" Description: ""
--     * Slot: genotype as a model of disease association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "genotype as a model of disease association_subject_closure" Description: ""
--     * Slot: genotype as a model of disease association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genotype as a model of disease association_object_closure" Description: ""
--     * Slot: genotype as a model of disease association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genotype as a model of disease association_subject_category_closure" Description: ""
--     * Slot: genotype as a model of disease association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genotype as a model of disease association_object_category_closure" Description: ""
--     * Slot: genotype as a model of disease association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genotype as a model of disease association_subject_label_closure" Description: ""
--     * Slot: genotype as a model of disease association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genotype as a model of disease association_object_label_closure" Description: ""
--     * Slot: genotype as a model of disease association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genotype as a model of disease association_retrieval_source_ids" Description: ""
--     * Slot: genotype as a model of disease association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "genotype as a model of disease association_category" Description: ""
--     * Slot: genotype as a model of disease association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "genotype as a model of disease association_type" Description: ""
--     * Slot: genotype as a model of disease association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "genotype as a model of disease association_has_attribute" Description: ""
--     * Slot: genotype as a model of disease association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "cell line as a model of disease association_qualifiers" Description: ""
--     * Slot: cell line as a model of disease association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "cell line as a model of disease association_publications" Description: ""
--     * Slot: cell line as a model of disease association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "cell line as a model of disease association_has_evidence" Description: ""
--     * Slot: cell line as a model of disease association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "cell line as a model of disease association_aggregator_knowledge_source" Description: ""
--     * Slot: cell line as a model of disease association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "cell line as a model of disease association_subject_closure" Description: ""
--     * Slot: cell line as a model of disease association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "cell line as a model of disease association_object_closure" Description: ""
--     * Slot: cell line as a model of disease association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "cell line as a model of disease association_subject_category_closure" Description: ""
--     * Slot: cell line as a model of disease association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "cell line as a model of disease association_object_category_closure" Description: ""
--     * Slot: cell line as a model of disease association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "cell line as a model of disease association_subject_label_closure" Description: ""
--     * Slot: cell line as a model of disease association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "cell line as a model of disease association_object_label_closure" Description: ""
--     * Slot: cell line as a model of disease association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "cell line as a model of disease association_retrieval_source_ids" Description: ""
--     * Slot: cell line as a model of disease association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "cell line as a model of disease association_category" Description: ""
--     * Slot: cell line as a model of disease association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "cell line as a model of disease association_type" Description: ""
--     * Slot: cell line as a model of disease association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "cell line as a model of disease association_has_attribute" Description: ""
--     * Slot: cell line as a model of disease association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "organismal entity as a model of disease association_qualifiers" Description: ""
--     * Slot: organismal entity as a model of disease association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "organismal entity as a model of disease association_publications" Description: ""
--     * Slot: organismal entity as a model of disease association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "organismal entity as a model of disease association_has_evidence" Description: ""
--     * Slot: organismal entity as a model of disease association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "organismal entity as a model of disease association_aggregator_knowledge_source" Description: ""
--     * Slot: organismal entity as a model of disease association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "organismal entity as a model of disease association_subject_closure" Description: ""
--     * Slot: organismal entity as a model of disease association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "organismal entity as a model of disease association_object_closure" Description: ""
--     * Slot: organismal entity as a model of disease association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "organismal entity as a model of disease association_subject_category_closure" Description: ""
--     * Slot: organismal entity as a model of disease association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "organismal entity as a model of disease association_object_category_closure" Description: ""
--     * Slot: organismal entity as a model of disease association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "organismal entity as a model of disease association_subject_label_closure" Description: ""
--     * Slot: organismal entity as a model of disease association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "organismal entity as a model of disease association_object_label_closure" Description: ""
--     * Slot: organismal entity as a model of disease association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "organismal entity as a model of disease association_retrieval_source_ids" Description: ""
--     * Slot: organismal entity as a model of disease association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "organismal entity as a model of disease association_category" Description: ""
--     * Slot: organismal entity as a model of disease association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "organismal entity as a model of disease association_type" Description: ""
--     * Slot: organismal entity as a model of disease association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "organismal entity as a model of disease association_has_attribute" Description: ""
--     * Slot: organismal entity as a model of disease association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "organism to organism association_qualifiers" Description: ""
--     * Slot: organism to organism association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "organism to organism association_publications" Description: ""
--     * Slot: organism to organism association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "organism to organism association_has_evidence" Description: ""
--     * Slot: organism to organism association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "organism to organism association_aggregator_knowledge_source" Description: ""
--     * Slot: organism to organism association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "organism to organism association_subject_closure" Description: ""
--     * Slot: organism to organism association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "organism to organism association_object_closure" Description: ""
--     * Slot: organism to organism association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "organism to organism association_subject_category_closure" Description: ""
--     * Slot: organism to organism association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "organism to organism association_object_category_closure" Description: ""
--     * Slot: organism to organism association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "organism to organism association_subject_label_closure" Description: ""
--     * Slot: organism to organism association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "organism to organism association_object_label_closure" Description: ""
--     * Slot: organism to organism association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "organism to organism association_retrieval_source_ids" Description: ""
--     * Slot: organism to organism association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "organism to organism association_category" Description: ""
--     * Slot: organism to organism association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "organism to organism association_type" Description: ""
--     * Slot: organism to organism association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "organism to organism association_has_attribute" Description: ""
--     * Slot: organism to organism association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "taxon to taxon association_qualifiers" Description: ""
--     * Slot: taxon to taxon association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "taxon to taxon association_publications" Description: ""
--     * Slot: taxon to taxon association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "taxon to taxon association_has_evidence" Description: ""
--     * Slot: taxon to taxon association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "taxon to taxon association_aggregator_knowledge_source" Description: ""
--     * Slot: taxon to taxon association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "taxon to taxon association_subject_closure" Description: ""
--     * Slot: taxon to taxon association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "taxon to taxon association_object_closure" Description: ""
--     * Slot: taxon to taxon association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "taxon to taxon association_subject_category_closure" Description: ""
--     * Slot: taxon to taxon association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "taxon to taxon association_object_category_closure" Description: ""
--     * Slot: taxon to taxon association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "taxon to taxon association_subject_label_closure" Description: ""
--     * Slot: taxon to taxon association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "taxon to taxon association_object_label_closure" Description: ""
--     * Slot: taxon to taxon association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "taxon to taxon association_retrieval_source_ids" Description: ""
--     * Slot: taxon to taxon association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "taxon to taxon association_category" Description: ""
--     * Slot: taxon to taxon association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "taxon to taxon association_type" Description: ""
--     * Slot: taxon to taxon association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "taxon to taxon association_has_attribute" Description: ""
--     * Slot: taxon to taxon association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "gene has variant that contributes to disease association_qualifiers" Description: ""
--     * Slot: gene has variant that contributes to disease association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "gene has variant that contributes to disease association_publications" Description: ""
--     * Slot: gene has variant that contributes to disease association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "gene has variant that contributes to disease association_has_evidence" Description: ""
--     * Slot: gene has variant that contributes to disease association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "gene has variant that contributes to disease association_aggregator_knowledge_source" Description: ""
--     * Slot: gene has variant that contributes to disease association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "gene has variant that contributes to disease association_subject_closure" Description: ""
--     * Slot: gene has variant that contributes to disease association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene has variant that contributes to disease association_object_closure" Description: ""
--     * Slot: gene has variant that contributes to disease association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene has variant that contributes to disease association_subject_category_closure" Description: ""
--     * Slot: gene has variant that contributes to disease association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene has variant that contributes to disease association_object_category_closure" Description: ""
--     * Slot: gene has variant that contributes to disease association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene has variant that contributes to disease association_subject_label_closure" Description: ""
--     * Slot: gene has variant that contributes to disease association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene has variant that contributes to disease association_object_label_closure" Description: ""
--     * Slot: gene has variant that contributes to disease association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene has variant that contributes to disease association_retrieval_source_ids" Description: ""
--     * Slot: gene has variant that contributes to disease association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "gene has variant that contributes to disease association_category" Description: ""
--     * Slot: gene has variant that contributes to disease association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "gene has variant that contributes to disease association_type" Description: ""
--     * Slot: gene has variant that contributes to disease association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "gene has variant that contributes to disease association_has_attribute" Description: ""
--     * Slot: gene has variant that contributes to disease association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "gene to expression site association_qualifiers" Description: ""
--     * Slot: gene to expression site association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "gene to expression site association_publications" Description: ""
--     * Slot: gene to expression site association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "gene to expression site association_has_evidence" Description: ""
--     * Slot: gene to expression site association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "gene to expression site association_aggregator_knowledge_source" Description: ""
--     * Slot: gene to expression site association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "gene to expression site association_subject_closure" Description: ""
--     * Slot: gene to expression site association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to expression site association_object_closure" Description: ""
--     * Slot: gene to expression site association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to expression site association_subject_category_closure" Description: ""
--     * Slot: gene to expression site association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to expression site association_object_category_closure" Description: ""
--     * Slot: gene to expression site association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to expression site association_subject_label_closure" Description: ""
--     * Slot: gene to expression site association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to expression site association_object_label_closure" Description: ""
--     * Slot: gene to expression site association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to expression site association_retrieval_source_ids" Description: ""
--     * Slot: gene to expression site association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "gene to expression site association_category" Description: ""
--     * Slot: gene to expression site association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "gene to expression site association_type" Description: ""
--     * Slot: gene to expression site association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "gene to expression site association_has_attribute" Description: ""
--     * Slot: gene to expression site association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "sequence variant modulates treatment association_qualifiers" Description: ""
--     * Slot: sequence variant modulates treatment association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "sequence variant modulates treatment association_publications" Description: ""
--     * Slot: sequence variant modulates treatment association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "sequence variant modulates treatment association_has_evidence" Description: ""
--     * Slot: sequence variant modulates treatment association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "sequence variant modulates treatment association_aggregator_knowledge_source" Description: ""
--     * Slot: sequence variant modulates treatment association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "sequence variant modulates treatment association_subject_closure" Description: ""
--     * Slot: sequence variant modulates treatment association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "sequence variant modulates treatment association_object_closure" Description: ""
--     * Slot: sequence variant modulates treatment association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "sequence variant modulates treatment association_subject_category_closure" Description: ""
--     * Slot: sequence variant modulates treatment association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "sequence variant modulates treatment association_object_category_closure" Description: ""
--     * Slot: sequence variant modulates treatment association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "sequence variant modulates treatment association_subject_label_closure" Description: ""
--     * Slot: sequence variant modulates treatment association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "sequence variant modulates treatment association_object_label_closure" Description: ""
--     * Slot: sequence variant modulates treatment association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "sequence variant modulates treatment association_retrieval_source_ids" Description: ""
--     * Slot: sequence variant modulates treatment association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "sequence variant modulates treatment association_category" Description: ""
--     * Slot: sequence variant modulates treatment association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "sequence variant modulates treatment association_type" Description: ""
--     * Slot: sequence variant modulates treatment association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "sequence variant modulates treatment association_has_attribute" Description: ""
--     * Slot: sequence variant modulates treatment association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "functional association_qualifiers" Description: ""
--     * Slot: functional association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "functional association_publications" Description: ""
--     * Slot: functional association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "functional association_has_evidence" Description: ""
--     * Slot: functional association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "functional association_aggregator_knowledge_source" Description: ""
--     * Slot: functional association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "functional association_subject_closure" Description: ""
--     * Slot: functional association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "functional association_object_closure" Description: ""
--     * Slot: functional association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "functional association_subject_category_closure" Description: ""
--     * Slot: functional association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "functional association_object_category_closure" Description: ""
--     * Slot: functional association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "functional association_subject_label_closure" Description: ""
--     * Slot: functional association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "functional association_object_label_closure" Description: ""
--     * Slot: functional association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "functional association_retrieval_source_ids" Description: ""
--     * Slot: functional association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "functional association_category" Description: ""
--     * Slot: functional association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "functional association_type" Description: ""
--     * Slot: functional association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "functional association_has_attribute" Description: ""
--     * Slot: functional association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "macromolecular machine to molecular activity association_qualifiers" Description: ""
--     * Slot: macromolecular machine to molecular activity association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "macromolecular machine to molecular activity association_publications" Description: ""
--     * Slot: macromolecular machine to molecular activity association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "macromolecular machine to molecular activity association_has_evidence" Description: ""
--     * Slot: macromolecular machine to molecular activity association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "macromolecular machine to molecular activity association_aggregator_knowledge_source" Description: ""
--     * Slot: macromolecular machine to molecular activity association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "macromolecular machine to molecular activity association_subject_closure" Description: ""
--     * Slot: macromolecular machine to molecular activity association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "macromolecular machine to molecular activity association_object_closure" Description: ""
--     * Slot: macromolecular machine to molecular activity association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "macromolecular machine to molecular activity association_subject_category_closure" Description: ""
--     * Slot: macromolecular machine to molecular activity association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "macromolecular machine to molecular activity association_object_category_closure" Description: ""
--     * Slot: macromolecular machine to molecular activity association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "macromolecular machine to molecular activity association_subject_label_closure" Description: ""
--     * Slot: macromolecular machine to molecular activity association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "macromolecular machine to molecular activity association_object_label_closure" Description: ""
--     * Slot: macromolecular machine to molecular activity association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "macromolecular machine to molecular activity association_retrieval_source_ids" Description: ""
--     * Slot: macromolecular machine to molecular activity association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "macromolecular machine to molecular activity association_category" Description: ""
--     * Slot: macromolecular machine to molecular activity association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "macromolecular machine to molecular activity association_type" Description: ""
--     * Slot: macromolecular machine to molecular activity association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "macromolecular machine to molecular activity association_has_attribute" Description: ""
--     * Slot: macromolecular machine to molecular activity association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "macromolecular machine to biological process association_qualifiers" Description: ""
--     * Slot: macromolecular machine to biological process association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "macromolecular machine to biological process association_publications" Description: ""
--     * Slot: macromolecular machine to biological process association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "macromolecular machine to biological process association_has_evidence" Description: ""
--     * Slot: macromolecular machine to biological process association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "macromolecular machine to biological process association_aggregator_knowledge_source" Description: ""
--     * Slot: macromolecular machine to biological process association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "macromolecular machine to biological process association_subject_closure" Description: ""
--     * Slot: macromolecular machine to biological process association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "macromolecular machine to biological process association_object_closure" Description: ""
--     * Slot: macromolecular machine to biological process association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "macromolecular machine to biological process association_subject_category_closure" Description: ""
--     * Slot: macromolecular machine to biological process association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "macromolecular machine to biological process association_object_category_closure" Description: ""
--     * Slot: macromolecular machine to biological process association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "macromolecular machine to biological process association_subject_label_closure" Description: ""
--     * Slot: macromolecular machine to biological process association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "macromolecular machine to biological process association_object_label_closure" Description: ""
--     * Slot: macromolecular machine to biological process association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "macromolecular machine to biological process association_retrieval_source_ids" Description: ""
--     * Slot: macromolecular machine to biological process association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "macromolecular machine to biological process association_category" Description: ""
--     * Slot: macromolecular machine to biological process association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "macromolecular machine to biological process association_type" Description: ""
--     * Slot: macromolecular machine to biological process association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "macromolecular machine to biological process association_has_attribute" Description: ""
--     * Slot: macromolecular machine to biological process association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "macromolecular machine to cellular component association_qualifiers" Description: ""
--     * Slot: macromolecular machine to cellular component association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "macromolecular machine to cellular component association_publications" Description: ""
--     * Slot: macromolecular machine to cellular component association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "macromolecular machine to cellular component association_has_evidence" Description: ""
--     * Slot: macromolecular machine to cellular component association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "macromolecular machine to cellular component association_aggregator_knowledge_source" Description: ""
--     * Slot: macromolecular machine to cellular component association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "macromolecular machine to cellular component association_subject_closure" Description: ""
--     * Slot: macromolecular machine to cellular component association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "macromolecular machine to cellular component association_object_closure" Description: ""
--     * Slot: macromolecular machine to cellular component association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "macromolecular machine to cellular component association_subject_category_closure" Description: ""
--     * Slot: macromolecular machine to cellular component association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "macromolecular machine to cellular component association_object_category_closure" Description: ""
--     * Slot: macromolecular machine to cellular component association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "macromolecular machine to cellular component association_subject_label_closure" Description: ""
--     * Slot: macromolecular machine to cellular component association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "macromolecular machine to cellular component association_object_label_closure" Description: ""
--     * Slot: macromolecular machine to cellular component association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "macromolecular machine to cellular component association_retrieval_source_ids" Description: ""
--     * Slot: macromolecular machine to cellular component association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "macromolecular machine to cellular component association_category" Description: ""
--     * Slot: macromolecular machine to cellular component association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "macromolecular machine to cellular component association_type" Description: ""
--     * Slot: macromolecular machine to cellular component association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "macromolecular machine to cellular component association_has_attribute" Description: ""
--     * Slot: macromolecular machine to cellular component association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "molecular activity to chemical entity association_qualifiers" Description: ""
--     * Slot: molecular activity to chemical entity association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "molecular activity to chemical entity association_publications" Description: ""
--     * Slot: molecular activity to chemical entity association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "molecular activity to chemical entity association_has_evidence" Description: ""
--     * Slot: molecular activity to chemical entity association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "molecular activity to chemical entity association_aggregator_knowledge_source" Description: ""
--     * Slot: molecular activity to chemical entity association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "molecular activity to chemical entity association_subject_closure" Description: ""
--     * Slot: molecular activity to chemical entity association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "molecular activity to chemical entity association_object_closure" Description: ""
--     * Slot: molecular activity to chemical entity association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "molecular activity to chemical entity association_subject_category_closure" Description: ""
--     * Slot: molecular activity to chemical entity association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "molecular activity to chemical entity association_object_category_closure" Description: ""
--     * Slot: molecular activity to chemical entity association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "molecular activity to chemical entity association_subject_label_closure" Description: ""
--     * Slot: molecular activity to chemical entity association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "molecular activity to chemical entity association_object_label_closure" Description: ""
--     * Slot: molecular activity to chemical entity association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "molecular activity to chemical entity association_retrieval_source_ids" Description: ""
--     * Slot: molecular activity to chemical entity association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "molecular activity to chemical entity association_category" Description: ""
--     * Slot: molecular activity to chemical entity association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "molecular activity to chemical entity association_type" Description: ""
--     * Slot: molecular activity to chemical entity association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "molecular activity to chemical entity association_has_attribute" Description: ""
--     * Slot: molecular activity to chemical entity association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "molecular activity to molecular activity association_qualifiers" Description: ""
--     * Slot: molecular activity to molecular activity association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "molecular activity to molecular activity association_publications" Description: ""
--     * Slot: molecular activity to molecular activity association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "molecular activity to molecular activity association_has_evidence" Description: ""
--     * Slot: molecular activity to molecular activity association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "molecular activity to molecular activity association_aggregator_knowledge_source" Description: ""
--     * Slot: molecular activity to molecular activity association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "molecular activity to molecular activity association_subject_closure" Description: ""
--     * Slot: molecular activity to molecular activity association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "molecular activity to molecular activity association_object_closure" Description: ""
--     * Slot: molecular activity to molecular activity association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "molecular activity to molecular activity association_subject_category_closure" Description: ""
--     * Slot: molecular activity to molecular activity association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "molecular activity to molecular activity association_object_category_closure" Description: ""
--     * Slot: molecular activity to molecular activity association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "molecular activity to molecular activity association_subject_label_closure" Description: ""
--     * Slot: molecular activity to molecular activity association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "molecular activity to molecular activity association_object_label_closure" Description: ""
--     * Slot: molecular activity to molecular activity association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "molecular activity to molecular activity association_retrieval_source_ids" Description: ""
--     * Slot: molecular activity to molecular activity association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "molecular activity to molecular activity association_category" Description: ""
--     * Slot: molecular activity to molecular activity association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "molecular activity to molecular activity association_type" Description: ""
--     * Slot: molecular activity to molecular activity association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "molecular activity to molecular activity association_has_attribute" Description: ""
--     * Slot: molecular activity to molecular activity association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "gene to go term association_qualifiers" Description: ""
--     * Slot: gene to go term association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "gene to go term association_publications" Description: ""
--     * Slot: gene to go term association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "gene to go term association_has_evidence" Description: ""
--     * Slot: gene to go term association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "gene to go term association_aggregator_knowledge_source" Description: ""
--     * Slot: gene to go term association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "gene to go term association_subject_closure" Description: ""
--     * Slot: gene to go term association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to go term association_object_closure" Description: ""
--     * Slot: gene to go term association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to go term association_subject_category_closure" Description: ""
--     * Slot: gene to go term association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to go term association_object_category_closure" Description: ""
--     * Slot: gene to go term association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to go term association_subject_label_closure" Description: ""
--     * Slot: gene to go term association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to go term association_object_label_closure" Description: ""
--     * Slot: gene to go term association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to go term association_retrieval_source_ids" Description: ""
--     * Slot: gene to go term association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "gene to go term association_category" Description: ""
--     * Slot: gene to go term association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "gene to go term association_type" Description: ""
--     * Slot: gene to go term association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "gene to go term association_has_attribute" Description: ""
--     * Slot: gene to go term association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "entity to disease association_qualifiers" Description: ""
--     * Slot: entity to disease association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "entity to disease association_publications" Description: ""
--     * Slot: entity to disease association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "entity to disease association_has_evidence" Description: ""
--     * Slot: entity to disease association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "entity to disease association_aggregator_knowledge_source" Description: ""
--     * Slot: entity to disease association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "entity to disease association_subject_closure" Description: ""
--     * Slot: entity to disease association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "entity to disease association_object_closure" Description: ""
--     * Slot: entity to disease association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "entity to disease association_subject_category_closure" Description: ""
--     * Slot: entity to disease association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "entity to disease association_object_category_closure" Description: ""
--     * Slot: entity to disease association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "entity to disease association_subject_label_closure" Description: ""
--     * Slot: entity to disease association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "entity to disease association_object_label_closure" Description: ""
--     * Slot: entity to disease association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "entity to disease association_retrieval_source_ids" Description: ""
--     * Slot: entity to disease association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "entity to disease association_category" Description: ""
--     * Slot: entity to disease association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "entity to disease association_type" Description: ""
--     * Slot: entity to disease association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "entity to disease association_has_attribute" Description: ""
--     * Slot: entity to disease association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "entity to phenotypic feature association_qualifiers" Description: ""
--     * Slot: entity to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "entity to phenotypic feature association_publications" Description: ""
--     * Slot: entity to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "entity to phenotypic feature association_has_evidence" Description: ""
--     * Slot: entity to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "entity to phenotypic feature association_aggregator_knowledge_source" Description: ""
--     * Slot: entity to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "entity to phenotypic feature association_subject_closure" Description: ""
--     * Slot: entity to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "entity to phenotypic feature association_object_closure" Description: ""
--     * Slot: entity to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "entity to phenotypic feature association_subject_category_closure" Description: ""
--     * Slot: entity to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "entity to phenotypic feature association_object_category_closure" Description: ""
--     * Slot: entity to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "entity to phenotypic feature association_subject_label_closure" Description: ""
--     * Slot: entity to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "entity to phenotypic feature association_object_label_closure" Description: ""
--     * Slot: entity to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "entity to phenotypic feature association_retrieval_source_ids" Description: ""
--     * Slot: entity to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "entity to phenotypic feature association_category" Description: ""
--     * Slot: entity to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "entity to phenotypic feature association_type" Description: ""
--     * Slot: entity to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "entity to phenotypic feature association_has_attribute" Description: ""
--     * Slot: entity to phenotypic feature association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "sequence association_qualifiers" Description: ""
--     * Slot: sequence association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "sequence association_publications" Description: ""
--     * Slot: sequence association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "sequence association_has_evidence" Description: ""
--     * Slot: sequence association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "sequence association_aggregator_knowledge_source" Description: ""
--     * Slot: sequence association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "sequence association_subject_closure" Description: ""
--     * Slot: sequence association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "sequence association_object_closure" Description: ""
--     * Slot: sequence association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "sequence association_subject_category_closure" Description: ""
--     * Slot: sequence association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "sequence association_object_category_closure" Description: ""
--     * Slot: sequence association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "sequence association_subject_label_closure" Description: ""
--     * Slot: sequence association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "sequence association_object_label_closure" Description: ""
--     * Slot: sequence association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "sequence association_retrieval_source_ids" Description: ""
--     * Slot: sequence association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "sequence association_category" Description: ""
--     * Slot: sequence association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "sequence association_type" Description: ""
--     * Slot: sequence association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "sequence association_has_attribute" Description: ""
--     * Slot: sequence association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "genomic sequence localization_qualifiers" Description: ""
--     * Slot: genomic sequence localization_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "genomic sequence localization_publications" Description: ""
--     * Slot: genomic sequence localization_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "genomic sequence localization_has_evidence" Description: ""
--     * Slot: genomic sequence localization_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "genomic sequence localization_aggregator_knowledge_source" Description: ""
--     * Slot: genomic sequence localization_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "genomic sequence localization_subject_closure" Description: ""
--     * Slot: genomic sequence localization_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genomic sequence localization_object_closure" Description: ""
--     * Slot: genomic sequence localization_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genomic sequence localization_subject_category_closure" Description: ""
--     * Slot: genomic sequence localization_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genomic sequence localization_object_category_closure" Description: ""
--     * Slot: genomic sequence localization_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genomic sequence localization_subject_label_closure" Description: ""
--     * Slot: genomic sequence localization_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genomic sequence localization_object_label_closure" Description: ""
--     * Slot: genomic sequence localization_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "genomic sequence localization_retrieval_source_ids" Description: ""
--     * Slot: genomic sequence localization_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "genomic sequence localization_category" Description: ""
--     * Slot: genomic sequence localization_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "genomic sequence localization_type" Description: ""
--     * Slot: genomic sequence localization_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "genomic sequence localization_has_attribute" Description: ""
--     * Slot: genomic sequence localization_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "sequence feature relationship_qualifiers" Description: ""
--     * Slot: sequence feature relationship_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "sequence feature relationship_publications" Description: ""
--     * Slot: sequence feature relationship_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "sequence feature relationship_has_evidence" Description: ""
--     * Slot: sequence feature relationship_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "sequence feature relationship_aggregator_knowledge_source" Description: ""
--     * Slot: sequence feature relationship_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "sequence feature relationship_subject_closure" Description: ""
--     * Slot: sequence feature relationship_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "sequence feature relationship_object_closure" Description: ""
--     * Slot: sequence feature relationship_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "sequence feature relationship_subject_category_closure" Description: ""
--     * Slot: sequence feature relationship_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "sequence feature relationship_object_category_closure" Description: ""
--     * Slot: sequence feature relationship_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "sequence feature relationship_subject_label_closure" Description: ""
--     * Slot: sequence feature relationship_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "sequence feature relationship_object_label_closure" Description: ""
--     * Slot: sequence feature relationship_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "sequence feature relationship_retrieval_source_ids" Description: ""
--     * Slot: sequence feature relationship_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "sequence feature relationship_category" Description: ""
--     * Slot: sequence feature relationship_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "sequence feature relationship_type" Description: ""
--     * Slot: sequence feature relationship_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "sequence feature relationship_has_attribute" Description: ""
--     * Slot: sequence feature relationship_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "transcript to gene relationship_qualifiers" Description: ""
--     * Slot: transcript to gene relationship_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "transcript to gene relationship_publications" Description: ""
--     * Slot: transcript to gene relationship_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "transcript to gene relationship_has_evidence" Description: ""
--     * Slot: transcript to gene relationship_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "transcript to gene relationship_aggregator_knowledge_source" Description: ""
--     * Slot: transcript to gene relationship_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "transcript to gene relationship_subject_closure" Description: ""
--     * Slot: transcript to gene relationship_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "transcript to gene relationship_object_closure" Description: ""
--     * Slot: transcript to gene relationship_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "transcript to gene relationship_subject_category_closure" Description: ""
--     * Slot: transcript to gene relationship_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "transcript to gene relationship_object_category_closure" Description: ""
--     * Slot: transcript to gene relationship_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "transcript to gene relationship_subject_label_closure" Description: ""
--     * Slot: transcript to gene relationship_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "transcript to gene relationship_object_label_closure" Description: ""
--     * Slot: transcript to gene relationship_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "transcript to gene relationship_retrieval_source_ids" Description: ""
--     * Slot: transcript to gene relationship_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "transcript to gene relationship_category" Description: ""
--     * Slot: transcript to gene relationship_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "transcript to gene relationship_type" Description: ""
--     * Slot: transcript to gene relationship_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "transcript to gene relationship_has_attribute" Description: ""
--     * Slot: transcript to gene relationship_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "gene to gene product relationship_qualifiers" Description: ""
--     * Slot: gene to gene product relationship_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "gene to gene product relationship_publications" Description: ""
--     * Slot: gene to gene product relationship_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "gene to gene product relationship_has_evidence" Description: ""
--     * Slot: gene to gene product relationship_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "gene to gene product relationship_aggregator_knowledge_source" Description: ""
--     * Slot: gene to gene product relationship_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "gene to gene product relationship_subject_closure" Description: ""
--     * Slot: gene to gene product relationship_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to gene product relationship_object_closure" Description: ""
--     * Slot: gene to gene product relationship_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to gene product relationship_subject_category_closure" Description: ""
--     * Slot: gene to gene product relationship_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to gene product relationship_object_category_closure" Description: ""
--     * Slot: gene to gene product relationship_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to gene product relationship_subject_label_closure" Description: ""
--     * Slot: gene to gene product relationship_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to gene product relationship_object_label_closure" Description: ""
--     * Slot: gene to gene product relationship_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "gene to gene product relationship_retrieval_source_ids" Description: ""
--     * Slot: gene to gene product relationship_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "gene to gene product relationship_category" Description: ""
--     * Slot: gene to gene product relationship_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "gene to gene product relationship_type" Description: ""
--     * Slot: gene to gene product relationship_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "gene to gene product relationship_has_attribute" Description: ""
--     * Slot: gene to gene product relationship_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "exon to transcript relationship_qualifiers" Description: ""
--     * Slot: exon to transcript relationship_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "exon to transcript relationship_publications" Description: ""
--     * Slot: exon to transcript relationship_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "exon to transcript relationship_has_evidence" Description: ""
--     * Slot: exon to transcript relationship_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "exon to transcript relationship_aggregator_knowledge_source" Description: ""
--     * Slot: exon to transcript relationship_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "exon to transcript relationship_subject_closure" Description: ""
--     * Slot: exon to transcript relationship_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "exon to transcript relationship_object_closure" Description: ""
--     * Slot: exon to transcript relationship_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "exon to transcript relationship_subject_category_closure" Description: ""
--     * Slot: exon to transcript relationship_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "exon to transcript relationship_object_category_closure" Description: ""
--     * Slot: exon to transcript relationship_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "exon to transcript relationship_subject_label_closure" Description: ""
--     * Slot: exon to transcript relationship_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "exon to transcript relationship_object_label_closure" Description: ""
--     * Slot: exon to transcript relationship_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "exon to transcript relationship_retrieval_source_ids" Description: ""
--     * Slot: exon to transcript relationship_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "exon to transcript relationship_category" Description: ""
--     * Slot: exon to transcript relationship_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "exon to transcript relationship_type" Description: ""
--     * Slot: exon to transcript relationship_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "exon to transcript relationship_has_attribute" Description: ""
--     * Slot: exon to transcript relationship_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "chemical entity or gene or gene product regulates gene association_qualifiers" Description: ""
--     * Slot: chemical entity or gene or gene product regulates gene association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "chemical entity or gene or gene product regulates gene association_publications" Description: ""
--     * Slot: chemical entity or gene or gene product regulates gene association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "chemical entity or gene or gene product regulates gene association_has_evidence" Description: ""
--     * Slot: chemical entity or gene or gene product regulates gene association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "chemical entity or gene or gene product regulates gene association_aggregator_knowledge_source" Description: ""
--     * Slot: chemical entity or gene or gene product regulates gene association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "chemical entity or gene or gene product regulates gene association_subject_closure" Description: ""
--     * Slot: chemical entity or gene or gene product regulates gene association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical entity or gene or gene product regulates gene association_object_closure" Description: ""
--     * Slot: chemical entity or gene or gene product regulates gene association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical entity or gene or gene product regulates gene association_subject_category_closure" Description: ""
--     * Slot: chemical entity or gene or gene product regulates gene association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical entity or gene or gene product regulates gene association_object_category_closure" Description: ""
--     * Slot: chemical entity or gene or gene product regulates gene association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical entity or gene or gene product regulates gene association_subject_label_closure" Description: ""
--     * Slot: chemical entity or gene or gene product regulates gene association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical entity or gene or gene product regulates gene association_object_label_closure" Description: ""
--     * Slot: chemical entity or gene or gene product regulates gene association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "chemical entity or gene or gene product regulates gene association_retrieval_source_ids" Description: ""
--     * Slot: chemical entity or gene or gene product regulates gene association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "chemical entity or gene or gene product regulates gene association_category" Description: ""
--     * Slot: chemical entity or gene or gene product regulates gene association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "chemical entity or gene or gene product regulates gene association_type" Description: ""
--     * Slot: chemical entity or gene or gene product regulates gene association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "chemical entity or gene or gene product regulates gene association_has_attribute" Description: ""
--     * Slot: chemical entity or gene or gene product regulates gene association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "anatomical entity to anatomical entity association_qualifiers" Description: ""
--     * Slot: anatomical entity to anatomical entity association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "anatomical entity to anatomical entity association_publications" Description: ""
--     * Slot: anatomical entity to anatomical entity association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "anatomical entity to anatomical entity association_has_evidence" Description: ""
--     * Slot: anatomical entity to anatomical entity association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "anatomical entity to anatomical entity association_aggregator_knowledge_source" Description: ""
--     * Slot: anatomical entity to anatomical entity association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "anatomical entity to anatomical entity association_subject_closure" Description: ""
--     * Slot: anatomical entity to anatomical entity association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "anatomical entity to anatomical entity association_object_closure" Description: ""
--     * Slot: anatomical entity to anatomical entity association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "anatomical entity to anatomical entity association_subject_category_closure" Description: ""
--     * Slot: anatomical entity to anatomical entity association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "anatomical entity to anatomical entity association_object_category_closure" Description: ""
--     * Slot: anatomical entity to anatomical entity association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "anatomical entity to anatomical entity association_subject_label_closure" Description: ""
--     * Slot: anatomical entity to anatomical entity association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "anatomical entity to anatomical entity association_object_label_closure" Description: ""
--     * Slot: anatomical entity to anatomical entity association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "anatomical entity to anatomical entity association_retrieval_source_ids" Description: ""
--     * Slot: anatomical entity to anatomical entity association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "anatomical entity to anatomical entity association_category" Description: ""
--     * Slot: anatomical entity to anatomical entity association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "anatomical entity to anatomical entity association_type" Description: ""
--     * Slot: anatomical entity to anatomical entity association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "anatomical entity to anatomical entity association_has_attribute" Description: ""
--     * Slot: anatomical entity to anatomical entity association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "anatomical entity to anatomical entity part of association_qualifiers" Description: ""
--     * Slot: anatomical entity to anatomical entity part of association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "anatomical entity to anatomical entity part of association_publications" Description: ""
--     * Slot: anatomical entity to anatomical entity part of association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "anatomical entity to anatomical entity part of association_has_evidence" Description: ""
--     * Slot: anatomical entity to anatomical entity part of association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "anatomical entity to anatomical entity part of association_aggregator_knowledge_source" Description: ""
--     * Slot: anatomical entity to anatomical entity part of association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "anatomical entity to anatomical entity part of association_subject_closure" Description: ""
--     * Slot: anatomical entity to anatomical entity part of association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "anatomical entity to anatomical entity part of association_object_closure" Description: ""
--     * Slot: anatomical entity to anatomical entity part of association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "anatomical entity to anatomical entity part of association_subject_category_closure" Description: ""
--     * Slot: anatomical entity to anatomical entity part of association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "anatomical entity to anatomical entity part of association_object_category_closure" Description: ""
--     * Slot: anatomical entity to anatomical entity part of association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "anatomical entity to anatomical entity part of association_subject_label_closure" Description: ""
--     * Slot: anatomical entity to anatomical entity part of association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "anatomical entity to anatomical entity part of association_object_label_closure" Description: ""
--     * Slot: anatomical entity to anatomical entity part of association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "anatomical entity to anatomical entity part of association_retrieval_source_ids" Description: ""
--     * Slot: anatomical entity to anatomical entity part of association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "anatomical entity to anatomical entity part of association_category" Description: ""
--     * Slot: anatomical entity to anatomical entity part of association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "anatomical entity to anatomical entity part of association_type" Description: ""
--     * Slot: anatomical entity to anatomical entity part of association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "anatomical entity to anatomical entity part of association_has_attribute" Description: ""
--     * Slot: anatomical entity to anatomical entity part of association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "anatomical entity to anatomical entity ontogenic association_qualifiers" Description: ""
--     * Slot: anatomical entity to anatomical entity ontogenic association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "anatomical entity to anatomical entity ontogenic association_publications" Description: ""
--     * Slot: anatomical entity to anatomical entity ontogenic association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "anatomical entity to anatomical entity ontogenic association_has_evidence" Description: ""
--     * Slot: anatomical entity to anatomical entity ontogenic association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "anatomical entity to anatomical entity ontogenic association_aggregator_knowledge_source" Description: ""
--     * Slot: anatomical entity to anatomical entity ontogenic association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "anatomical entity to anatomical entity ontogenic association_subject_closure" Description: ""
--     * Slot: anatomical entity to anatomical entity ontogenic association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "anatomical entity to anatomical entity ontogenic association_object_closure" Description: ""
--     * Slot: anatomical entity to anatomical entity ontogenic association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "anatomical entity to anatomical entity ontogenic association_subject_category_closure" Description: ""
--     * Slot: anatomical entity to anatomical entity ontogenic association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "anatomical entity to anatomical entity ontogenic association_object_category_closure" Description: ""
--     * Slot: anatomical entity to anatomical entity ontogenic association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "anatomical entity to anatomical entity ontogenic association_subject_label_closure" Description: ""
--     * Slot: anatomical entity to anatomical entity ontogenic association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "anatomical entity to anatomical entity ontogenic association_object_label_closure" Description: ""
--     * Slot: anatomical entity to anatomical entity ontogenic association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "anatomical entity to anatomical entity ontogenic association_retrieval_source_ids" Description: ""
--     * Slot: anatomical entity to anatomical entity ontogenic association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "anatomical entity to anatomical entity ontogenic association_category" Description: ""
--     * Slot: anatomical entity to anatomical entity ontogenic association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "anatomical entity to anatomical entity ontogenic association_type" Description: ""
--     * Slot: anatomical entity to anatomical entity ontogenic association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "anatomical entity to anatomical entity ontogenic association_has_attribute" Description: ""
--     * Slot: anatomical entity to anatomical entity ontogenic association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "organism taxon to organism taxon association_qualifiers" Description: ""
--     * Slot: organism taxon to organism taxon association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "organism taxon to organism taxon association_publications" Description: ""
--     * Slot: organism taxon to organism taxon association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "organism taxon to organism taxon association_has_evidence" Description: ""
--     * Slot: organism taxon to organism taxon association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "organism taxon to organism taxon association_aggregator_knowledge_source" Description: ""
--     * Slot: organism taxon to organism taxon association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "organism taxon to organism taxon association_subject_closure" Description: ""
--     * Slot: organism taxon to organism taxon association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "organism taxon to organism taxon association_object_closure" Description: ""
--     * Slot: organism taxon to organism taxon association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "organism taxon to organism taxon association_subject_category_closure" Description: ""
--     * Slot: organism taxon to organism taxon association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "organism taxon to organism taxon association_object_category_closure" Description: ""
--     * Slot: organism taxon to organism taxon association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "organism taxon to organism taxon association_subject_label_closure" Description: ""
--     * Slot: organism taxon to organism taxon association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "organism taxon to organism taxon association_object_label_closure" Description: ""
--     * Slot: organism taxon to organism taxon association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "organism taxon to organism taxon association_retrieval_source_ids" Description: ""
--     * Slot: organism taxon to organism taxon association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "organism taxon to organism taxon association_category" Description: ""
--     * Slot: organism taxon to organism taxon association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "organism taxon to organism taxon association_type" Description: ""
--     * Slot: organism taxon to organism taxon association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "organism taxon to organism taxon association_has_attribute" Description: ""
--     * Slot: organism taxon to organism taxon association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "organism taxon to organism taxon specialization_qualifiers" Description: ""
--     * Slot: organism taxon to organism taxon specialization_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "organism taxon to organism taxon specialization_publications" Description: ""
--     * Slot: organism taxon to organism taxon specialization_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "organism taxon to organism taxon specialization_has_evidence" Description: ""
--     * Slot: organism taxon to organism taxon specialization_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "organism taxon to organism taxon specialization_aggregator_knowledge_source" Description: ""
--     * Slot: organism taxon to organism taxon specialization_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "organism taxon to organism taxon specialization_subject_closure" Description: ""
--     * Slot: organism taxon to organism taxon specialization_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "organism taxon to organism taxon specialization_object_closure" Description: ""
--     * Slot: organism taxon to organism taxon specialization_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "organism taxon to organism taxon specialization_subject_category_closure" Description: ""
--     * Slot: organism taxon to organism taxon specialization_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "organism taxon to organism taxon specialization_object_category_closure" Description: ""
--     * Slot: organism taxon to organism taxon specialization_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "organism taxon to organism taxon specialization_subject_label_closure" Description: ""
--     * Slot: organism taxon to organism taxon specialization_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "organism taxon to organism taxon specialization_object_label_closure" Description: ""
--     * Slot: organism taxon to organism taxon specialization_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "organism taxon to organism taxon specialization_retrieval_source_ids" Description: ""
--     * Slot: organism taxon to organism taxon specialization_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "organism taxon to organism taxon specialization_category" Description: ""
--     * Slot: organism taxon to organism taxon specialization_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "organism taxon to organism taxon specialization_type" Description: ""
--     * Slot: organism taxon to organism taxon specialization_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "organism taxon to organism taxon specialization_has_attribute" Description: ""
--     * Slot: organism taxon to organism taxon specialization_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "organism taxon to organism taxon interaction_qualifiers" Description: ""
--     * Slot: organism taxon to organism taxon interaction_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "organism taxon to organism taxon interaction_publications" Description: ""
--     * Slot: organism taxon to organism taxon interaction_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "organism taxon to organism taxon interaction_has_evidence" Description: ""
--     * Slot: organism taxon to organism taxon interaction_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "organism taxon to organism taxon interaction_aggregator_knowledge_source" Description: ""
--     * Slot: organism taxon to organism taxon interaction_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "organism taxon to organism taxon interaction_subject_closure" Description: ""
--     * Slot: organism taxon to organism taxon interaction_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "organism taxon to organism taxon interaction_object_closure" Description: ""
--     * Slot: organism taxon to organism taxon interaction_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "organism taxon to organism taxon interaction_subject_category_closure" Description: ""
--     * Slot: organism taxon to organism taxon interaction_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "organism taxon to organism taxon interaction_object_category_closure" Description: ""
--     * Slot: organism taxon to organism taxon interaction_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "organism taxon to organism taxon interaction_subject_label_closure" Description: ""
--     * Slot: organism taxon to organism taxon interaction_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "organism taxon to organism taxon interaction_object_label_closure" Description: ""
--     * Slot: organism taxon to organism taxon interaction_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "organism taxon to organism taxon interaction_retrieval_source_ids" Description: ""
--     * Slot: organism taxon to organism taxon interaction_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "organism taxon to organism taxon interaction_category" Description: ""
--     * Slot: organism taxon to organism taxon interaction_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "organism taxon to organism taxon interaction_type" Description: ""
--     * Slot: organism taxon to organism taxon interaction_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "organism taxon to organism taxon interaction_has_attribute" Description: ""
--     * Slot: organism taxon to organism taxon interaction_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute
-- # Class: "organism taxon to environment association_qualifiers" Description: ""
--     * Slot: organism taxon to environment association_id Description: Autocreated FK slot
--     * Slot: qualifiers_id Description: connects an association to qualifiers that modify or qualify the meaning of that association
-- # Class: "organism taxon to environment association_publications" Description: ""
--     * Slot: organism taxon to environment association_id Description: Autocreated FK slot
--     * Slot: publications_id Description: One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.
-- # Class: "organism taxon to environment association_has_evidence" Description: ""
--     * Slot: organism taxon to environment association_id Description: Autocreated FK slot
--     * Slot: has_evidence_id Description: connects an association to an instance of supporting evidence
-- # Class: "organism taxon to environment association_aggregator_knowledge_source" Description: ""
--     * Slot: organism taxon to environment association_id Description: Autocreated FK slot
--     * Slot: aggregator_knowledge_source Description: An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.
-- # Class: "organism taxon to environment association_subject_closure" Description: ""
--     * Slot: organism taxon to environment association_id Description: Autocreated FK slot
--     * Slot: subject_closure Description: Used to hold the subject closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "organism taxon to environment association_object_closure" Description: ""
--     * Slot: organism taxon to environment association_id Description: Autocreated FK slot
--     * Slot: object_closure Description: Used to hold the object closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "organism taxon to environment association_subject_category_closure" Description: ""
--     * Slot: organism taxon to environment association_id Description: Autocreated FK slot
--     * Slot: subject_category_closure_id Description: Used to hold the subject category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "organism taxon to environment association_object_category_closure" Description: ""
--     * Slot: organism taxon to environment association_id Description: Autocreated FK slot
--     * Slot: object_category_closure_id Description: Used to hold the object category closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "organism taxon to environment association_subject_label_closure" Description: ""
--     * Slot: organism taxon to environment association_id Description: Autocreated FK slot
--     * Slot: subject_label_closure Description: Used to hold the subject label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "organism taxon to environment association_object_label_closure" Description: ""
--     * Slot: organism taxon to environment association_id Description: Autocreated FK slot
--     * Slot: object_label_closure Description: Used to hold the object label closure of an association. This is a denormalized field used primarily in the SQL serialization of a knowledge graph via KGX.
-- # Class: "organism taxon to environment association_retrieval_source_ids" Description: ""
--     * Slot: organism taxon to environment association_id Description: Autocreated FK slot
--     * Slot: retrieval_source_ids_id Description: A list of retrieval sources that served as a source of knowledge expressed in an Edge, or a source of data used to generate this knowledge.
-- # Class: "organism taxon to environment association_category" Description: ""
--     * Slot: organism taxon to environment association_id Description: Autocreated FK slot
--     * Slot: category Description: Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}
-- # Class: "organism taxon to environment association_type" Description: ""
--     * Slot: organism taxon to environment association_id Description: Autocreated FK slot
--     * Slot: type Description: rdf:type of biolink:Association should be fixed at rdf:Statement
-- # Class: "organism taxon to environment association_has_attribute" Description: ""
--     * Slot: organism taxon to environment association_id Description: Autocreated FK slot
--     * Slot: has_attribute_id Description: connects any entity to an attribute

CREATE TABLE "mapping collection" (
	id INTEGER NOT NULL, 
	PRIMARY KEY (id)
);
CREATE TABLE "ontology class" (
	id TEXT NOT NULL, 
	PRIMARY KEY (id)
);
CREATE TABLE annotation (
	id INTEGER NOT NULL, 
	PRIMARY KEY (id)
);
CREATE TABLE "quantity value" (
	id INTEGER NOT NULL, 
	has_unit TEXT, 
	has_numeric_value FLOAT, 
	PRIMARY KEY (id)
);
CREATE TABLE "relationship quantifier" (
	id INTEGER NOT NULL, 
	PRIMARY KEY (id)
);
CREATE TABLE "sensitivity quantifier" (
	id INTEGER NOT NULL, 
	PRIMARY KEY (id)
);
CREATE TABLE "specificity quantifier" (
	id INTEGER NOT NULL, 
	PRIMARY KEY (id)
);
CREATE TABLE "pathognomonicity quantifier" (
	id INTEGER NOT NULL, 
	PRIMARY KEY (id)
);
CREATE TABLE "frequency quantifier" (
	id INTEGER NOT NULL, 
	has_count INTEGER, 
	has_total INTEGER, 
	has_quotient FLOAT, 
	has_percentage FLOAT, 
	PRIMARY KEY (id)
);
CREATE TABLE "chemical or drug or treatment" (
	id INTEGER NOT NULL, 
	PRIMARY KEY (id)
);
CREATE TABLE entity (
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "named thing" (
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "relationship type" (
	id TEXT NOT NULL, 
	PRIMARY KEY (id)
);
CREATE TABLE "taxonomic rank" (
	id TEXT NOT NULL, 
	PRIMARY KEY (id)
);
CREATE TABLE event (
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "administrative entity" (
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "study result" (
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE study (
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "study variable" (
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "common data element" (
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "concept count analysis result" (
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "observed expected frequency analysis result" (
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "relative frequency analysis result" (
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "text mining result" (
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "chi squared analysis result" (
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "log odds analysis result" (
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE agent (
	address TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "information content entity" (
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE dataset (
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "dataset distribution" (
	distribution_download_url TEXT, 
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "dataset summary" (
	source_web_page TEXT, 
	source_logo TEXT, 
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "confidence level" (
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "evidence type" (
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE publication (
	summary TEXT, 
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE book (
	summary TEXT, 
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "book chapter" (
	published_in TEXT NOT NULL, 
	volume TEXT, 
	chapter TEXT, 
	summary TEXT, 
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE serial (
	iso_abbreviation TEXT, 
	volume TEXT, 
	issue TEXT, 
	summary TEXT, 
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE article (
	published_in TEXT NOT NULL, 
	iso_abbreviation TEXT, 
	volume TEXT, 
	issue TEXT, 
	summary TEXT, 
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "journal article" (
	published_in TEXT NOT NULL, 
	iso_abbreviation TEXT, 
	volume TEXT, 
	issue TEXT, 
	summary TEXT, 
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE patent (
	summary TEXT, 
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "web page" (
	summary TEXT, 
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "preprint publication" (
	summary TEXT, 
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "drug label" (
	summary TEXT, 
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "retrieval source" (
	resource_id TEXT NOT NULL, 
	resource_role VARCHAR(27) NOT NULL, 
	upstream_resource_ids TEXT, 
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "physical essence or occurrent" (
	id INTEGER NOT NULL, 
	PRIMARY KEY (id)
);
CREATE TABLE "physical essence" (
	id INTEGER NOT NULL, 
	PRIMARY KEY (id)
);
CREATE TABLE "physical entity" (
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE occurrent (
	id INTEGER NOT NULL, 
	PRIMARY KEY (id)
);
CREATE TABLE "activity and behavior" (
	id INTEGER NOT NULL, 
	PRIMARY KEY (id)
);
CREATE TABLE activity (
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE procedure (
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE phenomenon (
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE device (
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "diagnostic aid" (
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "study population" (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "subject of investigation" (
	id INTEGER NOT NULL, 
	PRIMARY KEY (id)
);
CREATE TABLE "material sample" (
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "planetary entity" (
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "environmental process" (
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "environmental feature" (
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "geographic location" (
	latitude FLOAT, 
	longitude FLOAT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "geographic location at time" (
	timepoint TEXT, 
	latitude FLOAT, 
	longitude FLOAT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "thing with taxon" (
	id INTEGER NOT NULL, 
	in_taxon_label TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "biological entity" (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "genomic entity" (
	id INTEGER NOT NULL, 
	has_biological_sequence TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "epigenomic entity" (
	id INTEGER NOT NULL, 
	has_biological_sequence TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "chemical entity" (
	trade_name TEXT, 
	max_tolerated_dose TEXT, 
	is_toxic BOOLEAN, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(trade_name) REFERENCES "chemical entity" (id)
);
CREATE TABLE "regulatory region" (
	has_biological_sequence TEXT, 
	id TEXT NOT NULL, 
	in_taxon_label TEXT, 
	full_name TEXT, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "accessible dna region" (
	has_biological_sequence TEXT, 
	id TEXT NOT NULL, 
	in_taxon_label TEXT, 
	full_name TEXT, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "transcription factor binding site" (
	has_biological_sequence TEXT, 
	id TEXT NOT NULL, 
	in_taxon_label TEXT, 
	full_name TEXT, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "biological process or activity" (
	id TEXT NOT NULL, 
	in_taxon_label TEXT, 
	full_name TEXT, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "molecular activity" (
	id TEXT NOT NULL, 
	in_taxon_label TEXT, 
	full_name TEXT, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "biological process" (
	id TEXT NOT NULL, 
	in_taxon_label TEXT, 
	full_name TEXT, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE pathway (
	id TEXT NOT NULL, 
	in_taxon_label TEXT, 
	full_name TEXT, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "physiological process" (
	id TEXT NOT NULL, 
	in_taxon_label TEXT, 
	full_name TEXT, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE behavior (
	id TEXT NOT NULL, 
	in_taxon_label TEXT, 
	full_name TEXT, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "genetic inheritance" (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "organismal entity" (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE bacterium (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE virus (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "cellular organism" (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE mammal (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE human (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE plant (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE invertebrate (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE vertebrate (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE fungus (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "life stage" (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "individual organism" (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "population of individual organisms" (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "disease or phenotypic feature" (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE disease (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "phenotypic feature" (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "behavioral feature" (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "anatomical entity" (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "cellular component" (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE cell (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "cell line" (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "gross anatomical structure" (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "chemical entity or gene or gene product" (
	id INTEGER NOT NULL, 
	PRIMARY KEY (id)
);
CREATE TABLE "chemical entity or protein or polypeptide" (
	id INTEGER NOT NULL, 
	PRIMARY KEY (id)
);
CREATE TABLE "macromolecular machine mixin" (
	id INTEGER NOT NULL, 
	name TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "gene or gene product" (
	id INTEGER NOT NULL, 
	name TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE gene (
	symbol TEXT, 
	has_biological_sequence TEXT, 
	id TEXT NOT NULL, 
	in_taxon_label TEXT, 
	full_name TEXT, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "gene product mixin" (
	id INTEGER NOT NULL, 
	name TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "gene product isoform mixin" (
	id INTEGER NOT NULL, 
	name TEXT, 
	PRIMARY KEY (id)
);
CREATE TABLE "macromolecular complex" (
	name TEXT, 
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "nucleosome modification" (
	has_biological_sequence TEXT, 
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE genome (
	has_biological_sequence TEXT, 
	id TEXT NOT NULL, 
	in_taxon_label TEXT, 
	full_name TEXT, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE exon (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE transcript (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "coding sequence" (
	has_biological_sequence TEXT, 
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE polypeptide (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE protein (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "protein isoform" (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "protein domain" (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "posttranslational modification" (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "protein family" (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "nucleic acid sequence motif" (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "RNA product" (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "RNA product isoform" (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "noncoding RNA product" (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "microRNA" (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "siRNA" (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "gene grouping mixin" (
	id INTEGER NOT NULL, 
	PRIMARY KEY (id)
);
CREATE TABLE "gene family" (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE haplotype (
	has_biological_sequence TEXT, 
	id TEXT NOT NULL, 
	in_taxon_label TEXT, 
	full_name TEXT, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "sequence variant" (
	has_biological_sequence TEXT, 
	id TEXT NOT NULL, 
	in_taxon_label TEXT, 
	full_name TEXT, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE snv (
	has_biological_sequence TEXT, 
	id TEXT NOT NULL, 
	in_taxon_label TEXT, 
	full_name TEXT, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "reagent targeted gene" (
	has_biological_sequence TEXT, 
	id TEXT NOT NULL, 
	in_taxon_label TEXT, 
	full_name TEXT, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "clinical entity" (
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "clinical trial" (
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "clinical intervention" (
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "clinical finding" (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE hospitalization (
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "case" (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE cohort (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "exposure event" (
	timepoint TEXT, 
	id TEXT NOT NULL, 
	PRIMARY KEY (id)
);
CREATE TABLE "pathological entity mixin" (
	id INTEGER NOT NULL, 
	PRIMARY KEY (id)
);
CREATE TABLE "pathological process" (
	id TEXT NOT NULL, 
	in_taxon_label TEXT, 
	full_name TEXT, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE "pathological anatomical structure" (
	in_taxon_label TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE treatment (
	timepoint TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id)
);
CREATE TABLE outcome (
	id INTEGER NOT NULL, 
	PRIMARY KEY (id)
);
CREATE TABLE "pathological process outcome" (
	id INTEGER NOT NULL, 
	PRIMARY KEY (id)
);
CREATE TABLE "pathological anatomical outcome" (
	id INTEGER NOT NULL, 
	PRIMARY KEY (id)
);
CREATE TABLE "disease or phenotypic feature outcome" (
	id INTEGER NOT NULL, 
	PRIMARY KEY (id)
);
CREATE TABLE "behavioral outcome" (
	id INTEGER NOT NULL, 
	PRIMARY KEY (id)
);
CREATE TABLE "hospitalization outcome" (
	id INTEGER NOT NULL, 
	PRIMARY KEY (id)
);
CREATE TABLE "mortality outcome" (
	id INTEGER NOT NULL, 
	PRIMARY KEY (id)
);
CREATE TABLE "epidemiological outcome" (
	id INTEGER NOT NULL, 
	PRIMARY KEY (id)
);
CREATE TABLE "socioeconomic outcome" (
	id INTEGER NOT NULL, 
	PRIMARY KEY (id)
);
CREATE TABLE attribute (
	name TEXT, 
	has_attribute_type TEXT NOT NULL, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	id TEXT NOT NULL, 
	full_name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_attribute_type) REFERENCES "ontology class" (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id)
);
CREATE TABLE "chemical role" (
	name TEXT, 
	has_attribute_type TEXT NOT NULL, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	id TEXT NOT NULL, 
	full_name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_attribute_type) REFERENCES "ontology class" (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id)
);
CREATE TABLE "biological sex" (
	name TEXT, 
	has_attribute_type TEXT NOT NULL, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	id TEXT NOT NULL, 
	full_name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_attribute_type) REFERENCES "ontology class" (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id)
);
CREATE TABLE "phenotypic sex" (
	name TEXT, 
	has_attribute_type TEXT NOT NULL, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	id TEXT NOT NULL, 
	full_name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_attribute_type) REFERENCES "ontology class" (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id)
);
CREATE TABLE "genotypic sex" (
	name TEXT, 
	has_attribute_type TEXT NOT NULL, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	id TEXT NOT NULL, 
	full_name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_attribute_type) REFERENCES "ontology class" (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id)
);
CREATE TABLE "severity value" (
	name TEXT, 
	has_attribute_type TEXT NOT NULL, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	id TEXT NOT NULL, 
	full_name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_attribute_type) REFERENCES "ontology class" (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id)
);
CREATE TABLE "organism taxon" (
	has_taxonomic_rank TEXT, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_taxonomic_rank) REFERENCES "taxonomic rank" (id)
);
CREATE TABLE "dataset version" (
	has_dataset TEXT, 
	ingest_date TEXT, 
	has_distribution TEXT, 
	license TEXT, 
	rights TEXT, 
	format TEXT, 
	creation_date DATE, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_dataset) REFERENCES dataset (id), 
	FOREIGN KEY(has_distribution) REFERENCES "dataset distribution" (id)
);
CREATE TABLE "molecular entity" (
	is_metabolite BOOLEAN, 
	trade_name TEXT, 
	max_tolerated_dose TEXT, 
	is_toxic BOOLEAN, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(trade_name) REFERENCES "chemical entity" (id)
);
CREATE TABLE "small molecule" (
	is_metabolite BOOLEAN, 
	trade_name TEXT, 
	max_tolerated_dose TEXT, 
	is_toxic BOOLEAN, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(trade_name) REFERENCES "chemical entity" (id)
);
CREATE TABLE "chemical mixture" (
	is_supplement TEXT, 
	"highest_FDA_approval_status" TEXT, 
	drug_regulatory_status_world_wide TEXT, 
	trade_name TEXT, 
	max_tolerated_dose TEXT, 
	is_toxic BOOLEAN, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(is_supplement) REFERENCES "chemical mixture" (id), 
	FOREIGN KEY(trade_name) REFERENCES "chemical entity" (id)
);
CREATE TABLE "nucleic acid entity" (
	has_biological_sequence TEXT, 
	in_taxon_label TEXT, 
	id TEXT NOT NULL, 
	is_metabolite BOOLEAN, 
	trade_name TEXT, 
	max_tolerated_dose TEXT, 
	is_toxic BOOLEAN, 
	full_name TEXT, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(trade_name) REFERENCES "chemical entity" (id)
);
CREATE TABLE "environmental food contaminant" (
	trade_name TEXT, 
	max_tolerated_dose TEXT, 
	is_toxic BOOLEAN, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(trade_name) REFERENCES "chemical entity" (id)
);
CREATE TABLE "food additive" (
	trade_name TEXT, 
	max_tolerated_dose TEXT, 
	is_toxic BOOLEAN, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(trade_name) REFERENCES "chemical entity" (id)
);
CREATE TABLE "organism attribute" (
	name TEXT, 
	has_attribute_type TEXT NOT NULL, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	id TEXT NOT NULL, 
	full_name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_attribute_type) REFERENCES "ontology class" (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id)
);
CREATE TABLE "phenotypic quality" (
	name TEXT, 
	has_attribute_type TEXT NOT NULL, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	id TEXT NOT NULL, 
	full_name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_attribute_type) REFERENCES "ontology class" (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id)
);
CREATE TABLE zygosity (
	name TEXT, 
	has_attribute_type TEXT NOT NULL, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	id TEXT NOT NULL, 
	full_name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_attribute_type) REFERENCES "ontology class" (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id)
);
CREATE TABLE "clinical attribute" (
	name TEXT, 
	has_attribute_type TEXT NOT NULL, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	id TEXT NOT NULL, 
	full_name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_attribute_type) REFERENCES "ontology class" (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id)
);
CREATE TABLE "clinical measurement" (
	name TEXT, 
	has_attribute_type TEXT NOT NULL, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	id TEXT NOT NULL, 
	full_name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_attribute_type) REFERENCES "ontology class" (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id)
);
CREATE TABLE "clinical modifier" (
	name TEXT, 
	has_attribute_type TEXT NOT NULL, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	id TEXT NOT NULL, 
	full_name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_attribute_type) REFERENCES "ontology class" (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id)
);
CREATE TABLE "clinical course" (
	name TEXT, 
	has_attribute_type TEXT NOT NULL, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	id TEXT NOT NULL, 
	full_name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_attribute_type) REFERENCES "ontology class" (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id)
);
CREATE TABLE onset (
	name TEXT, 
	has_attribute_type TEXT NOT NULL, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	id TEXT NOT NULL, 
	full_name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_attribute_type) REFERENCES "ontology class" (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id)
);
CREATE TABLE "socioeconomic attribute" (
	name TEXT, 
	has_attribute_type TEXT NOT NULL, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	id TEXT NOT NULL, 
	full_name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_attribute_type) REFERENCES "ontology class" (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id)
);
CREATE TABLE "genomic background exposure" (
	timepoint TEXT, 
	has_biological_sequence TEXT, 
	in_taxon_label TEXT, 
	id TEXT NOT NULL, 
	name TEXT, 
	has_attribute_type TEXT NOT NULL, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	full_name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_attribute_type) REFERENCES "ontology class" (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id)
);
CREATE TABLE "pathological process exposure" (
	timepoint TEXT, 
	name TEXT, 
	has_attribute_type TEXT NOT NULL, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	id TEXT NOT NULL, 
	full_name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_attribute_type) REFERENCES "ontology class" (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id)
);
CREATE TABLE "pathological anatomical exposure" (
	timepoint TEXT, 
	name TEXT, 
	has_attribute_type TEXT NOT NULL, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	id TEXT NOT NULL, 
	full_name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_attribute_type) REFERENCES "ontology class" (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id)
);
CREATE TABLE "disease or phenotypic feature exposure" (
	timepoint TEXT, 
	name TEXT, 
	has_attribute_type TEXT NOT NULL, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	id TEXT NOT NULL, 
	full_name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_attribute_type) REFERENCES "ontology class" (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id)
);
CREATE TABLE "chemical exposure" (
	timepoint TEXT, 
	name TEXT, 
	has_attribute_type TEXT NOT NULL, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	id TEXT NOT NULL, 
	full_name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_attribute_type) REFERENCES "ontology class" (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id)
);
CREATE TABLE "complex chemical exposure" (
	name TEXT, 
	has_attribute_type TEXT NOT NULL, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	id TEXT NOT NULL, 
	full_name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_attribute_type) REFERENCES "ontology class" (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id)
);
CREATE TABLE "drug exposure" (
	timepoint TEXT, 
	name TEXT, 
	has_attribute_type TEXT NOT NULL, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	id TEXT NOT NULL, 
	full_name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_attribute_type) REFERENCES "ontology class" (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id)
);
CREATE TABLE "drug to gene interaction exposure" (
	timepoint TEXT, 
	name TEXT, 
	has_attribute_type TEXT NOT NULL, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	id TEXT NOT NULL, 
	full_name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_attribute_type) REFERENCES "ontology class" (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id)
);
CREATE TABLE "biotic exposure" (
	timepoint TEXT, 
	name TEXT, 
	has_attribute_type TEXT NOT NULL, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	id TEXT NOT NULL, 
	full_name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_attribute_type) REFERENCES "ontology class" (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id)
);
CREATE TABLE "geographic exposure" (
	timepoint TEXT, 
	name TEXT, 
	has_attribute_type TEXT NOT NULL, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	id TEXT NOT NULL, 
	full_name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_attribute_type) REFERENCES "ontology class" (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id)
);
CREATE TABLE "environmental exposure" (
	timepoint TEXT, 
	name TEXT, 
	has_attribute_type TEXT NOT NULL, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	id TEXT NOT NULL, 
	full_name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_attribute_type) REFERENCES "ontology class" (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id)
);
CREATE TABLE "behavioral exposure" (
	timepoint TEXT, 
	name TEXT, 
	has_attribute_type TEXT NOT NULL, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	id TEXT NOT NULL, 
	full_name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_attribute_type) REFERENCES "ontology class" (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id)
);
CREATE TABLE "socioeconomic exposure" (
	timepoint TEXT, 
	name TEXT, 
	has_attribute_type TEXT NOT NULL, 
	has_qualitative_value TEXT, 
	iri TEXT, 
	id TEXT NOT NULL, 
	full_name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_attribute_type) REFERENCES "ontology class" (id), 
	FOREIGN KEY(has_qualitative_value) REFERENCES "named thing" (id)
);
CREATE TABLE association (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "named thing" (id), 
	FOREIGN KEY(object) REFERENCES "named thing" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical entity assesses named thing association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "chemical entity" (id), 
	FOREIGN KEY(object) REFERENCES "named thing" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "contributor association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "information content entity" (id), 
	FOREIGN KEY(object) REFERENCES agent (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to gene association" (
	predicate TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	subject_id TEXT NOT NULL, 
	object_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(subject_id) REFERENCES "gene or gene product" (id), 
	FOREIGN KEY(object_id) REFERENCES "gene or gene product" (id)
);
CREATE TABLE "gene to gene homology association" (
	predicate TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	subject_id TEXT NOT NULL, 
	object_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(subject_id) REFERENCES "gene or gene product" (id), 
	FOREIGN KEY(object_id) REFERENCES "gene or gene product" (id)
);
CREATE TABLE "gene to gene family association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES gene (id), 
	FOREIGN KEY(object) REFERENCES "gene family" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene expression mixin" (
	id INTEGER NOT NULL, 
	quantifier_qualifier TEXT, 
	expression_site TEXT, 
	stage_qualifier TEXT, 
	phenotypic_state TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(quantifier_qualifier) REFERENCES "ontology class" (id), 
	FOREIGN KEY(expression_site) REFERENCES "anatomical entity" (id), 
	FOREIGN KEY(stage_qualifier) REFERENCES "life stage" (id), 
	FOREIGN KEY(phenotypic_state) REFERENCES "disease or phenotypic feature" (id)
);
CREATE TABLE "gene to gene coexpression association" (
	quantifier_qualifier TEXT, 
	expression_site TEXT, 
	stage_qualifier TEXT, 
	phenotypic_state TEXT, 
	predicate TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	subject_id TEXT NOT NULL, 
	object_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(quantifier_qualifier) REFERENCES "ontology class" (id), 
	FOREIGN KEY(expression_site) REFERENCES "anatomical entity" (id), 
	FOREIGN KEY(stage_qualifier) REFERENCES "life stage" (id), 
	FOREIGN KEY(phenotypic_state) REFERENCES "disease or phenotypic feature" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(subject_id) REFERENCES "gene or gene product" (id), 
	FOREIGN KEY(object_id) REFERENCES "gene or gene product" (id)
);
CREATE TABLE "pairwise gene to gene interaction" (
	predicate TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	subject_id TEXT NOT NULL, 
	object_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(subject_id) REFERENCES "gene or gene product" (id), 
	FOREIGN KEY(object_id) REFERENCES "gene or gene product" (id)
);
CREATE TABLE "cell line to entity association mixin" (
	id INTEGER NOT NULL, 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "cell line" (id), 
	FOREIGN KEY(object) REFERENCES "named thing" (id)
);
CREATE TABLE "cell line to disease or phenotypic feature association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "disease or phenotypic feature" (id), 
	FOREIGN KEY(object) REFERENCES "disease or phenotypic feature" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical entity to entity association mixin" (
	id INTEGER NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	subject_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(object) REFERENCES "named thing" (id), 
	FOREIGN KEY(subject_id) REFERENCES "chemical entity or gene or gene product" (id)
);
CREATE TABLE "chemical to entity association mixin" (
	id INTEGER NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	subject_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(object) REFERENCES "named thing" (id), 
	FOREIGN KEY(subject_id) REFERENCES "chemical entity or gene or gene product" (id)
);
CREATE TABLE "case to entity association mixin" (
	id INTEGER NOT NULL, 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "case" (id), 
	FOREIGN KEY(object) REFERENCES "named thing" (id)
);
CREATE TABLE "chemical to chemical association" (
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	subject_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(object) REFERENCES "chemical entity" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(subject_id) REFERENCES "chemical entity or gene or gene product" (id)
);
CREATE TABLE "chemical to chemical derivation association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "chemical entity" (id), 
	FOREIGN KEY(object) REFERENCES "chemical entity" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical to disease or phenotypic feature association" (
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	subject_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(object) REFERENCES "disease or phenotypic feature" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(subject_id) REFERENCES "chemical entity or gene or gene product" (id)
);
CREATE TABLE "chemical or drug or treatment to disease or phenotypic feature association" (
	"FDA_adverse_event_level" VARCHAR(30), 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	subject_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(object) REFERENCES "disease or phenotypic feature" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(subject_id) REFERENCES "chemical entity or gene or gene product" (id)
);
CREATE TABLE "chemical or drug or treatment side effect disease or phenotypic feature association" (
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	"FDA_adverse_event_level" VARCHAR(30), 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	subject_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(object) REFERENCES "disease or phenotypic feature" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(subject_id) REFERENCES "chemical entity or gene or gene product" (id)
);
CREATE TABLE "gene to pathway association" (
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	subject_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(object) REFERENCES pathway (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(subject_id) REFERENCES "gene or gene product" (id)
);
CREATE TABLE "molecular activity to pathway association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "molecular activity" (id), 
	FOREIGN KEY(object) REFERENCES pathway (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical to pathway association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "chemical entity" (id), 
	FOREIGN KEY(object) REFERENCES pathway (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "named thing associated with likelihood of named thing association" (
	subject TEXT NOT NULL, 
	subject_aspect_qualifier TEXT, 
	subject_context_qualifier TEXT, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	object_aspect_qualifier TEXT, 
	object_context_qualifier TEXT, 
	population_context_qualifier TEXT, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "named thing" (id), 
	FOREIGN KEY(subject_context_qualifier) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object) REFERENCES "named thing" (id), 
	FOREIGN KEY(object_context_qualifier) REFERENCES "ontology class" (id), 
	FOREIGN KEY(population_context_qualifier) REFERENCES "population of individual organisms" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical gene interaction association" (
	subject_form_or_variant_qualifier VARCHAR(29), 
	subject_part_qualifier VARCHAR(11), 
	subject_derivative_qualifier VARCHAR(10), 
	subject_context_qualifier TEXT, 
	object_form_or_variant_qualifier VARCHAR(29), 
	object_part_qualifier VARCHAR(11), 
	object_context_qualifier TEXT, 
	anatomical_context_qualifier TEXT, 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	object_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject_context_qualifier) REFERENCES "anatomical entity" (id), 
	FOREIGN KEY(object_context_qualifier) REFERENCES "anatomical entity" (id), 
	FOREIGN KEY(anatomical_context_qualifier) REFERENCES "anatomical entity" (id), 
	FOREIGN KEY(subject) REFERENCES "chemical entity" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_id) REFERENCES "gene or gene product" (id)
);
CREATE TABLE "material sample to entity association mixin" (
	id INTEGER NOT NULL, 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "material sample" (id), 
	FOREIGN KEY(object) REFERENCES "named thing" (id)
);
CREATE TABLE "material sample derivation association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "material sample" (id), 
	FOREIGN KEY(object) REFERENCES "named thing" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "material sample to disease or phenotypic feature association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "material sample" (id), 
	FOREIGN KEY(object) REFERENCES "disease or phenotypic feature" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "disease to entity association mixin" (
	id INTEGER NOT NULL, 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES disease (id), 
	FOREIGN KEY(object) REFERENCES "named thing" (id)
);
CREATE TABLE "entity to exposure event association mixin" (
	id INTEGER NOT NULL, 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "named thing" (id), 
	FOREIGN KEY(object) REFERENCES "exposure event" (id)
);
CREATE TABLE "disease to exposure event association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES disease (id), 
	FOREIGN KEY(object) REFERENCES "exposure event" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "entity to outcome association mixin" (
	id INTEGER NOT NULL, 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "named thing" (id), 
	FOREIGN KEY(object_id) REFERENCES outcome (id)
);
CREATE TABLE "exposure event to outcome association" (
	population_context_qualifier TEXT, 
	temporal_context_qualifier TEXT, 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	object_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(population_context_qualifier) REFERENCES "population of individual organisms" (id), 
	FOREIGN KEY(subject) REFERENCES "named thing" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_id) REFERENCES outcome (id)
);
CREATE TABLE "frequency qualifier mixin" (
	id INTEGER NOT NULL, 
	frequency_qualifier TEXT, 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "named thing" (id), 
	FOREIGN KEY(object) REFERENCES "named thing" (id)
);
CREATE TABLE "entity to feature or disease qualifiers mixin" (
	id INTEGER NOT NULL, 
	subject_aspect_qualifier TEXT, 
	subject_direction_qualifier VARCHAR(13), 
	object_aspect_qualifier TEXT, 
	object_direction_qualifier VARCHAR(13), 
	qualified_predicate TEXT, 
	frequency_qualifier TEXT, 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "named thing" (id), 
	FOREIGN KEY(object) REFERENCES "named thing" (id)
);
CREATE TABLE "feature or disease qualifiers to entity mixin" (
	id INTEGER NOT NULL, 
	subject_aspect_qualifier TEXT, 
	subject_direction_qualifier VARCHAR(13), 
	object_aspect_qualifier TEXT, 
	object_direction_qualifier VARCHAR(13), 
	qualified_predicate TEXT, 
	frequency_qualifier TEXT, 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "named thing" (id), 
	FOREIGN KEY(object) REFERENCES "named thing" (id)
);
CREATE TABLE "information content entity to named thing association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "named thing" (id), 
	FOREIGN KEY(object) REFERENCES "named thing" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "entity to disease association mixin" (
	id INTEGER NOT NULL, 
	subject_aspect_qualifier TEXT, 
	subject_direction_qualifier VARCHAR(13), 
	object_aspect_qualifier TEXT, 
	object_direction_qualifier VARCHAR(13), 
	qualified_predicate TEXT, 
	frequency_qualifier TEXT, 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "named thing" (id), 
	FOREIGN KEY(object) REFERENCES disease (id)
);
CREATE TABLE "disease or phenotypic feature to entity association mixin" (
	id INTEGER NOT NULL, 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "disease or phenotypic feature" (id), 
	FOREIGN KEY(object) REFERENCES "named thing" (id)
);
CREATE TABLE "disease or phenotypic feature to location association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "disease or phenotypic feature" (id), 
	FOREIGN KEY(object) REFERENCES "anatomical entity" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "disease or phenotypic feature to genetic inheritance association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "disease or phenotypic feature" (id), 
	FOREIGN KEY(object) REFERENCES "genetic inheritance" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "entity to disease or phenotypic feature association mixin" (
	id INTEGER NOT NULL, 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "named thing" (id), 
	FOREIGN KEY(object) REFERENCES "disease or phenotypic feature" (id)
);
CREATE TABLE "gene to entity association mixin" (
	id INTEGER NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	subject_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(object) REFERENCES "named thing" (id), 
	FOREIGN KEY(subject_id) REFERENCES "gene or gene product" (id)
);
CREATE TABLE "variant to entity association mixin" (
	id INTEGER NOT NULL, 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "sequence variant" (id), 
	FOREIGN KEY(object) REFERENCES "named thing" (id)
);
CREATE TABLE "variant to gene association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "sequence variant" (id), 
	FOREIGN KEY(object) REFERENCES gene (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "variant to gene expression association" (
	quantifier_qualifier TEXT, 
	expression_site TEXT, 
	stage_qualifier TEXT, 
	phenotypic_state TEXT, 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(quantifier_qualifier) REFERENCES "ontology class" (id), 
	FOREIGN KEY(expression_site) REFERENCES "anatomical entity" (id), 
	FOREIGN KEY(stage_qualifier) REFERENCES "life stage" (id), 
	FOREIGN KEY(phenotypic_state) REFERENCES "disease or phenotypic feature" (id), 
	FOREIGN KEY(subject) REFERENCES "sequence variant" (id), 
	FOREIGN KEY(object) REFERENCES gene (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "variant to population association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	has_count INTEGER, 
	has_total INTEGER, 
	has_quotient FLOAT, 
	has_percentage FLOAT, 
	frequency_qualifier TEXT, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "sequence variant" (id), 
	FOREIGN KEY(object) REFERENCES "population of individual organisms" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "population to population association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "population of individual organisms" (id), 
	FOREIGN KEY(object) REFERENCES "population of individual organisms" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "variant to disease association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	subject_aspect_qualifier TEXT, 
	subject_direction_qualifier VARCHAR(13), 
	object_aspect_qualifier TEXT, 
	object_direction_qualifier VARCHAR(13), 
	qualified_predicate TEXT, 
	frequency_qualifier TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "sequence variant" (id), 
	FOREIGN KEY(object) REFERENCES disease (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "model to disease association mixin" (
	id INTEGER NOT NULL, 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "named thing" (id), 
	FOREIGN KEY(object) REFERENCES "named thing" (id)
);
CREATE TABLE "variant as a model of disease association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	subject_aspect_qualifier TEXT, 
	subject_direction_qualifier VARCHAR(13), 
	object_aspect_qualifier TEXT, 
	object_direction_qualifier VARCHAR(13), 
	qualified_predicate TEXT, 
	frequency_qualifier TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "sequence variant" (id), 
	FOREIGN KEY(object) REFERENCES disease (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "cell line as a model of disease association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	subject_aspect_qualifier TEXT, 
	subject_direction_qualifier VARCHAR(13), 
	object_aspect_qualifier TEXT, 
	object_direction_qualifier VARCHAR(13), 
	qualified_predicate TEXT, 
	frequency_qualifier TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "cell line" (id), 
	FOREIGN KEY(object) REFERENCES disease (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "organismal entity as a model of disease association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	subject_aspect_qualifier TEXT, 
	subject_direction_qualifier VARCHAR(13), 
	object_aspect_qualifier TEXT, 
	object_direction_qualifier VARCHAR(13), 
	qualified_predicate TEXT, 
	frequency_qualifier TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "organismal entity" (id), 
	FOREIGN KEY(object) REFERENCES disease (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "organism to organism association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "individual organism" (id), 
	FOREIGN KEY(object) REFERENCES "individual organism" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to expression site association" (
	stage_qualifier TEXT, 
	quantifier_qualifier TEXT, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	subject_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(stage_qualifier) REFERENCES "life stage" (id), 
	FOREIGN KEY(quantifier_qualifier) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object) REFERENCES "anatomical entity" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(subject_id) REFERENCES "gene or gene product" (id)
);
CREATE TABLE "sequence variant modulates treatment association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "sequence variant" (id), 
	FOREIGN KEY(object) REFERENCES treatment (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "functional association" (
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	subject_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(object) REFERENCES "ontology class" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(subject_id) REFERENCES "macromolecular machine mixin" (id)
);
CREATE TABLE "macromolecular machine to entity association mixin" (
	id INTEGER NOT NULL, 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "named thing" (id), 
	FOREIGN KEY(object) REFERENCES "named thing" (id)
);
CREATE TABLE "macromolecular machine to molecular activity association" (
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	subject_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(object) REFERENCES "molecular activity" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(subject_id) REFERENCES "macromolecular machine mixin" (id)
);
CREATE TABLE "macromolecular machine to biological process association" (
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	subject_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(object) REFERENCES "biological process" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(subject_id) REFERENCES "macromolecular machine mixin" (id)
);
CREATE TABLE "macromolecular machine to cellular component association" (
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	subject_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(object) REFERENCES "cellular component" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(subject_id) REFERENCES "macromolecular machine mixin" (id)
);
CREATE TABLE "molecular activity to chemical entity association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "molecular activity" (id), 
	FOREIGN KEY(object) REFERENCES "chemical entity" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "molecular activity to molecular activity association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "molecular activity" (id), 
	FOREIGN KEY(object) REFERENCES "molecular activity" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to go term association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES gene (id), 
	FOREIGN KEY(object) REFERENCES "ontology class" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "entity to disease association" (
	clinical_approval_status VARCHAR(26), 
	max_research_phase VARCHAR(27), 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "named thing" (id), 
	FOREIGN KEY(object) REFERENCES "named thing" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "entity to phenotypic feature association" (
	clinical_approval_status VARCHAR(26), 
	max_research_phase VARCHAR(27), 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "named thing" (id), 
	FOREIGN KEY(object) REFERENCES "named thing" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "sequence association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "named thing" (id), 
	FOREIGN KEY(object) REFERENCES "named thing" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "transcript to gene relationship" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES transcript (id), 
	FOREIGN KEY(object) REFERENCES gene (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to gene product relationship" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	object_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES gene (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_id) REFERENCES "gene product mixin" (id)
);
CREATE TABLE "exon to transcript relationship" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES exon (id), 
	FOREIGN KEY(object) REFERENCES transcript (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical entity or gene or gene product regulates gene association" (
	object_direction_qualifier VARCHAR(13), 
	predicate TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	subject_id TEXT NOT NULL, 
	object_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(subject_id) REFERENCES "chemical entity or gene or gene product" (id), 
	FOREIGN KEY(object_id) REFERENCES "gene or gene product" (id)
);
CREATE TABLE "anatomical entity to anatomical entity association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "anatomical entity" (id), 
	FOREIGN KEY(object) REFERENCES "anatomical entity" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "anatomical entity to anatomical entity part of association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "anatomical entity" (id), 
	FOREIGN KEY(object) REFERENCES "anatomical entity" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "anatomical entity to anatomical entity ontogenic association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "anatomical entity" (id), 
	FOREIGN KEY(object) REFERENCES "anatomical entity" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE entity_category (
	entity_id TEXT, 
	category TEXT, 
	PRIMARY KEY (entity_id, category), 
	FOREIGN KEY(entity_id) REFERENCES entity (id)
);
CREATE TABLE entity_type (
	entity_id TEXT, 
	type TEXT, 
	PRIMARY KEY (entity_id, type), 
	FOREIGN KEY(entity_id) REFERENCES entity (id)
);
CREATE TABLE "named thing_provided_by" (
	"named thing_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("named thing_id", provided_by), 
	FOREIGN KEY("named thing_id") REFERENCES "named thing" (id)
);
CREATE TABLE "named thing_xref" (
	"named thing_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("named thing_id", xref), 
	FOREIGN KEY("named thing_id") REFERENCES "named thing" (id)
);
CREATE TABLE "named thing_synonym" (
	"named thing_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("named thing_id", synonym), 
	FOREIGN KEY("named thing_id") REFERENCES "named thing" (id)
);
CREATE TABLE "named thing_category" (
	"named thing_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("named thing_id", category), 
	FOREIGN KEY("named thing_id") REFERENCES "named thing" (id)
);
CREATE TABLE "named thing_type" (
	"named thing_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("named thing_id", type), 
	FOREIGN KEY("named thing_id") REFERENCES "named thing" (id)
);
CREATE TABLE event_provided_by (
	event_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (event_id, provided_by), 
	FOREIGN KEY(event_id) REFERENCES event (id)
);
CREATE TABLE event_xref (
	event_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (event_id, xref), 
	FOREIGN KEY(event_id) REFERENCES event (id)
);
CREATE TABLE event_synonym (
	event_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (event_id, synonym), 
	FOREIGN KEY(event_id) REFERENCES event (id)
);
CREATE TABLE event_category (
	event_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (event_id, category), 
	FOREIGN KEY(event_id) REFERENCES event (id)
);
CREATE TABLE event_type (
	event_id TEXT, 
	type TEXT, 
	PRIMARY KEY (event_id, type), 
	FOREIGN KEY(event_id) REFERENCES event (id)
);
CREATE TABLE "administrative entity_provided_by" (
	"administrative entity_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("administrative entity_id", provided_by), 
	FOREIGN KEY("administrative entity_id") REFERENCES "administrative entity" (id)
);
CREATE TABLE "administrative entity_xref" (
	"administrative entity_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("administrative entity_id", xref), 
	FOREIGN KEY("administrative entity_id") REFERENCES "administrative entity" (id)
);
CREATE TABLE "administrative entity_synonym" (
	"administrative entity_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("administrative entity_id", synonym), 
	FOREIGN KEY("administrative entity_id") REFERENCES "administrative entity" (id)
);
CREATE TABLE "administrative entity_category" (
	"administrative entity_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("administrative entity_id", category), 
	FOREIGN KEY("administrative entity_id") REFERENCES "administrative entity" (id)
);
CREATE TABLE "administrative entity_type" (
	"administrative entity_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("administrative entity_id", type), 
	FOREIGN KEY("administrative entity_id") REFERENCES "administrative entity" (id)
);
CREATE TABLE "study result_provided_by" (
	"study result_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("study result_id", provided_by), 
	FOREIGN KEY("study result_id") REFERENCES "study result" (id)
);
CREATE TABLE "study result_xref" (
	"study result_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("study result_id", xref), 
	FOREIGN KEY("study result_id") REFERENCES "study result" (id)
);
CREATE TABLE "study result_synonym" (
	"study result_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("study result_id", synonym), 
	FOREIGN KEY("study result_id") REFERENCES "study result" (id)
);
CREATE TABLE "study result_category" (
	"study result_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("study result_id", category), 
	FOREIGN KEY("study result_id") REFERENCES "study result" (id)
);
CREATE TABLE "study result_type" (
	"study result_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("study result_id", type), 
	FOREIGN KEY("study result_id") REFERENCES "study result" (id)
);
CREATE TABLE study_provided_by (
	study_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (study_id, provided_by), 
	FOREIGN KEY(study_id) REFERENCES study (id)
);
CREATE TABLE study_xref (
	study_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (study_id, xref), 
	FOREIGN KEY(study_id) REFERENCES study (id)
);
CREATE TABLE study_synonym (
	study_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (study_id, synonym), 
	FOREIGN KEY(study_id) REFERENCES study (id)
);
CREATE TABLE study_category (
	study_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (study_id, category), 
	FOREIGN KEY(study_id) REFERENCES study (id)
);
CREATE TABLE study_type (
	study_id TEXT, 
	type TEXT, 
	PRIMARY KEY (study_id, type), 
	FOREIGN KEY(study_id) REFERENCES study (id)
);
CREATE TABLE "study variable_provided_by" (
	"study variable_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("study variable_id", provided_by), 
	FOREIGN KEY("study variable_id") REFERENCES "study variable" (id)
);
CREATE TABLE "study variable_xref" (
	"study variable_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("study variable_id", xref), 
	FOREIGN KEY("study variable_id") REFERENCES "study variable" (id)
);
CREATE TABLE "study variable_synonym" (
	"study variable_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("study variable_id", synonym), 
	FOREIGN KEY("study variable_id") REFERENCES "study variable" (id)
);
CREATE TABLE "study variable_category" (
	"study variable_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("study variable_id", category), 
	FOREIGN KEY("study variable_id") REFERENCES "study variable" (id)
);
CREATE TABLE "study variable_type" (
	"study variable_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("study variable_id", type), 
	FOREIGN KEY("study variable_id") REFERENCES "study variable" (id)
);
CREATE TABLE "common data element_provided_by" (
	"common data element_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("common data element_id", provided_by), 
	FOREIGN KEY("common data element_id") REFERENCES "common data element" (id)
);
CREATE TABLE "common data element_xref" (
	"common data element_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("common data element_id", xref), 
	FOREIGN KEY("common data element_id") REFERENCES "common data element" (id)
);
CREATE TABLE "common data element_synonym" (
	"common data element_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("common data element_id", synonym), 
	FOREIGN KEY("common data element_id") REFERENCES "common data element" (id)
);
CREATE TABLE "common data element_category" (
	"common data element_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("common data element_id", category), 
	FOREIGN KEY("common data element_id") REFERENCES "common data element" (id)
);
CREATE TABLE "common data element_type" (
	"common data element_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("common data element_id", type), 
	FOREIGN KEY("common data element_id") REFERENCES "common data element" (id)
);
CREATE TABLE "concept count analysis result_provided_by" (
	"concept count analysis result_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("concept count analysis result_id", provided_by), 
	FOREIGN KEY("concept count analysis result_id") REFERENCES "concept count analysis result" (id)
);
CREATE TABLE "concept count analysis result_xref" (
	"concept count analysis result_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("concept count analysis result_id", xref), 
	FOREIGN KEY("concept count analysis result_id") REFERENCES "concept count analysis result" (id)
);
CREATE TABLE "concept count analysis result_synonym" (
	"concept count analysis result_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("concept count analysis result_id", synonym), 
	FOREIGN KEY("concept count analysis result_id") REFERENCES "concept count analysis result" (id)
);
CREATE TABLE "concept count analysis result_category" (
	"concept count analysis result_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("concept count analysis result_id", category), 
	FOREIGN KEY("concept count analysis result_id") REFERENCES "concept count analysis result" (id)
);
CREATE TABLE "concept count analysis result_type" (
	"concept count analysis result_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("concept count analysis result_id", type), 
	FOREIGN KEY("concept count analysis result_id") REFERENCES "concept count analysis result" (id)
);
CREATE TABLE "observed expected frequency analysis result_provided_by" (
	"observed expected frequency analysis result_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("observed expected frequency analysis result_id", provided_by), 
	FOREIGN KEY("observed expected frequency analysis result_id") REFERENCES "observed expected frequency analysis result" (id)
);
CREATE TABLE "observed expected frequency analysis result_xref" (
	"observed expected frequency analysis result_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("observed expected frequency analysis result_id", xref), 
	FOREIGN KEY("observed expected frequency analysis result_id") REFERENCES "observed expected frequency analysis result" (id)
);
CREATE TABLE "observed expected frequency analysis result_synonym" (
	"observed expected frequency analysis result_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("observed expected frequency analysis result_id", synonym), 
	FOREIGN KEY("observed expected frequency analysis result_id") REFERENCES "observed expected frequency analysis result" (id)
);
CREATE TABLE "observed expected frequency analysis result_category" (
	"observed expected frequency analysis result_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("observed expected frequency analysis result_id", category), 
	FOREIGN KEY("observed expected frequency analysis result_id") REFERENCES "observed expected frequency analysis result" (id)
);
CREATE TABLE "observed expected frequency analysis result_type" (
	"observed expected frequency analysis result_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("observed expected frequency analysis result_id", type), 
	FOREIGN KEY("observed expected frequency analysis result_id") REFERENCES "observed expected frequency analysis result" (id)
);
CREATE TABLE "relative frequency analysis result_provided_by" (
	"relative frequency analysis result_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("relative frequency analysis result_id", provided_by), 
	FOREIGN KEY("relative frequency analysis result_id") REFERENCES "relative frequency analysis result" (id)
);
CREATE TABLE "relative frequency analysis result_xref" (
	"relative frequency analysis result_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("relative frequency analysis result_id", xref), 
	FOREIGN KEY("relative frequency analysis result_id") REFERENCES "relative frequency analysis result" (id)
);
CREATE TABLE "relative frequency analysis result_synonym" (
	"relative frequency analysis result_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("relative frequency analysis result_id", synonym), 
	FOREIGN KEY("relative frequency analysis result_id") REFERENCES "relative frequency analysis result" (id)
);
CREATE TABLE "relative frequency analysis result_category" (
	"relative frequency analysis result_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("relative frequency analysis result_id", category), 
	FOREIGN KEY("relative frequency analysis result_id") REFERENCES "relative frequency analysis result" (id)
);
CREATE TABLE "relative frequency analysis result_type" (
	"relative frequency analysis result_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("relative frequency analysis result_id", type), 
	FOREIGN KEY("relative frequency analysis result_id") REFERENCES "relative frequency analysis result" (id)
);
CREATE TABLE "text mining result_provided_by" (
	"text mining result_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("text mining result_id", provided_by), 
	FOREIGN KEY("text mining result_id") REFERENCES "text mining result" (id)
);
CREATE TABLE "text mining result_xref" (
	"text mining result_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("text mining result_id", xref), 
	FOREIGN KEY("text mining result_id") REFERENCES "text mining result" (id)
);
CREATE TABLE "text mining result_synonym" (
	"text mining result_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("text mining result_id", synonym), 
	FOREIGN KEY("text mining result_id") REFERENCES "text mining result" (id)
);
CREATE TABLE "text mining result_category" (
	"text mining result_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("text mining result_id", category), 
	FOREIGN KEY("text mining result_id") REFERENCES "text mining result" (id)
);
CREATE TABLE "text mining result_type" (
	"text mining result_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("text mining result_id", type), 
	FOREIGN KEY("text mining result_id") REFERENCES "text mining result" (id)
);
CREATE TABLE "chi squared analysis result_provided_by" (
	"chi squared analysis result_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("chi squared analysis result_id", provided_by), 
	FOREIGN KEY("chi squared analysis result_id") REFERENCES "chi squared analysis result" (id)
);
CREATE TABLE "chi squared analysis result_xref" (
	"chi squared analysis result_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("chi squared analysis result_id", xref), 
	FOREIGN KEY("chi squared analysis result_id") REFERENCES "chi squared analysis result" (id)
);
CREATE TABLE "chi squared analysis result_synonym" (
	"chi squared analysis result_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("chi squared analysis result_id", synonym), 
	FOREIGN KEY("chi squared analysis result_id") REFERENCES "chi squared analysis result" (id)
);
CREATE TABLE "chi squared analysis result_category" (
	"chi squared analysis result_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("chi squared analysis result_id", category), 
	FOREIGN KEY("chi squared analysis result_id") REFERENCES "chi squared analysis result" (id)
);
CREATE TABLE "chi squared analysis result_type" (
	"chi squared analysis result_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("chi squared analysis result_id", type), 
	FOREIGN KEY("chi squared analysis result_id") REFERENCES "chi squared analysis result" (id)
);
CREATE TABLE "log odds analysis result_provided_by" (
	"log odds analysis result_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("log odds analysis result_id", provided_by), 
	FOREIGN KEY("log odds analysis result_id") REFERENCES "log odds analysis result" (id)
);
CREATE TABLE "log odds analysis result_xref" (
	"log odds analysis result_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("log odds analysis result_id", xref), 
	FOREIGN KEY("log odds analysis result_id") REFERENCES "log odds analysis result" (id)
);
CREATE TABLE "log odds analysis result_synonym" (
	"log odds analysis result_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("log odds analysis result_id", synonym), 
	FOREIGN KEY("log odds analysis result_id") REFERENCES "log odds analysis result" (id)
);
CREATE TABLE "log odds analysis result_category" (
	"log odds analysis result_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("log odds analysis result_id", category), 
	FOREIGN KEY("log odds analysis result_id") REFERENCES "log odds analysis result" (id)
);
CREATE TABLE "log odds analysis result_type" (
	"log odds analysis result_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("log odds analysis result_id", type), 
	FOREIGN KEY("log odds analysis result_id") REFERENCES "log odds analysis result" (id)
);
CREATE TABLE agent_affiliation (
	agent_id TEXT, 
	affiliation TEXT, 
	PRIMARY KEY (agent_id, affiliation), 
	FOREIGN KEY(agent_id) REFERENCES agent (id)
);
CREATE TABLE agent_provided_by (
	agent_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (agent_id, provided_by), 
	FOREIGN KEY(agent_id) REFERENCES agent (id)
);
CREATE TABLE agent_xref (
	agent_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (agent_id, xref), 
	FOREIGN KEY(agent_id) REFERENCES agent (id)
);
CREATE TABLE agent_synonym (
	agent_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (agent_id, synonym), 
	FOREIGN KEY(agent_id) REFERENCES agent (id)
);
CREATE TABLE agent_category (
	agent_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (agent_id, category), 
	FOREIGN KEY(agent_id) REFERENCES agent (id)
);
CREATE TABLE agent_type (
	agent_id TEXT, 
	type TEXT, 
	PRIMARY KEY (agent_id, type), 
	FOREIGN KEY(agent_id) REFERENCES agent (id)
);
CREATE TABLE "information content entity_provided_by" (
	"information content entity_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("information content entity_id", provided_by), 
	FOREIGN KEY("information content entity_id") REFERENCES "information content entity" (id)
);
CREATE TABLE "information content entity_xref" (
	"information content entity_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("information content entity_id", xref), 
	FOREIGN KEY("information content entity_id") REFERENCES "information content entity" (id)
);
CREATE TABLE "information content entity_synonym" (
	"information content entity_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("information content entity_id", synonym), 
	FOREIGN KEY("information content entity_id") REFERENCES "information content entity" (id)
);
CREATE TABLE "information content entity_category" (
	"information content entity_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("information content entity_id", category), 
	FOREIGN KEY("information content entity_id") REFERENCES "information content entity" (id)
);
CREATE TABLE "information content entity_type" (
	"information content entity_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("information content entity_id", type), 
	FOREIGN KEY("information content entity_id") REFERENCES "information content entity" (id)
);
CREATE TABLE dataset_provided_by (
	dataset_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (dataset_id, provided_by), 
	FOREIGN KEY(dataset_id) REFERENCES dataset (id)
);
CREATE TABLE dataset_xref (
	dataset_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (dataset_id, xref), 
	FOREIGN KEY(dataset_id) REFERENCES dataset (id)
);
CREATE TABLE dataset_synonym (
	dataset_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (dataset_id, synonym), 
	FOREIGN KEY(dataset_id) REFERENCES dataset (id)
);
CREATE TABLE dataset_category (
	dataset_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (dataset_id, category), 
	FOREIGN KEY(dataset_id) REFERENCES dataset (id)
);
CREATE TABLE dataset_type (
	dataset_id TEXT, 
	type TEXT, 
	PRIMARY KEY (dataset_id, type), 
	FOREIGN KEY(dataset_id) REFERENCES dataset (id)
);
CREATE TABLE "dataset distribution_provided_by" (
	"dataset distribution_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("dataset distribution_id", provided_by), 
	FOREIGN KEY("dataset distribution_id") REFERENCES "dataset distribution" (id)
);
CREATE TABLE "dataset distribution_xref" (
	"dataset distribution_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("dataset distribution_id", xref), 
	FOREIGN KEY("dataset distribution_id") REFERENCES "dataset distribution" (id)
);
CREATE TABLE "dataset distribution_synonym" (
	"dataset distribution_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("dataset distribution_id", synonym), 
	FOREIGN KEY("dataset distribution_id") REFERENCES "dataset distribution" (id)
);
CREATE TABLE "dataset distribution_category" (
	"dataset distribution_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("dataset distribution_id", category), 
	FOREIGN KEY("dataset distribution_id") REFERENCES "dataset distribution" (id)
);
CREATE TABLE "dataset distribution_type" (
	"dataset distribution_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("dataset distribution_id", type), 
	FOREIGN KEY("dataset distribution_id") REFERENCES "dataset distribution" (id)
);
CREATE TABLE "dataset summary_provided_by" (
	"dataset summary_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("dataset summary_id", provided_by), 
	FOREIGN KEY("dataset summary_id") REFERENCES "dataset summary" (id)
);
CREATE TABLE "dataset summary_xref" (
	"dataset summary_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("dataset summary_id", xref), 
	FOREIGN KEY("dataset summary_id") REFERENCES "dataset summary" (id)
);
CREATE TABLE "dataset summary_synonym" (
	"dataset summary_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("dataset summary_id", synonym), 
	FOREIGN KEY("dataset summary_id") REFERENCES "dataset summary" (id)
);
CREATE TABLE "dataset summary_category" (
	"dataset summary_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("dataset summary_id", category), 
	FOREIGN KEY("dataset summary_id") REFERENCES "dataset summary" (id)
);
CREATE TABLE "dataset summary_type" (
	"dataset summary_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("dataset summary_id", type), 
	FOREIGN KEY("dataset summary_id") REFERENCES "dataset summary" (id)
);
CREATE TABLE "confidence level_provided_by" (
	"confidence level_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("confidence level_id", provided_by), 
	FOREIGN KEY("confidence level_id") REFERENCES "confidence level" (id)
);
CREATE TABLE "confidence level_xref" (
	"confidence level_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("confidence level_id", xref), 
	FOREIGN KEY("confidence level_id") REFERENCES "confidence level" (id)
);
CREATE TABLE "confidence level_synonym" (
	"confidence level_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("confidence level_id", synonym), 
	FOREIGN KEY("confidence level_id") REFERENCES "confidence level" (id)
);
CREATE TABLE "confidence level_category" (
	"confidence level_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("confidence level_id", category), 
	FOREIGN KEY("confidence level_id") REFERENCES "confidence level" (id)
);
CREATE TABLE "confidence level_type" (
	"confidence level_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("confidence level_id", type), 
	FOREIGN KEY("confidence level_id") REFERENCES "confidence level" (id)
);
CREATE TABLE "evidence type_provided_by" (
	"evidence type_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("evidence type_id", provided_by), 
	FOREIGN KEY("evidence type_id") REFERENCES "evidence type" (id)
);
CREATE TABLE "evidence type_xref" (
	"evidence type_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("evidence type_id", xref), 
	FOREIGN KEY("evidence type_id") REFERENCES "evidence type" (id)
);
CREATE TABLE "evidence type_synonym" (
	"evidence type_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("evidence type_id", synonym), 
	FOREIGN KEY("evidence type_id") REFERENCES "evidence type" (id)
);
CREATE TABLE "evidence type_category" (
	"evidence type_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("evidence type_id", category), 
	FOREIGN KEY("evidence type_id") REFERENCES "evidence type" (id)
);
CREATE TABLE "evidence type_type" (
	"evidence type_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("evidence type_id", type), 
	FOREIGN KEY("evidence type_id") REFERENCES "evidence type" (id)
);
CREATE TABLE publication_authors (
	publication_id TEXT, 
	authors_id TEXT, 
	PRIMARY KEY (publication_id, authors_id), 
	FOREIGN KEY(publication_id) REFERENCES publication (id), 
	FOREIGN KEY(authors_id) REFERENCES agent (id)
);
CREATE TABLE publication_pages (
	publication_id TEXT, 
	pages TEXT, 
	PRIMARY KEY (publication_id, pages), 
	FOREIGN KEY(publication_id) REFERENCES publication (id)
);
CREATE TABLE publication_keywords (
	publication_id TEXT, 
	keywords TEXT, 
	PRIMARY KEY (publication_id, keywords), 
	FOREIGN KEY(publication_id) REFERENCES publication (id)
);
CREATE TABLE publication_mesh_terms (
	publication_id TEXT, 
	mesh_terms TEXT, 
	PRIMARY KEY (publication_id, mesh_terms), 
	FOREIGN KEY(publication_id) REFERENCES publication (id)
);
CREATE TABLE publication_xref (
	publication_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (publication_id, xref), 
	FOREIGN KEY(publication_id) REFERENCES publication (id)
);
CREATE TABLE publication_publication_type (
	publication_id TEXT, 
	publication_type TEXT NOT NULL, 
	PRIMARY KEY (publication_id, publication_type), 
	FOREIGN KEY(publication_id) REFERENCES publication (id)
);
CREATE TABLE publication_provided_by (
	publication_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (publication_id, provided_by), 
	FOREIGN KEY(publication_id) REFERENCES publication (id)
);
CREATE TABLE publication_synonym (
	publication_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (publication_id, synonym), 
	FOREIGN KEY(publication_id) REFERENCES publication (id)
);
CREATE TABLE publication_category (
	publication_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (publication_id, category), 
	FOREIGN KEY(publication_id) REFERENCES publication (id)
);
CREATE TABLE publication_type (
	publication_id TEXT, 
	type TEXT, 
	PRIMARY KEY (publication_id, type), 
	FOREIGN KEY(publication_id) REFERENCES publication (id)
);
CREATE TABLE book_authors (
	book_id TEXT, 
	authors_id TEXT, 
	PRIMARY KEY (book_id, authors_id), 
	FOREIGN KEY(book_id) REFERENCES book (id), 
	FOREIGN KEY(authors_id) REFERENCES agent (id)
);
CREATE TABLE book_pages (
	book_id TEXT, 
	pages TEXT, 
	PRIMARY KEY (book_id, pages), 
	FOREIGN KEY(book_id) REFERENCES book (id)
);
CREATE TABLE book_keywords (
	book_id TEXT, 
	keywords TEXT, 
	PRIMARY KEY (book_id, keywords), 
	FOREIGN KEY(book_id) REFERENCES book (id)
);
CREATE TABLE book_mesh_terms (
	book_id TEXT, 
	mesh_terms TEXT, 
	PRIMARY KEY (book_id, mesh_terms), 
	FOREIGN KEY(book_id) REFERENCES book (id)
);
CREATE TABLE book_xref (
	book_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (book_id, xref), 
	FOREIGN KEY(book_id) REFERENCES book (id)
);
CREATE TABLE book_publication_type (
	book_id TEXT, 
	publication_type TEXT NOT NULL, 
	PRIMARY KEY (book_id, publication_type), 
	FOREIGN KEY(book_id) REFERENCES book (id)
);
CREATE TABLE book_provided_by (
	book_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (book_id, provided_by), 
	FOREIGN KEY(book_id) REFERENCES book (id)
);
CREATE TABLE book_synonym (
	book_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (book_id, synonym), 
	FOREIGN KEY(book_id) REFERENCES book (id)
);
CREATE TABLE book_category (
	book_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (book_id, category), 
	FOREIGN KEY(book_id) REFERENCES book (id)
);
CREATE TABLE book_type (
	book_id TEXT, 
	type TEXT, 
	PRIMARY KEY (book_id, type), 
	FOREIGN KEY(book_id) REFERENCES book (id)
);
CREATE TABLE "book chapter_authors" (
	"book chapter_id" TEXT, 
	authors_id TEXT, 
	PRIMARY KEY ("book chapter_id", authors_id), 
	FOREIGN KEY("book chapter_id") REFERENCES "book chapter" (id), 
	FOREIGN KEY(authors_id) REFERENCES agent (id)
);
CREATE TABLE "book chapter_pages" (
	"book chapter_id" TEXT, 
	pages TEXT, 
	PRIMARY KEY ("book chapter_id", pages), 
	FOREIGN KEY("book chapter_id") REFERENCES "book chapter" (id)
);
CREATE TABLE "book chapter_keywords" (
	"book chapter_id" TEXT, 
	keywords TEXT, 
	PRIMARY KEY ("book chapter_id", keywords), 
	FOREIGN KEY("book chapter_id") REFERENCES "book chapter" (id)
);
CREATE TABLE "book chapter_mesh_terms" (
	"book chapter_id" TEXT, 
	mesh_terms TEXT, 
	PRIMARY KEY ("book chapter_id", mesh_terms), 
	FOREIGN KEY("book chapter_id") REFERENCES "book chapter" (id)
);
CREATE TABLE "book chapter_xref" (
	"book chapter_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("book chapter_id", xref), 
	FOREIGN KEY("book chapter_id") REFERENCES "book chapter" (id)
);
CREATE TABLE "book chapter_publication_type" (
	"book chapter_id" TEXT, 
	publication_type TEXT NOT NULL, 
	PRIMARY KEY ("book chapter_id", publication_type), 
	FOREIGN KEY("book chapter_id") REFERENCES "book chapter" (id)
);
CREATE TABLE "book chapter_provided_by" (
	"book chapter_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("book chapter_id", provided_by), 
	FOREIGN KEY("book chapter_id") REFERENCES "book chapter" (id)
);
CREATE TABLE "book chapter_synonym" (
	"book chapter_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("book chapter_id", synonym), 
	FOREIGN KEY("book chapter_id") REFERENCES "book chapter" (id)
);
CREATE TABLE "book chapter_category" (
	"book chapter_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("book chapter_id", category), 
	FOREIGN KEY("book chapter_id") REFERENCES "book chapter" (id)
);
CREATE TABLE "book chapter_type" (
	"book chapter_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("book chapter_id", type), 
	FOREIGN KEY("book chapter_id") REFERENCES "book chapter" (id)
);
CREATE TABLE serial_authors (
	serial_id TEXT, 
	authors_id TEXT, 
	PRIMARY KEY (serial_id, authors_id), 
	FOREIGN KEY(serial_id) REFERENCES serial (id), 
	FOREIGN KEY(authors_id) REFERENCES agent (id)
);
CREATE TABLE serial_pages (
	serial_id TEXT, 
	pages TEXT, 
	PRIMARY KEY (serial_id, pages), 
	FOREIGN KEY(serial_id) REFERENCES serial (id)
);
CREATE TABLE serial_keywords (
	serial_id TEXT, 
	keywords TEXT, 
	PRIMARY KEY (serial_id, keywords), 
	FOREIGN KEY(serial_id) REFERENCES serial (id)
);
CREATE TABLE serial_mesh_terms (
	serial_id TEXT, 
	mesh_terms TEXT, 
	PRIMARY KEY (serial_id, mesh_terms), 
	FOREIGN KEY(serial_id) REFERENCES serial (id)
);
CREATE TABLE serial_xref (
	serial_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (serial_id, xref), 
	FOREIGN KEY(serial_id) REFERENCES serial (id)
);
CREATE TABLE serial_publication_type (
	serial_id TEXT, 
	publication_type TEXT NOT NULL, 
	PRIMARY KEY (serial_id, publication_type), 
	FOREIGN KEY(serial_id) REFERENCES serial (id)
);
CREATE TABLE serial_provided_by (
	serial_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (serial_id, provided_by), 
	FOREIGN KEY(serial_id) REFERENCES serial (id)
);
CREATE TABLE serial_synonym (
	serial_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (serial_id, synonym), 
	FOREIGN KEY(serial_id) REFERENCES serial (id)
);
CREATE TABLE serial_category (
	serial_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (serial_id, category), 
	FOREIGN KEY(serial_id) REFERENCES serial (id)
);
CREATE TABLE serial_type (
	serial_id TEXT, 
	type TEXT, 
	PRIMARY KEY (serial_id, type), 
	FOREIGN KEY(serial_id) REFERENCES serial (id)
);
CREATE TABLE article_authors (
	article_id TEXT, 
	authors_id TEXT, 
	PRIMARY KEY (article_id, authors_id), 
	FOREIGN KEY(article_id) REFERENCES article (id), 
	FOREIGN KEY(authors_id) REFERENCES agent (id)
);
CREATE TABLE article_pages (
	article_id TEXT, 
	pages TEXT, 
	PRIMARY KEY (article_id, pages), 
	FOREIGN KEY(article_id) REFERENCES article (id)
);
CREATE TABLE article_keywords (
	article_id TEXT, 
	keywords TEXT, 
	PRIMARY KEY (article_id, keywords), 
	FOREIGN KEY(article_id) REFERENCES article (id)
);
CREATE TABLE article_mesh_terms (
	article_id TEXT, 
	mesh_terms TEXT, 
	PRIMARY KEY (article_id, mesh_terms), 
	FOREIGN KEY(article_id) REFERENCES article (id)
);
CREATE TABLE article_xref (
	article_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (article_id, xref), 
	FOREIGN KEY(article_id) REFERENCES article (id)
);
CREATE TABLE article_publication_type (
	article_id TEXT, 
	publication_type TEXT NOT NULL, 
	PRIMARY KEY (article_id, publication_type), 
	FOREIGN KEY(article_id) REFERENCES article (id)
);
CREATE TABLE article_provided_by (
	article_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (article_id, provided_by), 
	FOREIGN KEY(article_id) REFERENCES article (id)
);
CREATE TABLE article_synonym (
	article_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (article_id, synonym), 
	FOREIGN KEY(article_id) REFERENCES article (id)
);
CREATE TABLE article_category (
	article_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (article_id, category), 
	FOREIGN KEY(article_id) REFERENCES article (id)
);
CREATE TABLE article_type (
	article_id TEXT, 
	type TEXT, 
	PRIMARY KEY (article_id, type), 
	FOREIGN KEY(article_id) REFERENCES article (id)
);
CREATE TABLE "journal article_authors" (
	"journal article_id" TEXT, 
	authors_id TEXT, 
	PRIMARY KEY ("journal article_id", authors_id), 
	FOREIGN KEY("journal article_id") REFERENCES "journal article" (id), 
	FOREIGN KEY(authors_id) REFERENCES agent (id)
);
CREATE TABLE "journal article_pages" (
	"journal article_id" TEXT, 
	pages TEXT, 
	PRIMARY KEY ("journal article_id", pages), 
	FOREIGN KEY("journal article_id") REFERENCES "journal article" (id)
);
CREATE TABLE "journal article_keywords" (
	"journal article_id" TEXT, 
	keywords TEXT, 
	PRIMARY KEY ("journal article_id", keywords), 
	FOREIGN KEY("journal article_id") REFERENCES "journal article" (id)
);
CREATE TABLE "journal article_mesh_terms" (
	"journal article_id" TEXT, 
	mesh_terms TEXT, 
	PRIMARY KEY ("journal article_id", mesh_terms), 
	FOREIGN KEY("journal article_id") REFERENCES "journal article" (id)
);
CREATE TABLE "journal article_xref" (
	"journal article_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("journal article_id", xref), 
	FOREIGN KEY("journal article_id") REFERENCES "journal article" (id)
);
CREATE TABLE "journal article_publication_type" (
	"journal article_id" TEXT, 
	publication_type TEXT NOT NULL, 
	PRIMARY KEY ("journal article_id", publication_type), 
	FOREIGN KEY("journal article_id") REFERENCES "journal article" (id)
);
CREATE TABLE "journal article_provided_by" (
	"journal article_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("journal article_id", provided_by), 
	FOREIGN KEY("journal article_id") REFERENCES "journal article" (id)
);
CREATE TABLE "journal article_synonym" (
	"journal article_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("journal article_id", synonym), 
	FOREIGN KEY("journal article_id") REFERENCES "journal article" (id)
);
CREATE TABLE "journal article_category" (
	"journal article_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("journal article_id", category), 
	FOREIGN KEY("journal article_id") REFERENCES "journal article" (id)
);
CREATE TABLE "journal article_type" (
	"journal article_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("journal article_id", type), 
	FOREIGN KEY("journal article_id") REFERENCES "journal article" (id)
);
CREATE TABLE patent_authors (
	patent_id TEXT, 
	authors_id TEXT, 
	PRIMARY KEY (patent_id, authors_id), 
	FOREIGN KEY(patent_id) REFERENCES patent (id), 
	FOREIGN KEY(authors_id) REFERENCES agent (id)
);
CREATE TABLE patent_pages (
	patent_id TEXT, 
	pages TEXT, 
	PRIMARY KEY (patent_id, pages), 
	FOREIGN KEY(patent_id) REFERENCES patent (id)
);
CREATE TABLE patent_keywords (
	patent_id TEXT, 
	keywords TEXT, 
	PRIMARY KEY (patent_id, keywords), 
	FOREIGN KEY(patent_id) REFERENCES patent (id)
);
CREATE TABLE patent_mesh_terms (
	patent_id TEXT, 
	mesh_terms TEXT, 
	PRIMARY KEY (patent_id, mesh_terms), 
	FOREIGN KEY(patent_id) REFERENCES patent (id)
);
CREATE TABLE patent_xref (
	patent_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (patent_id, xref), 
	FOREIGN KEY(patent_id) REFERENCES patent (id)
);
CREATE TABLE patent_publication_type (
	patent_id TEXT, 
	publication_type TEXT NOT NULL, 
	PRIMARY KEY (patent_id, publication_type), 
	FOREIGN KEY(patent_id) REFERENCES patent (id)
);
CREATE TABLE patent_provided_by (
	patent_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (patent_id, provided_by), 
	FOREIGN KEY(patent_id) REFERENCES patent (id)
);
CREATE TABLE patent_synonym (
	patent_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (patent_id, synonym), 
	FOREIGN KEY(patent_id) REFERENCES patent (id)
);
CREATE TABLE patent_category (
	patent_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (patent_id, category), 
	FOREIGN KEY(patent_id) REFERENCES patent (id)
);
CREATE TABLE patent_type (
	patent_id TEXT, 
	type TEXT, 
	PRIMARY KEY (patent_id, type), 
	FOREIGN KEY(patent_id) REFERENCES patent (id)
);
CREATE TABLE "web page_authors" (
	"web page_id" TEXT, 
	authors_id TEXT, 
	PRIMARY KEY ("web page_id", authors_id), 
	FOREIGN KEY("web page_id") REFERENCES "web page" (id), 
	FOREIGN KEY(authors_id) REFERENCES agent (id)
);
CREATE TABLE "web page_pages" (
	"web page_id" TEXT, 
	pages TEXT, 
	PRIMARY KEY ("web page_id", pages), 
	FOREIGN KEY("web page_id") REFERENCES "web page" (id)
);
CREATE TABLE "web page_keywords" (
	"web page_id" TEXT, 
	keywords TEXT, 
	PRIMARY KEY ("web page_id", keywords), 
	FOREIGN KEY("web page_id") REFERENCES "web page" (id)
);
CREATE TABLE "web page_mesh_terms" (
	"web page_id" TEXT, 
	mesh_terms TEXT, 
	PRIMARY KEY ("web page_id", mesh_terms), 
	FOREIGN KEY("web page_id") REFERENCES "web page" (id)
);
CREATE TABLE "web page_xref" (
	"web page_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("web page_id", xref), 
	FOREIGN KEY("web page_id") REFERENCES "web page" (id)
);
CREATE TABLE "web page_publication_type" (
	"web page_id" TEXT, 
	publication_type TEXT NOT NULL, 
	PRIMARY KEY ("web page_id", publication_type), 
	FOREIGN KEY("web page_id") REFERENCES "web page" (id)
);
CREATE TABLE "web page_provided_by" (
	"web page_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("web page_id", provided_by), 
	FOREIGN KEY("web page_id") REFERENCES "web page" (id)
);
CREATE TABLE "web page_synonym" (
	"web page_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("web page_id", synonym), 
	FOREIGN KEY("web page_id") REFERENCES "web page" (id)
);
CREATE TABLE "web page_category" (
	"web page_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("web page_id", category), 
	FOREIGN KEY("web page_id") REFERENCES "web page" (id)
);
CREATE TABLE "web page_type" (
	"web page_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("web page_id", type), 
	FOREIGN KEY("web page_id") REFERENCES "web page" (id)
);
CREATE TABLE "preprint publication_authors" (
	"preprint publication_id" TEXT, 
	authors_id TEXT, 
	PRIMARY KEY ("preprint publication_id", authors_id), 
	FOREIGN KEY("preprint publication_id") REFERENCES "preprint publication" (id), 
	FOREIGN KEY(authors_id) REFERENCES agent (id)
);
CREATE TABLE "preprint publication_pages" (
	"preprint publication_id" TEXT, 
	pages TEXT, 
	PRIMARY KEY ("preprint publication_id", pages), 
	FOREIGN KEY("preprint publication_id") REFERENCES "preprint publication" (id)
);
CREATE TABLE "preprint publication_keywords" (
	"preprint publication_id" TEXT, 
	keywords TEXT, 
	PRIMARY KEY ("preprint publication_id", keywords), 
	FOREIGN KEY("preprint publication_id") REFERENCES "preprint publication" (id)
);
CREATE TABLE "preprint publication_mesh_terms" (
	"preprint publication_id" TEXT, 
	mesh_terms TEXT, 
	PRIMARY KEY ("preprint publication_id", mesh_terms), 
	FOREIGN KEY("preprint publication_id") REFERENCES "preprint publication" (id)
);
CREATE TABLE "preprint publication_xref" (
	"preprint publication_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("preprint publication_id", xref), 
	FOREIGN KEY("preprint publication_id") REFERENCES "preprint publication" (id)
);
CREATE TABLE "preprint publication_publication_type" (
	"preprint publication_id" TEXT, 
	publication_type TEXT NOT NULL, 
	PRIMARY KEY ("preprint publication_id", publication_type), 
	FOREIGN KEY("preprint publication_id") REFERENCES "preprint publication" (id)
);
CREATE TABLE "preprint publication_provided_by" (
	"preprint publication_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("preprint publication_id", provided_by), 
	FOREIGN KEY("preprint publication_id") REFERENCES "preprint publication" (id)
);
CREATE TABLE "preprint publication_synonym" (
	"preprint publication_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("preprint publication_id", synonym), 
	FOREIGN KEY("preprint publication_id") REFERENCES "preprint publication" (id)
);
CREATE TABLE "preprint publication_category" (
	"preprint publication_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("preprint publication_id", category), 
	FOREIGN KEY("preprint publication_id") REFERENCES "preprint publication" (id)
);
CREATE TABLE "preprint publication_type" (
	"preprint publication_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("preprint publication_id", type), 
	FOREIGN KEY("preprint publication_id") REFERENCES "preprint publication" (id)
);
CREATE TABLE "drug label_authors" (
	"drug label_id" TEXT, 
	authors_id TEXT, 
	PRIMARY KEY ("drug label_id", authors_id), 
	FOREIGN KEY("drug label_id") REFERENCES "drug label" (id), 
	FOREIGN KEY(authors_id) REFERENCES agent (id)
);
CREATE TABLE "drug label_pages" (
	"drug label_id" TEXT, 
	pages TEXT, 
	PRIMARY KEY ("drug label_id", pages), 
	FOREIGN KEY("drug label_id") REFERENCES "drug label" (id)
);
CREATE TABLE "drug label_keywords" (
	"drug label_id" TEXT, 
	keywords TEXT, 
	PRIMARY KEY ("drug label_id", keywords), 
	FOREIGN KEY("drug label_id") REFERENCES "drug label" (id)
);
CREATE TABLE "drug label_mesh_terms" (
	"drug label_id" TEXT, 
	mesh_terms TEXT, 
	PRIMARY KEY ("drug label_id", mesh_terms), 
	FOREIGN KEY("drug label_id") REFERENCES "drug label" (id)
);
CREATE TABLE "drug label_xref" (
	"drug label_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("drug label_id", xref), 
	FOREIGN KEY("drug label_id") REFERENCES "drug label" (id)
);
CREATE TABLE "drug label_publication_type" (
	"drug label_id" TEXT, 
	publication_type TEXT NOT NULL, 
	PRIMARY KEY ("drug label_id", publication_type), 
	FOREIGN KEY("drug label_id") REFERENCES "drug label" (id)
);
CREATE TABLE "drug label_provided_by" (
	"drug label_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("drug label_id", provided_by), 
	FOREIGN KEY("drug label_id") REFERENCES "drug label" (id)
);
CREATE TABLE "drug label_synonym" (
	"drug label_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("drug label_id", synonym), 
	FOREIGN KEY("drug label_id") REFERENCES "drug label" (id)
);
CREATE TABLE "drug label_category" (
	"drug label_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("drug label_id", category), 
	FOREIGN KEY("drug label_id") REFERENCES "drug label" (id)
);
CREATE TABLE "drug label_type" (
	"drug label_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("drug label_id", type), 
	FOREIGN KEY("drug label_id") REFERENCES "drug label" (id)
);
CREATE TABLE "retrieval source_xref" (
	"retrieval source_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("retrieval source_id", xref), 
	FOREIGN KEY("retrieval source_id") REFERENCES "retrieval source" (id)
);
CREATE TABLE "retrieval source_provided_by" (
	"retrieval source_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("retrieval source_id", provided_by), 
	FOREIGN KEY("retrieval source_id") REFERENCES "retrieval source" (id)
);
CREATE TABLE "retrieval source_synonym" (
	"retrieval source_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("retrieval source_id", synonym), 
	FOREIGN KEY("retrieval source_id") REFERENCES "retrieval source" (id)
);
CREATE TABLE "retrieval source_category" (
	"retrieval source_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("retrieval source_id", category), 
	FOREIGN KEY("retrieval source_id") REFERENCES "retrieval source" (id)
);
CREATE TABLE "retrieval source_type" (
	"retrieval source_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("retrieval source_id", type), 
	FOREIGN KEY("retrieval source_id") REFERENCES "retrieval source" (id)
);
CREATE TABLE "physical entity_provided_by" (
	"physical entity_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("physical entity_id", provided_by), 
	FOREIGN KEY("physical entity_id") REFERENCES "physical entity" (id)
);
CREATE TABLE "physical entity_xref" (
	"physical entity_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("physical entity_id", xref), 
	FOREIGN KEY("physical entity_id") REFERENCES "physical entity" (id)
);
CREATE TABLE "physical entity_synonym" (
	"physical entity_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("physical entity_id", synonym), 
	FOREIGN KEY("physical entity_id") REFERENCES "physical entity" (id)
);
CREATE TABLE "physical entity_category" (
	"physical entity_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("physical entity_id", category), 
	FOREIGN KEY("physical entity_id") REFERENCES "physical entity" (id)
);
CREATE TABLE "physical entity_type" (
	"physical entity_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("physical entity_id", type), 
	FOREIGN KEY("physical entity_id") REFERENCES "physical entity" (id)
);
CREATE TABLE activity_provided_by (
	activity_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (activity_id, provided_by), 
	FOREIGN KEY(activity_id) REFERENCES activity (id)
);
CREATE TABLE activity_xref (
	activity_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (activity_id, xref), 
	FOREIGN KEY(activity_id) REFERENCES activity (id)
);
CREATE TABLE activity_synonym (
	activity_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (activity_id, synonym), 
	FOREIGN KEY(activity_id) REFERENCES activity (id)
);
CREATE TABLE activity_category (
	activity_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (activity_id, category), 
	FOREIGN KEY(activity_id) REFERENCES activity (id)
);
CREATE TABLE activity_type (
	activity_id TEXT, 
	type TEXT, 
	PRIMARY KEY (activity_id, type), 
	FOREIGN KEY(activity_id) REFERENCES activity (id)
);
CREATE TABLE procedure_provided_by (
	procedure_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (procedure_id, provided_by), 
	FOREIGN KEY(procedure_id) REFERENCES procedure (id)
);
CREATE TABLE procedure_xref (
	procedure_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (procedure_id, xref), 
	FOREIGN KEY(procedure_id) REFERENCES procedure (id)
);
CREATE TABLE procedure_synonym (
	procedure_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (procedure_id, synonym), 
	FOREIGN KEY(procedure_id) REFERENCES procedure (id)
);
CREATE TABLE procedure_category (
	procedure_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (procedure_id, category), 
	FOREIGN KEY(procedure_id) REFERENCES procedure (id)
);
CREATE TABLE procedure_type (
	procedure_id TEXT, 
	type TEXT, 
	PRIMARY KEY (procedure_id, type), 
	FOREIGN KEY(procedure_id) REFERENCES procedure (id)
);
CREATE TABLE phenomenon_provided_by (
	phenomenon_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (phenomenon_id, provided_by), 
	FOREIGN KEY(phenomenon_id) REFERENCES phenomenon (id)
);
CREATE TABLE phenomenon_xref (
	phenomenon_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (phenomenon_id, xref), 
	FOREIGN KEY(phenomenon_id) REFERENCES phenomenon (id)
);
CREATE TABLE phenomenon_synonym (
	phenomenon_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (phenomenon_id, synonym), 
	FOREIGN KEY(phenomenon_id) REFERENCES phenomenon (id)
);
CREATE TABLE phenomenon_category (
	phenomenon_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (phenomenon_id, category), 
	FOREIGN KEY(phenomenon_id) REFERENCES phenomenon (id)
);
CREATE TABLE phenomenon_type (
	phenomenon_id TEXT, 
	type TEXT, 
	PRIMARY KEY (phenomenon_id, type), 
	FOREIGN KEY(phenomenon_id) REFERENCES phenomenon (id)
);
CREATE TABLE device_provided_by (
	device_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (device_id, provided_by), 
	FOREIGN KEY(device_id) REFERENCES device (id)
);
CREATE TABLE device_xref (
	device_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (device_id, xref), 
	FOREIGN KEY(device_id) REFERENCES device (id)
);
CREATE TABLE device_synonym (
	device_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (device_id, synonym), 
	FOREIGN KEY(device_id) REFERENCES device (id)
);
CREATE TABLE device_category (
	device_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (device_id, category), 
	FOREIGN KEY(device_id) REFERENCES device (id)
);
CREATE TABLE device_type (
	device_id TEXT, 
	type TEXT, 
	PRIMARY KEY (device_id, type), 
	FOREIGN KEY(device_id) REFERENCES device (id)
);
CREATE TABLE "diagnostic aid_provided_by" (
	"diagnostic aid_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("diagnostic aid_id", provided_by), 
	FOREIGN KEY("diagnostic aid_id") REFERENCES "diagnostic aid" (id)
);
CREATE TABLE "diagnostic aid_xref" (
	"diagnostic aid_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("diagnostic aid_id", xref), 
	FOREIGN KEY("diagnostic aid_id") REFERENCES "diagnostic aid" (id)
);
CREATE TABLE "diagnostic aid_synonym" (
	"diagnostic aid_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("diagnostic aid_id", synonym), 
	FOREIGN KEY("diagnostic aid_id") REFERENCES "diagnostic aid" (id)
);
CREATE TABLE "diagnostic aid_category" (
	"diagnostic aid_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("diagnostic aid_id", category), 
	FOREIGN KEY("diagnostic aid_id") REFERENCES "diagnostic aid" (id)
);
CREATE TABLE "diagnostic aid_type" (
	"diagnostic aid_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("diagnostic aid_id", type), 
	FOREIGN KEY("diagnostic aid_id") REFERENCES "diagnostic aid" (id)
);
CREATE TABLE "study population_provided_by" (
	"study population_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("study population_id", provided_by), 
	FOREIGN KEY("study population_id") REFERENCES "study population" (id)
);
CREATE TABLE "study population_xref" (
	"study population_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("study population_id", xref), 
	FOREIGN KEY("study population_id") REFERENCES "study population" (id)
);
CREATE TABLE "study population_synonym" (
	"study population_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("study population_id", synonym), 
	FOREIGN KEY("study population_id") REFERENCES "study population" (id)
);
CREATE TABLE "study population_category" (
	"study population_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("study population_id", category), 
	FOREIGN KEY("study population_id") REFERENCES "study population" (id)
);
CREATE TABLE "study population_type" (
	"study population_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("study population_id", type), 
	FOREIGN KEY("study population_id") REFERENCES "study population" (id)
);
CREATE TABLE "material sample_provided_by" (
	"material sample_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("material sample_id", provided_by), 
	FOREIGN KEY("material sample_id") REFERENCES "material sample" (id)
);
CREATE TABLE "material sample_xref" (
	"material sample_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("material sample_id", xref), 
	FOREIGN KEY("material sample_id") REFERENCES "material sample" (id)
);
CREATE TABLE "material sample_synonym" (
	"material sample_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("material sample_id", synonym), 
	FOREIGN KEY("material sample_id") REFERENCES "material sample" (id)
);
CREATE TABLE "material sample_category" (
	"material sample_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("material sample_id", category), 
	FOREIGN KEY("material sample_id") REFERENCES "material sample" (id)
);
CREATE TABLE "material sample_type" (
	"material sample_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("material sample_id", type), 
	FOREIGN KEY("material sample_id") REFERENCES "material sample" (id)
);
CREATE TABLE "planetary entity_provided_by" (
	"planetary entity_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("planetary entity_id", provided_by), 
	FOREIGN KEY("planetary entity_id") REFERENCES "planetary entity" (id)
);
CREATE TABLE "planetary entity_xref" (
	"planetary entity_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("planetary entity_id", xref), 
	FOREIGN KEY("planetary entity_id") REFERENCES "planetary entity" (id)
);
CREATE TABLE "planetary entity_synonym" (
	"planetary entity_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("planetary entity_id", synonym), 
	FOREIGN KEY("planetary entity_id") REFERENCES "planetary entity" (id)
);
CREATE TABLE "planetary entity_category" (
	"planetary entity_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("planetary entity_id", category), 
	FOREIGN KEY("planetary entity_id") REFERENCES "planetary entity" (id)
);
CREATE TABLE "planetary entity_type" (
	"planetary entity_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("planetary entity_id", type), 
	FOREIGN KEY("planetary entity_id") REFERENCES "planetary entity" (id)
);
CREATE TABLE "environmental process_provided_by" (
	"environmental process_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("environmental process_id", provided_by), 
	FOREIGN KEY("environmental process_id") REFERENCES "environmental process" (id)
);
CREATE TABLE "environmental process_xref" (
	"environmental process_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("environmental process_id", xref), 
	FOREIGN KEY("environmental process_id") REFERENCES "environmental process" (id)
);
CREATE TABLE "environmental process_synonym" (
	"environmental process_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("environmental process_id", synonym), 
	FOREIGN KEY("environmental process_id") REFERENCES "environmental process" (id)
);
CREATE TABLE "environmental process_category" (
	"environmental process_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("environmental process_id", category), 
	FOREIGN KEY("environmental process_id") REFERENCES "environmental process" (id)
);
CREATE TABLE "environmental process_type" (
	"environmental process_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("environmental process_id", type), 
	FOREIGN KEY("environmental process_id") REFERENCES "environmental process" (id)
);
CREATE TABLE "environmental feature_provided_by" (
	"environmental feature_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("environmental feature_id", provided_by), 
	FOREIGN KEY("environmental feature_id") REFERENCES "environmental feature" (id)
);
CREATE TABLE "environmental feature_xref" (
	"environmental feature_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("environmental feature_id", xref), 
	FOREIGN KEY("environmental feature_id") REFERENCES "environmental feature" (id)
);
CREATE TABLE "environmental feature_synonym" (
	"environmental feature_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("environmental feature_id", synonym), 
	FOREIGN KEY("environmental feature_id") REFERENCES "environmental feature" (id)
);
CREATE TABLE "environmental feature_category" (
	"environmental feature_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("environmental feature_id", category), 
	FOREIGN KEY("environmental feature_id") REFERENCES "environmental feature" (id)
);
CREATE TABLE "environmental feature_type" (
	"environmental feature_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("environmental feature_id", type), 
	FOREIGN KEY("environmental feature_id") REFERENCES "environmental feature" (id)
);
CREATE TABLE "geographic location_provided_by" (
	"geographic location_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("geographic location_id", provided_by), 
	FOREIGN KEY("geographic location_id") REFERENCES "geographic location" (id)
);
CREATE TABLE "geographic location_xref" (
	"geographic location_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("geographic location_id", xref), 
	FOREIGN KEY("geographic location_id") REFERENCES "geographic location" (id)
);
CREATE TABLE "geographic location_synonym" (
	"geographic location_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("geographic location_id", synonym), 
	FOREIGN KEY("geographic location_id") REFERENCES "geographic location" (id)
);
CREATE TABLE "geographic location_category" (
	"geographic location_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("geographic location_id", category), 
	FOREIGN KEY("geographic location_id") REFERENCES "geographic location" (id)
);
CREATE TABLE "geographic location_type" (
	"geographic location_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("geographic location_id", type), 
	FOREIGN KEY("geographic location_id") REFERENCES "geographic location" (id)
);
CREATE TABLE "geographic location at time_provided_by" (
	"geographic location at time_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("geographic location at time_id", provided_by), 
	FOREIGN KEY("geographic location at time_id") REFERENCES "geographic location at time" (id)
);
CREATE TABLE "geographic location at time_xref" (
	"geographic location at time_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("geographic location at time_id", xref), 
	FOREIGN KEY("geographic location at time_id") REFERENCES "geographic location at time" (id)
);
CREATE TABLE "geographic location at time_synonym" (
	"geographic location at time_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("geographic location at time_id", synonym), 
	FOREIGN KEY("geographic location at time_id") REFERENCES "geographic location at time" (id)
);
CREATE TABLE "geographic location at time_category" (
	"geographic location at time_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("geographic location at time_id", category), 
	FOREIGN KEY("geographic location at time_id") REFERENCES "geographic location at time" (id)
);
CREATE TABLE "geographic location at time_type" (
	"geographic location at time_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("geographic location at time_id", type), 
	FOREIGN KEY("geographic location at time_id") REFERENCES "geographic location at time" (id)
);
CREATE TABLE "biological entity_provided_by" (
	"biological entity_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("biological entity_id", provided_by), 
	FOREIGN KEY("biological entity_id") REFERENCES "biological entity" (id)
);
CREATE TABLE "biological entity_xref" (
	"biological entity_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("biological entity_id", xref), 
	FOREIGN KEY("biological entity_id") REFERENCES "biological entity" (id)
);
CREATE TABLE "biological entity_synonym" (
	"biological entity_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("biological entity_id", synonym), 
	FOREIGN KEY("biological entity_id") REFERENCES "biological entity" (id)
);
CREATE TABLE "biological entity_category" (
	"biological entity_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("biological entity_id", category), 
	FOREIGN KEY("biological entity_id") REFERENCES "biological entity" (id)
);
CREATE TABLE "biological entity_type" (
	"biological entity_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("biological entity_id", type), 
	FOREIGN KEY("biological entity_id") REFERENCES "biological entity" (id)
);
CREATE TABLE "chemical entity_available_from" (
	"chemical entity_id" TEXT, 
	available_from VARCHAR(16), 
	PRIMARY KEY ("chemical entity_id", available_from), 
	FOREIGN KEY("chemical entity_id") REFERENCES "chemical entity" (id)
);
CREATE TABLE "chemical entity_provided_by" (
	"chemical entity_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("chemical entity_id", provided_by), 
	FOREIGN KEY("chemical entity_id") REFERENCES "chemical entity" (id)
);
CREATE TABLE "chemical entity_xref" (
	"chemical entity_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("chemical entity_id", xref), 
	FOREIGN KEY("chemical entity_id") REFERENCES "chemical entity" (id)
);
CREATE TABLE "chemical entity_synonym" (
	"chemical entity_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("chemical entity_id", synonym), 
	FOREIGN KEY("chemical entity_id") REFERENCES "chemical entity" (id)
);
CREATE TABLE "chemical entity_category" (
	"chemical entity_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("chemical entity_id", category), 
	FOREIGN KEY("chemical entity_id") REFERENCES "chemical entity" (id)
);
CREATE TABLE "chemical entity_type" (
	"chemical entity_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("chemical entity_id", type), 
	FOREIGN KEY("chemical entity_id") REFERENCES "chemical entity" (id)
);
CREATE TABLE "regulatory region_provided_by" (
	"regulatory region_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("regulatory region_id", provided_by), 
	FOREIGN KEY("regulatory region_id") REFERENCES "regulatory region" (id)
);
CREATE TABLE "regulatory region_xref" (
	"regulatory region_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("regulatory region_id", xref), 
	FOREIGN KEY("regulatory region_id") REFERENCES "regulatory region" (id)
);
CREATE TABLE "regulatory region_synonym" (
	"regulatory region_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("regulatory region_id", synonym), 
	FOREIGN KEY("regulatory region_id") REFERENCES "regulatory region" (id)
);
CREATE TABLE "regulatory region_category" (
	"regulatory region_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("regulatory region_id", category), 
	FOREIGN KEY("regulatory region_id") REFERENCES "regulatory region" (id)
);
CREATE TABLE "regulatory region_type" (
	"regulatory region_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("regulatory region_id", type), 
	FOREIGN KEY("regulatory region_id") REFERENCES "regulatory region" (id)
);
CREATE TABLE "accessible dna region_provided_by" (
	"accessible dna region_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("accessible dna region_id", provided_by), 
	FOREIGN KEY("accessible dna region_id") REFERENCES "accessible dna region" (id)
);
CREATE TABLE "accessible dna region_xref" (
	"accessible dna region_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("accessible dna region_id", xref), 
	FOREIGN KEY("accessible dna region_id") REFERENCES "accessible dna region" (id)
);
CREATE TABLE "accessible dna region_synonym" (
	"accessible dna region_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("accessible dna region_id", synonym), 
	FOREIGN KEY("accessible dna region_id") REFERENCES "accessible dna region" (id)
);
CREATE TABLE "accessible dna region_category" (
	"accessible dna region_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("accessible dna region_id", category), 
	FOREIGN KEY("accessible dna region_id") REFERENCES "accessible dna region" (id)
);
CREATE TABLE "accessible dna region_type" (
	"accessible dna region_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("accessible dna region_id", type), 
	FOREIGN KEY("accessible dna region_id") REFERENCES "accessible dna region" (id)
);
CREATE TABLE "transcription factor binding site_provided_by" (
	"transcription factor binding site_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("transcription factor binding site_id", provided_by), 
	FOREIGN KEY("transcription factor binding site_id") REFERENCES "transcription factor binding site" (id)
);
CREATE TABLE "transcription factor binding site_xref" (
	"transcription factor binding site_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("transcription factor binding site_id", xref), 
	FOREIGN KEY("transcription factor binding site_id") REFERENCES "transcription factor binding site" (id)
);
CREATE TABLE "transcription factor binding site_synonym" (
	"transcription factor binding site_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("transcription factor binding site_id", synonym), 
	FOREIGN KEY("transcription factor binding site_id") REFERENCES "transcription factor binding site" (id)
);
CREATE TABLE "transcription factor binding site_category" (
	"transcription factor binding site_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("transcription factor binding site_id", category), 
	FOREIGN KEY("transcription factor binding site_id") REFERENCES "transcription factor binding site" (id)
);
CREATE TABLE "transcription factor binding site_type" (
	"transcription factor binding site_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("transcription factor binding site_id", type), 
	FOREIGN KEY("transcription factor binding site_id") REFERENCES "transcription factor binding site" (id)
);
CREATE TABLE "biological process or activity_has_input" (
	"biological process or activity_id" TEXT, 
	has_input_id TEXT, 
	PRIMARY KEY ("biological process or activity_id", has_input_id), 
	FOREIGN KEY("biological process or activity_id") REFERENCES "biological process or activity" (id), 
	FOREIGN KEY(has_input_id) REFERENCES "named thing" (id)
);
CREATE TABLE "biological process or activity_has_output" (
	"biological process or activity_id" TEXT, 
	has_output_id TEXT, 
	PRIMARY KEY ("biological process or activity_id", has_output_id), 
	FOREIGN KEY("biological process or activity_id") REFERENCES "biological process or activity" (id), 
	FOREIGN KEY(has_output_id) REFERENCES "named thing" (id)
);
CREATE TABLE "biological process or activity_enabled_by" (
	"biological process or activity_id" TEXT, 
	enabled_by_id TEXT, 
	PRIMARY KEY ("biological process or activity_id", enabled_by_id), 
	FOREIGN KEY("biological process or activity_id") REFERENCES "biological process or activity" (id), 
	FOREIGN KEY(enabled_by_id) REFERENCES "physical entity" (id)
);
CREATE TABLE "biological process or activity_provided_by" (
	"biological process or activity_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("biological process or activity_id", provided_by), 
	FOREIGN KEY("biological process or activity_id") REFERENCES "biological process or activity" (id)
);
CREATE TABLE "biological process or activity_xref" (
	"biological process or activity_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("biological process or activity_id", xref), 
	FOREIGN KEY("biological process or activity_id") REFERENCES "biological process or activity" (id)
);
CREATE TABLE "biological process or activity_synonym" (
	"biological process or activity_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("biological process or activity_id", synonym), 
	FOREIGN KEY("biological process or activity_id") REFERENCES "biological process or activity" (id)
);
CREATE TABLE "biological process or activity_category" (
	"biological process or activity_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("biological process or activity_id", category), 
	FOREIGN KEY("biological process or activity_id") REFERENCES "biological process or activity" (id)
);
CREATE TABLE "biological process or activity_type" (
	"biological process or activity_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("biological process or activity_id", type), 
	FOREIGN KEY("biological process or activity_id") REFERENCES "biological process or activity" (id)
);
CREATE TABLE "molecular activity_enabled_by" (
	"molecular activity_id" TEXT, 
	enabled_by_id TEXT, 
	PRIMARY KEY ("molecular activity_id", enabled_by_id), 
	FOREIGN KEY("molecular activity_id") REFERENCES "molecular activity" (id), 
	FOREIGN KEY(enabled_by_id) REFERENCES "macromolecular machine mixin" (id)
);
CREATE TABLE "molecular activity_provided_by" (
	"molecular activity_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("molecular activity_id", provided_by), 
	FOREIGN KEY("molecular activity_id") REFERENCES "molecular activity" (id)
);
CREATE TABLE "molecular activity_xref" (
	"molecular activity_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("molecular activity_id", xref), 
	FOREIGN KEY("molecular activity_id") REFERENCES "molecular activity" (id)
);
CREATE TABLE "molecular activity_synonym" (
	"molecular activity_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("molecular activity_id", synonym), 
	FOREIGN KEY("molecular activity_id") REFERENCES "molecular activity" (id)
);
CREATE TABLE "molecular activity_category" (
	"molecular activity_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("molecular activity_id", category), 
	FOREIGN KEY("molecular activity_id") REFERENCES "molecular activity" (id)
);
CREATE TABLE "molecular activity_type" (
	"molecular activity_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("molecular activity_id", type), 
	FOREIGN KEY("molecular activity_id") REFERENCES "molecular activity" (id)
);
CREATE TABLE "biological process_has_input" (
	"biological process_id" TEXT, 
	has_input_id TEXT, 
	PRIMARY KEY ("biological process_id", has_input_id), 
	FOREIGN KEY("biological process_id") REFERENCES "biological process" (id), 
	FOREIGN KEY(has_input_id) REFERENCES "named thing" (id)
);
CREATE TABLE "biological process_has_output" (
	"biological process_id" TEXT, 
	has_output_id TEXT, 
	PRIMARY KEY ("biological process_id", has_output_id), 
	FOREIGN KEY("biological process_id") REFERENCES "biological process" (id), 
	FOREIGN KEY(has_output_id) REFERENCES "named thing" (id)
);
CREATE TABLE "biological process_enabled_by" (
	"biological process_id" TEXT, 
	enabled_by_id TEXT, 
	PRIMARY KEY ("biological process_id", enabled_by_id), 
	FOREIGN KEY("biological process_id") REFERENCES "biological process" (id), 
	FOREIGN KEY(enabled_by_id) REFERENCES "physical entity" (id)
);
CREATE TABLE "biological process_provided_by" (
	"biological process_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("biological process_id", provided_by), 
	FOREIGN KEY("biological process_id") REFERENCES "biological process" (id)
);
CREATE TABLE "biological process_xref" (
	"biological process_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("biological process_id", xref), 
	FOREIGN KEY("biological process_id") REFERENCES "biological process" (id)
);
CREATE TABLE "biological process_synonym" (
	"biological process_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("biological process_id", synonym), 
	FOREIGN KEY("biological process_id") REFERENCES "biological process" (id)
);
CREATE TABLE "biological process_category" (
	"biological process_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("biological process_id", category), 
	FOREIGN KEY("biological process_id") REFERENCES "biological process" (id)
);
CREATE TABLE "biological process_type" (
	"biological process_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("biological process_id", type), 
	FOREIGN KEY("biological process_id") REFERENCES "biological process" (id)
);
CREATE TABLE pathway_has_input (
	pathway_id TEXT, 
	has_input_id TEXT, 
	PRIMARY KEY (pathway_id, has_input_id), 
	FOREIGN KEY(pathway_id) REFERENCES pathway (id), 
	FOREIGN KEY(has_input_id) REFERENCES "named thing" (id)
);
CREATE TABLE pathway_has_output (
	pathway_id TEXT, 
	has_output_id TEXT, 
	PRIMARY KEY (pathway_id, has_output_id), 
	FOREIGN KEY(pathway_id) REFERENCES pathway (id), 
	FOREIGN KEY(has_output_id) REFERENCES "named thing" (id)
);
CREATE TABLE pathway_enabled_by (
	pathway_id TEXT, 
	enabled_by_id TEXT, 
	PRIMARY KEY (pathway_id, enabled_by_id), 
	FOREIGN KEY(pathway_id) REFERENCES pathway (id), 
	FOREIGN KEY(enabled_by_id) REFERENCES "physical entity" (id)
);
CREATE TABLE pathway_provided_by (
	pathway_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (pathway_id, provided_by), 
	FOREIGN KEY(pathway_id) REFERENCES pathway (id)
);
CREATE TABLE pathway_xref (
	pathway_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (pathway_id, xref), 
	FOREIGN KEY(pathway_id) REFERENCES pathway (id)
);
CREATE TABLE pathway_synonym (
	pathway_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (pathway_id, synonym), 
	FOREIGN KEY(pathway_id) REFERENCES pathway (id)
);
CREATE TABLE pathway_category (
	pathway_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (pathway_id, category), 
	FOREIGN KEY(pathway_id) REFERENCES pathway (id)
);
CREATE TABLE pathway_type (
	pathway_id TEXT, 
	type TEXT, 
	PRIMARY KEY (pathway_id, type), 
	FOREIGN KEY(pathway_id) REFERENCES pathway (id)
);
CREATE TABLE "physiological process_has_input" (
	"physiological process_id" TEXT, 
	has_input_id TEXT, 
	PRIMARY KEY ("physiological process_id", has_input_id), 
	FOREIGN KEY("physiological process_id") REFERENCES "physiological process" (id), 
	FOREIGN KEY(has_input_id) REFERENCES "named thing" (id)
);
CREATE TABLE "physiological process_has_output" (
	"physiological process_id" TEXT, 
	has_output_id TEXT, 
	PRIMARY KEY ("physiological process_id", has_output_id), 
	FOREIGN KEY("physiological process_id") REFERENCES "physiological process" (id), 
	FOREIGN KEY(has_output_id) REFERENCES "named thing" (id)
);
CREATE TABLE "physiological process_enabled_by" (
	"physiological process_id" TEXT, 
	enabled_by_id TEXT, 
	PRIMARY KEY ("physiological process_id", enabled_by_id), 
	FOREIGN KEY("physiological process_id") REFERENCES "physiological process" (id), 
	FOREIGN KEY(enabled_by_id) REFERENCES "physical entity" (id)
);
CREATE TABLE "physiological process_provided_by" (
	"physiological process_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("physiological process_id", provided_by), 
	FOREIGN KEY("physiological process_id") REFERENCES "physiological process" (id)
);
CREATE TABLE "physiological process_xref" (
	"physiological process_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("physiological process_id", xref), 
	FOREIGN KEY("physiological process_id") REFERENCES "physiological process" (id)
);
CREATE TABLE "physiological process_synonym" (
	"physiological process_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("physiological process_id", synonym), 
	FOREIGN KEY("physiological process_id") REFERENCES "physiological process" (id)
);
CREATE TABLE "physiological process_category" (
	"physiological process_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("physiological process_id", category), 
	FOREIGN KEY("physiological process_id") REFERENCES "physiological process" (id)
);
CREATE TABLE "physiological process_type" (
	"physiological process_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("physiological process_id", type), 
	FOREIGN KEY("physiological process_id") REFERENCES "physiological process" (id)
);
CREATE TABLE behavior_has_input (
	behavior_id TEXT, 
	has_input_id TEXT, 
	PRIMARY KEY (behavior_id, has_input_id), 
	FOREIGN KEY(behavior_id) REFERENCES behavior (id), 
	FOREIGN KEY(has_input_id) REFERENCES "named thing" (id)
);
CREATE TABLE behavior_has_output (
	behavior_id TEXT, 
	has_output_id TEXT, 
	PRIMARY KEY (behavior_id, has_output_id), 
	FOREIGN KEY(behavior_id) REFERENCES behavior (id), 
	FOREIGN KEY(has_output_id) REFERENCES "named thing" (id)
);
CREATE TABLE behavior_enabled_by (
	behavior_id TEXT, 
	enabled_by_id TEXT, 
	PRIMARY KEY (behavior_id, enabled_by_id), 
	FOREIGN KEY(behavior_id) REFERENCES behavior (id), 
	FOREIGN KEY(enabled_by_id) REFERENCES "physical entity" (id)
);
CREATE TABLE behavior_provided_by (
	behavior_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (behavior_id, provided_by), 
	FOREIGN KEY(behavior_id) REFERENCES behavior (id)
);
CREATE TABLE behavior_xref (
	behavior_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (behavior_id, xref), 
	FOREIGN KEY(behavior_id) REFERENCES behavior (id)
);
CREATE TABLE behavior_synonym (
	behavior_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (behavior_id, synonym), 
	FOREIGN KEY(behavior_id) REFERENCES behavior (id)
);
CREATE TABLE behavior_category (
	behavior_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (behavior_id, category), 
	FOREIGN KEY(behavior_id) REFERENCES behavior (id)
);
CREATE TABLE behavior_type (
	behavior_id TEXT, 
	type TEXT, 
	PRIMARY KEY (behavior_id, type), 
	FOREIGN KEY(behavior_id) REFERENCES behavior (id)
);
CREATE TABLE "genetic inheritance_provided_by" (
	"genetic inheritance_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("genetic inheritance_id", provided_by), 
	FOREIGN KEY("genetic inheritance_id") REFERENCES "genetic inheritance" (id)
);
CREATE TABLE "genetic inheritance_xref" (
	"genetic inheritance_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("genetic inheritance_id", xref), 
	FOREIGN KEY("genetic inheritance_id") REFERENCES "genetic inheritance" (id)
);
CREATE TABLE "genetic inheritance_synonym" (
	"genetic inheritance_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("genetic inheritance_id", synonym), 
	FOREIGN KEY("genetic inheritance_id") REFERENCES "genetic inheritance" (id)
);
CREATE TABLE "genetic inheritance_category" (
	"genetic inheritance_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("genetic inheritance_id", category), 
	FOREIGN KEY("genetic inheritance_id") REFERENCES "genetic inheritance" (id)
);
CREATE TABLE "genetic inheritance_type" (
	"genetic inheritance_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("genetic inheritance_id", type), 
	FOREIGN KEY("genetic inheritance_id") REFERENCES "genetic inheritance" (id)
);
CREATE TABLE "organismal entity_provided_by" (
	"organismal entity_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("organismal entity_id", provided_by), 
	FOREIGN KEY("organismal entity_id") REFERENCES "organismal entity" (id)
);
CREATE TABLE "organismal entity_xref" (
	"organismal entity_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("organismal entity_id", xref), 
	FOREIGN KEY("organismal entity_id") REFERENCES "organismal entity" (id)
);
CREATE TABLE "organismal entity_synonym" (
	"organismal entity_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("organismal entity_id", synonym), 
	FOREIGN KEY("organismal entity_id") REFERENCES "organismal entity" (id)
);
CREATE TABLE "organismal entity_category" (
	"organismal entity_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("organismal entity_id", category), 
	FOREIGN KEY("organismal entity_id") REFERENCES "organismal entity" (id)
);
CREATE TABLE "organismal entity_type" (
	"organismal entity_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("organismal entity_id", type), 
	FOREIGN KEY("organismal entity_id") REFERENCES "organismal entity" (id)
);
CREATE TABLE bacterium_provided_by (
	bacterium_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (bacterium_id, provided_by), 
	FOREIGN KEY(bacterium_id) REFERENCES bacterium (id)
);
CREATE TABLE bacterium_xref (
	bacterium_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (bacterium_id, xref), 
	FOREIGN KEY(bacterium_id) REFERENCES bacterium (id)
);
CREATE TABLE bacterium_synonym (
	bacterium_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (bacterium_id, synonym), 
	FOREIGN KEY(bacterium_id) REFERENCES bacterium (id)
);
CREATE TABLE bacterium_category (
	bacterium_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (bacterium_id, category), 
	FOREIGN KEY(bacterium_id) REFERENCES bacterium (id)
);
CREATE TABLE bacterium_type (
	bacterium_id TEXT, 
	type TEXT, 
	PRIMARY KEY (bacterium_id, type), 
	FOREIGN KEY(bacterium_id) REFERENCES bacterium (id)
);
CREATE TABLE virus_provided_by (
	virus_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (virus_id, provided_by), 
	FOREIGN KEY(virus_id) REFERENCES virus (id)
);
CREATE TABLE virus_xref (
	virus_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (virus_id, xref), 
	FOREIGN KEY(virus_id) REFERENCES virus (id)
);
CREATE TABLE virus_synonym (
	virus_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (virus_id, synonym), 
	FOREIGN KEY(virus_id) REFERENCES virus (id)
);
CREATE TABLE virus_category (
	virus_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (virus_id, category), 
	FOREIGN KEY(virus_id) REFERENCES virus (id)
);
CREATE TABLE virus_type (
	virus_id TEXT, 
	type TEXT, 
	PRIMARY KEY (virus_id, type), 
	FOREIGN KEY(virus_id) REFERENCES virus (id)
);
CREATE TABLE "cellular organism_provided_by" (
	"cellular organism_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("cellular organism_id", provided_by), 
	FOREIGN KEY("cellular organism_id") REFERENCES "cellular organism" (id)
);
CREATE TABLE "cellular organism_xref" (
	"cellular organism_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("cellular organism_id", xref), 
	FOREIGN KEY("cellular organism_id") REFERENCES "cellular organism" (id)
);
CREATE TABLE "cellular organism_synonym" (
	"cellular organism_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("cellular organism_id", synonym), 
	FOREIGN KEY("cellular organism_id") REFERENCES "cellular organism" (id)
);
CREATE TABLE "cellular organism_category" (
	"cellular organism_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("cellular organism_id", category), 
	FOREIGN KEY("cellular organism_id") REFERENCES "cellular organism" (id)
);
CREATE TABLE "cellular organism_type" (
	"cellular organism_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("cellular organism_id", type), 
	FOREIGN KEY("cellular organism_id") REFERENCES "cellular organism" (id)
);
CREATE TABLE mammal_provided_by (
	mammal_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (mammal_id, provided_by), 
	FOREIGN KEY(mammal_id) REFERENCES mammal (id)
);
CREATE TABLE mammal_xref (
	mammal_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (mammal_id, xref), 
	FOREIGN KEY(mammal_id) REFERENCES mammal (id)
);
CREATE TABLE mammal_synonym (
	mammal_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (mammal_id, synonym), 
	FOREIGN KEY(mammal_id) REFERENCES mammal (id)
);
CREATE TABLE mammal_category (
	mammal_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (mammal_id, category), 
	FOREIGN KEY(mammal_id) REFERENCES mammal (id)
);
CREATE TABLE mammal_type (
	mammal_id TEXT, 
	type TEXT, 
	PRIMARY KEY (mammal_id, type), 
	FOREIGN KEY(mammal_id) REFERENCES mammal (id)
);
CREATE TABLE human_provided_by (
	human_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (human_id, provided_by), 
	FOREIGN KEY(human_id) REFERENCES human (id)
);
CREATE TABLE human_xref (
	human_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (human_id, xref), 
	FOREIGN KEY(human_id) REFERENCES human (id)
);
CREATE TABLE human_synonym (
	human_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (human_id, synonym), 
	FOREIGN KEY(human_id) REFERENCES human (id)
);
CREATE TABLE human_category (
	human_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (human_id, category), 
	FOREIGN KEY(human_id) REFERENCES human (id)
);
CREATE TABLE human_type (
	human_id TEXT, 
	type TEXT, 
	PRIMARY KEY (human_id, type), 
	FOREIGN KEY(human_id) REFERENCES human (id)
);
CREATE TABLE plant_provided_by (
	plant_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (plant_id, provided_by), 
	FOREIGN KEY(plant_id) REFERENCES plant (id)
);
CREATE TABLE plant_xref (
	plant_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (plant_id, xref), 
	FOREIGN KEY(plant_id) REFERENCES plant (id)
);
CREATE TABLE plant_synonym (
	plant_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (plant_id, synonym), 
	FOREIGN KEY(plant_id) REFERENCES plant (id)
);
CREATE TABLE plant_category (
	plant_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (plant_id, category), 
	FOREIGN KEY(plant_id) REFERENCES plant (id)
);
CREATE TABLE plant_type (
	plant_id TEXT, 
	type TEXT, 
	PRIMARY KEY (plant_id, type), 
	FOREIGN KEY(plant_id) REFERENCES plant (id)
);
CREATE TABLE invertebrate_provided_by (
	invertebrate_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (invertebrate_id, provided_by), 
	FOREIGN KEY(invertebrate_id) REFERENCES invertebrate (id)
);
CREATE TABLE invertebrate_xref (
	invertebrate_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (invertebrate_id, xref), 
	FOREIGN KEY(invertebrate_id) REFERENCES invertebrate (id)
);
CREATE TABLE invertebrate_synonym (
	invertebrate_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (invertebrate_id, synonym), 
	FOREIGN KEY(invertebrate_id) REFERENCES invertebrate (id)
);
CREATE TABLE invertebrate_category (
	invertebrate_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (invertebrate_id, category), 
	FOREIGN KEY(invertebrate_id) REFERENCES invertebrate (id)
);
CREATE TABLE invertebrate_type (
	invertebrate_id TEXT, 
	type TEXT, 
	PRIMARY KEY (invertebrate_id, type), 
	FOREIGN KEY(invertebrate_id) REFERENCES invertebrate (id)
);
CREATE TABLE vertebrate_provided_by (
	vertebrate_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (vertebrate_id, provided_by), 
	FOREIGN KEY(vertebrate_id) REFERENCES vertebrate (id)
);
CREATE TABLE vertebrate_xref (
	vertebrate_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (vertebrate_id, xref), 
	FOREIGN KEY(vertebrate_id) REFERENCES vertebrate (id)
);
CREATE TABLE vertebrate_synonym (
	vertebrate_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (vertebrate_id, synonym), 
	FOREIGN KEY(vertebrate_id) REFERENCES vertebrate (id)
);
CREATE TABLE vertebrate_category (
	vertebrate_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (vertebrate_id, category), 
	FOREIGN KEY(vertebrate_id) REFERENCES vertebrate (id)
);
CREATE TABLE vertebrate_type (
	vertebrate_id TEXT, 
	type TEXT, 
	PRIMARY KEY (vertebrate_id, type), 
	FOREIGN KEY(vertebrate_id) REFERENCES vertebrate (id)
);
CREATE TABLE fungus_provided_by (
	fungus_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (fungus_id, provided_by), 
	FOREIGN KEY(fungus_id) REFERENCES fungus (id)
);
CREATE TABLE fungus_xref (
	fungus_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (fungus_id, xref), 
	FOREIGN KEY(fungus_id) REFERENCES fungus (id)
);
CREATE TABLE fungus_synonym (
	fungus_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (fungus_id, synonym), 
	FOREIGN KEY(fungus_id) REFERENCES fungus (id)
);
CREATE TABLE fungus_category (
	fungus_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (fungus_id, category), 
	FOREIGN KEY(fungus_id) REFERENCES fungus (id)
);
CREATE TABLE fungus_type (
	fungus_id TEXT, 
	type TEXT, 
	PRIMARY KEY (fungus_id, type), 
	FOREIGN KEY(fungus_id) REFERENCES fungus (id)
);
CREATE TABLE "life stage_provided_by" (
	"life stage_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("life stage_id", provided_by), 
	FOREIGN KEY("life stage_id") REFERENCES "life stage" (id)
);
CREATE TABLE "life stage_xref" (
	"life stage_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("life stage_id", xref), 
	FOREIGN KEY("life stage_id") REFERENCES "life stage" (id)
);
CREATE TABLE "life stage_synonym" (
	"life stage_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("life stage_id", synonym), 
	FOREIGN KEY("life stage_id") REFERENCES "life stage" (id)
);
CREATE TABLE "life stage_category" (
	"life stage_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("life stage_id", category), 
	FOREIGN KEY("life stage_id") REFERENCES "life stage" (id)
);
CREATE TABLE "life stage_type" (
	"life stage_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("life stage_id", type), 
	FOREIGN KEY("life stage_id") REFERENCES "life stage" (id)
);
CREATE TABLE "individual organism_provided_by" (
	"individual organism_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("individual organism_id", provided_by), 
	FOREIGN KEY("individual organism_id") REFERENCES "individual organism" (id)
);
CREATE TABLE "individual organism_xref" (
	"individual organism_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("individual organism_id", xref), 
	FOREIGN KEY("individual organism_id") REFERENCES "individual organism" (id)
);
CREATE TABLE "individual organism_synonym" (
	"individual organism_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("individual organism_id", synonym), 
	FOREIGN KEY("individual organism_id") REFERENCES "individual organism" (id)
);
CREATE TABLE "individual organism_category" (
	"individual organism_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("individual organism_id", category), 
	FOREIGN KEY("individual organism_id") REFERENCES "individual organism" (id)
);
CREATE TABLE "individual organism_type" (
	"individual organism_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("individual organism_id", type), 
	FOREIGN KEY("individual organism_id") REFERENCES "individual organism" (id)
);
CREATE TABLE "population of individual organisms_provided_by" (
	"population of individual organisms_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("population of individual organisms_id", provided_by), 
	FOREIGN KEY("population of individual organisms_id") REFERENCES "population of individual organisms" (id)
);
CREATE TABLE "population of individual organisms_xref" (
	"population of individual organisms_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("population of individual organisms_id", xref), 
	FOREIGN KEY("population of individual organisms_id") REFERENCES "population of individual organisms" (id)
);
CREATE TABLE "population of individual organisms_synonym" (
	"population of individual organisms_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("population of individual organisms_id", synonym), 
	FOREIGN KEY("population of individual organisms_id") REFERENCES "population of individual organisms" (id)
);
CREATE TABLE "population of individual organisms_category" (
	"population of individual organisms_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("population of individual organisms_id", category), 
	FOREIGN KEY("population of individual organisms_id") REFERENCES "population of individual organisms" (id)
);
CREATE TABLE "population of individual organisms_type" (
	"population of individual organisms_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("population of individual organisms_id", type), 
	FOREIGN KEY("population of individual organisms_id") REFERENCES "population of individual organisms" (id)
);
CREATE TABLE "disease or phenotypic feature_provided_by" (
	"disease or phenotypic feature_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("disease or phenotypic feature_id", provided_by), 
	FOREIGN KEY("disease or phenotypic feature_id") REFERENCES "disease or phenotypic feature" (id)
);
CREATE TABLE "disease or phenotypic feature_xref" (
	"disease or phenotypic feature_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("disease or phenotypic feature_id", xref), 
	FOREIGN KEY("disease or phenotypic feature_id") REFERENCES "disease or phenotypic feature" (id)
);
CREATE TABLE "disease or phenotypic feature_synonym" (
	"disease or phenotypic feature_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("disease or phenotypic feature_id", synonym), 
	FOREIGN KEY("disease or phenotypic feature_id") REFERENCES "disease or phenotypic feature" (id)
);
CREATE TABLE "disease or phenotypic feature_category" (
	"disease or phenotypic feature_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("disease or phenotypic feature_id", category), 
	FOREIGN KEY("disease or phenotypic feature_id") REFERENCES "disease or phenotypic feature" (id)
);
CREATE TABLE "disease or phenotypic feature_type" (
	"disease or phenotypic feature_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("disease or phenotypic feature_id", type), 
	FOREIGN KEY("disease or phenotypic feature_id") REFERENCES "disease or phenotypic feature" (id)
);
CREATE TABLE disease_provided_by (
	disease_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (disease_id, provided_by), 
	FOREIGN KEY(disease_id) REFERENCES disease (id)
);
CREATE TABLE disease_xref (
	disease_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (disease_id, xref), 
	FOREIGN KEY(disease_id) REFERENCES disease (id)
);
CREATE TABLE disease_synonym (
	disease_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (disease_id, synonym), 
	FOREIGN KEY(disease_id) REFERENCES disease (id)
);
CREATE TABLE disease_category (
	disease_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (disease_id, category), 
	FOREIGN KEY(disease_id) REFERENCES disease (id)
);
CREATE TABLE disease_type (
	disease_id TEXT, 
	type TEXT, 
	PRIMARY KEY (disease_id, type), 
	FOREIGN KEY(disease_id) REFERENCES disease (id)
);
CREATE TABLE "phenotypic feature_provided_by" (
	"phenotypic feature_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("phenotypic feature_id", provided_by), 
	FOREIGN KEY("phenotypic feature_id") REFERENCES "phenotypic feature" (id)
);
CREATE TABLE "phenotypic feature_xref" (
	"phenotypic feature_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("phenotypic feature_id", xref), 
	FOREIGN KEY("phenotypic feature_id") REFERENCES "phenotypic feature" (id)
);
CREATE TABLE "phenotypic feature_synonym" (
	"phenotypic feature_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("phenotypic feature_id", synonym), 
	FOREIGN KEY("phenotypic feature_id") REFERENCES "phenotypic feature" (id)
);
CREATE TABLE "phenotypic feature_category" (
	"phenotypic feature_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("phenotypic feature_id", category), 
	FOREIGN KEY("phenotypic feature_id") REFERENCES "phenotypic feature" (id)
);
CREATE TABLE "phenotypic feature_type" (
	"phenotypic feature_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("phenotypic feature_id", type), 
	FOREIGN KEY("phenotypic feature_id") REFERENCES "phenotypic feature" (id)
);
CREATE TABLE "behavioral feature_provided_by" (
	"behavioral feature_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("behavioral feature_id", provided_by), 
	FOREIGN KEY("behavioral feature_id") REFERENCES "behavioral feature" (id)
);
CREATE TABLE "behavioral feature_xref" (
	"behavioral feature_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("behavioral feature_id", xref), 
	FOREIGN KEY("behavioral feature_id") REFERENCES "behavioral feature" (id)
);
CREATE TABLE "behavioral feature_synonym" (
	"behavioral feature_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("behavioral feature_id", synonym), 
	FOREIGN KEY("behavioral feature_id") REFERENCES "behavioral feature" (id)
);
CREATE TABLE "behavioral feature_category" (
	"behavioral feature_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("behavioral feature_id", category), 
	FOREIGN KEY("behavioral feature_id") REFERENCES "behavioral feature" (id)
);
CREATE TABLE "behavioral feature_type" (
	"behavioral feature_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("behavioral feature_id", type), 
	FOREIGN KEY("behavioral feature_id") REFERENCES "behavioral feature" (id)
);
CREATE TABLE "anatomical entity_provided_by" (
	"anatomical entity_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("anatomical entity_id", provided_by), 
	FOREIGN KEY("anatomical entity_id") REFERENCES "anatomical entity" (id)
);
CREATE TABLE "anatomical entity_xref" (
	"anatomical entity_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("anatomical entity_id", xref), 
	FOREIGN KEY("anatomical entity_id") REFERENCES "anatomical entity" (id)
);
CREATE TABLE "anatomical entity_synonym" (
	"anatomical entity_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("anatomical entity_id", synonym), 
	FOREIGN KEY("anatomical entity_id") REFERENCES "anatomical entity" (id)
);
CREATE TABLE "anatomical entity_category" (
	"anatomical entity_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("anatomical entity_id", category), 
	FOREIGN KEY("anatomical entity_id") REFERENCES "anatomical entity" (id)
);
CREATE TABLE "anatomical entity_type" (
	"anatomical entity_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("anatomical entity_id", type), 
	FOREIGN KEY("anatomical entity_id") REFERENCES "anatomical entity" (id)
);
CREATE TABLE "cellular component_provided_by" (
	"cellular component_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("cellular component_id", provided_by), 
	FOREIGN KEY("cellular component_id") REFERENCES "cellular component" (id)
);
CREATE TABLE "cellular component_xref" (
	"cellular component_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("cellular component_id", xref), 
	FOREIGN KEY("cellular component_id") REFERENCES "cellular component" (id)
);
CREATE TABLE "cellular component_synonym" (
	"cellular component_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("cellular component_id", synonym), 
	FOREIGN KEY("cellular component_id") REFERENCES "cellular component" (id)
);
CREATE TABLE "cellular component_category" (
	"cellular component_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("cellular component_id", category), 
	FOREIGN KEY("cellular component_id") REFERENCES "cellular component" (id)
);
CREATE TABLE "cellular component_type" (
	"cellular component_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("cellular component_id", type), 
	FOREIGN KEY("cellular component_id") REFERENCES "cellular component" (id)
);
CREATE TABLE cell_provided_by (
	cell_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (cell_id, provided_by), 
	FOREIGN KEY(cell_id) REFERENCES cell (id)
);
CREATE TABLE cell_xref (
	cell_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (cell_id, xref), 
	FOREIGN KEY(cell_id) REFERENCES cell (id)
);
CREATE TABLE cell_synonym (
	cell_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (cell_id, synonym), 
	FOREIGN KEY(cell_id) REFERENCES cell (id)
);
CREATE TABLE cell_category (
	cell_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (cell_id, category), 
	FOREIGN KEY(cell_id) REFERENCES cell (id)
);
CREATE TABLE cell_type (
	cell_id TEXT, 
	type TEXT, 
	PRIMARY KEY (cell_id, type), 
	FOREIGN KEY(cell_id) REFERENCES cell (id)
);
CREATE TABLE "cell line_provided_by" (
	"cell line_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("cell line_id", provided_by), 
	FOREIGN KEY("cell line_id") REFERENCES "cell line" (id)
);
CREATE TABLE "cell line_xref" (
	"cell line_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("cell line_id", xref), 
	FOREIGN KEY("cell line_id") REFERENCES "cell line" (id)
);
CREATE TABLE "cell line_synonym" (
	"cell line_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("cell line_id", synonym), 
	FOREIGN KEY("cell line_id") REFERENCES "cell line" (id)
);
CREATE TABLE "cell line_category" (
	"cell line_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("cell line_id", category), 
	FOREIGN KEY("cell line_id") REFERENCES "cell line" (id)
);
CREATE TABLE "cell line_type" (
	"cell line_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("cell line_id", type), 
	FOREIGN KEY("cell line_id") REFERENCES "cell line" (id)
);
CREATE TABLE "gross anatomical structure_provided_by" (
	"gross anatomical structure_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("gross anatomical structure_id", provided_by), 
	FOREIGN KEY("gross anatomical structure_id") REFERENCES "gross anatomical structure" (id)
);
CREATE TABLE "gross anatomical structure_xref" (
	"gross anatomical structure_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("gross anatomical structure_id", xref), 
	FOREIGN KEY("gross anatomical structure_id") REFERENCES "gross anatomical structure" (id)
);
CREATE TABLE "gross anatomical structure_synonym" (
	"gross anatomical structure_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("gross anatomical structure_id", synonym), 
	FOREIGN KEY("gross anatomical structure_id") REFERENCES "gross anatomical structure" (id)
);
CREATE TABLE "gross anatomical structure_category" (
	"gross anatomical structure_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("gross anatomical structure_id", category), 
	FOREIGN KEY("gross anatomical structure_id") REFERENCES "gross anatomical structure" (id)
);
CREATE TABLE "gross anatomical structure_type" (
	"gross anatomical structure_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("gross anatomical structure_id", type), 
	FOREIGN KEY("gross anatomical structure_id") REFERENCES "gross anatomical structure" (id)
);
CREATE TABLE gene_xref (
	gene_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (gene_id, xref), 
	FOREIGN KEY(gene_id) REFERENCES gene (id)
);
CREATE TABLE gene_provided_by (
	gene_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (gene_id, provided_by), 
	FOREIGN KEY(gene_id) REFERENCES gene (id)
);
CREATE TABLE gene_synonym (
	gene_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (gene_id, synonym), 
	FOREIGN KEY(gene_id) REFERENCES gene (id)
);
CREATE TABLE gene_category (
	gene_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (gene_id, category), 
	FOREIGN KEY(gene_id) REFERENCES gene (id)
);
CREATE TABLE gene_type (
	gene_id TEXT, 
	type TEXT, 
	PRIMARY KEY (gene_id, type), 
	FOREIGN KEY(gene_id) REFERENCES gene (id)
);
CREATE TABLE "gene product mixin_synonym" (
	"gene product mixin_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("gene product mixin_id", synonym), 
	FOREIGN KEY("gene product mixin_id") REFERENCES "gene product mixin" (id)
);
CREATE TABLE "gene product mixin_xref" (
	"gene product mixin_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("gene product mixin_id", xref), 
	FOREIGN KEY("gene product mixin_id") REFERENCES "gene product mixin" (id)
);
CREATE TABLE "gene product isoform mixin_synonym" (
	"gene product isoform mixin_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("gene product isoform mixin_id", synonym), 
	FOREIGN KEY("gene product isoform mixin_id") REFERENCES "gene product isoform mixin" (id)
);
CREATE TABLE "gene product isoform mixin_xref" (
	"gene product isoform mixin_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("gene product isoform mixin_id", xref), 
	FOREIGN KEY("gene product isoform mixin_id") REFERENCES "gene product isoform mixin" (id)
);
CREATE TABLE "macromolecular complex_provided_by" (
	"macromolecular complex_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("macromolecular complex_id", provided_by), 
	FOREIGN KEY("macromolecular complex_id") REFERENCES "macromolecular complex" (id)
);
CREATE TABLE "macromolecular complex_xref" (
	"macromolecular complex_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("macromolecular complex_id", xref), 
	FOREIGN KEY("macromolecular complex_id") REFERENCES "macromolecular complex" (id)
);
CREATE TABLE "macromolecular complex_synonym" (
	"macromolecular complex_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("macromolecular complex_id", synonym), 
	FOREIGN KEY("macromolecular complex_id") REFERENCES "macromolecular complex" (id)
);
CREATE TABLE "macromolecular complex_category" (
	"macromolecular complex_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("macromolecular complex_id", category), 
	FOREIGN KEY("macromolecular complex_id") REFERENCES "macromolecular complex" (id)
);
CREATE TABLE "macromolecular complex_type" (
	"macromolecular complex_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("macromolecular complex_id", type), 
	FOREIGN KEY("macromolecular complex_id") REFERENCES "macromolecular complex" (id)
);
CREATE TABLE "nucleosome modification_provided_by" (
	"nucleosome modification_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("nucleosome modification_id", provided_by), 
	FOREIGN KEY("nucleosome modification_id") REFERENCES "nucleosome modification" (id)
);
CREATE TABLE "nucleosome modification_xref" (
	"nucleosome modification_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("nucleosome modification_id", xref), 
	FOREIGN KEY("nucleosome modification_id") REFERENCES "nucleosome modification" (id)
);
CREATE TABLE "nucleosome modification_synonym" (
	"nucleosome modification_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("nucleosome modification_id", synonym), 
	FOREIGN KEY("nucleosome modification_id") REFERENCES "nucleosome modification" (id)
);
CREATE TABLE "nucleosome modification_category" (
	"nucleosome modification_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("nucleosome modification_id", category), 
	FOREIGN KEY("nucleosome modification_id") REFERENCES "nucleosome modification" (id)
);
CREATE TABLE "nucleosome modification_type" (
	"nucleosome modification_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("nucleosome modification_id", type), 
	FOREIGN KEY("nucleosome modification_id") REFERENCES "nucleosome modification" (id)
);
CREATE TABLE genome_provided_by (
	genome_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (genome_id, provided_by), 
	FOREIGN KEY(genome_id) REFERENCES genome (id)
);
CREATE TABLE genome_xref (
	genome_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (genome_id, xref), 
	FOREIGN KEY(genome_id) REFERENCES genome (id)
);
CREATE TABLE genome_synonym (
	genome_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (genome_id, synonym), 
	FOREIGN KEY(genome_id) REFERENCES genome (id)
);
CREATE TABLE genome_category (
	genome_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (genome_id, category), 
	FOREIGN KEY(genome_id) REFERENCES genome (id)
);
CREATE TABLE genome_type (
	genome_id TEXT, 
	type TEXT, 
	PRIMARY KEY (genome_id, type), 
	FOREIGN KEY(genome_id) REFERENCES genome (id)
);
CREATE TABLE exon_provided_by (
	exon_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (exon_id, provided_by), 
	FOREIGN KEY(exon_id) REFERENCES exon (id)
);
CREATE TABLE exon_xref (
	exon_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (exon_id, xref), 
	FOREIGN KEY(exon_id) REFERENCES exon (id)
);
CREATE TABLE exon_synonym (
	exon_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (exon_id, synonym), 
	FOREIGN KEY(exon_id) REFERENCES exon (id)
);
CREATE TABLE exon_category (
	exon_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (exon_id, category), 
	FOREIGN KEY(exon_id) REFERENCES exon (id)
);
CREATE TABLE exon_type (
	exon_id TEXT, 
	type TEXT, 
	PRIMARY KEY (exon_id, type), 
	FOREIGN KEY(exon_id) REFERENCES exon (id)
);
CREATE TABLE transcript_provided_by (
	transcript_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (transcript_id, provided_by), 
	FOREIGN KEY(transcript_id) REFERENCES transcript (id)
);
CREATE TABLE transcript_xref (
	transcript_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (transcript_id, xref), 
	FOREIGN KEY(transcript_id) REFERENCES transcript (id)
);
CREATE TABLE transcript_synonym (
	transcript_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (transcript_id, synonym), 
	FOREIGN KEY(transcript_id) REFERENCES transcript (id)
);
CREATE TABLE transcript_category (
	transcript_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (transcript_id, category), 
	FOREIGN KEY(transcript_id) REFERENCES transcript (id)
);
CREATE TABLE transcript_type (
	transcript_id TEXT, 
	type TEXT, 
	PRIMARY KEY (transcript_id, type), 
	FOREIGN KEY(transcript_id) REFERENCES transcript (id)
);
CREATE TABLE "coding sequence_provided_by" (
	"coding sequence_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("coding sequence_id", provided_by), 
	FOREIGN KEY("coding sequence_id") REFERENCES "coding sequence" (id)
);
CREATE TABLE "coding sequence_xref" (
	"coding sequence_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("coding sequence_id", xref), 
	FOREIGN KEY("coding sequence_id") REFERENCES "coding sequence" (id)
);
CREATE TABLE "coding sequence_synonym" (
	"coding sequence_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("coding sequence_id", synonym), 
	FOREIGN KEY("coding sequence_id") REFERENCES "coding sequence" (id)
);
CREATE TABLE "coding sequence_category" (
	"coding sequence_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("coding sequence_id", category), 
	FOREIGN KEY("coding sequence_id") REFERENCES "coding sequence" (id)
);
CREATE TABLE "coding sequence_type" (
	"coding sequence_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("coding sequence_id", type), 
	FOREIGN KEY("coding sequence_id") REFERENCES "coding sequence" (id)
);
CREATE TABLE polypeptide_provided_by (
	polypeptide_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (polypeptide_id, provided_by), 
	FOREIGN KEY(polypeptide_id) REFERENCES polypeptide (id)
);
CREATE TABLE polypeptide_xref (
	polypeptide_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (polypeptide_id, xref), 
	FOREIGN KEY(polypeptide_id) REFERENCES polypeptide (id)
);
CREATE TABLE polypeptide_synonym (
	polypeptide_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (polypeptide_id, synonym), 
	FOREIGN KEY(polypeptide_id) REFERENCES polypeptide (id)
);
CREATE TABLE polypeptide_category (
	polypeptide_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (polypeptide_id, category), 
	FOREIGN KEY(polypeptide_id) REFERENCES polypeptide (id)
);
CREATE TABLE polypeptide_type (
	polypeptide_id TEXT, 
	type TEXT, 
	PRIMARY KEY (polypeptide_id, type), 
	FOREIGN KEY(polypeptide_id) REFERENCES polypeptide (id)
);
CREATE TABLE protein_synonym (
	protein_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (protein_id, synonym), 
	FOREIGN KEY(protein_id) REFERENCES protein (id)
);
CREATE TABLE protein_xref (
	protein_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (protein_id, xref), 
	FOREIGN KEY(protein_id) REFERENCES protein (id)
);
CREATE TABLE protein_provided_by (
	protein_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (protein_id, provided_by), 
	FOREIGN KEY(protein_id) REFERENCES protein (id)
);
CREATE TABLE protein_category (
	protein_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (protein_id, category), 
	FOREIGN KEY(protein_id) REFERENCES protein (id)
);
CREATE TABLE protein_type (
	protein_id TEXT, 
	type TEXT, 
	PRIMARY KEY (protein_id, type), 
	FOREIGN KEY(protein_id) REFERENCES protein (id)
);
CREATE TABLE "protein isoform_synonym" (
	"protein isoform_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("protein isoform_id", synonym), 
	FOREIGN KEY("protein isoform_id") REFERENCES "protein isoform" (id)
);
CREATE TABLE "protein isoform_xref" (
	"protein isoform_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("protein isoform_id", xref), 
	FOREIGN KEY("protein isoform_id") REFERENCES "protein isoform" (id)
);
CREATE TABLE "protein isoform_provided_by" (
	"protein isoform_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("protein isoform_id", provided_by), 
	FOREIGN KEY("protein isoform_id") REFERENCES "protein isoform" (id)
);
CREATE TABLE "protein isoform_category" (
	"protein isoform_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("protein isoform_id", category), 
	FOREIGN KEY("protein isoform_id") REFERENCES "protein isoform" (id)
);
CREATE TABLE "protein isoform_type" (
	"protein isoform_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("protein isoform_id", type), 
	FOREIGN KEY("protein isoform_id") REFERENCES "protein isoform" (id)
);
CREATE TABLE "protein domain_has_gene_or_gene_product" (
	"protein domain_id" TEXT, 
	has_gene_or_gene_product_id TEXT, 
	PRIMARY KEY ("protein domain_id", has_gene_or_gene_product_id), 
	FOREIGN KEY("protein domain_id") REFERENCES "protein domain" (id), 
	FOREIGN KEY(has_gene_or_gene_product_id) REFERENCES gene (id)
);
CREATE TABLE "protein domain_provided_by" (
	"protein domain_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("protein domain_id", provided_by), 
	FOREIGN KEY("protein domain_id") REFERENCES "protein domain" (id)
);
CREATE TABLE "protein domain_xref" (
	"protein domain_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("protein domain_id", xref), 
	FOREIGN KEY("protein domain_id") REFERENCES "protein domain" (id)
);
CREATE TABLE "protein domain_synonym" (
	"protein domain_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("protein domain_id", synonym), 
	FOREIGN KEY("protein domain_id") REFERENCES "protein domain" (id)
);
CREATE TABLE "protein domain_category" (
	"protein domain_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("protein domain_id", category), 
	FOREIGN KEY("protein domain_id") REFERENCES "protein domain" (id)
);
CREATE TABLE "protein domain_type" (
	"protein domain_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("protein domain_id", type), 
	FOREIGN KEY("protein domain_id") REFERENCES "protein domain" (id)
);
CREATE TABLE "posttranslational modification_provided_by" (
	"posttranslational modification_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("posttranslational modification_id", provided_by), 
	FOREIGN KEY("posttranslational modification_id") REFERENCES "posttranslational modification" (id)
);
CREATE TABLE "posttranslational modification_xref" (
	"posttranslational modification_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("posttranslational modification_id", xref), 
	FOREIGN KEY("posttranslational modification_id") REFERENCES "posttranslational modification" (id)
);
CREATE TABLE "posttranslational modification_synonym" (
	"posttranslational modification_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("posttranslational modification_id", synonym), 
	FOREIGN KEY("posttranslational modification_id") REFERENCES "posttranslational modification" (id)
);
CREATE TABLE "posttranslational modification_category" (
	"posttranslational modification_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("posttranslational modification_id", category), 
	FOREIGN KEY("posttranslational modification_id") REFERENCES "posttranslational modification" (id)
);
CREATE TABLE "posttranslational modification_type" (
	"posttranslational modification_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("posttranslational modification_id", type), 
	FOREIGN KEY("posttranslational modification_id") REFERENCES "posttranslational modification" (id)
);
CREATE TABLE "protein family_has_gene_or_gene_product" (
	"protein family_id" TEXT, 
	has_gene_or_gene_product_id TEXT, 
	PRIMARY KEY ("protein family_id", has_gene_or_gene_product_id), 
	FOREIGN KEY("protein family_id") REFERENCES "protein family" (id), 
	FOREIGN KEY(has_gene_or_gene_product_id) REFERENCES gene (id)
);
CREATE TABLE "protein family_provided_by" (
	"protein family_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("protein family_id", provided_by), 
	FOREIGN KEY("protein family_id") REFERENCES "protein family" (id)
);
CREATE TABLE "protein family_xref" (
	"protein family_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("protein family_id", xref), 
	FOREIGN KEY("protein family_id") REFERENCES "protein family" (id)
);
CREATE TABLE "protein family_synonym" (
	"protein family_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("protein family_id", synonym), 
	FOREIGN KEY("protein family_id") REFERENCES "protein family" (id)
);
CREATE TABLE "protein family_category" (
	"protein family_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("protein family_id", category), 
	FOREIGN KEY("protein family_id") REFERENCES "protein family" (id)
);
CREATE TABLE "protein family_type" (
	"protein family_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("protein family_id", type), 
	FOREIGN KEY("protein family_id") REFERENCES "protein family" (id)
);
CREATE TABLE "nucleic acid sequence motif_provided_by" (
	"nucleic acid sequence motif_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("nucleic acid sequence motif_id", provided_by), 
	FOREIGN KEY("nucleic acid sequence motif_id") REFERENCES "nucleic acid sequence motif" (id)
);
CREATE TABLE "nucleic acid sequence motif_xref" (
	"nucleic acid sequence motif_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("nucleic acid sequence motif_id", xref), 
	FOREIGN KEY("nucleic acid sequence motif_id") REFERENCES "nucleic acid sequence motif" (id)
);
CREATE TABLE "nucleic acid sequence motif_synonym" (
	"nucleic acid sequence motif_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("nucleic acid sequence motif_id", synonym), 
	FOREIGN KEY("nucleic acid sequence motif_id") REFERENCES "nucleic acid sequence motif" (id)
);
CREATE TABLE "nucleic acid sequence motif_category" (
	"nucleic acid sequence motif_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("nucleic acid sequence motif_id", category), 
	FOREIGN KEY("nucleic acid sequence motif_id") REFERENCES "nucleic acid sequence motif" (id)
);
CREATE TABLE "nucleic acid sequence motif_type" (
	"nucleic acid sequence motif_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("nucleic acid sequence motif_id", type), 
	FOREIGN KEY("nucleic acid sequence motif_id") REFERENCES "nucleic acid sequence motif" (id)
);
CREATE TABLE "RNA product_synonym" (
	"RNA product_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("RNA product_id", synonym), 
	FOREIGN KEY("RNA product_id") REFERENCES "RNA product" (id)
);
CREATE TABLE "RNA product_xref" (
	"RNA product_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("RNA product_id", xref), 
	FOREIGN KEY("RNA product_id") REFERENCES "RNA product" (id)
);
CREATE TABLE "RNA product_provided_by" (
	"RNA product_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("RNA product_id", provided_by), 
	FOREIGN KEY("RNA product_id") REFERENCES "RNA product" (id)
);
CREATE TABLE "RNA product_category" (
	"RNA product_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("RNA product_id", category), 
	FOREIGN KEY("RNA product_id") REFERENCES "RNA product" (id)
);
CREATE TABLE "RNA product_type" (
	"RNA product_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("RNA product_id", type), 
	FOREIGN KEY("RNA product_id") REFERENCES "RNA product" (id)
);
CREATE TABLE "RNA product isoform_synonym" (
	"RNA product isoform_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("RNA product isoform_id", synonym), 
	FOREIGN KEY("RNA product isoform_id") REFERENCES "RNA product isoform" (id)
);
CREATE TABLE "RNA product isoform_xref" (
	"RNA product isoform_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("RNA product isoform_id", xref), 
	FOREIGN KEY("RNA product isoform_id") REFERENCES "RNA product isoform" (id)
);
CREATE TABLE "RNA product isoform_provided_by" (
	"RNA product isoform_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("RNA product isoform_id", provided_by), 
	FOREIGN KEY("RNA product isoform_id") REFERENCES "RNA product isoform" (id)
);
CREATE TABLE "RNA product isoform_category" (
	"RNA product isoform_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("RNA product isoform_id", category), 
	FOREIGN KEY("RNA product isoform_id") REFERENCES "RNA product isoform" (id)
);
CREATE TABLE "RNA product isoform_type" (
	"RNA product isoform_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("RNA product isoform_id", type), 
	FOREIGN KEY("RNA product isoform_id") REFERENCES "RNA product isoform" (id)
);
CREATE TABLE "noncoding RNA product_synonym" (
	"noncoding RNA product_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("noncoding RNA product_id", synonym), 
	FOREIGN KEY("noncoding RNA product_id") REFERENCES "noncoding RNA product" (id)
);
CREATE TABLE "noncoding RNA product_xref" (
	"noncoding RNA product_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("noncoding RNA product_id", xref), 
	FOREIGN KEY("noncoding RNA product_id") REFERENCES "noncoding RNA product" (id)
);
CREATE TABLE "noncoding RNA product_provided_by" (
	"noncoding RNA product_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("noncoding RNA product_id", provided_by), 
	FOREIGN KEY("noncoding RNA product_id") REFERENCES "noncoding RNA product" (id)
);
CREATE TABLE "noncoding RNA product_category" (
	"noncoding RNA product_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("noncoding RNA product_id", category), 
	FOREIGN KEY("noncoding RNA product_id") REFERENCES "noncoding RNA product" (id)
);
CREATE TABLE "noncoding RNA product_type" (
	"noncoding RNA product_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("noncoding RNA product_id", type), 
	FOREIGN KEY("noncoding RNA product_id") REFERENCES "noncoding RNA product" (id)
);
CREATE TABLE "microRNA_synonym" (
	"microRNA_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("microRNA_id", synonym), 
	FOREIGN KEY("microRNA_id") REFERENCES "microRNA" (id)
);
CREATE TABLE "microRNA_xref" (
	"microRNA_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("microRNA_id", xref), 
	FOREIGN KEY("microRNA_id") REFERENCES "microRNA" (id)
);
CREATE TABLE "microRNA_provided_by" (
	"microRNA_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("microRNA_id", provided_by), 
	FOREIGN KEY("microRNA_id") REFERENCES "microRNA" (id)
);
CREATE TABLE "microRNA_category" (
	"microRNA_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("microRNA_id", category), 
	FOREIGN KEY("microRNA_id") REFERENCES "microRNA" (id)
);
CREATE TABLE "microRNA_type" (
	"microRNA_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("microRNA_id", type), 
	FOREIGN KEY("microRNA_id") REFERENCES "microRNA" (id)
);
CREATE TABLE "siRNA_synonym" (
	"siRNA_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("siRNA_id", synonym), 
	FOREIGN KEY("siRNA_id") REFERENCES "siRNA" (id)
);
CREATE TABLE "siRNA_xref" (
	"siRNA_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("siRNA_id", xref), 
	FOREIGN KEY("siRNA_id") REFERENCES "siRNA" (id)
);
CREATE TABLE "siRNA_provided_by" (
	"siRNA_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("siRNA_id", provided_by), 
	FOREIGN KEY("siRNA_id") REFERENCES "siRNA" (id)
);
CREATE TABLE "siRNA_category" (
	"siRNA_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("siRNA_id", category), 
	FOREIGN KEY("siRNA_id") REFERENCES "siRNA" (id)
);
CREATE TABLE "siRNA_type" (
	"siRNA_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("siRNA_id", type), 
	FOREIGN KEY("siRNA_id") REFERENCES "siRNA" (id)
);
CREATE TABLE "gene grouping mixin_has_gene_or_gene_product" (
	"gene grouping mixin_id" TEXT, 
	has_gene_or_gene_product_id TEXT, 
	PRIMARY KEY ("gene grouping mixin_id", has_gene_or_gene_product_id), 
	FOREIGN KEY("gene grouping mixin_id") REFERENCES "gene grouping mixin" (id), 
	FOREIGN KEY(has_gene_or_gene_product_id) REFERENCES gene (id)
);
CREATE TABLE "gene family_has_gene_or_gene_product" (
	"gene family_id" TEXT, 
	has_gene_or_gene_product_id TEXT, 
	PRIMARY KEY ("gene family_id", has_gene_or_gene_product_id), 
	FOREIGN KEY("gene family_id") REFERENCES "gene family" (id), 
	FOREIGN KEY(has_gene_or_gene_product_id) REFERENCES gene (id)
);
CREATE TABLE "gene family_provided_by" (
	"gene family_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("gene family_id", provided_by), 
	FOREIGN KEY("gene family_id") REFERENCES "gene family" (id)
);
CREATE TABLE "gene family_xref" (
	"gene family_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("gene family_id", xref), 
	FOREIGN KEY("gene family_id") REFERENCES "gene family" (id)
);
CREATE TABLE "gene family_synonym" (
	"gene family_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("gene family_id", synonym), 
	FOREIGN KEY("gene family_id") REFERENCES "gene family" (id)
);
CREATE TABLE "gene family_category" (
	"gene family_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("gene family_id", category), 
	FOREIGN KEY("gene family_id") REFERENCES "gene family" (id)
);
CREATE TABLE "gene family_type" (
	"gene family_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("gene family_id", type), 
	FOREIGN KEY("gene family_id") REFERENCES "gene family" (id)
);
CREATE TABLE haplotype_provided_by (
	haplotype_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (haplotype_id, provided_by), 
	FOREIGN KEY(haplotype_id) REFERENCES haplotype (id)
);
CREATE TABLE haplotype_xref (
	haplotype_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (haplotype_id, xref), 
	FOREIGN KEY(haplotype_id) REFERENCES haplotype (id)
);
CREATE TABLE haplotype_synonym (
	haplotype_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (haplotype_id, synonym), 
	FOREIGN KEY(haplotype_id) REFERENCES haplotype (id)
);
CREATE TABLE haplotype_category (
	haplotype_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (haplotype_id, category), 
	FOREIGN KEY(haplotype_id) REFERENCES haplotype (id)
);
CREATE TABLE haplotype_type (
	haplotype_id TEXT, 
	type TEXT, 
	PRIMARY KEY (haplotype_id, type), 
	FOREIGN KEY(haplotype_id) REFERENCES haplotype (id)
);
CREATE TABLE "sequence variant_has_gene" (
	"sequence variant_id" TEXT, 
	has_gene_id TEXT, 
	PRIMARY KEY ("sequence variant_id", has_gene_id), 
	FOREIGN KEY("sequence variant_id") REFERENCES "sequence variant" (id), 
	FOREIGN KEY(has_gene_id) REFERENCES gene (id)
);
CREATE TABLE "sequence variant_provided_by" (
	"sequence variant_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("sequence variant_id", provided_by), 
	FOREIGN KEY("sequence variant_id") REFERENCES "sequence variant" (id)
);
CREATE TABLE "sequence variant_xref" (
	"sequence variant_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("sequence variant_id", xref), 
	FOREIGN KEY("sequence variant_id") REFERENCES "sequence variant" (id)
);
CREATE TABLE "sequence variant_synonym" (
	"sequence variant_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("sequence variant_id", synonym), 
	FOREIGN KEY("sequence variant_id") REFERENCES "sequence variant" (id)
);
CREATE TABLE "sequence variant_category" (
	"sequence variant_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("sequence variant_id", category), 
	FOREIGN KEY("sequence variant_id") REFERENCES "sequence variant" (id)
);
CREATE TABLE "sequence variant_type" (
	"sequence variant_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("sequence variant_id", type), 
	FOREIGN KEY("sequence variant_id") REFERENCES "sequence variant" (id)
);
CREATE TABLE snv_has_gene (
	snv_id TEXT, 
	has_gene_id TEXT, 
	PRIMARY KEY (snv_id, has_gene_id), 
	FOREIGN KEY(snv_id) REFERENCES snv (id), 
	FOREIGN KEY(has_gene_id) REFERENCES gene (id)
);
CREATE TABLE snv_provided_by (
	snv_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (snv_id, provided_by), 
	FOREIGN KEY(snv_id) REFERENCES snv (id)
);
CREATE TABLE snv_xref (
	snv_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (snv_id, xref), 
	FOREIGN KEY(snv_id) REFERENCES snv (id)
);
CREATE TABLE snv_synonym (
	snv_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (snv_id, synonym), 
	FOREIGN KEY(snv_id) REFERENCES snv (id)
);
CREATE TABLE snv_category (
	snv_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (snv_id, category), 
	FOREIGN KEY(snv_id) REFERENCES snv (id)
);
CREATE TABLE snv_type (
	snv_id TEXT, 
	type TEXT, 
	PRIMARY KEY (snv_id, type), 
	FOREIGN KEY(snv_id) REFERENCES snv (id)
);
CREATE TABLE "reagent targeted gene_provided_by" (
	"reagent targeted gene_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("reagent targeted gene_id", provided_by), 
	FOREIGN KEY("reagent targeted gene_id") REFERENCES "reagent targeted gene" (id)
);
CREATE TABLE "reagent targeted gene_xref" (
	"reagent targeted gene_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("reagent targeted gene_id", xref), 
	FOREIGN KEY("reagent targeted gene_id") REFERENCES "reagent targeted gene" (id)
);
CREATE TABLE "reagent targeted gene_synonym" (
	"reagent targeted gene_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("reagent targeted gene_id", synonym), 
	FOREIGN KEY("reagent targeted gene_id") REFERENCES "reagent targeted gene" (id)
);
CREATE TABLE "reagent targeted gene_category" (
	"reagent targeted gene_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("reagent targeted gene_id", category), 
	FOREIGN KEY("reagent targeted gene_id") REFERENCES "reagent targeted gene" (id)
);
CREATE TABLE "reagent targeted gene_type" (
	"reagent targeted gene_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("reagent targeted gene_id", type), 
	FOREIGN KEY("reagent targeted gene_id") REFERENCES "reagent targeted gene" (id)
);
CREATE TABLE "clinical entity_provided_by" (
	"clinical entity_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("clinical entity_id", provided_by), 
	FOREIGN KEY("clinical entity_id") REFERENCES "clinical entity" (id)
);
CREATE TABLE "clinical entity_xref" (
	"clinical entity_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("clinical entity_id", xref), 
	FOREIGN KEY("clinical entity_id") REFERENCES "clinical entity" (id)
);
CREATE TABLE "clinical entity_synonym" (
	"clinical entity_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("clinical entity_id", synonym), 
	FOREIGN KEY("clinical entity_id") REFERENCES "clinical entity" (id)
);
CREATE TABLE "clinical entity_category" (
	"clinical entity_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("clinical entity_id", category), 
	FOREIGN KEY("clinical entity_id") REFERENCES "clinical entity" (id)
);
CREATE TABLE "clinical entity_type" (
	"clinical entity_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("clinical entity_id", type), 
	FOREIGN KEY("clinical entity_id") REFERENCES "clinical entity" (id)
);
CREATE TABLE "clinical trial_provided_by" (
	"clinical trial_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("clinical trial_id", provided_by), 
	FOREIGN KEY("clinical trial_id") REFERENCES "clinical trial" (id)
);
CREATE TABLE "clinical trial_xref" (
	"clinical trial_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("clinical trial_id", xref), 
	FOREIGN KEY("clinical trial_id") REFERENCES "clinical trial" (id)
);
CREATE TABLE "clinical trial_synonym" (
	"clinical trial_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("clinical trial_id", synonym), 
	FOREIGN KEY("clinical trial_id") REFERENCES "clinical trial" (id)
);
CREATE TABLE "clinical trial_category" (
	"clinical trial_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("clinical trial_id", category), 
	FOREIGN KEY("clinical trial_id") REFERENCES "clinical trial" (id)
);
CREATE TABLE "clinical trial_type" (
	"clinical trial_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("clinical trial_id", type), 
	FOREIGN KEY("clinical trial_id") REFERENCES "clinical trial" (id)
);
CREATE TABLE "clinical intervention_provided_by" (
	"clinical intervention_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("clinical intervention_id", provided_by), 
	FOREIGN KEY("clinical intervention_id") REFERENCES "clinical intervention" (id)
);
CREATE TABLE "clinical intervention_xref" (
	"clinical intervention_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("clinical intervention_id", xref), 
	FOREIGN KEY("clinical intervention_id") REFERENCES "clinical intervention" (id)
);
CREATE TABLE "clinical intervention_synonym" (
	"clinical intervention_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("clinical intervention_id", synonym), 
	FOREIGN KEY("clinical intervention_id") REFERENCES "clinical intervention" (id)
);
CREATE TABLE "clinical intervention_category" (
	"clinical intervention_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("clinical intervention_id", category), 
	FOREIGN KEY("clinical intervention_id") REFERENCES "clinical intervention" (id)
);
CREATE TABLE "clinical intervention_type" (
	"clinical intervention_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("clinical intervention_id", type), 
	FOREIGN KEY("clinical intervention_id") REFERENCES "clinical intervention" (id)
);
CREATE TABLE "clinical finding_provided_by" (
	"clinical finding_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("clinical finding_id", provided_by), 
	FOREIGN KEY("clinical finding_id") REFERENCES "clinical finding" (id)
);
CREATE TABLE "clinical finding_xref" (
	"clinical finding_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("clinical finding_id", xref), 
	FOREIGN KEY("clinical finding_id") REFERENCES "clinical finding" (id)
);
CREATE TABLE "clinical finding_synonym" (
	"clinical finding_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("clinical finding_id", synonym), 
	FOREIGN KEY("clinical finding_id") REFERENCES "clinical finding" (id)
);
CREATE TABLE "clinical finding_category" (
	"clinical finding_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("clinical finding_id", category), 
	FOREIGN KEY("clinical finding_id") REFERENCES "clinical finding" (id)
);
CREATE TABLE "clinical finding_type" (
	"clinical finding_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("clinical finding_id", type), 
	FOREIGN KEY("clinical finding_id") REFERENCES "clinical finding" (id)
);
CREATE TABLE hospitalization_provided_by (
	hospitalization_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (hospitalization_id, provided_by), 
	FOREIGN KEY(hospitalization_id) REFERENCES hospitalization (id)
);
CREATE TABLE hospitalization_xref (
	hospitalization_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (hospitalization_id, xref), 
	FOREIGN KEY(hospitalization_id) REFERENCES hospitalization (id)
);
CREATE TABLE hospitalization_synonym (
	hospitalization_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (hospitalization_id, synonym), 
	FOREIGN KEY(hospitalization_id) REFERENCES hospitalization (id)
);
CREATE TABLE hospitalization_category (
	hospitalization_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (hospitalization_id, category), 
	FOREIGN KEY(hospitalization_id) REFERENCES hospitalization (id)
);
CREATE TABLE hospitalization_type (
	hospitalization_id TEXT, 
	type TEXT, 
	PRIMARY KEY (hospitalization_id, type), 
	FOREIGN KEY(hospitalization_id) REFERENCES hospitalization (id)
);
CREATE TABLE case_provided_by (
	case_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (case_id, provided_by), 
	FOREIGN KEY(case_id) REFERENCES "case" (id)
);
CREATE TABLE case_xref (
	case_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (case_id, xref), 
	FOREIGN KEY(case_id) REFERENCES "case" (id)
);
CREATE TABLE case_synonym (
	case_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (case_id, synonym), 
	FOREIGN KEY(case_id) REFERENCES "case" (id)
);
CREATE TABLE case_category (
	case_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (case_id, category), 
	FOREIGN KEY(case_id) REFERENCES "case" (id)
);
CREATE TABLE case_type (
	case_id TEXT, 
	type TEXT, 
	PRIMARY KEY (case_id, type), 
	FOREIGN KEY(case_id) REFERENCES "case" (id)
);
CREATE TABLE cohort_provided_by (
	cohort_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (cohort_id, provided_by), 
	FOREIGN KEY(cohort_id) REFERENCES cohort (id)
);
CREATE TABLE cohort_xref (
	cohort_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (cohort_id, xref), 
	FOREIGN KEY(cohort_id) REFERENCES cohort (id)
);
CREATE TABLE cohort_synonym (
	cohort_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (cohort_id, synonym), 
	FOREIGN KEY(cohort_id) REFERENCES cohort (id)
);
CREATE TABLE cohort_category (
	cohort_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (cohort_id, category), 
	FOREIGN KEY(cohort_id) REFERENCES cohort (id)
);
CREATE TABLE cohort_type (
	cohort_id TEXT, 
	type TEXT, 
	PRIMARY KEY (cohort_id, type), 
	FOREIGN KEY(cohort_id) REFERENCES cohort (id)
);
CREATE TABLE "pathological process_has_input" (
	"pathological process_id" TEXT, 
	has_input_id TEXT, 
	PRIMARY KEY ("pathological process_id", has_input_id), 
	FOREIGN KEY("pathological process_id") REFERENCES "pathological process" (id), 
	FOREIGN KEY(has_input_id) REFERENCES "named thing" (id)
);
CREATE TABLE "pathological process_has_output" (
	"pathological process_id" TEXT, 
	has_output_id TEXT, 
	PRIMARY KEY ("pathological process_id", has_output_id), 
	FOREIGN KEY("pathological process_id") REFERENCES "pathological process" (id), 
	FOREIGN KEY(has_output_id) REFERENCES "named thing" (id)
);
CREATE TABLE "pathological process_enabled_by" (
	"pathological process_id" TEXT, 
	enabled_by_id TEXT, 
	PRIMARY KEY ("pathological process_id", enabled_by_id), 
	FOREIGN KEY("pathological process_id") REFERENCES "pathological process" (id), 
	FOREIGN KEY(enabled_by_id) REFERENCES "physical entity" (id)
);
CREATE TABLE "pathological process_provided_by" (
	"pathological process_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("pathological process_id", provided_by), 
	FOREIGN KEY("pathological process_id") REFERENCES "pathological process" (id)
);
CREATE TABLE "pathological process_xref" (
	"pathological process_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("pathological process_id", xref), 
	FOREIGN KEY("pathological process_id") REFERENCES "pathological process" (id)
);
CREATE TABLE "pathological process_synonym" (
	"pathological process_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("pathological process_id", synonym), 
	FOREIGN KEY("pathological process_id") REFERENCES "pathological process" (id)
);
CREATE TABLE "pathological process_category" (
	"pathological process_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("pathological process_id", category), 
	FOREIGN KEY("pathological process_id") REFERENCES "pathological process" (id)
);
CREATE TABLE "pathological process_type" (
	"pathological process_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("pathological process_id", type), 
	FOREIGN KEY("pathological process_id") REFERENCES "pathological process" (id)
);
CREATE TABLE "pathological anatomical structure_provided_by" (
	"pathological anatomical structure_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("pathological anatomical structure_id", provided_by), 
	FOREIGN KEY("pathological anatomical structure_id") REFERENCES "pathological anatomical structure" (id)
);
CREATE TABLE "pathological anatomical structure_xref" (
	"pathological anatomical structure_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("pathological anatomical structure_id", xref), 
	FOREIGN KEY("pathological anatomical structure_id") REFERENCES "pathological anatomical structure" (id)
);
CREATE TABLE "pathological anatomical structure_synonym" (
	"pathological anatomical structure_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("pathological anatomical structure_id", synonym), 
	FOREIGN KEY("pathological anatomical structure_id") REFERENCES "pathological anatomical structure" (id)
);
CREATE TABLE "pathological anatomical structure_category" (
	"pathological anatomical structure_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("pathological anatomical structure_id", category), 
	FOREIGN KEY("pathological anatomical structure_id") REFERENCES "pathological anatomical structure" (id)
);
CREATE TABLE "pathological anatomical structure_type" (
	"pathological anatomical structure_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("pathological anatomical structure_id", type), 
	FOREIGN KEY("pathological anatomical structure_id") REFERENCES "pathological anatomical structure" (id)
);
CREATE TABLE treatment_has_device (
	treatment_id TEXT, 
	has_device_id TEXT, 
	PRIMARY KEY (treatment_id, has_device_id), 
	FOREIGN KEY(treatment_id) REFERENCES treatment (id), 
	FOREIGN KEY(has_device_id) REFERENCES device (id)
);
CREATE TABLE treatment_has_procedure (
	treatment_id TEXT, 
	has_procedure_id TEXT, 
	PRIMARY KEY (treatment_id, has_procedure_id), 
	FOREIGN KEY(treatment_id) REFERENCES treatment (id), 
	FOREIGN KEY(has_procedure_id) REFERENCES procedure (id)
);
CREATE TABLE treatment_provided_by (
	treatment_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (treatment_id, provided_by), 
	FOREIGN KEY(treatment_id) REFERENCES treatment (id)
);
CREATE TABLE treatment_xref (
	treatment_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (treatment_id, xref), 
	FOREIGN KEY(treatment_id) REFERENCES treatment (id)
);
CREATE TABLE treatment_synonym (
	treatment_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (treatment_id, synonym), 
	FOREIGN KEY(treatment_id) REFERENCES treatment (id)
);
CREATE TABLE treatment_category (
	treatment_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (treatment_id, category), 
	FOREIGN KEY(treatment_id) REFERENCES treatment (id)
);
CREATE TABLE treatment_type (
	treatment_id TEXT, 
	type TEXT, 
	PRIMARY KEY (treatment_id, type), 
	FOREIGN KEY(treatment_id) REFERENCES treatment (id)
);
CREATE TABLE "predicate mapping" (
	id INTEGER NOT NULL, 
	mapped_predicate TEXT, 
	subject_aspect_qualifier TEXT, 
	subject_direction_qualifier VARCHAR(13), 
	subject_form_or_variant_qualifier TEXT, 
	subject_part_qualifier TEXT, 
	subject_derivative_qualifier TEXT, 
	subject_context_qualifier TEXT, 
	predicate TEXT NOT NULL, 
	qualified_predicate TEXT, 
	object_aspect_qualifier TEXT, 
	object_direction_qualifier VARCHAR(13), 
	object_form_or_variant_qualifier TEXT, 
	object_part_qualifier TEXT, 
	object_derivative_qualifier TEXT, 
	object_context_qualifier TEXT, 
	causal_mechanism_qualifier VARCHAR(30), 
	anatomical_context_qualifier TEXT, 
	species_context_qualifier TEXT, 
	"mapping collection_id" TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(species_context_qualifier) REFERENCES "organism taxon" (id), 
	FOREIGN KEY("mapping collection_id") REFERENCES "mapping collection" (id)
);
CREATE TABLE "molecular mixture" (
	is_supplement TEXT, 
	"highest_FDA_approval_status" TEXT, 
	drug_regulatory_status_world_wide TEXT, 
	trade_name TEXT, 
	max_tolerated_dose TEXT, 
	is_toxic BOOLEAN, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(is_supplement) REFERENCES "chemical mixture" (id), 
	FOREIGN KEY(trade_name) REFERENCES "chemical entity" (id)
);
CREATE TABLE "complex molecular mixture" (
	is_supplement TEXT, 
	"highest_FDA_approval_status" TEXT, 
	drug_regulatory_status_world_wide TEXT, 
	trade_name TEXT, 
	max_tolerated_dose TEXT, 
	is_toxic BOOLEAN, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(is_supplement) REFERENCES "chemical mixture" (id), 
	FOREIGN KEY(trade_name) REFERENCES "chemical entity" (id)
);
CREATE TABLE "processed material" (
	is_supplement TEXT, 
	"highest_FDA_approval_status" TEXT, 
	drug_regulatory_status_world_wide TEXT, 
	trade_name TEXT, 
	max_tolerated_dose TEXT, 
	is_toxic BOOLEAN, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(is_supplement) REFERENCES "chemical mixture" (id), 
	FOREIGN KEY(trade_name) REFERENCES "chemical entity" (id)
);
CREATE TABLE drug (
	id TEXT NOT NULL, 
	is_supplement TEXT, 
	"highest_FDA_approval_status" TEXT, 
	drug_regulatory_status_world_wide TEXT, 
	trade_name TEXT, 
	max_tolerated_dose TEXT, 
	is_toxic BOOLEAN, 
	full_name TEXT, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(is_supplement) REFERENCES "chemical mixture" (id), 
	FOREIGN KEY(trade_name) REFERENCES "chemical entity" (id)
);
CREATE TABLE food (
	is_supplement TEXT, 
	"highest_FDA_approval_status" TEXT, 
	drug_regulatory_status_world_wide TEXT, 
	trade_name TEXT, 
	max_tolerated_dose TEXT, 
	is_toxic BOOLEAN, 
	full_name TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(is_supplement) REFERENCES "chemical mixture" (id), 
	FOREIGN KEY(trade_name) REFERENCES "chemical entity" (id)
);
CREATE TABLE genotype (
	has_zygosity TEXT, 
	has_biological_sequence TEXT, 
	id TEXT NOT NULL, 
	in_taxon_label TEXT, 
	full_name TEXT, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(has_zygosity) REFERENCES zygosity (id)
);
CREATE TABLE "pairwise molecular interaction" (
	interacting_molecules_category TEXT, 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(interacting_molecules_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(subject) REFERENCES "molecular entity" (id), 
	FOREIGN KEY(object) REFERENCES "molecular entity" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "reaction to participant association" (
	stoichiometry INTEGER, 
	reaction_direction VARCHAR(13), 
	reaction_side VARCHAR(5), 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "molecular entity" (id), 
	FOREIGN KEY(object) REFERENCES "chemical entity" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "reaction to catalyst association" (
	stoichiometry INTEGER, 
	reaction_direction VARCHAR(13), 
	reaction_side VARCHAR(5), 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	object_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "molecular entity" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_id) REFERENCES "gene or gene product" (id)
);
CREATE TABLE "chemical affects gene association" (
	subject_form_or_variant_qualifier VARCHAR(29), 
	subject_part_qualifier VARCHAR(11), 
	subject_derivative_qualifier VARCHAR(10), 
	subject_aspect_qualifier VARCHAR(22), 
	subject_context_qualifier TEXT, 
	subject_direction_qualifier VARCHAR(13), 
	object_form_or_variant_qualifier VARCHAR(29), 
	object_part_qualifier VARCHAR(11), 
	object_aspect_qualifier VARCHAR(22), 
	object_context_qualifier TEXT, 
	object_direction_qualifier VARCHAR(13), 
	causal_mechanism_qualifier VARCHAR(30), 
	anatomical_context_qualifier TEXT, 
	qualified_predicate TEXT, 
	species_context_qualifier TEXT, 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	object_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject_context_qualifier) REFERENCES "anatomical entity" (id), 
	FOREIGN KEY(object_context_qualifier) REFERENCES "anatomical entity" (id), 
	FOREIGN KEY(anatomical_context_qualifier) REFERENCES "anatomical entity" (id), 
	FOREIGN KEY(species_context_qualifier) REFERENCES "organism taxon" (id), 
	FOREIGN KEY(subject) REFERENCES "chemical entity" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_id) REFERENCES "gene or gene product" (id)
);
CREATE TABLE "gene affects chemical association" (
	subject_form_or_variant_qualifier VARCHAR(29), 
	subject_part_qualifier VARCHAR(11), 
	subject_derivative_qualifier TEXT, 
	subject_aspect_qualifier VARCHAR(22), 
	subject_context_qualifier TEXT, 
	subject_direction_qualifier VARCHAR(13), 
	object_form_or_variant_qualifier VARCHAR(29), 
	object_part_qualifier VARCHAR(11), 
	object_aspect_qualifier VARCHAR(22), 
	object_context_qualifier TEXT, 
	object_direction_qualifier VARCHAR(13), 
	object_derivative_qualifier VARCHAR(10), 
	causal_mechanism_qualifier VARCHAR(30), 
	anatomical_context_qualifier TEXT, 
	qualified_predicate TEXT, 
	species_context_qualifier TEXT, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	subject_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject_context_qualifier) REFERENCES "anatomical entity" (id), 
	FOREIGN KEY(object_context_qualifier) REFERENCES "anatomical entity" (id), 
	FOREIGN KEY(anatomical_context_qualifier) REFERENCES "anatomical entity" (id), 
	FOREIGN KEY(species_context_qualifier) REFERENCES "organism taxon" (id), 
	FOREIGN KEY(object) REFERENCES "chemical entity" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(subject_id) REFERENCES "gene or gene product" (id)
);
CREATE TABLE "entity to phenotypic feature association mixin" (
	id INTEGER NOT NULL, 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	sex_qualifier TEXT, 
	has_count INTEGER, 
	has_total INTEGER, 
	has_quotient FLOAT, 
	has_percentage FLOAT, 
	subject_aspect_qualifier TEXT, 
	subject_direction_qualifier VARCHAR(13), 
	object_aspect_qualifier TEXT, 
	object_direction_qualifier VARCHAR(13), 
	qualified_predicate TEXT, 
	frequency_qualifier TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "named thing" (id), 
	FOREIGN KEY(object) REFERENCES "phenotypic feature" (id), 
	FOREIGN KEY(sex_qualifier) REFERENCES "biological sex" (id)
);
CREATE TABLE "phenotypic feature to entity association mixin" (
	id INTEGER NOT NULL, 
	sex_qualifier TEXT, 
	has_count INTEGER, 
	has_total INTEGER, 
	has_quotient FLOAT, 
	has_percentage FLOAT, 
	subject_aspect_qualifier TEXT, 
	subject_direction_qualifier VARCHAR(13), 
	object_aspect_qualifier TEXT, 
	object_direction_qualifier VARCHAR(13), 
	qualified_predicate TEXT, 
	frequency_qualifier TEXT, 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(sex_qualifier) REFERENCES "biological sex" (id), 
	FOREIGN KEY(subject) REFERENCES "phenotypic feature" (id), 
	FOREIGN KEY(object) REFERENCES "named thing" (id)
);
CREATE TABLE "exposure event to phenotypic feature association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	sex_qualifier TEXT, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	has_count INTEGER, 
	has_total INTEGER, 
	has_quotient FLOAT, 
	has_percentage FLOAT, 
	subject_aspect_qualifier TEXT, 
	subject_direction_qualifier VARCHAR(13), 
	object_aspect_qualifier TEXT, 
	object_direction_qualifier VARCHAR(13), 
	qualified_predicate TEXT, 
	frequency_qualifier TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "exposure event" (id), 
	FOREIGN KEY(object) REFERENCES "phenotypic feature" (id), 
	FOREIGN KEY(sex_qualifier) REFERENCES "biological sex" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "disease to phenotypic feature association" (
	has_count INTEGER, 
	has_total INTEGER, 
	has_quotient FLOAT, 
	has_percentage FLOAT, 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	sex_qualifier TEXT, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	subject_aspect_qualifier TEXT, 
	subject_direction_qualifier VARCHAR(13), 
	object_aspect_qualifier TEXT, 
	object_direction_qualifier VARCHAR(13), 
	qualified_predicate TEXT, 
	frequency_qualifier TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES disease (id), 
	FOREIGN KEY(object) REFERENCES "phenotypic feature" (id), 
	FOREIGN KEY(sex_qualifier) REFERENCES "biological sex" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "case to phenotypic feature association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	sex_qualifier TEXT, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	has_count INTEGER, 
	has_total INTEGER, 
	has_quotient FLOAT, 
	has_percentage FLOAT, 
	subject_aspect_qualifier TEXT, 
	subject_direction_qualifier VARCHAR(13), 
	object_aspect_qualifier TEXT, 
	object_direction_qualifier VARCHAR(13), 
	qualified_predicate TEXT, 
	frequency_qualifier TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "case" (id), 
	FOREIGN KEY(object) REFERENCES "phenotypic feature" (id), 
	FOREIGN KEY(sex_qualifier) REFERENCES "biological sex" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "behavior to behavioral feature association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	sex_qualifier TEXT, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	has_count INTEGER, 
	has_total INTEGER, 
	has_quotient FLOAT, 
	has_percentage FLOAT, 
	subject_aspect_qualifier TEXT, 
	subject_direction_qualifier VARCHAR(13), 
	object_aspect_qualifier TEXT, 
	object_direction_qualifier VARCHAR(13), 
	qualified_predicate TEXT, 
	frequency_qualifier TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES behavior (id), 
	FOREIGN KEY(object) REFERENCES "behavioral feature" (id), 
	FOREIGN KEY(sex_qualifier) REFERENCES "biological sex" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to disease or phenotypic feature association" (
	subject_aspect_qualifier VARCHAR(22), 
	object_direction_qualifier VARCHAR(13), 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	sex_qualifier TEXT, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	has_count INTEGER, 
	has_total INTEGER, 
	has_quotient FLOAT, 
	has_percentage FLOAT, 
	subject_direction_qualifier VARCHAR(13), 
	object_aspect_qualifier TEXT, 
	qualified_predicate TEXT, 
	frequency_qualifier TEXT, 
	subject_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(object) REFERENCES "disease or phenotypic feature" (id), 
	FOREIGN KEY(sex_qualifier) REFERENCES "biological sex" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(subject_id) REFERENCES "gene or gene product" (id)
);
CREATE TABLE "gene to phenotypic feature association" (
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	sex_qualifier TEXT, 
	subject_aspect_qualifier VARCHAR(22), 
	object_direction_qualifier VARCHAR(13), 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	has_count INTEGER, 
	has_total INTEGER, 
	has_quotient FLOAT, 
	has_percentage FLOAT, 
	subject_direction_qualifier VARCHAR(13), 
	object_aspect_qualifier TEXT, 
	qualified_predicate TEXT, 
	frequency_qualifier TEXT, 
	subject_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(object) REFERENCES "phenotypic feature" (id), 
	FOREIGN KEY(sex_qualifier) REFERENCES "biological sex" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(subject_id) REFERENCES "gene or gene product" (id)
);
CREATE TABLE "gene to disease association" (
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	subject_aspect_qualifier VARCHAR(22), 
	object_direction_qualifier VARCHAR(13), 
	sex_qualifier TEXT, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	has_count INTEGER, 
	has_total INTEGER, 
	has_quotient FLOAT, 
	has_percentage FLOAT, 
	subject_direction_qualifier VARCHAR(13), 
	object_aspect_qualifier TEXT, 
	qualified_predicate TEXT, 
	frequency_qualifier TEXT, 
	subject_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(object) REFERENCES disease (id), 
	FOREIGN KEY(sex_qualifier) REFERENCES "biological sex" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(subject_id) REFERENCES "gene or gene product" (id)
);
CREATE TABLE "causal gene to disease association" (
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	subject_aspect_qualifier VARCHAR(22), 
	object_direction_qualifier VARCHAR(13), 
	sex_qualifier TEXT, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	has_count INTEGER, 
	has_total INTEGER, 
	has_quotient FLOAT, 
	has_percentage FLOAT, 
	subject_direction_qualifier VARCHAR(13), 
	object_aspect_qualifier TEXT, 
	qualified_predicate TEXT, 
	frequency_qualifier TEXT, 
	subject_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(object) REFERENCES disease (id), 
	FOREIGN KEY(sex_qualifier) REFERENCES "biological sex" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(subject_id) REFERENCES "gene or gene product" (id)
);
CREATE TABLE "correlated gene to disease association" (
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	subject_aspect_qualifier VARCHAR(22), 
	object_direction_qualifier VARCHAR(13), 
	sex_qualifier TEXT, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	has_count INTEGER, 
	has_total INTEGER, 
	has_quotient FLOAT, 
	has_percentage FLOAT, 
	subject_direction_qualifier VARCHAR(13), 
	object_aspect_qualifier TEXT, 
	qualified_predicate TEXT, 
	frequency_qualifier TEXT, 
	subject_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(object) REFERENCES disease (id), 
	FOREIGN KEY(sex_qualifier) REFERENCES "biological sex" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(subject_id) REFERENCES "gene or gene product" (id)
);
CREATE TABLE "druggable gene to disease association" (
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	subject_aspect_qualifier VARCHAR(22), 
	object_direction_qualifier VARCHAR(13), 
	sex_qualifier TEXT, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	has_count INTEGER, 
	has_total INTEGER, 
	has_quotient FLOAT, 
	has_percentage FLOAT, 
	subject_direction_qualifier VARCHAR(13), 
	object_aspect_qualifier TEXT, 
	qualified_predicate TEXT, 
	frequency_qualifier TEXT, 
	subject_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(object) REFERENCES disease (id), 
	FOREIGN KEY(sex_qualifier) REFERENCES "biological sex" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(subject_id) REFERENCES "gene or gene product" (id)
);
CREATE TABLE "phenotypic feature to disease association" (
	sex_qualifier TEXT, 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	has_count INTEGER, 
	has_total INTEGER, 
	has_quotient FLOAT, 
	has_percentage FLOAT, 
	subject_aspect_qualifier TEXT, 
	subject_direction_qualifier VARCHAR(13), 
	object_aspect_qualifier TEXT, 
	object_direction_qualifier VARCHAR(13), 
	qualified_predicate TEXT, 
	frequency_qualifier TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(sex_qualifier) REFERENCES "biological sex" (id), 
	FOREIGN KEY(subject) REFERENCES "phenotypic feature" (id), 
	FOREIGN KEY(object) REFERENCES disease (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "variant to phenotypic feature association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	sex_qualifier TEXT, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	has_count INTEGER, 
	has_total INTEGER, 
	has_quotient FLOAT, 
	has_percentage FLOAT, 
	subject_aspect_qualifier TEXT, 
	subject_direction_qualifier VARCHAR(13), 
	object_aspect_qualifier TEXT, 
	object_direction_qualifier VARCHAR(13), 
	qualified_predicate TEXT, 
	frequency_qualifier TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "sequence variant" (id), 
	FOREIGN KEY(object) REFERENCES "phenotypic feature" (id), 
	FOREIGN KEY(sex_qualifier) REFERENCES "biological sex" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene as a model of disease association" (
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	subject_aspect_qualifier VARCHAR(22), 
	object_direction_qualifier VARCHAR(13), 
	sex_qualifier TEXT, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	has_count INTEGER, 
	has_total INTEGER, 
	has_quotient FLOAT, 
	has_percentage FLOAT, 
	subject_direction_qualifier VARCHAR(13), 
	object_aspect_qualifier TEXT, 
	qualified_predicate TEXT, 
	frequency_qualifier TEXT, 
	subject_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(object) REFERENCES disease (id), 
	FOREIGN KEY(sex_qualifier) REFERENCES "biological sex" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(subject_id) REFERENCES "gene or gene product" (id)
);
CREATE TABLE "taxon to taxon association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "organism taxon" (id), 
	FOREIGN KEY(object) REFERENCES "organism taxon" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene has variant that contributes to disease association" (
	subject_form_or_variant_qualifier TEXT, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	subject_aspect_qualifier VARCHAR(22), 
	object_direction_qualifier VARCHAR(13), 
	sex_qualifier TEXT, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	has_count INTEGER, 
	has_total INTEGER, 
	has_quotient FLOAT, 
	has_percentage FLOAT, 
	subject_direction_qualifier VARCHAR(13), 
	object_aspect_qualifier TEXT, 
	qualified_predicate TEXT, 
	frequency_qualifier TEXT, 
	subject_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(object) REFERENCES disease (id), 
	FOREIGN KEY(sex_qualifier) REFERENCES "biological sex" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(subject_id) REFERENCES "gene or gene product" (id)
);
CREATE TABLE "genomic sequence localization" (
	start_interbase_coordinate INTEGER, 
	end_interbase_coordinate INTEGER, 
	genome_build VARCHAR(1), 
	strand VARCHAR(1), 
	phase VARCHAR(1), 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "nucleic acid entity" (id), 
	FOREIGN KEY(object) REFERENCES "nucleic acid entity" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "sequence feature relationship" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "nucleic acid entity" (id), 
	FOREIGN KEY(object) REFERENCES "nucleic acid entity" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "organism taxon to entity association" (
	id INTEGER NOT NULL, 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "organism taxon" (id), 
	FOREIGN KEY(object) REFERENCES "named thing" (id)
);
CREATE TABLE "organism taxon to organism taxon association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "organism taxon" (id), 
	FOREIGN KEY(object) REFERENCES "organism taxon" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "organism taxon to organism taxon specialization" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "organism taxon" (id), 
	FOREIGN KEY(object) REFERENCES "organism taxon" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "organism taxon to organism taxon interaction" (
	associated_environmental_context TEXT, 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "organism taxon" (id), 
	FOREIGN KEY(object) REFERENCES "organism taxon" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "organism taxon to environment association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES "organism taxon" (id), 
	FOREIGN KEY(object) REFERENCES "named thing" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE attribute_has_quantitative_value (
	attribute_id TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY (attribute_id, has_quantitative_value_id), 
	FOREIGN KEY(attribute_id) REFERENCES attribute (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE attribute_provided_by (
	attribute_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (attribute_id, provided_by), 
	FOREIGN KEY(attribute_id) REFERENCES attribute (id)
);
CREATE TABLE attribute_xref (
	attribute_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (attribute_id, xref), 
	FOREIGN KEY(attribute_id) REFERENCES attribute (id)
);
CREATE TABLE attribute_synonym (
	attribute_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (attribute_id, synonym), 
	FOREIGN KEY(attribute_id) REFERENCES attribute (id)
);
CREATE TABLE attribute_category (
	attribute_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (attribute_id, category), 
	FOREIGN KEY(attribute_id) REFERENCES attribute (id)
);
CREATE TABLE attribute_type (
	attribute_id TEXT, 
	type TEXT, 
	PRIMARY KEY (attribute_id, type), 
	FOREIGN KEY(attribute_id) REFERENCES attribute (id)
);
CREATE TABLE attribute_has_attribute (
	attribute_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (attribute_id, has_attribute_id), 
	FOREIGN KEY(attribute_id) REFERENCES attribute (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "chemical role_has_quantitative_value" (
	"chemical role_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("chemical role_id", has_quantitative_value_id), 
	FOREIGN KEY("chemical role_id") REFERENCES "chemical role" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "chemical role_provided_by" (
	"chemical role_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("chemical role_id", provided_by), 
	FOREIGN KEY("chemical role_id") REFERENCES "chemical role" (id)
);
CREATE TABLE "chemical role_xref" (
	"chemical role_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("chemical role_id", xref), 
	FOREIGN KEY("chemical role_id") REFERENCES "chemical role" (id)
);
CREATE TABLE "chemical role_synonym" (
	"chemical role_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("chemical role_id", synonym), 
	FOREIGN KEY("chemical role_id") REFERENCES "chemical role" (id)
);
CREATE TABLE "chemical role_category" (
	"chemical role_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("chemical role_id", category), 
	FOREIGN KEY("chemical role_id") REFERENCES "chemical role" (id)
);
CREATE TABLE "chemical role_type" (
	"chemical role_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("chemical role_id", type), 
	FOREIGN KEY("chemical role_id") REFERENCES "chemical role" (id)
);
CREATE TABLE "chemical role_has_attribute" (
	"chemical role_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("chemical role_id", has_attribute_id), 
	FOREIGN KEY("chemical role_id") REFERENCES "chemical role" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "biological sex_has_quantitative_value" (
	"biological sex_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("biological sex_id", has_quantitative_value_id), 
	FOREIGN KEY("biological sex_id") REFERENCES "biological sex" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "biological sex_provided_by" (
	"biological sex_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("biological sex_id", provided_by), 
	FOREIGN KEY("biological sex_id") REFERENCES "biological sex" (id)
);
CREATE TABLE "biological sex_xref" (
	"biological sex_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("biological sex_id", xref), 
	FOREIGN KEY("biological sex_id") REFERENCES "biological sex" (id)
);
CREATE TABLE "biological sex_synonym" (
	"biological sex_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("biological sex_id", synonym), 
	FOREIGN KEY("biological sex_id") REFERENCES "biological sex" (id)
);
CREATE TABLE "biological sex_category" (
	"biological sex_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("biological sex_id", category), 
	FOREIGN KEY("biological sex_id") REFERENCES "biological sex" (id)
);
CREATE TABLE "biological sex_type" (
	"biological sex_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("biological sex_id", type), 
	FOREIGN KEY("biological sex_id") REFERENCES "biological sex" (id)
);
CREATE TABLE "biological sex_has_attribute" (
	"biological sex_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("biological sex_id", has_attribute_id), 
	FOREIGN KEY("biological sex_id") REFERENCES "biological sex" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "phenotypic sex_has_quantitative_value" (
	"phenotypic sex_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("phenotypic sex_id", has_quantitative_value_id), 
	FOREIGN KEY("phenotypic sex_id") REFERENCES "phenotypic sex" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "phenotypic sex_provided_by" (
	"phenotypic sex_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("phenotypic sex_id", provided_by), 
	FOREIGN KEY("phenotypic sex_id") REFERENCES "phenotypic sex" (id)
);
CREATE TABLE "phenotypic sex_xref" (
	"phenotypic sex_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("phenotypic sex_id", xref), 
	FOREIGN KEY("phenotypic sex_id") REFERENCES "phenotypic sex" (id)
);
CREATE TABLE "phenotypic sex_synonym" (
	"phenotypic sex_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("phenotypic sex_id", synonym), 
	FOREIGN KEY("phenotypic sex_id") REFERENCES "phenotypic sex" (id)
);
CREATE TABLE "phenotypic sex_category" (
	"phenotypic sex_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("phenotypic sex_id", category), 
	FOREIGN KEY("phenotypic sex_id") REFERENCES "phenotypic sex" (id)
);
CREATE TABLE "phenotypic sex_type" (
	"phenotypic sex_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("phenotypic sex_id", type), 
	FOREIGN KEY("phenotypic sex_id") REFERENCES "phenotypic sex" (id)
);
CREATE TABLE "phenotypic sex_has_attribute" (
	"phenotypic sex_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("phenotypic sex_id", has_attribute_id), 
	FOREIGN KEY("phenotypic sex_id") REFERENCES "phenotypic sex" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "genotypic sex_has_quantitative_value" (
	"genotypic sex_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("genotypic sex_id", has_quantitative_value_id), 
	FOREIGN KEY("genotypic sex_id") REFERENCES "genotypic sex" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "genotypic sex_provided_by" (
	"genotypic sex_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("genotypic sex_id", provided_by), 
	FOREIGN KEY("genotypic sex_id") REFERENCES "genotypic sex" (id)
);
CREATE TABLE "genotypic sex_xref" (
	"genotypic sex_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("genotypic sex_id", xref), 
	FOREIGN KEY("genotypic sex_id") REFERENCES "genotypic sex" (id)
);
CREATE TABLE "genotypic sex_synonym" (
	"genotypic sex_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("genotypic sex_id", synonym), 
	FOREIGN KEY("genotypic sex_id") REFERENCES "genotypic sex" (id)
);
CREATE TABLE "genotypic sex_category" (
	"genotypic sex_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("genotypic sex_id", category), 
	FOREIGN KEY("genotypic sex_id") REFERENCES "genotypic sex" (id)
);
CREATE TABLE "genotypic sex_type" (
	"genotypic sex_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("genotypic sex_id", type), 
	FOREIGN KEY("genotypic sex_id") REFERENCES "genotypic sex" (id)
);
CREATE TABLE "genotypic sex_has_attribute" (
	"genotypic sex_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("genotypic sex_id", has_attribute_id), 
	FOREIGN KEY("genotypic sex_id") REFERENCES "genotypic sex" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "severity value_has_quantitative_value" (
	"severity value_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("severity value_id", has_quantitative_value_id), 
	FOREIGN KEY("severity value_id") REFERENCES "severity value" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "severity value_provided_by" (
	"severity value_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("severity value_id", provided_by), 
	FOREIGN KEY("severity value_id") REFERENCES "severity value" (id)
);
CREATE TABLE "severity value_xref" (
	"severity value_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("severity value_id", xref), 
	FOREIGN KEY("severity value_id") REFERENCES "severity value" (id)
);
CREATE TABLE "severity value_synonym" (
	"severity value_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("severity value_id", synonym), 
	FOREIGN KEY("severity value_id") REFERENCES "severity value" (id)
);
CREATE TABLE "severity value_category" (
	"severity value_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("severity value_id", category), 
	FOREIGN KEY("severity value_id") REFERENCES "severity value" (id)
);
CREATE TABLE "severity value_type" (
	"severity value_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("severity value_id", type), 
	FOREIGN KEY("severity value_id") REFERENCES "severity value" (id)
);
CREATE TABLE "severity value_has_attribute" (
	"severity value_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("severity value_id", has_attribute_id), 
	FOREIGN KEY("severity value_id") REFERENCES "severity value" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE entity_has_attribute (
	entity_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (entity_id, has_attribute_id), 
	FOREIGN KEY(entity_id) REFERENCES entity (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "named thing_has_attribute" (
	"named thing_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("named thing_id", has_attribute_id), 
	FOREIGN KEY("named thing_id") REFERENCES "named thing" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "organism taxon_provided_by" (
	"organism taxon_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("organism taxon_id", provided_by), 
	FOREIGN KEY("organism taxon_id") REFERENCES "organism taxon" (id)
);
CREATE TABLE "organism taxon_xref" (
	"organism taxon_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("organism taxon_id", xref), 
	FOREIGN KEY("organism taxon_id") REFERENCES "organism taxon" (id)
);
CREATE TABLE "organism taxon_synonym" (
	"organism taxon_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("organism taxon_id", synonym), 
	FOREIGN KEY("organism taxon_id") REFERENCES "organism taxon" (id)
);
CREATE TABLE "organism taxon_category" (
	"organism taxon_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("organism taxon_id", category), 
	FOREIGN KEY("organism taxon_id") REFERENCES "organism taxon" (id)
);
CREATE TABLE "organism taxon_type" (
	"organism taxon_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("organism taxon_id", type), 
	FOREIGN KEY("organism taxon_id") REFERENCES "organism taxon" (id)
);
CREATE TABLE "organism taxon_has_attribute" (
	"organism taxon_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("organism taxon_id", has_attribute_id), 
	FOREIGN KEY("organism taxon_id") REFERENCES "organism taxon" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE event_has_attribute (
	event_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (event_id, has_attribute_id), 
	FOREIGN KEY(event_id) REFERENCES event (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "administrative entity_has_attribute" (
	"administrative entity_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("administrative entity_id", has_attribute_id), 
	FOREIGN KEY("administrative entity_id") REFERENCES "administrative entity" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "study result_has_attribute" (
	"study result_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("study result_id", has_attribute_id), 
	FOREIGN KEY("study result_id") REFERENCES "study result" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE study_has_attribute (
	study_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (study_id, has_attribute_id), 
	FOREIGN KEY(study_id) REFERENCES study (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "study variable_has_attribute" (
	"study variable_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("study variable_id", has_attribute_id), 
	FOREIGN KEY("study variable_id") REFERENCES "study variable" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "common data element_has_attribute" (
	"common data element_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("common data element_id", has_attribute_id), 
	FOREIGN KEY("common data element_id") REFERENCES "common data element" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "concept count analysis result_has_attribute" (
	"concept count analysis result_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("concept count analysis result_id", has_attribute_id), 
	FOREIGN KEY("concept count analysis result_id") REFERENCES "concept count analysis result" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "observed expected frequency analysis result_has_attribute" (
	"observed expected frequency analysis result_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("observed expected frequency analysis result_id", has_attribute_id), 
	FOREIGN KEY("observed expected frequency analysis result_id") REFERENCES "observed expected frequency analysis result" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "relative frequency analysis result_has_attribute" (
	"relative frequency analysis result_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("relative frequency analysis result_id", has_attribute_id), 
	FOREIGN KEY("relative frequency analysis result_id") REFERENCES "relative frequency analysis result" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "text mining result_has_attribute" (
	"text mining result_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("text mining result_id", has_attribute_id), 
	FOREIGN KEY("text mining result_id") REFERENCES "text mining result" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "chi squared analysis result_has_attribute" (
	"chi squared analysis result_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("chi squared analysis result_id", has_attribute_id), 
	FOREIGN KEY("chi squared analysis result_id") REFERENCES "chi squared analysis result" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "log odds analysis result_has_attribute" (
	"log odds analysis result_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("log odds analysis result_id", has_attribute_id), 
	FOREIGN KEY("log odds analysis result_id") REFERENCES "log odds analysis result" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE agent_has_attribute (
	agent_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (agent_id, has_attribute_id), 
	FOREIGN KEY(agent_id) REFERENCES agent (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "information content entity_has_attribute" (
	"information content entity_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("information content entity_id", has_attribute_id), 
	FOREIGN KEY("information content entity_id") REFERENCES "information content entity" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE dataset_has_attribute (
	dataset_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (dataset_id, has_attribute_id), 
	FOREIGN KEY(dataset_id) REFERENCES dataset (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "dataset distribution_has_attribute" (
	"dataset distribution_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("dataset distribution_id", has_attribute_id), 
	FOREIGN KEY("dataset distribution_id") REFERENCES "dataset distribution" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "dataset version_provided_by" (
	"dataset version_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("dataset version_id", provided_by), 
	FOREIGN KEY("dataset version_id") REFERENCES "dataset version" (id)
);
CREATE TABLE "dataset version_xref" (
	"dataset version_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("dataset version_id", xref), 
	FOREIGN KEY("dataset version_id") REFERENCES "dataset version" (id)
);
CREATE TABLE "dataset version_synonym" (
	"dataset version_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("dataset version_id", synonym), 
	FOREIGN KEY("dataset version_id") REFERENCES "dataset version" (id)
);
CREATE TABLE "dataset version_category" (
	"dataset version_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("dataset version_id", category), 
	FOREIGN KEY("dataset version_id") REFERENCES "dataset version" (id)
);
CREATE TABLE "dataset version_type" (
	"dataset version_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("dataset version_id", type), 
	FOREIGN KEY("dataset version_id") REFERENCES "dataset version" (id)
);
CREATE TABLE "dataset version_has_attribute" (
	"dataset version_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("dataset version_id", has_attribute_id), 
	FOREIGN KEY("dataset version_id") REFERENCES "dataset version" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "dataset summary_has_attribute" (
	"dataset summary_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("dataset summary_id", has_attribute_id), 
	FOREIGN KEY("dataset summary_id") REFERENCES "dataset summary" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "confidence level_has_attribute" (
	"confidence level_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("confidence level_id", has_attribute_id), 
	FOREIGN KEY("confidence level_id") REFERENCES "confidence level" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "evidence type_has_attribute" (
	"evidence type_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("evidence type_id", has_attribute_id), 
	FOREIGN KEY("evidence type_id") REFERENCES "evidence type" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE publication_has_attribute (
	publication_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (publication_id, has_attribute_id), 
	FOREIGN KEY(publication_id) REFERENCES publication (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE book_has_attribute (
	book_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (book_id, has_attribute_id), 
	FOREIGN KEY(book_id) REFERENCES book (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "book chapter_has_attribute" (
	"book chapter_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("book chapter_id", has_attribute_id), 
	FOREIGN KEY("book chapter_id") REFERENCES "book chapter" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE serial_has_attribute (
	serial_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (serial_id, has_attribute_id), 
	FOREIGN KEY(serial_id) REFERENCES serial (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE article_has_attribute (
	article_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (article_id, has_attribute_id), 
	FOREIGN KEY(article_id) REFERENCES article (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "journal article_has_attribute" (
	"journal article_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("journal article_id", has_attribute_id), 
	FOREIGN KEY("journal article_id") REFERENCES "journal article" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE patent_has_attribute (
	patent_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (patent_id, has_attribute_id), 
	FOREIGN KEY(patent_id) REFERENCES patent (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "web page_has_attribute" (
	"web page_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("web page_id", has_attribute_id), 
	FOREIGN KEY("web page_id") REFERENCES "web page" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "preprint publication_has_attribute" (
	"preprint publication_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("preprint publication_id", has_attribute_id), 
	FOREIGN KEY("preprint publication_id") REFERENCES "preprint publication" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "drug label_has_attribute" (
	"drug label_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("drug label_id", has_attribute_id), 
	FOREIGN KEY("drug label_id") REFERENCES "drug label" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "retrieval source_has_attribute" (
	"retrieval source_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("retrieval source_id", has_attribute_id), 
	FOREIGN KEY("retrieval source_id") REFERENCES "retrieval source" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "physical entity_has_attribute" (
	"physical entity_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("physical entity_id", has_attribute_id), 
	FOREIGN KEY("physical entity_id") REFERENCES "physical entity" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE activity_has_attribute (
	activity_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (activity_id, has_attribute_id), 
	FOREIGN KEY(activity_id) REFERENCES activity (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE procedure_has_attribute (
	procedure_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (procedure_id, has_attribute_id), 
	FOREIGN KEY(procedure_id) REFERENCES procedure (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE phenomenon_has_attribute (
	phenomenon_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (phenomenon_id, has_attribute_id), 
	FOREIGN KEY(phenomenon_id) REFERENCES phenomenon (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE device_has_attribute (
	device_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (device_id, has_attribute_id), 
	FOREIGN KEY(device_id) REFERENCES device (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "diagnostic aid_has_attribute" (
	"diagnostic aid_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("diagnostic aid_id", has_attribute_id), 
	FOREIGN KEY("diagnostic aid_id") REFERENCES "diagnostic aid" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "study population_in_taxon" (
	"study population_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("study population_id", in_taxon_id), 
	FOREIGN KEY("study population_id") REFERENCES "study population" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "study population_has_attribute" (
	"study population_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("study population_id", has_attribute_id), 
	FOREIGN KEY("study population_id") REFERENCES "study population" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "material sample_has_attribute" (
	"material sample_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("material sample_id", has_attribute_id), 
	FOREIGN KEY("material sample_id") REFERENCES "material sample" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "planetary entity_has_attribute" (
	"planetary entity_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("planetary entity_id", has_attribute_id), 
	FOREIGN KEY("planetary entity_id") REFERENCES "planetary entity" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "environmental process_has_attribute" (
	"environmental process_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("environmental process_id", has_attribute_id), 
	FOREIGN KEY("environmental process_id") REFERENCES "environmental process" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "environmental feature_has_attribute" (
	"environmental feature_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("environmental feature_id", has_attribute_id), 
	FOREIGN KEY("environmental feature_id") REFERENCES "environmental feature" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "geographic location_has_attribute" (
	"geographic location_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("geographic location_id", has_attribute_id), 
	FOREIGN KEY("geographic location_id") REFERENCES "geographic location" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "geographic location at time_has_attribute" (
	"geographic location at time_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("geographic location at time_id", has_attribute_id), 
	FOREIGN KEY("geographic location at time_id") REFERENCES "geographic location at time" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "thing with taxon_in_taxon" (
	"thing with taxon_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("thing with taxon_id", in_taxon_id), 
	FOREIGN KEY("thing with taxon_id") REFERENCES "thing with taxon" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "biological entity_in_taxon" (
	"biological entity_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("biological entity_id", in_taxon_id), 
	FOREIGN KEY("biological entity_id") REFERENCES "biological entity" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "biological entity_has_attribute" (
	"biological entity_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("biological entity_id", has_attribute_id), 
	FOREIGN KEY("biological entity_id") REFERENCES "biological entity" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "molecular entity_available_from" (
	"molecular entity_id" TEXT, 
	available_from VARCHAR(16), 
	PRIMARY KEY ("molecular entity_id", available_from), 
	FOREIGN KEY("molecular entity_id") REFERENCES "molecular entity" (id)
);
CREATE TABLE "molecular entity_has_chemical_role" (
	"molecular entity_id" TEXT, 
	has_chemical_role_id TEXT, 
	PRIMARY KEY ("molecular entity_id", has_chemical_role_id), 
	FOREIGN KEY("molecular entity_id") REFERENCES "molecular entity" (id), 
	FOREIGN KEY(has_chemical_role_id) REFERENCES "chemical role" (id)
);
CREATE TABLE "molecular entity_provided_by" (
	"molecular entity_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("molecular entity_id", provided_by), 
	FOREIGN KEY("molecular entity_id") REFERENCES "molecular entity" (id)
);
CREATE TABLE "molecular entity_xref" (
	"molecular entity_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("molecular entity_id", xref), 
	FOREIGN KEY("molecular entity_id") REFERENCES "molecular entity" (id)
);
CREATE TABLE "molecular entity_synonym" (
	"molecular entity_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("molecular entity_id", synonym), 
	FOREIGN KEY("molecular entity_id") REFERENCES "molecular entity" (id)
);
CREATE TABLE "molecular entity_category" (
	"molecular entity_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("molecular entity_id", category), 
	FOREIGN KEY("molecular entity_id") REFERENCES "molecular entity" (id)
);
CREATE TABLE "molecular entity_type" (
	"molecular entity_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("molecular entity_id", type), 
	FOREIGN KEY("molecular entity_id") REFERENCES "molecular entity" (id)
);
CREATE TABLE "molecular entity_has_attribute" (
	"molecular entity_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("molecular entity_id", has_attribute_id), 
	FOREIGN KEY("molecular entity_id") REFERENCES "molecular entity" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "chemical entity_has_chemical_role" (
	"chemical entity_id" TEXT, 
	has_chemical_role_id TEXT, 
	PRIMARY KEY ("chemical entity_id", has_chemical_role_id), 
	FOREIGN KEY("chemical entity_id") REFERENCES "chemical entity" (id), 
	FOREIGN KEY(has_chemical_role_id) REFERENCES "chemical role" (id)
);
CREATE TABLE "chemical entity_has_attribute" (
	"chemical entity_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("chemical entity_id", has_attribute_id), 
	FOREIGN KEY("chemical entity_id") REFERENCES "chemical entity" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "small molecule_available_from" (
	"small molecule_id" TEXT, 
	available_from VARCHAR(16), 
	PRIMARY KEY ("small molecule_id", available_from), 
	FOREIGN KEY("small molecule_id") REFERENCES "small molecule" (id)
);
CREATE TABLE "small molecule_has_chemical_role" (
	"small molecule_id" TEXT, 
	has_chemical_role_id TEXT, 
	PRIMARY KEY ("small molecule_id", has_chemical_role_id), 
	FOREIGN KEY("small molecule_id") REFERENCES "small molecule" (id), 
	FOREIGN KEY(has_chemical_role_id) REFERENCES "chemical role" (id)
);
CREATE TABLE "small molecule_provided_by" (
	"small molecule_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("small molecule_id", provided_by), 
	FOREIGN KEY("small molecule_id") REFERENCES "small molecule" (id)
);
CREATE TABLE "small molecule_xref" (
	"small molecule_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("small molecule_id", xref), 
	FOREIGN KEY("small molecule_id") REFERENCES "small molecule" (id)
);
CREATE TABLE "small molecule_synonym" (
	"small molecule_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("small molecule_id", synonym), 
	FOREIGN KEY("small molecule_id") REFERENCES "small molecule" (id)
);
CREATE TABLE "small molecule_category" (
	"small molecule_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("small molecule_id", category), 
	FOREIGN KEY("small molecule_id") REFERENCES "small molecule" (id)
);
CREATE TABLE "small molecule_type" (
	"small molecule_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("small molecule_id", type), 
	FOREIGN KEY("small molecule_id") REFERENCES "small molecule" (id)
);
CREATE TABLE "small molecule_has_attribute" (
	"small molecule_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("small molecule_id", has_attribute_id), 
	FOREIGN KEY("small molecule_id") REFERENCES "small molecule" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "chemical mixture_routes_of_delivery" (
	"chemical mixture_id" TEXT, 
	routes_of_delivery VARCHAR(27), 
	PRIMARY KEY ("chemical mixture_id", routes_of_delivery), 
	FOREIGN KEY("chemical mixture_id") REFERENCES "chemical mixture" (id)
);
CREATE TABLE "chemical mixture_available_from" (
	"chemical mixture_id" TEXT, 
	available_from VARCHAR(16), 
	PRIMARY KEY ("chemical mixture_id", available_from), 
	FOREIGN KEY("chemical mixture_id") REFERENCES "chemical mixture" (id)
);
CREATE TABLE "chemical mixture_has_chemical_role" (
	"chemical mixture_id" TEXT, 
	has_chemical_role_id TEXT, 
	PRIMARY KEY ("chemical mixture_id", has_chemical_role_id), 
	FOREIGN KEY("chemical mixture_id") REFERENCES "chemical mixture" (id), 
	FOREIGN KEY(has_chemical_role_id) REFERENCES "chemical role" (id)
);
CREATE TABLE "chemical mixture_provided_by" (
	"chemical mixture_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("chemical mixture_id", provided_by), 
	FOREIGN KEY("chemical mixture_id") REFERENCES "chemical mixture" (id)
);
CREATE TABLE "chemical mixture_xref" (
	"chemical mixture_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("chemical mixture_id", xref), 
	FOREIGN KEY("chemical mixture_id") REFERENCES "chemical mixture" (id)
);
CREATE TABLE "chemical mixture_synonym" (
	"chemical mixture_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("chemical mixture_id", synonym), 
	FOREIGN KEY("chemical mixture_id") REFERENCES "chemical mixture" (id)
);
CREATE TABLE "chemical mixture_category" (
	"chemical mixture_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("chemical mixture_id", category), 
	FOREIGN KEY("chemical mixture_id") REFERENCES "chemical mixture" (id)
);
CREATE TABLE "chemical mixture_type" (
	"chemical mixture_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("chemical mixture_id", type), 
	FOREIGN KEY("chemical mixture_id") REFERENCES "chemical mixture" (id)
);
CREATE TABLE "chemical mixture_has_attribute" (
	"chemical mixture_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("chemical mixture_id", has_attribute_id), 
	FOREIGN KEY("chemical mixture_id") REFERENCES "chemical mixture" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "nucleic acid entity_in_taxon" (
	"nucleic acid entity_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("nucleic acid entity_id", in_taxon_id), 
	FOREIGN KEY("nucleic acid entity_id") REFERENCES "nucleic acid entity" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "nucleic acid entity_available_from" (
	"nucleic acid entity_id" TEXT, 
	available_from VARCHAR(16), 
	PRIMARY KEY ("nucleic acid entity_id", available_from), 
	FOREIGN KEY("nucleic acid entity_id") REFERENCES "nucleic acid entity" (id)
);
CREATE TABLE "nucleic acid entity_has_chemical_role" (
	"nucleic acid entity_id" TEXT, 
	has_chemical_role_id TEXT, 
	PRIMARY KEY ("nucleic acid entity_id", has_chemical_role_id), 
	FOREIGN KEY("nucleic acid entity_id") REFERENCES "nucleic acid entity" (id), 
	FOREIGN KEY(has_chemical_role_id) REFERENCES "chemical role" (id)
);
CREATE TABLE "nucleic acid entity_provided_by" (
	"nucleic acid entity_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("nucleic acid entity_id", provided_by), 
	FOREIGN KEY("nucleic acid entity_id") REFERENCES "nucleic acid entity" (id)
);
CREATE TABLE "nucleic acid entity_xref" (
	"nucleic acid entity_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("nucleic acid entity_id", xref), 
	FOREIGN KEY("nucleic acid entity_id") REFERENCES "nucleic acid entity" (id)
);
CREATE TABLE "nucleic acid entity_synonym" (
	"nucleic acid entity_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("nucleic acid entity_id", synonym), 
	FOREIGN KEY("nucleic acid entity_id") REFERENCES "nucleic acid entity" (id)
);
CREATE TABLE "nucleic acid entity_category" (
	"nucleic acid entity_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("nucleic acid entity_id", category), 
	FOREIGN KEY("nucleic acid entity_id") REFERENCES "nucleic acid entity" (id)
);
CREATE TABLE "nucleic acid entity_type" (
	"nucleic acid entity_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("nucleic acid entity_id", type), 
	FOREIGN KEY("nucleic acid entity_id") REFERENCES "nucleic acid entity" (id)
);
CREATE TABLE "nucleic acid entity_has_attribute" (
	"nucleic acid entity_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("nucleic acid entity_id", has_attribute_id), 
	FOREIGN KEY("nucleic acid entity_id") REFERENCES "nucleic acid entity" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "regulatory region_in_taxon" (
	"regulatory region_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("regulatory region_id", in_taxon_id), 
	FOREIGN KEY("regulatory region_id") REFERENCES "regulatory region" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "regulatory region_has_attribute" (
	"regulatory region_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("regulatory region_id", has_attribute_id), 
	FOREIGN KEY("regulatory region_id") REFERENCES "regulatory region" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "accessible dna region_in_taxon" (
	"accessible dna region_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("accessible dna region_id", in_taxon_id), 
	FOREIGN KEY("accessible dna region_id") REFERENCES "accessible dna region" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "accessible dna region_has_attribute" (
	"accessible dna region_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("accessible dna region_id", has_attribute_id), 
	FOREIGN KEY("accessible dna region_id") REFERENCES "accessible dna region" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "transcription factor binding site_in_taxon" (
	"transcription factor binding site_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("transcription factor binding site_id", in_taxon_id), 
	FOREIGN KEY("transcription factor binding site_id") REFERENCES "transcription factor binding site" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "transcription factor binding site_has_attribute" (
	"transcription factor binding site_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("transcription factor binding site_id", has_attribute_id), 
	FOREIGN KEY("transcription factor binding site_id") REFERENCES "transcription factor binding site" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "biological process or activity_in_taxon" (
	"biological process or activity_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("biological process or activity_id", in_taxon_id), 
	FOREIGN KEY("biological process or activity_id") REFERENCES "biological process or activity" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "biological process or activity_has_attribute" (
	"biological process or activity_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("biological process or activity_id", has_attribute_id), 
	FOREIGN KEY("biological process or activity_id") REFERENCES "biological process or activity" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "molecular activity_has_input" (
	"molecular activity_id" TEXT, 
	has_input_id TEXT, 
	PRIMARY KEY ("molecular activity_id", has_input_id), 
	FOREIGN KEY("molecular activity_id") REFERENCES "molecular activity" (id), 
	FOREIGN KEY(has_input_id) REFERENCES "molecular entity" (id)
);
CREATE TABLE "molecular activity_has_output" (
	"molecular activity_id" TEXT, 
	has_output_id TEXT, 
	PRIMARY KEY ("molecular activity_id", has_output_id), 
	FOREIGN KEY("molecular activity_id") REFERENCES "molecular activity" (id), 
	FOREIGN KEY(has_output_id) REFERENCES "molecular entity" (id)
);
CREATE TABLE "molecular activity_in_taxon" (
	"molecular activity_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("molecular activity_id", in_taxon_id), 
	FOREIGN KEY("molecular activity_id") REFERENCES "molecular activity" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "molecular activity_has_attribute" (
	"molecular activity_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("molecular activity_id", has_attribute_id), 
	FOREIGN KEY("molecular activity_id") REFERENCES "molecular activity" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "biological process_in_taxon" (
	"biological process_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("biological process_id", in_taxon_id), 
	FOREIGN KEY("biological process_id") REFERENCES "biological process" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "biological process_has_attribute" (
	"biological process_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("biological process_id", has_attribute_id), 
	FOREIGN KEY("biological process_id") REFERENCES "biological process" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE pathway_in_taxon (
	pathway_id TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY (pathway_id, in_taxon_id), 
	FOREIGN KEY(pathway_id) REFERENCES pathway (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE pathway_has_attribute (
	pathway_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (pathway_id, has_attribute_id), 
	FOREIGN KEY(pathway_id) REFERENCES pathway (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "physiological process_in_taxon" (
	"physiological process_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("physiological process_id", in_taxon_id), 
	FOREIGN KEY("physiological process_id") REFERENCES "physiological process" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "physiological process_has_attribute" (
	"physiological process_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("physiological process_id", has_attribute_id), 
	FOREIGN KEY("physiological process_id") REFERENCES "physiological process" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE behavior_in_taxon (
	behavior_id TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY (behavior_id, in_taxon_id), 
	FOREIGN KEY(behavior_id) REFERENCES behavior (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE behavior_has_attribute (
	behavior_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (behavior_id, has_attribute_id), 
	FOREIGN KEY(behavior_id) REFERENCES behavior (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "environmental food contaminant_available_from" (
	"environmental food contaminant_id" TEXT, 
	available_from VARCHAR(16), 
	PRIMARY KEY ("environmental food contaminant_id", available_from), 
	FOREIGN KEY("environmental food contaminant_id") REFERENCES "environmental food contaminant" (id)
);
CREATE TABLE "environmental food contaminant_has_chemical_role" (
	"environmental food contaminant_id" TEXT, 
	has_chemical_role_id TEXT, 
	PRIMARY KEY ("environmental food contaminant_id", has_chemical_role_id), 
	FOREIGN KEY("environmental food contaminant_id") REFERENCES "environmental food contaminant" (id), 
	FOREIGN KEY(has_chemical_role_id) REFERENCES "chemical role" (id)
);
CREATE TABLE "environmental food contaminant_provided_by" (
	"environmental food contaminant_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("environmental food contaminant_id", provided_by), 
	FOREIGN KEY("environmental food contaminant_id") REFERENCES "environmental food contaminant" (id)
);
CREATE TABLE "environmental food contaminant_xref" (
	"environmental food contaminant_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("environmental food contaminant_id", xref), 
	FOREIGN KEY("environmental food contaminant_id") REFERENCES "environmental food contaminant" (id)
);
CREATE TABLE "environmental food contaminant_synonym" (
	"environmental food contaminant_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("environmental food contaminant_id", synonym), 
	FOREIGN KEY("environmental food contaminant_id") REFERENCES "environmental food contaminant" (id)
);
CREATE TABLE "environmental food contaminant_category" (
	"environmental food contaminant_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("environmental food contaminant_id", category), 
	FOREIGN KEY("environmental food contaminant_id") REFERENCES "environmental food contaminant" (id)
);
CREATE TABLE "environmental food contaminant_type" (
	"environmental food contaminant_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("environmental food contaminant_id", type), 
	FOREIGN KEY("environmental food contaminant_id") REFERENCES "environmental food contaminant" (id)
);
CREATE TABLE "environmental food contaminant_has_attribute" (
	"environmental food contaminant_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("environmental food contaminant_id", has_attribute_id), 
	FOREIGN KEY("environmental food contaminant_id") REFERENCES "environmental food contaminant" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "food additive_available_from" (
	"food additive_id" TEXT, 
	available_from VARCHAR(16), 
	PRIMARY KEY ("food additive_id", available_from), 
	FOREIGN KEY("food additive_id") REFERENCES "food additive" (id)
);
CREATE TABLE "food additive_has_chemical_role" (
	"food additive_id" TEXT, 
	has_chemical_role_id TEXT, 
	PRIMARY KEY ("food additive_id", has_chemical_role_id), 
	FOREIGN KEY("food additive_id") REFERENCES "food additive" (id), 
	FOREIGN KEY(has_chemical_role_id) REFERENCES "chemical role" (id)
);
CREATE TABLE "food additive_provided_by" (
	"food additive_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("food additive_id", provided_by), 
	FOREIGN KEY("food additive_id") REFERENCES "food additive" (id)
);
CREATE TABLE "food additive_xref" (
	"food additive_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("food additive_id", xref), 
	FOREIGN KEY("food additive_id") REFERENCES "food additive" (id)
);
CREATE TABLE "food additive_synonym" (
	"food additive_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("food additive_id", synonym), 
	FOREIGN KEY("food additive_id") REFERENCES "food additive" (id)
);
CREATE TABLE "food additive_category" (
	"food additive_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("food additive_id", category), 
	FOREIGN KEY("food additive_id") REFERENCES "food additive" (id)
);
CREATE TABLE "food additive_type" (
	"food additive_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("food additive_id", type), 
	FOREIGN KEY("food additive_id") REFERENCES "food additive" (id)
);
CREATE TABLE "food additive_has_attribute" (
	"food additive_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("food additive_id", has_attribute_id), 
	FOREIGN KEY("food additive_id") REFERENCES "food additive" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "organism attribute_has_quantitative_value" (
	"organism attribute_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("organism attribute_id", has_quantitative_value_id), 
	FOREIGN KEY("organism attribute_id") REFERENCES "organism attribute" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "organism attribute_provided_by" (
	"organism attribute_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("organism attribute_id", provided_by), 
	FOREIGN KEY("organism attribute_id") REFERENCES "organism attribute" (id)
);
CREATE TABLE "organism attribute_xref" (
	"organism attribute_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("organism attribute_id", xref), 
	FOREIGN KEY("organism attribute_id") REFERENCES "organism attribute" (id)
);
CREATE TABLE "organism attribute_synonym" (
	"organism attribute_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("organism attribute_id", synonym), 
	FOREIGN KEY("organism attribute_id") REFERENCES "organism attribute" (id)
);
CREATE TABLE "organism attribute_category" (
	"organism attribute_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("organism attribute_id", category), 
	FOREIGN KEY("organism attribute_id") REFERENCES "organism attribute" (id)
);
CREATE TABLE "organism attribute_type" (
	"organism attribute_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("organism attribute_id", type), 
	FOREIGN KEY("organism attribute_id") REFERENCES "organism attribute" (id)
);
CREATE TABLE "organism attribute_has_attribute" (
	"organism attribute_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("organism attribute_id", has_attribute_id), 
	FOREIGN KEY("organism attribute_id") REFERENCES "organism attribute" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "phenotypic quality_has_quantitative_value" (
	"phenotypic quality_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("phenotypic quality_id", has_quantitative_value_id), 
	FOREIGN KEY("phenotypic quality_id") REFERENCES "phenotypic quality" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "phenotypic quality_provided_by" (
	"phenotypic quality_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("phenotypic quality_id", provided_by), 
	FOREIGN KEY("phenotypic quality_id") REFERENCES "phenotypic quality" (id)
);
CREATE TABLE "phenotypic quality_xref" (
	"phenotypic quality_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("phenotypic quality_id", xref), 
	FOREIGN KEY("phenotypic quality_id") REFERENCES "phenotypic quality" (id)
);
CREATE TABLE "phenotypic quality_synonym" (
	"phenotypic quality_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("phenotypic quality_id", synonym), 
	FOREIGN KEY("phenotypic quality_id") REFERENCES "phenotypic quality" (id)
);
CREATE TABLE "phenotypic quality_category" (
	"phenotypic quality_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("phenotypic quality_id", category), 
	FOREIGN KEY("phenotypic quality_id") REFERENCES "phenotypic quality" (id)
);
CREATE TABLE "phenotypic quality_type" (
	"phenotypic quality_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("phenotypic quality_id", type), 
	FOREIGN KEY("phenotypic quality_id") REFERENCES "phenotypic quality" (id)
);
CREATE TABLE "phenotypic quality_has_attribute" (
	"phenotypic quality_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("phenotypic quality_id", has_attribute_id), 
	FOREIGN KEY("phenotypic quality_id") REFERENCES "phenotypic quality" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "genetic inheritance_in_taxon" (
	"genetic inheritance_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("genetic inheritance_id", in_taxon_id), 
	FOREIGN KEY("genetic inheritance_id") REFERENCES "genetic inheritance" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "genetic inheritance_has_attribute" (
	"genetic inheritance_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("genetic inheritance_id", has_attribute_id), 
	FOREIGN KEY("genetic inheritance_id") REFERENCES "genetic inheritance" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "organismal entity_in_taxon" (
	"organismal entity_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("organismal entity_id", in_taxon_id), 
	FOREIGN KEY("organismal entity_id") REFERENCES "organismal entity" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "organismal entity_has_attribute" (
	"organismal entity_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("organismal entity_id", has_attribute_id), 
	FOREIGN KEY("organismal entity_id") REFERENCES "organismal entity" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE bacterium_in_taxon (
	bacterium_id TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY (bacterium_id, in_taxon_id), 
	FOREIGN KEY(bacterium_id) REFERENCES bacterium (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE bacterium_has_attribute (
	bacterium_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (bacterium_id, has_attribute_id), 
	FOREIGN KEY(bacterium_id) REFERENCES bacterium (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE virus_in_taxon (
	virus_id TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY (virus_id, in_taxon_id), 
	FOREIGN KEY(virus_id) REFERENCES virus (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE virus_has_attribute (
	virus_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (virus_id, has_attribute_id), 
	FOREIGN KEY(virus_id) REFERENCES virus (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "cellular organism_in_taxon" (
	"cellular organism_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("cellular organism_id", in_taxon_id), 
	FOREIGN KEY("cellular organism_id") REFERENCES "cellular organism" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "cellular organism_has_attribute" (
	"cellular organism_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("cellular organism_id", has_attribute_id), 
	FOREIGN KEY("cellular organism_id") REFERENCES "cellular organism" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE mammal_in_taxon (
	mammal_id TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY (mammal_id, in_taxon_id), 
	FOREIGN KEY(mammal_id) REFERENCES mammal (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE mammal_has_attribute (
	mammal_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (mammal_id, has_attribute_id), 
	FOREIGN KEY(mammal_id) REFERENCES mammal (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE human_in_taxon (
	human_id TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY (human_id, in_taxon_id), 
	FOREIGN KEY(human_id) REFERENCES human (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE human_has_attribute (
	human_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (human_id, has_attribute_id), 
	FOREIGN KEY(human_id) REFERENCES human (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE plant_in_taxon (
	plant_id TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY (plant_id, in_taxon_id), 
	FOREIGN KEY(plant_id) REFERENCES plant (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE plant_has_attribute (
	plant_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (plant_id, has_attribute_id), 
	FOREIGN KEY(plant_id) REFERENCES plant (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE invertebrate_in_taxon (
	invertebrate_id TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY (invertebrate_id, in_taxon_id), 
	FOREIGN KEY(invertebrate_id) REFERENCES invertebrate (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE invertebrate_has_attribute (
	invertebrate_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (invertebrate_id, has_attribute_id), 
	FOREIGN KEY(invertebrate_id) REFERENCES invertebrate (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE vertebrate_in_taxon (
	vertebrate_id TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY (vertebrate_id, in_taxon_id), 
	FOREIGN KEY(vertebrate_id) REFERENCES vertebrate (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE vertebrate_has_attribute (
	vertebrate_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (vertebrate_id, has_attribute_id), 
	FOREIGN KEY(vertebrate_id) REFERENCES vertebrate (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE fungus_in_taxon (
	fungus_id TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY (fungus_id, in_taxon_id), 
	FOREIGN KEY(fungus_id) REFERENCES fungus (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE fungus_has_attribute (
	fungus_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (fungus_id, has_attribute_id), 
	FOREIGN KEY(fungus_id) REFERENCES fungus (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "life stage_in_taxon" (
	"life stage_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("life stage_id", in_taxon_id), 
	FOREIGN KEY("life stage_id") REFERENCES "life stage" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "life stage_has_attribute" (
	"life stage_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("life stage_id", has_attribute_id), 
	FOREIGN KEY("life stage_id") REFERENCES "life stage" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "individual organism_in_taxon" (
	"individual organism_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("individual organism_id", in_taxon_id), 
	FOREIGN KEY("individual organism_id") REFERENCES "individual organism" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "individual organism_has_attribute" (
	"individual organism_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("individual organism_id", has_attribute_id), 
	FOREIGN KEY("individual organism_id") REFERENCES "individual organism" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "population of individual organisms_in_taxon" (
	"population of individual organisms_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("population of individual organisms_id", in_taxon_id), 
	FOREIGN KEY("population of individual organisms_id") REFERENCES "population of individual organisms" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "population of individual organisms_has_attribute" (
	"population of individual organisms_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("population of individual organisms_id", has_attribute_id), 
	FOREIGN KEY("population of individual organisms_id") REFERENCES "population of individual organisms" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "disease or phenotypic feature_in_taxon" (
	"disease or phenotypic feature_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("disease or phenotypic feature_id", in_taxon_id), 
	FOREIGN KEY("disease or phenotypic feature_id") REFERENCES "disease or phenotypic feature" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "disease or phenotypic feature_has_attribute" (
	"disease or phenotypic feature_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("disease or phenotypic feature_id", has_attribute_id), 
	FOREIGN KEY("disease or phenotypic feature_id") REFERENCES "disease or phenotypic feature" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE disease_in_taxon (
	disease_id TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY (disease_id, in_taxon_id), 
	FOREIGN KEY(disease_id) REFERENCES disease (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE disease_has_attribute (
	disease_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (disease_id, has_attribute_id), 
	FOREIGN KEY(disease_id) REFERENCES disease (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "phenotypic feature_in_taxon" (
	"phenotypic feature_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("phenotypic feature_id", in_taxon_id), 
	FOREIGN KEY("phenotypic feature_id") REFERENCES "phenotypic feature" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "phenotypic feature_has_attribute" (
	"phenotypic feature_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("phenotypic feature_id", has_attribute_id), 
	FOREIGN KEY("phenotypic feature_id") REFERENCES "phenotypic feature" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "behavioral feature_in_taxon" (
	"behavioral feature_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("behavioral feature_id", in_taxon_id), 
	FOREIGN KEY("behavioral feature_id") REFERENCES "behavioral feature" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "behavioral feature_has_attribute" (
	"behavioral feature_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("behavioral feature_id", has_attribute_id), 
	FOREIGN KEY("behavioral feature_id") REFERENCES "behavioral feature" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "anatomical entity_in_taxon" (
	"anatomical entity_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("anatomical entity_id", in_taxon_id), 
	FOREIGN KEY("anatomical entity_id") REFERENCES "anatomical entity" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "anatomical entity_has_attribute" (
	"anatomical entity_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("anatomical entity_id", has_attribute_id), 
	FOREIGN KEY("anatomical entity_id") REFERENCES "anatomical entity" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "cellular component_in_taxon" (
	"cellular component_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("cellular component_id", in_taxon_id), 
	FOREIGN KEY("cellular component_id") REFERENCES "cellular component" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "cellular component_has_attribute" (
	"cellular component_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("cellular component_id", has_attribute_id), 
	FOREIGN KEY("cellular component_id") REFERENCES "cellular component" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE cell_in_taxon (
	cell_id TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY (cell_id, in_taxon_id), 
	FOREIGN KEY(cell_id) REFERENCES cell (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE cell_has_attribute (
	cell_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (cell_id, has_attribute_id), 
	FOREIGN KEY(cell_id) REFERENCES cell (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "cell line_in_taxon" (
	"cell line_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("cell line_id", in_taxon_id), 
	FOREIGN KEY("cell line_id") REFERENCES "cell line" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "cell line_has_attribute" (
	"cell line_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("cell line_id", has_attribute_id), 
	FOREIGN KEY("cell line_id") REFERENCES "cell line" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "gross anatomical structure_in_taxon" (
	"gross anatomical structure_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("gross anatomical structure_id", in_taxon_id), 
	FOREIGN KEY("gross anatomical structure_id") REFERENCES "gross anatomical structure" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "gross anatomical structure_has_attribute" (
	"gross anatomical structure_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("gross anatomical structure_id", has_attribute_id), 
	FOREIGN KEY("gross anatomical structure_id") REFERENCES "gross anatomical structure" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE gene_in_taxon (
	gene_id TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY (gene_id, in_taxon_id), 
	FOREIGN KEY(gene_id) REFERENCES gene (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE gene_has_attribute (
	gene_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (gene_id, has_attribute_id), 
	FOREIGN KEY(gene_id) REFERENCES gene (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "macromolecular complex_in_taxon" (
	"macromolecular complex_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("macromolecular complex_id", in_taxon_id), 
	FOREIGN KEY("macromolecular complex_id") REFERENCES "macromolecular complex" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "macromolecular complex_has_attribute" (
	"macromolecular complex_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("macromolecular complex_id", has_attribute_id), 
	FOREIGN KEY("macromolecular complex_id") REFERENCES "macromolecular complex" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "nucleosome modification_in_taxon" (
	"nucleosome modification_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("nucleosome modification_id", in_taxon_id), 
	FOREIGN KEY("nucleosome modification_id") REFERENCES "nucleosome modification" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "nucleosome modification_has_attribute" (
	"nucleosome modification_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("nucleosome modification_id", has_attribute_id), 
	FOREIGN KEY("nucleosome modification_id") REFERENCES "nucleosome modification" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE genome_in_taxon (
	genome_id TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY (genome_id, in_taxon_id), 
	FOREIGN KEY(genome_id) REFERENCES genome (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE genome_has_attribute (
	genome_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (genome_id, has_attribute_id), 
	FOREIGN KEY(genome_id) REFERENCES genome (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE exon_in_taxon (
	exon_id TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY (exon_id, in_taxon_id), 
	FOREIGN KEY(exon_id) REFERENCES exon (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE exon_has_attribute (
	exon_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (exon_id, has_attribute_id), 
	FOREIGN KEY(exon_id) REFERENCES exon (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE transcript_in_taxon (
	transcript_id TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY (transcript_id, in_taxon_id), 
	FOREIGN KEY(transcript_id) REFERENCES transcript (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE transcript_has_attribute (
	transcript_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (transcript_id, has_attribute_id), 
	FOREIGN KEY(transcript_id) REFERENCES transcript (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "coding sequence_in_taxon" (
	"coding sequence_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("coding sequence_id", in_taxon_id), 
	FOREIGN KEY("coding sequence_id") REFERENCES "coding sequence" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "coding sequence_has_attribute" (
	"coding sequence_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("coding sequence_id", has_attribute_id), 
	FOREIGN KEY("coding sequence_id") REFERENCES "coding sequence" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE polypeptide_in_taxon (
	polypeptide_id TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY (polypeptide_id, in_taxon_id), 
	FOREIGN KEY(polypeptide_id) REFERENCES polypeptide (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE polypeptide_has_attribute (
	polypeptide_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (polypeptide_id, has_attribute_id), 
	FOREIGN KEY(polypeptide_id) REFERENCES polypeptide (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE protein_in_taxon (
	protein_id TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY (protein_id, in_taxon_id), 
	FOREIGN KEY(protein_id) REFERENCES protein (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE protein_has_attribute (
	protein_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (protein_id, has_attribute_id), 
	FOREIGN KEY(protein_id) REFERENCES protein (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "protein isoform_in_taxon" (
	"protein isoform_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("protein isoform_id", in_taxon_id), 
	FOREIGN KEY("protein isoform_id") REFERENCES "protein isoform" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "protein isoform_has_attribute" (
	"protein isoform_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("protein isoform_id", has_attribute_id), 
	FOREIGN KEY("protein isoform_id") REFERENCES "protein isoform" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "protein domain_in_taxon" (
	"protein domain_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("protein domain_id", in_taxon_id), 
	FOREIGN KEY("protein domain_id") REFERENCES "protein domain" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "protein domain_has_attribute" (
	"protein domain_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("protein domain_id", has_attribute_id), 
	FOREIGN KEY("protein domain_id") REFERENCES "protein domain" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "posttranslational modification_in_taxon" (
	"posttranslational modification_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("posttranslational modification_id", in_taxon_id), 
	FOREIGN KEY("posttranslational modification_id") REFERENCES "posttranslational modification" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "posttranslational modification_has_attribute" (
	"posttranslational modification_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("posttranslational modification_id", has_attribute_id), 
	FOREIGN KEY("posttranslational modification_id") REFERENCES "posttranslational modification" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "protein family_in_taxon" (
	"protein family_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("protein family_id", in_taxon_id), 
	FOREIGN KEY("protein family_id") REFERENCES "protein family" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "protein family_has_attribute" (
	"protein family_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("protein family_id", has_attribute_id), 
	FOREIGN KEY("protein family_id") REFERENCES "protein family" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "nucleic acid sequence motif_in_taxon" (
	"nucleic acid sequence motif_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("nucleic acid sequence motif_id", in_taxon_id), 
	FOREIGN KEY("nucleic acid sequence motif_id") REFERENCES "nucleic acid sequence motif" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "nucleic acid sequence motif_has_attribute" (
	"nucleic acid sequence motif_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("nucleic acid sequence motif_id", has_attribute_id), 
	FOREIGN KEY("nucleic acid sequence motif_id") REFERENCES "nucleic acid sequence motif" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "RNA product_in_taxon" (
	"RNA product_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("RNA product_id", in_taxon_id), 
	FOREIGN KEY("RNA product_id") REFERENCES "RNA product" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "RNA product_has_attribute" (
	"RNA product_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("RNA product_id", has_attribute_id), 
	FOREIGN KEY("RNA product_id") REFERENCES "RNA product" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "RNA product isoform_in_taxon" (
	"RNA product isoform_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("RNA product isoform_id", in_taxon_id), 
	FOREIGN KEY("RNA product isoform_id") REFERENCES "RNA product isoform" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "RNA product isoform_has_attribute" (
	"RNA product isoform_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("RNA product isoform_id", has_attribute_id), 
	FOREIGN KEY("RNA product isoform_id") REFERENCES "RNA product isoform" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "noncoding RNA product_in_taxon" (
	"noncoding RNA product_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("noncoding RNA product_id", in_taxon_id), 
	FOREIGN KEY("noncoding RNA product_id") REFERENCES "noncoding RNA product" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "noncoding RNA product_has_attribute" (
	"noncoding RNA product_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("noncoding RNA product_id", has_attribute_id), 
	FOREIGN KEY("noncoding RNA product_id") REFERENCES "noncoding RNA product" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "microRNA_in_taxon" (
	"microRNA_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("microRNA_id", in_taxon_id), 
	FOREIGN KEY("microRNA_id") REFERENCES "microRNA" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "microRNA_has_attribute" (
	"microRNA_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("microRNA_id", has_attribute_id), 
	FOREIGN KEY("microRNA_id") REFERENCES "microRNA" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "siRNA_in_taxon" (
	"siRNA_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("siRNA_id", in_taxon_id), 
	FOREIGN KEY("siRNA_id") REFERENCES "siRNA" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "siRNA_has_attribute" (
	"siRNA_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("siRNA_id", has_attribute_id), 
	FOREIGN KEY("siRNA_id") REFERENCES "siRNA" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "gene family_in_taxon" (
	"gene family_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("gene family_id", in_taxon_id), 
	FOREIGN KEY("gene family_id") REFERENCES "gene family" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "gene family_has_attribute" (
	"gene family_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("gene family_id", has_attribute_id), 
	FOREIGN KEY("gene family_id") REFERENCES "gene family" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE zygosity_has_quantitative_value (
	zygosity_id TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY (zygosity_id, has_quantitative_value_id), 
	FOREIGN KEY(zygosity_id) REFERENCES zygosity (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE zygosity_provided_by (
	zygosity_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (zygosity_id, provided_by), 
	FOREIGN KEY(zygosity_id) REFERENCES zygosity (id)
);
CREATE TABLE zygosity_xref (
	zygosity_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (zygosity_id, xref), 
	FOREIGN KEY(zygosity_id) REFERENCES zygosity (id)
);
CREATE TABLE zygosity_synonym (
	zygosity_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (zygosity_id, synonym), 
	FOREIGN KEY(zygosity_id) REFERENCES zygosity (id)
);
CREATE TABLE zygosity_category (
	zygosity_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (zygosity_id, category), 
	FOREIGN KEY(zygosity_id) REFERENCES zygosity (id)
);
CREATE TABLE zygosity_type (
	zygosity_id TEXT, 
	type TEXT, 
	PRIMARY KEY (zygosity_id, type), 
	FOREIGN KEY(zygosity_id) REFERENCES zygosity (id)
);
CREATE TABLE zygosity_has_attribute (
	zygosity_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (zygosity_id, has_attribute_id), 
	FOREIGN KEY(zygosity_id) REFERENCES zygosity (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE haplotype_in_taxon (
	haplotype_id TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY (haplotype_id, in_taxon_id), 
	FOREIGN KEY(haplotype_id) REFERENCES haplotype (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE haplotype_has_attribute (
	haplotype_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (haplotype_id, has_attribute_id), 
	FOREIGN KEY(haplotype_id) REFERENCES haplotype (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "sequence variant_in_taxon" (
	"sequence variant_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("sequence variant_id", in_taxon_id), 
	FOREIGN KEY("sequence variant_id") REFERENCES "sequence variant" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "sequence variant_has_attribute" (
	"sequence variant_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("sequence variant_id", has_attribute_id), 
	FOREIGN KEY("sequence variant_id") REFERENCES "sequence variant" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE snv_in_taxon (
	snv_id TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY (snv_id, in_taxon_id), 
	FOREIGN KEY(snv_id) REFERENCES snv (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE snv_has_attribute (
	snv_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (snv_id, has_attribute_id), 
	FOREIGN KEY(snv_id) REFERENCES snv (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "reagent targeted gene_in_taxon" (
	"reagent targeted gene_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("reagent targeted gene_id", in_taxon_id), 
	FOREIGN KEY("reagent targeted gene_id") REFERENCES "reagent targeted gene" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "reagent targeted gene_has_attribute" (
	"reagent targeted gene_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("reagent targeted gene_id", has_attribute_id), 
	FOREIGN KEY("reagent targeted gene_id") REFERENCES "reagent targeted gene" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "clinical attribute_has_quantitative_value" (
	"clinical attribute_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("clinical attribute_id", has_quantitative_value_id), 
	FOREIGN KEY("clinical attribute_id") REFERENCES "clinical attribute" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "clinical attribute_provided_by" (
	"clinical attribute_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("clinical attribute_id", provided_by), 
	FOREIGN KEY("clinical attribute_id") REFERENCES "clinical attribute" (id)
);
CREATE TABLE "clinical attribute_xref" (
	"clinical attribute_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("clinical attribute_id", xref), 
	FOREIGN KEY("clinical attribute_id") REFERENCES "clinical attribute" (id)
);
CREATE TABLE "clinical attribute_synonym" (
	"clinical attribute_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("clinical attribute_id", synonym), 
	FOREIGN KEY("clinical attribute_id") REFERENCES "clinical attribute" (id)
);
CREATE TABLE "clinical attribute_category" (
	"clinical attribute_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("clinical attribute_id", category), 
	FOREIGN KEY("clinical attribute_id") REFERENCES "clinical attribute" (id)
);
CREATE TABLE "clinical attribute_type" (
	"clinical attribute_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("clinical attribute_id", type), 
	FOREIGN KEY("clinical attribute_id") REFERENCES "clinical attribute" (id)
);
CREATE TABLE "clinical attribute_has_attribute" (
	"clinical attribute_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("clinical attribute_id", has_attribute_id), 
	FOREIGN KEY("clinical attribute_id") REFERENCES "clinical attribute" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "clinical measurement_has_quantitative_value" (
	"clinical measurement_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("clinical measurement_id", has_quantitative_value_id), 
	FOREIGN KEY("clinical measurement_id") REFERENCES "clinical measurement" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "clinical measurement_provided_by" (
	"clinical measurement_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("clinical measurement_id", provided_by), 
	FOREIGN KEY("clinical measurement_id") REFERENCES "clinical measurement" (id)
);
CREATE TABLE "clinical measurement_xref" (
	"clinical measurement_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("clinical measurement_id", xref), 
	FOREIGN KEY("clinical measurement_id") REFERENCES "clinical measurement" (id)
);
CREATE TABLE "clinical measurement_synonym" (
	"clinical measurement_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("clinical measurement_id", synonym), 
	FOREIGN KEY("clinical measurement_id") REFERENCES "clinical measurement" (id)
);
CREATE TABLE "clinical measurement_category" (
	"clinical measurement_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("clinical measurement_id", category), 
	FOREIGN KEY("clinical measurement_id") REFERENCES "clinical measurement" (id)
);
CREATE TABLE "clinical measurement_type" (
	"clinical measurement_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("clinical measurement_id", type), 
	FOREIGN KEY("clinical measurement_id") REFERENCES "clinical measurement" (id)
);
CREATE TABLE "clinical measurement_has_attribute" (
	"clinical measurement_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("clinical measurement_id", has_attribute_id), 
	FOREIGN KEY("clinical measurement_id") REFERENCES "clinical measurement" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "clinical modifier_has_quantitative_value" (
	"clinical modifier_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("clinical modifier_id", has_quantitative_value_id), 
	FOREIGN KEY("clinical modifier_id") REFERENCES "clinical modifier" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "clinical modifier_provided_by" (
	"clinical modifier_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("clinical modifier_id", provided_by), 
	FOREIGN KEY("clinical modifier_id") REFERENCES "clinical modifier" (id)
);
CREATE TABLE "clinical modifier_xref" (
	"clinical modifier_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("clinical modifier_id", xref), 
	FOREIGN KEY("clinical modifier_id") REFERENCES "clinical modifier" (id)
);
CREATE TABLE "clinical modifier_synonym" (
	"clinical modifier_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("clinical modifier_id", synonym), 
	FOREIGN KEY("clinical modifier_id") REFERENCES "clinical modifier" (id)
);
CREATE TABLE "clinical modifier_category" (
	"clinical modifier_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("clinical modifier_id", category), 
	FOREIGN KEY("clinical modifier_id") REFERENCES "clinical modifier" (id)
);
CREATE TABLE "clinical modifier_type" (
	"clinical modifier_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("clinical modifier_id", type), 
	FOREIGN KEY("clinical modifier_id") REFERENCES "clinical modifier" (id)
);
CREATE TABLE "clinical modifier_has_attribute" (
	"clinical modifier_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("clinical modifier_id", has_attribute_id), 
	FOREIGN KEY("clinical modifier_id") REFERENCES "clinical modifier" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "clinical course_has_quantitative_value" (
	"clinical course_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("clinical course_id", has_quantitative_value_id), 
	FOREIGN KEY("clinical course_id") REFERENCES "clinical course" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "clinical course_provided_by" (
	"clinical course_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("clinical course_id", provided_by), 
	FOREIGN KEY("clinical course_id") REFERENCES "clinical course" (id)
);
CREATE TABLE "clinical course_xref" (
	"clinical course_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("clinical course_id", xref), 
	FOREIGN KEY("clinical course_id") REFERENCES "clinical course" (id)
);
CREATE TABLE "clinical course_synonym" (
	"clinical course_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("clinical course_id", synonym), 
	FOREIGN KEY("clinical course_id") REFERENCES "clinical course" (id)
);
CREATE TABLE "clinical course_category" (
	"clinical course_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("clinical course_id", category), 
	FOREIGN KEY("clinical course_id") REFERENCES "clinical course" (id)
);
CREATE TABLE "clinical course_type" (
	"clinical course_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("clinical course_id", type), 
	FOREIGN KEY("clinical course_id") REFERENCES "clinical course" (id)
);
CREATE TABLE "clinical course_has_attribute" (
	"clinical course_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("clinical course_id", has_attribute_id), 
	FOREIGN KEY("clinical course_id") REFERENCES "clinical course" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE onset_has_quantitative_value (
	onset_id TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY (onset_id, has_quantitative_value_id), 
	FOREIGN KEY(onset_id) REFERENCES onset (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE onset_provided_by (
	onset_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (onset_id, provided_by), 
	FOREIGN KEY(onset_id) REFERENCES onset (id)
);
CREATE TABLE onset_xref (
	onset_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (onset_id, xref), 
	FOREIGN KEY(onset_id) REFERENCES onset (id)
);
CREATE TABLE onset_synonym (
	onset_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (onset_id, synonym), 
	FOREIGN KEY(onset_id) REFERENCES onset (id)
);
CREATE TABLE onset_category (
	onset_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (onset_id, category), 
	FOREIGN KEY(onset_id) REFERENCES onset (id)
);
CREATE TABLE onset_type (
	onset_id TEXT, 
	type TEXT, 
	PRIMARY KEY (onset_id, type), 
	FOREIGN KEY(onset_id) REFERENCES onset (id)
);
CREATE TABLE onset_has_attribute (
	onset_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (onset_id, has_attribute_id), 
	FOREIGN KEY(onset_id) REFERENCES onset (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "clinical entity_has_attribute" (
	"clinical entity_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("clinical entity_id", has_attribute_id), 
	FOREIGN KEY("clinical entity_id") REFERENCES "clinical entity" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "clinical trial_has_attribute" (
	"clinical trial_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("clinical trial_id", has_attribute_id), 
	FOREIGN KEY("clinical trial_id") REFERENCES "clinical trial" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "clinical intervention_has_attribute" (
	"clinical intervention_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("clinical intervention_id", has_attribute_id), 
	FOREIGN KEY("clinical intervention_id") REFERENCES "clinical intervention" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "clinical finding_in_taxon" (
	"clinical finding_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("clinical finding_id", in_taxon_id), 
	FOREIGN KEY("clinical finding_id") REFERENCES "clinical finding" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "clinical finding_has_attribute" (
	"clinical finding_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("clinical finding_id", has_attribute_id), 
	FOREIGN KEY("clinical finding_id") REFERENCES "clinical finding" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES "clinical attribute" (id)
);
CREATE TABLE hospitalization_has_attribute (
	hospitalization_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (hospitalization_id, has_attribute_id), 
	FOREIGN KEY(hospitalization_id) REFERENCES hospitalization (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "socioeconomic attribute_has_quantitative_value" (
	"socioeconomic attribute_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("socioeconomic attribute_id", has_quantitative_value_id), 
	FOREIGN KEY("socioeconomic attribute_id") REFERENCES "socioeconomic attribute" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "socioeconomic attribute_provided_by" (
	"socioeconomic attribute_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("socioeconomic attribute_id", provided_by), 
	FOREIGN KEY("socioeconomic attribute_id") REFERENCES "socioeconomic attribute" (id)
);
CREATE TABLE "socioeconomic attribute_xref" (
	"socioeconomic attribute_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("socioeconomic attribute_id", xref), 
	FOREIGN KEY("socioeconomic attribute_id") REFERENCES "socioeconomic attribute" (id)
);
CREATE TABLE "socioeconomic attribute_synonym" (
	"socioeconomic attribute_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("socioeconomic attribute_id", synonym), 
	FOREIGN KEY("socioeconomic attribute_id") REFERENCES "socioeconomic attribute" (id)
);
CREATE TABLE "socioeconomic attribute_category" (
	"socioeconomic attribute_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("socioeconomic attribute_id", category), 
	FOREIGN KEY("socioeconomic attribute_id") REFERENCES "socioeconomic attribute" (id)
);
CREATE TABLE "socioeconomic attribute_type" (
	"socioeconomic attribute_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("socioeconomic attribute_id", type), 
	FOREIGN KEY("socioeconomic attribute_id") REFERENCES "socioeconomic attribute" (id)
);
CREATE TABLE "socioeconomic attribute_has_attribute" (
	"socioeconomic attribute_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("socioeconomic attribute_id", has_attribute_id), 
	FOREIGN KEY("socioeconomic attribute_id") REFERENCES "socioeconomic attribute" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE case_in_taxon (
	case_id TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY (case_id, in_taxon_id), 
	FOREIGN KEY(case_id) REFERENCES "case" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE case_has_attribute (
	case_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (case_id, has_attribute_id), 
	FOREIGN KEY(case_id) REFERENCES "case" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE cohort_in_taxon (
	cohort_id TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY (cohort_id, in_taxon_id), 
	FOREIGN KEY(cohort_id) REFERENCES cohort (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE cohort_has_attribute (
	cohort_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (cohort_id, has_attribute_id), 
	FOREIGN KEY(cohort_id) REFERENCES cohort (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "genomic background exposure_has_gene_or_gene_product" (
	"genomic background exposure_id" TEXT, 
	has_gene_or_gene_product_id TEXT, 
	PRIMARY KEY ("genomic background exposure_id", has_gene_or_gene_product_id), 
	FOREIGN KEY("genomic background exposure_id") REFERENCES "genomic background exposure" (id), 
	FOREIGN KEY(has_gene_or_gene_product_id) REFERENCES gene (id)
);
CREATE TABLE "genomic background exposure_in_taxon" (
	"genomic background exposure_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("genomic background exposure_id", in_taxon_id), 
	FOREIGN KEY("genomic background exposure_id") REFERENCES "genomic background exposure" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "genomic background exposure_has_quantitative_value" (
	"genomic background exposure_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("genomic background exposure_id", has_quantitative_value_id), 
	FOREIGN KEY("genomic background exposure_id") REFERENCES "genomic background exposure" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "genomic background exposure_provided_by" (
	"genomic background exposure_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("genomic background exposure_id", provided_by), 
	FOREIGN KEY("genomic background exposure_id") REFERENCES "genomic background exposure" (id)
);
CREATE TABLE "genomic background exposure_xref" (
	"genomic background exposure_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("genomic background exposure_id", xref), 
	FOREIGN KEY("genomic background exposure_id") REFERENCES "genomic background exposure" (id)
);
CREATE TABLE "genomic background exposure_synonym" (
	"genomic background exposure_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("genomic background exposure_id", synonym), 
	FOREIGN KEY("genomic background exposure_id") REFERENCES "genomic background exposure" (id)
);
CREATE TABLE "genomic background exposure_category" (
	"genomic background exposure_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("genomic background exposure_id", category), 
	FOREIGN KEY("genomic background exposure_id") REFERENCES "genomic background exposure" (id)
);
CREATE TABLE "genomic background exposure_type" (
	"genomic background exposure_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("genomic background exposure_id", type), 
	FOREIGN KEY("genomic background exposure_id") REFERENCES "genomic background exposure" (id)
);
CREATE TABLE "genomic background exposure_has_attribute" (
	"genomic background exposure_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("genomic background exposure_id", has_attribute_id), 
	FOREIGN KEY("genomic background exposure_id") REFERENCES "genomic background exposure" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "pathological process_in_taxon" (
	"pathological process_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("pathological process_id", in_taxon_id), 
	FOREIGN KEY("pathological process_id") REFERENCES "pathological process" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "pathological process_has_attribute" (
	"pathological process_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("pathological process_id", has_attribute_id), 
	FOREIGN KEY("pathological process_id") REFERENCES "pathological process" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "pathological process exposure_has_quantitative_value" (
	"pathological process exposure_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("pathological process exposure_id", has_quantitative_value_id), 
	FOREIGN KEY("pathological process exposure_id") REFERENCES "pathological process exposure" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "pathological process exposure_provided_by" (
	"pathological process exposure_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("pathological process exposure_id", provided_by), 
	FOREIGN KEY("pathological process exposure_id") REFERENCES "pathological process exposure" (id)
);
CREATE TABLE "pathological process exposure_xref" (
	"pathological process exposure_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("pathological process exposure_id", xref), 
	FOREIGN KEY("pathological process exposure_id") REFERENCES "pathological process exposure" (id)
);
CREATE TABLE "pathological process exposure_synonym" (
	"pathological process exposure_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("pathological process exposure_id", synonym), 
	FOREIGN KEY("pathological process exposure_id") REFERENCES "pathological process exposure" (id)
);
CREATE TABLE "pathological process exposure_category" (
	"pathological process exposure_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("pathological process exposure_id", category), 
	FOREIGN KEY("pathological process exposure_id") REFERENCES "pathological process exposure" (id)
);
CREATE TABLE "pathological process exposure_type" (
	"pathological process exposure_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("pathological process exposure_id", type), 
	FOREIGN KEY("pathological process exposure_id") REFERENCES "pathological process exposure" (id)
);
CREATE TABLE "pathological process exposure_has_attribute" (
	"pathological process exposure_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("pathological process exposure_id", has_attribute_id), 
	FOREIGN KEY("pathological process exposure_id") REFERENCES "pathological process exposure" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "pathological anatomical structure_in_taxon" (
	"pathological anatomical structure_id" TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY ("pathological anatomical structure_id", in_taxon_id), 
	FOREIGN KEY("pathological anatomical structure_id") REFERENCES "pathological anatomical structure" (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE "pathological anatomical structure_has_attribute" (
	"pathological anatomical structure_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("pathological anatomical structure_id", has_attribute_id), 
	FOREIGN KEY("pathological anatomical structure_id") REFERENCES "pathological anatomical structure" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "pathological anatomical exposure_has_quantitative_value" (
	"pathological anatomical exposure_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("pathological anatomical exposure_id", has_quantitative_value_id), 
	FOREIGN KEY("pathological anatomical exposure_id") REFERENCES "pathological anatomical exposure" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "pathological anatomical exposure_provided_by" (
	"pathological anatomical exposure_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("pathological anatomical exposure_id", provided_by), 
	FOREIGN KEY("pathological anatomical exposure_id") REFERENCES "pathological anatomical exposure" (id)
);
CREATE TABLE "pathological anatomical exposure_xref" (
	"pathological anatomical exposure_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("pathological anatomical exposure_id", xref), 
	FOREIGN KEY("pathological anatomical exposure_id") REFERENCES "pathological anatomical exposure" (id)
);
CREATE TABLE "pathological anatomical exposure_synonym" (
	"pathological anatomical exposure_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("pathological anatomical exposure_id", synonym), 
	FOREIGN KEY("pathological anatomical exposure_id") REFERENCES "pathological anatomical exposure" (id)
);
CREATE TABLE "pathological anatomical exposure_category" (
	"pathological anatomical exposure_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("pathological anatomical exposure_id", category), 
	FOREIGN KEY("pathological anatomical exposure_id") REFERENCES "pathological anatomical exposure" (id)
);
CREATE TABLE "pathological anatomical exposure_type" (
	"pathological anatomical exposure_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("pathological anatomical exposure_id", type), 
	FOREIGN KEY("pathological anatomical exposure_id") REFERENCES "pathological anatomical exposure" (id)
);
CREATE TABLE "pathological anatomical exposure_has_attribute" (
	"pathological anatomical exposure_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("pathological anatomical exposure_id", has_attribute_id), 
	FOREIGN KEY("pathological anatomical exposure_id") REFERENCES "pathological anatomical exposure" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "disease or phenotypic feature exposure_has_quantitative_value" (
	"disease or phenotypic feature exposure_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("disease or phenotypic feature exposure_id", has_quantitative_value_id), 
	FOREIGN KEY("disease or phenotypic feature exposure_id") REFERENCES "disease or phenotypic feature exposure" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "disease or phenotypic feature exposure_provided_by" (
	"disease or phenotypic feature exposure_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("disease or phenotypic feature exposure_id", provided_by), 
	FOREIGN KEY("disease or phenotypic feature exposure_id") REFERENCES "disease or phenotypic feature exposure" (id)
);
CREATE TABLE "disease or phenotypic feature exposure_xref" (
	"disease or phenotypic feature exposure_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("disease or phenotypic feature exposure_id", xref), 
	FOREIGN KEY("disease or phenotypic feature exposure_id") REFERENCES "disease or phenotypic feature exposure" (id)
);
CREATE TABLE "disease or phenotypic feature exposure_synonym" (
	"disease or phenotypic feature exposure_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("disease or phenotypic feature exposure_id", synonym), 
	FOREIGN KEY("disease or phenotypic feature exposure_id") REFERENCES "disease or phenotypic feature exposure" (id)
);
CREATE TABLE "disease or phenotypic feature exposure_category" (
	"disease or phenotypic feature exposure_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("disease or phenotypic feature exposure_id", category), 
	FOREIGN KEY("disease or phenotypic feature exposure_id") REFERENCES "disease or phenotypic feature exposure" (id)
);
CREATE TABLE "disease or phenotypic feature exposure_type" (
	"disease or phenotypic feature exposure_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("disease or phenotypic feature exposure_id", type), 
	FOREIGN KEY("disease or phenotypic feature exposure_id") REFERENCES "disease or phenotypic feature exposure" (id)
);
CREATE TABLE "disease or phenotypic feature exposure_has_attribute" (
	"disease or phenotypic feature exposure_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("disease or phenotypic feature exposure_id", has_attribute_id), 
	FOREIGN KEY("disease or phenotypic feature exposure_id") REFERENCES "disease or phenotypic feature exposure" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "chemical exposure_has_quantitative_value" (
	"chemical exposure_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("chemical exposure_id", has_quantitative_value_id), 
	FOREIGN KEY("chemical exposure_id") REFERENCES "chemical exposure" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "chemical exposure_provided_by" (
	"chemical exposure_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("chemical exposure_id", provided_by), 
	FOREIGN KEY("chemical exposure_id") REFERENCES "chemical exposure" (id)
);
CREATE TABLE "chemical exposure_xref" (
	"chemical exposure_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("chemical exposure_id", xref), 
	FOREIGN KEY("chemical exposure_id") REFERENCES "chemical exposure" (id)
);
CREATE TABLE "chemical exposure_synonym" (
	"chemical exposure_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("chemical exposure_id", synonym), 
	FOREIGN KEY("chemical exposure_id") REFERENCES "chemical exposure" (id)
);
CREATE TABLE "chemical exposure_category" (
	"chemical exposure_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("chemical exposure_id", category), 
	FOREIGN KEY("chemical exposure_id") REFERENCES "chemical exposure" (id)
);
CREATE TABLE "chemical exposure_type" (
	"chemical exposure_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("chemical exposure_id", type), 
	FOREIGN KEY("chemical exposure_id") REFERENCES "chemical exposure" (id)
);
CREATE TABLE "chemical exposure_has_attribute" (
	"chemical exposure_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("chemical exposure_id", has_attribute_id), 
	FOREIGN KEY("chemical exposure_id") REFERENCES "chemical exposure" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "complex chemical exposure_has_quantitative_value" (
	"complex chemical exposure_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("complex chemical exposure_id", has_quantitative_value_id), 
	FOREIGN KEY("complex chemical exposure_id") REFERENCES "complex chemical exposure" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "complex chemical exposure_provided_by" (
	"complex chemical exposure_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("complex chemical exposure_id", provided_by), 
	FOREIGN KEY("complex chemical exposure_id") REFERENCES "complex chemical exposure" (id)
);
CREATE TABLE "complex chemical exposure_xref" (
	"complex chemical exposure_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("complex chemical exposure_id", xref), 
	FOREIGN KEY("complex chemical exposure_id") REFERENCES "complex chemical exposure" (id)
);
CREATE TABLE "complex chemical exposure_synonym" (
	"complex chemical exposure_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("complex chemical exposure_id", synonym), 
	FOREIGN KEY("complex chemical exposure_id") REFERENCES "complex chemical exposure" (id)
);
CREATE TABLE "complex chemical exposure_category" (
	"complex chemical exposure_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("complex chemical exposure_id", category), 
	FOREIGN KEY("complex chemical exposure_id") REFERENCES "complex chemical exposure" (id)
);
CREATE TABLE "complex chemical exposure_type" (
	"complex chemical exposure_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("complex chemical exposure_id", type), 
	FOREIGN KEY("complex chemical exposure_id") REFERENCES "complex chemical exposure" (id)
);
CREATE TABLE "complex chemical exposure_has_attribute" (
	"complex chemical exposure_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("complex chemical exposure_id", has_attribute_id), 
	FOREIGN KEY("complex chemical exposure_id") REFERENCES "complex chemical exposure" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "drug exposure_has_quantitative_value" (
	"drug exposure_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("drug exposure_id", has_quantitative_value_id), 
	FOREIGN KEY("drug exposure_id") REFERENCES "drug exposure" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "drug exposure_provided_by" (
	"drug exposure_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("drug exposure_id", provided_by), 
	FOREIGN KEY("drug exposure_id") REFERENCES "drug exposure" (id)
);
CREATE TABLE "drug exposure_xref" (
	"drug exposure_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("drug exposure_id", xref), 
	FOREIGN KEY("drug exposure_id") REFERENCES "drug exposure" (id)
);
CREATE TABLE "drug exposure_synonym" (
	"drug exposure_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("drug exposure_id", synonym), 
	FOREIGN KEY("drug exposure_id") REFERENCES "drug exposure" (id)
);
CREATE TABLE "drug exposure_category" (
	"drug exposure_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("drug exposure_id", category), 
	FOREIGN KEY("drug exposure_id") REFERENCES "drug exposure" (id)
);
CREATE TABLE "drug exposure_type" (
	"drug exposure_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("drug exposure_id", type), 
	FOREIGN KEY("drug exposure_id") REFERENCES "drug exposure" (id)
);
CREATE TABLE "drug exposure_has_attribute" (
	"drug exposure_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("drug exposure_id", has_attribute_id), 
	FOREIGN KEY("drug exposure_id") REFERENCES "drug exposure" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "drug to gene interaction exposure_has_gene_or_gene_product" (
	"drug to gene interaction exposure_id" TEXT, 
	has_gene_or_gene_product_id TEXT, 
	PRIMARY KEY ("drug to gene interaction exposure_id", has_gene_or_gene_product_id), 
	FOREIGN KEY("drug to gene interaction exposure_id") REFERENCES "drug to gene interaction exposure" (id), 
	FOREIGN KEY(has_gene_or_gene_product_id) REFERENCES gene (id)
);
CREATE TABLE "drug to gene interaction exposure_has_quantitative_value" (
	"drug to gene interaction exposure_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("drug to gene interaction exposure_id", has_quantitative_value_id), 
	FOREIGN KEY("drug to gene interaction exposure_id") REFERENCES "drug to gene interaction exposure" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "drug to gene interaction exposure_provided_by" (
	"drug to gene interaction exposure_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("drug to gene interaction exposure_id", provided_by), 
	FOREIGN KEY("drug to gene interaction exposure_id") REFERENCES "drug to gene interaction exposure" (id)
);
CREATE TABLE "drug to gene interaction exposure_xref" (
	"drug to gene interaction exposure_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("drug to gene interaction exposure_id", xref), 
	FOREIGN KEY("drug to gene interaction exposure_id") REFERENCES "drug to gene interaction exposure" (id)
);
CREATE TABLE "drug to gene interaction exposure_synonym" (
	"drug to gene interaction exposure_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("drug to gene interaction exposure_id", synonym), 
	FOREIGN KEY("drug to gene interaction exposure_id") REFERENCES "drug to gene interaction exposure" (id)
);
CREATE TABLE "drug to gene interaction exposure_category" (
	"drug to gene interaction exposure_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("drug to gene interaction exposure_id", category), 
	FOREIGN KEY("drug to gene interaction exposure_id") REFERENCES "drug to gene interaction exposure" (id)
);
CREATE TABLE "drug to gene interaction exposure_type" (
	"drug to gene interaction exposure_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("drug to gene interaction exposure_id", type), 
	FOREIGN KEY("drug to gene interaction exposure_id") REFERENCES "drug to gene interaction exposure" (id)
);
CREATE TABLE "drug to gene interaction exposure_has_attribute" (
	"drug to gene interaction exposure_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("drug to gene interaction exposure_id", has_attribute_id), 
	FOREIGN KEY("drug to gene interaction exposure_id") REFERENCES "drug to gene interaction exposure" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE treatment_has_attribute (
	treatment_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (treatment_id, has_attribute_id), 
	FOREIGN KEY(treatment_id) REFERENCES treatment (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "biotic exposure_has_quantitative_value" (
	"biotic exposure_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("biotic exposure_id", has_quantitative_value_id), 
	FOREIGN KEY("biotic exposure_id") REFERENCES "biotic exposure" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "biotic exposure_provided_by" (
	"biotic exposure_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("biotic exposure_id", provided_by), 
	FOREIGN KEY("biotic exposure_id") REFERENCES "biotic exposure" (id)
);
CREATE TABLE "biotic exposure_xref" (
	"biotic exposure_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("biotic exposure_id", xref), 
	FOREIGN KEY("biotic exposure_id") REFERENCES "biotic exposure" (id)
);
CREATE TABLE "biotic exposure_synonym" (
	"biotic exposure_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("biotic exposure_id", synonym), 
	FOREIGN KEY("biotic exposure_id") REFERENCES "biotic exposure" (id)
);
CREATE TABLE "biotic exposure_category" (
	"biotic exposure_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("biotic exposure_id", category), 
	FOREIGN KEY("biotic exposure_id") REFERENCES "biotic exposure" (id)
);
CREATE TABLE "biotic exposure_type" (
	"biotic exposure_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("biotic exposure_id", type), 
	FOREIGN KEY("biotic exposure_id") REFERENCES "biotic exposure" (id)
);
CREATE TABLE "biotic exposure_has_attribute" (
	"biotic exposure_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("biotic exposure_id", has_attribute_id), 
	FOREIGN KEY("biotic exposure_id") REFERENCES "biotic exposure" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "geographic exposure_has_quantitative_value" (
	"geographic exposure_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("geographic exposure_id", has_quantitative_value_id), 
	FOREIGN KEY("geographic exposure_id") REFERENCES "geographic exposure" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "geographic exposure_provided_by" (
	"geographic exposure_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("geographic exposure_id", provided_by), 
	FOREIGN KEY("geographic exposure_id") REFERENCES "geographic exposure" (id)
);
CREATE TABLE "geographic exposure_xref" (
	"geographic exposure_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("geographic exposure_id", xref), 
	FOREIGN KEY("geographic exposure_id") REFERENCES "geographic exposure" (id)
);
CREATE TABLE "geographic exposure_synonym" (
	"geographic exposure_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("geographic exposure_id", synonym), 
	FOREIGN KEY("geographic exposure_id") REFERENCES "geographic exposure" (id)
);
CREATE TABLE "geographic exposure_category" (
	"geographic exposure_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("geographic exposure_id", category), 
	FOREIGN KEY("geographic exposure_id") REFERENCES "geographic exposure" (id)
);
CREATE TABLE "geographic exposure_type" (
	"geographic exposure_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("geographic exposure_id", type), 
	FOREIGN KEY("geographic exposure_id") REFERENCES "geographic exposure" (id)
);
CREATE TABLE "geographic exposure_has_attribute" (
	"geographic exposure_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("geographic exposure_id", has_attribute_id), 
	FOREIGN KEY("geographic exposure_id") REFERENCES "geographic exposure" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "environmental exposure_has_quantitative_value" (
	"environmental exposure_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("environmental exposure_id", has_quantitative_value_id), 
	FOREIGN KEY("environmental exposure_id") REFERENCES "environmental exposure" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "environmental exposure_provided_by" (
	"environmental exposure_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("environmental exposure_id", provided_by), 
	FOREIGN KEY("environmental exposure_id") REFERENCES "environmental exposure" (id)
);
CREATE TABLE "environmental exposure_xref" (
	"environmental exposure_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("environmental exposure_id", xref), 
	FOREIGN KEY("environmental exposure_id") REFERENCES "environmental exposure" (id)
);
CREATE TABLE "environmental exposure_synonym" (
	"environmental exposure_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("environmental exposure_id", synonym), 
	FOREIGN KEY("environmental exposure_id") REFERENCES "environmental exposure" (id)
);
CREATE TABLE "environmental exposure_category" (
	"environmental exposure_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("environmental exposure_id", category), 
	FOREIGN KEY("environmental exposure_id") REFERENCES "environmental exposure" (id)
);
CREATE TABLE "environmental exposure_type" (
	"environmental exposure_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("environmental exposure_id", type), 
	FOREIGN KEY("environmental exposure_id") REFERENCES "environmental exposure" (id)
);
CREATE TABLE "environmental exposure_has_attribute" (
	"environmental exposure_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("environmental exposure_id", has_attribute_id), 
	FOREIGN KEY("environmental exposure_id") REFERENCES "environmental exposure" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "behavioral exposure_has_quantitative_value" (
	"behavioral exposure_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("behavioral exposure_id", has_quantitative_value_id), 
	FOREIGN KEY("behavioral exposure_id") REFERENCES "behavioral exposure" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "behavioral exposure_provided_by" (
	"behavioral exposure_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("behavioral exposure_id", provided_by), 
	FOREIGN KEY("behavioral exposure_id") REFERENCES "behavioral exposure" (id)
);
CREATE TABLE "behavioral exposure_xref" (
	"behavioral exposure_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("behavioral exposure_id", xref), 
	FOREIGN KEY("behavioral exposure_id") REFERENCES "behavioral exposure" (id)
);
CREATE TABLE "behavioral exposure_synonym" (
	"behavioral exposure_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("behavioral exposure_id", synonym), 
	FOREIGN KEY("behavioral exposure_id") REFERENCES "behavioral exposure" (id)
);
CREATE TABLE "behavioral exposure_category" (
	"behavioral exposure_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("behavioral exposure_id", category), 
	FOREIGN KEY("behavioral exposure_id") REFERENCES "behavioral exposure" (id)
);
CREATE TABLE "behavioral exposure_type" (
	"behavioral exposure_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("behavioral exposure_id", type), 
	FOREIGN KEY("behavioral exposure_id") REFERENCES "behavioral exposure" (id)
);
CREATE TABLE "behavioral exposure_has_attribute" (
	"behavioral exposure_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("behavioral exposure_id", has_attribute_id), 
	FOREIGN KEY("behavioral exposure_id") REFERENCES "behavioral exposure" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "socioeconomic exposure_has_quantitative_value" (
	"socioeconomic exposure_id" TEXT, 
	has_quantitative_value_id TEXT, 
	PRIMARY KEY ("socioeconomic exposure_id", has_quantitative_value_id), 
	FOREIGN KEY("socioeconomic exposure_id") REFERENCES "socioeconomic exposure" (id), 
	FOREIGN KEY(has_quantitative_value_id) REFERENCES "quantity value" (id)
);
CREATE TABLE "socioeconomic exposure_provided_by" (
	"socioeconomic exposure_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("socioeconomic exposure_id", provided_by), 
	FOREIGN KEY("socioeconomic exposure_id") REFERENCES "socioeconomic exposure" (id)
);
CREATE TABLE "socioeconomic exposure_xref" (
	"socioeconomic exposure_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("socioeconomic exposure_id", xref), 
	FOREIGN KEY("socioeconomic exposure_id") REFERENCES "socioeconomic exposure" (id)
);
CREATE TABLE "socioeconomic exposure_synonym" (
	"socioeconomic exposure_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("socioeconomic exposure_id", synonym), 
	FOREIGN KEY("socioeconomic exposure_id") REFERENCES "socioeconomic exposure" (id)
);
CREATE TABLE "socioeconomic exposure_category" (
	"socioeconomic exposure_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("socioeconomic exposure_id", category), 
	FOREIGN KEY("socioeconomic exposure_id") REFERENCES "socioeconomic exposure" (id)
);
CREATE TABLE "socioeconomic exposure_type" (
	"socioeconomic exposure_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("socioeconomic exposure_id", type), 
	FOREIGN KEY("socioeconomic exposure_id") REFERENCES "socioeconomic exposure" (id)
);
CREATE TABLE "socioeconomic exposure_has_attribute" (
	"socioeconomic exposure_id" TEXT, 
	has_attribute_id TEXT NOT NULL, 
	PRIMARY KEY ("socioeconomic exposure_id", has_attribute_id), 
	FOREIGN KEY("socioeconomic exposure_id") REFERENCES "socioeconomic exposure" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES "socioeconomic attribute" (id)
);
CREATE TABLE association_qualifiers (
	association_id TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY (association_id, qualifiers_id), 
	FOREIGN KEY(association_id) REFERENCES association (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE association_publications (
	association_id TEXT, 
	publications_id TEXT, 
	PRIMARY KEY (association_id, publications_id), 
	FOREIGN KEY(association_id) REFERENCES association (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE association_has_evidence (
	association_id TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY (association_id, has_evidence_id), 
	FOREIGN KEY(association_id) REFERENCES association (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE association_aggregator_knowledge_source (
	association_id TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY (association_id, aggregator_knowledge_source), 
	FOREIGN KEY(association_id) REFERENCES association (id)
);
CREATE TABLE association_subject_closure (
	association_id TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY (association_id, subject_closure), 
	FOREIGN KEY(association_id) REFERENCES association (id)
);
CREATE TABLE association_object_closure (
	association_id TEXT, 
	object_closure TEXT, 
	PRIMARY KEY (association_id, object_closure), 
	FOREIGN KEY(association_id) REFERENCES association (id)
);
CREATE TABLE association_subject_category_closure (
	association_id TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY (association_id, subject_category_closure_id), 
	FOREIGN KEY(association_id) REFERENCES association (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE association_object_category_closure (
	association_id TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY (association_id, object_category_closure_id), 
	FOREIGN KEY(association_id) REFERENCES association (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE association_subject_label_closure (
	association_id TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY (association_id, subject_label_closure), 
	FOREIGN KEY(association_id) REFERENCES association (id)
);
CREATE TABLE association_object_label_closure (
	association_id TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY (association_id, object_label_closure), 
	FOREIGN KEY(association_id) REFERENCES association (id)
);
CREATE TABLE association_retrieval_source_ids (
	association_id TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY (association_id, retrieval_source_ids_id), 
	FOREIGN KEY(association_id) REFERENCES association (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE association_category (
	association_id TEXT, 
	category TEXT, 
	PRIMARY KEY (association_id, category), 
	FOREIGN KEY(association_id) REFERENCES association (id)
);
CREATE TABLE association_type (
	association_id TEXT, 
	type TEXT, 
	PRIMARY KEY (association_id, type), 
	FOREIGN KEY(association_id) REFERENCES association (id)
);
CREATE TABLE association_has_attribute (
	association_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (association_id, has_attribute_id), 
	FOREIGN KEY(association_id) REFERENCES association (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "chemical entity assesses named thing association_qualifiers" (
	"chemical entity assesses named thing association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("chemical entity assesses named thing association_id", qualifiers_id), 
	FOREIGN KEY("chemical entity assesses named thing association_id") REFERENCES "chemical entity assesses named thing association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical entity assesses named thing association_publications" (
	"chemical entity assesses named thing association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("chemical entity assesses named thing association_id", publications_id), 
	FOREIGN KEY("chemical entity assesses named thing association_id") REFERENCES "chemical entity assesses named thing association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "chemical entity assesses named thing association_has_evidence" (
	"chemical entity assesses named thing association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("chemical entity assesses named thing association_id", has_evidence_id), 
	FOREIGN KEY("chemical entity assesses named thing association_id") REFERENCES "chemical entity assesses named thing association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "chemical entity assesses named thing association_aggregator_knowledge_source" (
	"chemical entity assesses named thing association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("chemical entity assesses named thing association_id", aggregator_knowledge_source), 
	FOREIGN KEY("chemical entity assesses named thing association_id") REFERENCES "chemical entity assesses named thing association" (id)
);
CREATE TABLE "chemical entity assesses named thing association_subject_closure" (
	"chemical entity assesses named thing association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("chemical entity assesses named thing association_id", subject_closure), 
	FOREIGN KEY("chemical entity assesses named thing association_id") REFERENCES "chemical entity assesses named thing association" (id)
);
CREATE TABLE "chemical entity assesses named thing association_object_closure" (
	"chemical entity assesses named thing association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("chemical entity assesses named thing association_id", object_closure), 
	FOREIGN KEY("chemical entity assesses named thing association_id") REFERENCES "chemical entity assesses named thing association" (id)
);
CREATE TABLE "chemical entity assesses named thing association_subject_category_closure" (
	"chemical entity assesses named thing association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("chemical entity assesses named thing association_id", subject_category_closure_id), 
	FOREIGN KEY("chemical entity assesses named thing association_id") REFERENCES "chemical entity assesses named thing association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical entity assesses named thing association_object_category_closure" (
	"chemical entity assesses named thing association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("chemical entity assesses named thing association_id", object_category_closure_id), 
	FOREIGN KEY("chemical entity assesses named thing association_id") REFERENCES "chemical entity assesses named thing association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical entity assesses named thing association_subject_label_closure" (
	"chemical entity assesses named thing association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("chemical entity assesses named thing association_id", subject_label_closure), 
	FOREIGN KEY("chemical entity assesses named thing association_id") REFERENCES "chemical entity assesses named thing association" (id)
);
CREATE TABLE "chemical entity assesses named thing association_object_label_closure" (
	"chemical entity assesses named thing association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("chemical entity assesses named thing association_id", object_label_closure), 
	FOREIGN KEY("chemical entity assesses named thing association_id") REFERENCES "chemical entity assesses named thing association" (id)
);
CREATE TABLE "chemical entity assesses named thing association_retrieval_source_ids" (
	"chemical entity assesses named thing association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("chemical entity assesses named thing association_id", retrieval_source_ids_id), 
	FOREIGN KEY("chemical entity assesses named thing association_id") REFERENCES "chemical entity assesses named thing association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "chemical entity assesses named thing association_category" (
	"chemical entity assesses named thing association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("chemical entity assesses named thing association_id", category), 
	FOREIGN KEY("chemical entity assesses named thing association_id") REFERENCES "chemical entity assesses named thing association" (id)
);
CREATE TABLE "chemical entity assesses named thing association_type" (
	"chemical entity assesses named thing association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("chemical entity assesses named thing association_id", type), 
	FOREIGN KEY("chemical entity assesses named thing association_id") REFERENCES "chemical entity assesses named thing association" (id)
);
CREATE TABLE "chemical entity assesses named thing association_has_attribute" (
	"chemical entity assesses named thing association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("chemical entity assesses named thing association_id", has_attribute_id), 
	FOREIGN KEY("chemical entity assesses named thing association_id") REFERENCES "chemical entity assesses named thing association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "contributor association_qualifiers" (
	"contributor association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("contributor association_id", qualifiers_id), 
	FOREIGN KEY("contributor association_id") REFERENCES "contributor association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "contributor association_publications" (
	"contributor association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("contributor association_id", publications_id), 
	FOREIGN KEY("contributor association_id") REFERENCES "contributor association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "contributor association_has_evidence" (
	"contributor association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("contributor association_id", has_evidence_id), 
	FOREIGN KEY("contributor association_id") REFERENCES "contributor association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "contributor association_aggregator_knowledge_source" (
	"contributor association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("contributor association_id", aggregator_knowledge_source), 
	FOREIGN KEY("contributor association_id") REFERENCES "contributor association" (id)
);
CREATE TABLE "contributor association_subject_closure" (
	"contributor association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("contributor association_id", subject_closure), 
	FOREIGN KEY("contributor association_id") REFERENCES "contributor association" (id)
);
CREATE TABLE "contributor association_object_closure" (
	"contributor association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("contributor association_id", object_closure), 
	FOREIGN KEY("contributor association_id") REFERENCES "contributor association" (id)
);
CREATE TABLE "contributor association_subject_category_closure" (
	"contributor association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("contributor association_id", subject_category_closure_id), 
	FOREIGN KEY("contributor association_id") REFERENCES "contributor association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "contributor association_object_category_closure" (
	"contributor association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("contributor association_id", object_category_closure_id), 
	FOREIGN KEY("contributor association_id") REFERENCES "contributor association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "contributor association_subject_label_closure" (
	"contributor association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("contributor association_id", subject_label_closure), 
	FOREIGN KEY("contributor association_id") REFERENCES "contributor association" (id)
);
CREATE TABLE "contributor association_object_label_closure" (
	"contributor association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("contributor association_id", object_label_closure), 
	FOREIGN KEY("contributor association_id") REFERENCES "contributor association" (id)
);
CREATE TABLE "contributor association_retrieval_source_ids" (
	"contributor association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("contributor association_id", retrieval_source_ids_id), 
	FOREIGN KEY("contributor association_id") REFERENCES "contributor association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "contributor association_category" (
	"contributor association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("contributor association_id", category), 
	FOREIGN KEY("contributor association_id") REFERENCES "contributor association" (id)
);
CREATE TABLE "contributor association_type" (
	"contributor association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("contributor association_id", type), 
	FOREIGN KEY("contributor association_id") REFERENCES "contributor association" (id)
);
CREATE TABLE "contributor association_has_attribute" (
	"contributor association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("contributor association_id", has_attribute_id), 
	FOREIGN KEY("contributor association_id") REFERENCES "contributor association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "gene to gene association_qualifiers" (
	"gene to gene association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("gene to gene association_id", qualifiers_id), 
	FOREIGN KEY("gene to gene association_id") REFERENCES "gene to gene association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to gene association_publications" (
	"gene to gene association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("gene to gene association_id", publications_id), 
	FOREIGN KEY("gene to gene association_id") REFERENCES "gene to gene association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "gene to gene association_has_evidence" (
	"gene to gene association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("gene to gene association_id", has_evidence_id), 
	FOREIGN KEY("gene to gene association_id") REFERENCES "gene to gene association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "gene to gene association_aggregator_knowledge_source" (
	"gene to gene association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("gene to gene association_id", aggregator_knowledge_source), 
	FOREIGN KEY("gene to gene association_id") REFERENCES "gene to gene association" (id)
);
CREATE TABLE "gene to gene association_subject_closure" (
	"gene to gene association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("gene to gene association_id", subject_closure), 
	FOREIGN KEY("gene to gene association_id") REFERENCES "gene to gene association" (id)
);
CREATE TABLE "gene to gene association_object_closure" (
	"gene to gene association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("gene to gene association_id", object_closure), 
	FOREIGN KEY("gene to gene association_id") REFERENCES "gene to gene association" (id)
);
CREATE TABLE "gene to gene association_subject_category_closure" (
	"gene to gene association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("gene to gene association_id", subject_category_closure_id), 
	FOREIGN KEY("gene to gene association_id") REFERENCES "gene to gene association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to gene association_object_category_closure" (
	"gene to gene association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("gene to gene association_id", object_category_closure_id), 
	FOREIGN KEY("gene to gene association_id") REFERENCES "gene to gene association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to gene association_subject_label_closure" (
	"gene to gene association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("gene to gene association_id", subject_label_closure), 
	FOREIGN KEY("gene to gene association_id") REFERENCES "gene to gene association" (id)
);
CREATE TABLE "gene to gene association_object_label_closure" (
	"gene to gene association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("gene to gene association_id", object_label_closure), 
	FOREIGN KEY("gene to gene association_id") REFERENCES "gene to gene association" (id)
);
CREATE TABLE "gene to gene association_retrieval_source_ids" (
	"gene to gene association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("gene to gene association_id", retrieval_source_ids_id), 
	FOREIGN KEY("gene to gene association_id") REFERENCES "gene to gene association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "gene to gene association_category" (
	"gene to gene association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("gene to gene association_id", category), 
	FOREIGN KEY("gene to gene association_id") REFERENCES "gene to gene association" (id)
);
CREATE TABLE "gene to gene association_type" (
	"gene to gene association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("gene to gene association_id", type), 
	FOREIGN KEY("gene to gene association_id") REFERENCES "gene to gene association" (id)
);
CREATE TABLE "gene to gene association_has_attribute" (
	"gene to gene association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("gene to gene association_id", has_attribute_id), 
	FOREIGN KEY("gene to gene association_id") REFERENCES "gene to gene association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "gene to gene homology association_qualifiers" (
	"gene to gene homology association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("gene to gene homology association_id", qualifiers_id), 
	FOREIGN KEY("gene to gene homology association_id") REFERENCES "gene to gene homology association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to gene homology association_publications" (
	"gene to gene homology association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("gene to gene homology association_id", publications_id), 
	FOREIGN KEY("gene to gene homology association_id") REFERENCES "gene to gene homology association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "gene to gene homology association_has_evidence" (
	"gene to gene homology association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("gene to gene homology association_id", has_evidence_id), 
	FOREIGN KEY("gene to gene homology association_id") REFERENCES "gene to gene homology association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "gene to gene homology association_aggregator_knowledge_source" (
	"gene to gene homology association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("gene to gene homology association_id", aggregator_knowledge_source), 
	FOREIGN KEY("gene to gene homology association_id") REFERENCES "gene to gene homology association" (id)
);
CREATE TABLE "gene to gene homology association_subject_closure" (
	"gene to gene homology association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("gene to gene homology association_id", subject_closure), 
	FOREIGN KEY("gene to gene homology association_id") REFERENCES "gene to gene homology association" (id)
);
CREATE TABLE "gene to gene homology association_object_closure" (
	"gene to gene homology association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("gene to gene homology association_id", object_closure), 
	FOREIGN KEY("gene to gene homology association_id") REFERENCES "gene to gene homology association" (id)
);
CREATE TABLE "gene to gene homology association_subject_category_closure" (
	"gene to gene homology association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("gene to gene homology association_id", subject_category_closure_id), 
	FOREIGN KEY("gene to gene homology association_id") REFERENCES "gene to gene homology association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to gene homology association_object_category_closure" (
	"gene to gene homology association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("gene to gene homology association_id", object_category_closure_id), 
	FOREIGN KEY("gene to gene homology association_id") REFERENCES "gene to gene homology association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to gene homology association_subject_label_closure" (
	"gene to gene homology association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("gene to gene homology association_id", subject_label_closure), 
	FOREIGN KEY("gene to gene homology association_id") REFERENCES "gene to gene homology association" (id)
);
CREATE TABLE "gene to gene homology association_object_label_closure" (
	"gene to gene homology association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("gene to gene homology association_id", object_label_closure), 
	FOREIGN KEY("gene to gene homology association_id") REFERENCES "gene to gene homology association" (id)
);
CREATE TABLE "gene to gene homology association_retrieval_source_ids" (
	"gene to gene homology association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("gene to gene homology association_id", retrieval_source_ids_id), 
	FOREIGN KEY("gene to gene homology association_id") REFERENCES "gene to gene homology association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "gene to gene homology association_category" (
	"gene to gene homology association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("gene to gene homology association_id", category), 
	FOREIGN KEY("gene to gene homology association_id") REFERENCES "gene to gene homology association" (id)
);
CREATE TABLE "gene to gene homology association_type" (
	"gene to gene homology association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("gene to gene homology association_id", type), 
	FOREIGN KEY("gene to gene homology association_id") REFERENCES "gene to gene homology association" (id)
);
CREATE TABLE "gene to gene homology association_has_attribute" (
	"gene to gene homology association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("gene to gene homology association_id", has_attribute_id), 
	FOREIGN KEY("gene to gene homology association_id") REFERENCES "gene to gene homology association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "gene to gene family association_qualifiers" (
	"gene to gene family association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("gene to gene family association_id", qualifiers_id), 
	FOREIGN KEY("gene to gene family association_id") REFERENCES "gene to gene family association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to gene family association_publications" (
	"gene to gene family association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("gene to gene family association_id", publications_id), 
	FOREIGN KEY("gene to gene family association_id") REFERENCES "gene to gene family association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "gene to gene family association_has_evidence" (
	"gene to gene family association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("gene to gene family association_id", has_evidence_id), 
	FOREIGN KEY("gene to gene family association_id") REFERENCES "gene to gene family association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "gene to gene family association_aggregator_knowledge_source" (
	"gene to gene family association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("gene to gene family association_id", aggregator_knowledge_source), 
	FOREIGN KEY("gene to gene family association_id") REFERENCES "gene to gene family association" (id)
);
CREATE TABLE "gene to gene family association_subject_closure" (
	"gene to gene family association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("gene to gene family association_id", subject_closure), 
	FOREIGN KEY("gene to gene family association_id") REFERENCES "gene to gene family association" (id)
);
CREATE TABLE "gene to gene family association_object_closure" (
	"gene to gene family association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("gene to gene family association_id", object_closure), 
	FOREIGN KEY("gene to gene family association_id") REFERENCES "gene to gene family association" (id)
);
CREATE TABLE "gene to gene family association_subject_category_closure" (
	"gene to gene family association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("gene to gene family association_id", subject_category_closure_id), 
	FOREIGN KEY("gene to gene family association_id") REFERENCES "gene to gene family association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to gene family association_object_category_closure" (
	"gene to gene family association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("gene to gene family association_id", object_category_closure_id), 
	FOREIGN KEY("gene to gene family association_id") REFERENCES "gene to gene family association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to gene family association_subject_label_closure" (
	"gene to gene family association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("gene to gene family association_id", subject_label_closure), 
	FOREIGN KEY("gene to gene family association_id") REFERENCES "gene to gene family association" (id)
);
CREATE TABLE "gene to gene family association_object_label_closure" (
	"gene to gene family association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("gene to gene family association_id", object_label_closure), 
	FOREIGN KEY("gene to gene family association_id") REFERENCES "gene to gene family association" (id)
);
CREATE TABLE "gene to gene family association_retrieval_source_ids" (
	"gene to gene family association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("gene to gene family association_id", retrieval_source_ids_id), 
	FOREIGN KEY("gene to gene family association_id") REFERENCES "gene to gene family association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "gene to gene family association_category" (
	"gene to gene family association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("gene to gene family association_id", category), 
	FOREIGN KEY("gene to gene family association_id") REFERENCES "gene to gene family association" (id)
);
CREATE TABLE "gene to gene family association_type" (
	"gene to gene family association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("gene to gene family association_id", type), 
	FOREIGN KEY("gene to gene family association_id") REFERENCES "gene to gene family association" (id)
);
CREATE TABLE "gene to gene family association_has_attribute" (
	"gene to gene family association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("gene to gene family association_id", has_attribute_id), 
	FOREIGN KEY("gene to gene family association_id") REFERENCES "gene to gene family association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "gene to gene coexpression association_qualifiers" (
	"gene to gene coexpression association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("gene to gene coexpression association_id", qualifiers_id), 
	FOREIGN KEY("gene to gene coexpression association_id") REFERENCES "gene to gene coexpression association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to gene coexpression association_publications" (
	"gene to gene coexpression association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("gene to gene coexpression association_id", publications_id), 
	FOREIGN KEY("gene to gene coexpression association_id") REFERENCES "gene to gene coexpression association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "gene to gene coexpression association_has_evidence" (
	"gene to gene coexpression association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("gene to gene coexpression association_id", has_evidence_id), 
	FOREIGN KEY("gene to gene coexpression association_id") REFERENCES "gene to gene coexpression association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "gene to gene coexpression association_aggregator_knowledge_source" (
	"gene to gene coexpression association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("gene to gene coexpression association_id", aggregator_knowledge_source), 
	FOREIGN KEY("gene to gene coexpression association_id") REFERENCES "gene to gene coexpression association" (id)
);
CREATE TABLE "gene to gene coexpression association_subject_closure" (
	"gene to gene coexpression association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("gene to gene coexpression association_id", subject_closure), 
	FOREIGN KEY("gene to gene coexpression association_id") REFERENCES "gene to gene coexpression association" (id)
);
CREATE TABLE "gene to gene coexpression association_object_closure" (
	"gene to gene coexpression association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("gene to gene coexpression association_id", object_closure), 
	FOREIGN KEY("gene to gene coexpression association_id") REFERENCES "gene to gene coexpression association" (id)
);
CREATE TABLE "gene to gene coexpression association_subject_category_closure" (
	"gene to gene coexpression association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("gene to gene coexpression association_id", subject_category_closure_id), 
	FOREIGN KEY("gene to gene coexpression association_id") REFERENCES "gene to gene coexpression association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to gene coexpression association_object_category_closure" (
	"gene to gene coexpression association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("gene to gene coexpression association_id", object_category_closure_id), 
	FOREIGN KEY("gene to gene coexpression association_id") REFERENCES "gene to gene coexpression association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to gene coexpression association_subject_label_closure" (
	"gene to gene coexpression association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("gene to gene coexpression association_id", subject_label_closure), 
	FOREIGN KEY("gene to gene coexpression association_id") REFERENCES "gene to gene coexpression association" (id)
);
CREATE TABLE "gene to gene coexpression association_object_label_closure" (
	"gene to gene coexpression association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("gene to gene coexpression association_id", object_label_closure), 
	FOREIGN KEY("gene to gene coexpression association_id") REFERENCES "gene to gene coexpression association" (id)
);
CREATE TABLE "gene to gene coexpression association_retrieval_source_ids" (
	"gene to gene coexpression association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("gene to gene coexpression association_id", retrieval_source_ids_id), 
	FOREIGN KEY("gene to gene coexpression association_id") REFERENCES "gene to gene coexpression association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "gene to gene coexpression association_category" (
	"gene to gene coexpression association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("gene to gene coexpression association_id", category), 
	FOREIGN KEY("gene to gene coexpression association_id") REFERENCES "gene to gene coexpression association" (id)
);
CREATE TABLE "gene to gene coexpression association_type" (
	"gene to gene coexpression association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("gene to gene coexpression association_id", type), 
	FOREIGN KEY("gene to gene coexpression association_id") REFERENCES "gene to gene coexpression association" (id)
);
CREATE TABLE "gene to gene coexpression association_has_attribute" (
	"gene to gene coexpression association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("gene to gene coexpression association_id", has_attribute_id), 
	FOREIGN KEY("gene to gene coexpression association_id") REFERENCES "gene to gene coexpression association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "pairwise gene to gene interaction_qualifiers" (
	"pairwise gene to gene interaction_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("pairwise gene to gene interaction_id", qualifiers_id), 
	FOREIGN KEY("pairwise gene to gene interaction_id") REFERENCES "pairwise gene to gene interaction" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "pairwise gene to gene interaction_publications" (
	"pairwise gene to gene interaction_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("pairwise gene to gene interaction_id", publications_id), 
	FOREIGN KEY("pairwise gene to gene interaction_id") REFERENCES "pairwise gene to gene interaction" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "pairwise gene to gene interaction_has_evidence" (
	"pairwise gene to gene interaction_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("pairwise gene to gene interaction_id", has_evidence_id), 
	FOREIGN KEY("pairwise gene to gene interaction_id") REFERENCES "pairwise gene to gene interaction" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "pairwise gene to gene interaction_aggregator_knowledge_source" (
	"pairwise gene to gene interaction_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("pairwise gene to gene interaction_id", aggregator_knowledge_source), 
	FOREIGN KEY("pairwise gene to gene interaction_id") REFERENCES "pairwise gene to gene interaction" (id)
);
CREATE TABLE "pairwise gene to gene interaction_subject_closure" (
	"pairwise gene to gene interaction_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("pairwise gene to gene interaction_id", subject_closure), 
	FOREIGN KEY("pairwise gene to gene interaction_id") REFERENCES "pairwise gene to gene interaction" (id)
);
CREATE TABLE "pairwise gene to gene interaction_object_closure" (
	"pairwise gene to gene interaction_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("pairwise gene to gene interaction_id", object_closure), 
	FOREIGN KEY("pairwise gene to gene interaction_id") REFERENCES "pairwise gene to gene interaction" (id)
);
CREATE TABLE "pairwise gene to gene interaction_subject_category_closure" (
	"pairwise gene to gene interaction_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("pairwise gene to gene interaction_id", subject_category_closure_id), 
	FOREIGN KEY("pairwise gene to gene interaction_id") REFERENCES "pairwise gene to gene interaction" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "pairwise gene to gene interaction_object_category_closure" (
	"pairwise gene to gene interaction_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("pairwise gene to gene interaction_id", object_category_closure_id), 
	FOREIGN KEY("pairwise gene to gene interaction_id") REFERENCES "pairwise gene to gene interaction" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "pairwise gene to gene interaction_subject_label_closure" (
	"pairwise gene to gene interaction_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("pairwise gene to gene interaction_id", subject_label_closure), 
	FOREIGN KEY("pairwise gene to gene interaction_id") REFERENCES "pairwise gene to gene interaction" (id)
);
CREATE TABLE "pairwise gene to gene interaction_object_label_closure" (
	"pairwise gene to gene interaction_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("pairwise gene to gene interaction_id", object_label_closure), 
	FOREIGN KEY("pairwise gene to gene interaction_id") REFERENCES "pairwise gene to gene interaction" (id)
);
CREATE TABLE "pairwise gene to gene interaction_retrieval_source_ids" (
	"pairwise gene to gene interaction_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("pairwise gene to gene interaction_id", retrieval_source_ids_id), 
	FOREIGN KEY("pairwise gene to gene interaction_id") REFERENCES "pairwise gene to gene interaction" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "pairwise gene to gene interaction_category" (
	"pairwise gene to gene interaction_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("pairwise gene to gene interaction_id", category), 
	FOREIGN KEY("pairwise gene to gene interaction_id") REFERENCES "pairwise gene to gene interaction" (id)
);
CREATE TABLE "pairwise gene to gene interaction_type" (
	"pairwise gene to gene interaction_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("pairwise gene to gene interaction_id", type), 
	FOREIGN KEY("pairwise gene to gene interaction_id") REFERENCES "pairwise gene to gene interaction" (id)
);
CREATE TABLE "pairwise gene to gene interaction_has_attribute" (
	"pairwise gene to gene interaction_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("pairwise gene to gene interaction_id", has_attribute_id), 
	FOREIGN KEY("pairwise gene to gene interaction_id") REFERENCES "pairwise gene to gene interaction" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "cell line to disease or phenotypic feature association_qualifiers" (
	"cell line to disease or phenotypic feature association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("cell line to disease or phenotypic feature association_id", qualifiers_id), 
	FOREIGN KEY("cell line to disease or phenotypic feature association_id") REFERENCES "cell line to disease or phenotypic feature association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "cell line to disease or phenotypic feature association_publications" (
	"cell line to disease or phenotypic feature association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("cell line to disease or phenotypic feature association_id", publications_id), 
	FOREIGN KEY("cell line to disease or phenotypic feature association_id") REFERENCES "cell line to disease or phenotypic feature association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "cell line to disease or phenotypic feature association_has_evidence" (
	"cell line to disease or phenotypic feature association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("cell line to disease or phenotypic feature association_id", has_evidence_id), 
	FOREIGN KEY("cell line to disease or phenotypic feature association_id") REFERENCES "cell line to disease or phenotypic feature association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "cell line to disease or phenotypic feature association_aggregator_knowledge_source" (
	"cell line to disease or phenotypic feature association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("cell line to disease or phenotypic feature association_id", aggregator_knowledge_source), 
	FOREIGN KEY("cell line to disease or phenotypic feature association_id") REFERENCES "cell line to disease or phenotypic feature association" (id)
);
CREATE TABLE "cell line to disease or phenotypic feature association_subject_closure" (
	"cell line to disease or phenotypic feature association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("cell line to disease or phenotypic feature association_id", subject_closure), 
	FOREIGN KEY("cell line to disease or phenotypic feature association_id") REFERENCES "cell line to disease or phenotypic feature association" (id)
);
CREATE TABLE "cell line to disease or phenotypic feature association_object_closure" (
	"cell line to disease or phenotypic feature association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("cell line to disease or phenotypic feature association_id", object_closure), 
	FOREIGN KEY("cell line to disease or phenotypic feature association_id") REFERENCES "cell line to disease or phenotypic feature association" (id)
);
CREATE TABLE "cell line to disease or phenotypic feature association_subject_category_closure" (
	"cell line to disease or phenotypic feature association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("cell line to disease or phenotypic feature association_id", subject_category_closure_id), 
	FOREIGN KEY("cell line to disease or phenotypic feature association_id") REFERENCES "cell line to disease or phenotypic feature association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "cell line to disease or phenotypic feature association_object_category_closure" (
	"cell line to disease or phenotypic feature association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("cell line to disease or phenotypic feature association_id", object_category_closure_id), 
	FOREIGN KEY("cell line to disease or phenotypic feature association_id") REFERENCES "cell line to disease or phenotypic feature association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "cell line to disease or phenotypic feature association_subject_label_closure" (
	"cell line to disease or phenotypic feature association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("cell line to disease or phenotypic feature association_id", subject_label_closure), 
	FOREIGN KEY("cell line to disease or phenotypic feature association_id") REFERENCES "cell line to disease or phenotypic feature association" (id)
);
CREATE TABLE "cell line to disease or phenotypic feature association_object_label_closure" (
	"cell line to disease or phenotypic feature association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("cell line to disease or phenotypic feature association_id", object_label_closure), 
	FOREIGN KEY("cell line to disease or phenotypic feature association_id") REFERENCES "cell line to disease or phenotypic feature association" (id)
);
CREATE TABLE "cell line to disease or phenotypic feature association_retrieval_source_ids" (
	"cell line to disease or phenotypic feature association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("cell line to disease or phenotypic feature association_id", retrieval_source_ids_id), 
	FOREIGN KEY("cell line to disease or phenotypic feature association_id") REFERENCES "cell line to disease or phenotypic feature association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "cell line to disease or phenotypic feature association_category" (
	"cell line to disease or phenotypic feature association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("cell line to disease or phenotypic feature association_id", category), 
	FOREIGN KEY("cell line to disease or phenotypic feature association_id") REFERENCES "cell line to disease or phenotypic feature association" (id)
);
CREATE TABLE "cell line to disease or phenotypic feature association_type" (
	"cell line to disease or phenotypic feature association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("cell line to disease or phenotypic feature association_id", type), 
	FOREIGN KEY("cell line to disease or phenotypic feature association_id") REFERENCES "cell line to disease or phenotypic feature association" (id)
);
CREATE TABLE "cell line to disease or phenotypic feature association_has_attribute" (
	"cell line to disease or phenotypic feature association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("cell line to disease or phenotypic feature association_id", has_attribute_id), 
	FOREIGN KEY("cell line to disease or phenotypic feature association_id") REFERENCES "cell line to disease or phenotypic feature association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "chemical to chemical association_qualifiers" (
	"chemical to chemical association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("chemical to chemical association_id", qualifiers_id), 
	FOREIGN KEY("chemical to chemical association_id") REFERENCES "chemical to chemical association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical to chemical association_publications" (
	"chemical to chemical association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("chemical to chemical association_id", publications_id), 
	FOREIGN KEY("chemical to chemical association_id") REFERENCES "chemical to chemical association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "chemical to chemical association_has_evidence" (
	"chemical to chemical association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("chemical to chemical association_id", has_evidence_id), 
	FOREIGN KEY("chemical to chemical association_id") REFERENCES "chemical to chemical association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "chemical to chemical association_aggregator_knowledge_source" (
	"chemical to chemical association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("chemical to chemical association_id", aggregator_knowledge_source), 
	FOREIGN KEY("chemical to chemical association_id") REFERENCES "chemical to chemical association" (id)
);
CREATE TABLE "chemical to chemical association_subject_closure" (
	"chemical to chemical association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("chemical to chemical association_id", subject_closure), 
	FOREIGN KEY("chemical to chemical association_id") REFERENCES "chemical to chemical association" (id)
);
CREATE TABLE "chemical to chemical association_object_closure" (
	"chemical to chemical association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("chemical to chemical association_id", object_closure), 
	FOREIGN KEY("chemical to chemical association_id") REFERENCES "chemical to chemical association" (id)
);
CREATE TABLE "chemical to chemical association_subject_category_closure" (
	"chemical to chemical association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("chemical to chemical association_id", subject_category_closure_id), 
	FOREIGN KEY("chemical to chemical association_id") REFERENCES "chemical to chemical association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical to chemical association_object_category_closure" (
	"chemical to chemical association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("chemical to chemical association_id", object_category_closure_id), 
	FOREIGN KEY("chemical to chemical association_id") REFERENCES "chemical to chemical association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical to chemical association_subject_label_closure" (
	"chemical to chemical association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("chemical to chemical association_id", subject_label_closure), 
	FOREIGN KEY("chemical to chemical association_id") REFERENCES "chemical to chemical association" (id)
);
CREATE TABLE "chemical to chemical association_object_label_closure" (
	"chemical to chemical association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("chemical to chemical association_id", object_label_closure), 
	FOREIGN KEY("chemical to chemical association_id") REFERENCES "chemical to chemical association" (id)
);
CREATE TABLE "chemical to chemical association_retrieval_source_ids" (
	"chemical to chemical association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("chemical to chemical association_id", retrieval_source_ids_id), 
	FOREIGN KEY("chemical to chemical association_id") REFERENCES "chemical to chemical association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "chemical to chemical association_category" (
	"chemical to chemical association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("chemical to chemical association_id", category), 
	FOREIGN KEY("chemical to chemical association_id") REFERENCES "chemical to chemical association" (id)
);
CREATE TABLE "chemical to chemical association_type" (
	"chemical to chemical association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("chemical to chemical association_id", type), 
	FOREIGN KEY("chemical to chemical association_id") REFERENCES "chemical to chemical association" (id)
);
CREATE TABLE "chemical to chemical association_has_attribute" (
	"chemical to chemical association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("chemical to chemical association_id", has_attribute_id), 
	FOREIGN KEY("chemical to chemical association_id") REFERENCES "chemical to chemical association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "chemical to chemical derivation association_catalyst_qualifier" (
	"chemical to chemical derivation association_id" TEXT, 
	catalyst_qualifier_id TEXT, 
	PRIMARY KEY ("chemical to chemical derivation association_id", catalyst_qualifier_id), 
	FOREIGN KEY("chemical to chemical derivation association_id") REFERENCES "chemical to chemical derivation association" (id), 
	FOREIGN KEY(catalyst_qualifier_id) REFERENCES "macromolecular machine mixin" (id)
);
CREATE TABLE "chemical to chemical derivation association_qualifiers" (
	"chemical to chemical derivation association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("chemical to chemical derivation association_id", qualifiers_id), 
	FOREIGN KEY("chemical to chemical derivation association_id") REFERENCES "chemical to chemical derivation association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical to chemical derivation association_publications" (
	"chemical to chemical derivation association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("chemical to chemical derivation association_id", publications_id), 
	FOREIGN KEY("chemical to chemical derivation association_id") REFERENCES "chemical to chemical derivation association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "chemical to chemical derivation association_has_evidence" (
	"chemical to chemical derivation association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("chemical to chemical derivation association_id", has_evidence_id), 
	FOREIGN KEY("chemical to chemical derivation association_id") REFERENCES "chemical to chemical derivation association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "chemical to chemical derivation association_aggregator_knowledge_source" (
	"chemical to chemical derivation association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("chemical to chemical derivation association_id", aggregator_knowledge_source), 
	FOREIGN KEY("chemical to chemical derivation association_id") REFERENCES "chemical to chemical derivation association" (id)
);
CREATE TABLE "chemical to chemical derivation association_subject_closure" (
	"chemical to chemical derivation association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("chemical to chemical derivation association_id", subject_closure), 
	FOREIGN KEY("chemical to chemical derivation association_id") REFERENCES "chemical to chemical derivation association" (id)
);
CREATE TABLE "chemical to chemical derivation association_object_closure" (
	"chemical to chemical derivation association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("chemical to chemical derivation association_id", object_closure), 
	FOREIGN KEY("chemical to chemical derivation association_id") REFERENCES "chemical to chemical derivation association" (id)
);
CREATE TABLE "chemical to chemical derivation association_subject_category_closure" (
	"chemical to chemical derivation association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("chemical to chemical derivation association_id", subject_category_closure_id), 
	FOREIGN KEY("chemical to chemical derivation association_id") REFERENCES "chemical to chemical derivation association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical to chemical derivation association_object_category_closure" (
	"chemical to chemical derivation association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("chemical to chemical derivation association_id", object_category_closure_id), 
	FOREIGN KEY("chemical to chemical derivation association_id") REFERENCES "chemical to chemical derivation association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical to chemical derivation association_subject_label_closure" (
	"chemical to chemical derivation association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("chemical to chemical derivation association_id", subject_label_closure), 
	FOREIGN KEY("chemical to chemical derivation association_id") REFERENCES "chemical to chemical derivation association" (id)
);
CREATE TABLE "chemical to chemical derivation association_object_label_closure" (
	"chemical to chemical derivation association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("chemical to chemical derivation association_id", object_label_closure), 
	FOREIGN KEY("chemical to chemical derivation association_id") REFERENCES "chemical to chemical derivation association" (id)
);
CREATE TABLE "chemical to chemical derivation association_retrieval_source_ids" (
	"chemical to chemical derivation association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("chemical to chemical derivation association_id", retrieval_source_ids_id), 
	FOREIGN KEY("chemical to chemical derivation association_id") REFERENCES "chemical to chemical derivation association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "chemical to chemical derivation association_category" (
	"chemical to chemical derivation association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("chemical to chemical derivation association_id", category), 
	FOREIGN KEY("chemical to chemical derivation association_id") REFERENCES "chemical to chemical derivation association" (id)
);
CREATE TABLE "chemical to chemical derivation association_type" (
	"chemical to chemical derivation association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("chemical to chemical derivation association_id", type), 
	FOREIGN KEY("chemical to chemical derivation association_id") REFERENCES "chemical to chemical derivation association" (id)
);
CREATE TABLE "chemical to chemical derivation association_has_attribute" (
	"chemical to chemical derivation association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("chemical to chemical derivation association_id", has_attribute_id), 
	FOREIGN KEY("chemical to chemical derivation association_id") REFERENCES "chemical to chemical derivation association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "chemical to disease or phenotypic feature association_qualifiers" (
	"chemical to disease or phenotypic feature association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("chemical to disease or phenotypic feature association_id", qualifiers_id), 
	FOREIGN KEY("chemical to disease or phenotypic feature association_id") REFERENCES "chemical to disease or phenotypic feature association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical to disease or phenotypic feature association_publications" (
	"chemical to disease or phenotypic feature association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("chemical to disease or phenotypic feature association_id", publications_id), 
	FOREIGN KEY("chemical to disease or phenotypic feature association_id") REFERENCES "chemical to disease or phenotypic feature association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "chemical to disease or phenotypic feature association_has_evidence" (
	"chemical to disease or phenotypic feature association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("chemical to disease or phenotypic feature association_id", has_evidence_id), 
	FOREIGN KEY("chemical to disease or phenotypic feature association_id") REFERENCES "chemical to disease or phenotypic feature association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "chemical to disease or phenotypic feature association_aggregator_knowledge_source" (
	"chemical to disease or phenotypic feature association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("chemical to disease or phenotypic feature association_id", aggregator_knowledge_source), 
	FOREIGN KEY("chemical to disease or phenotypic feature association_id") REFERENCES "chemical to disease or phenotypic feature association" (id)
);
CREATE TABLE "chemical to disease or phenotypic feature association_subject_closure" (
	"chemical to disease or phenotypic feature association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("chemical to disease or phenotypic feature association_id", subject_closure), 
	FOREIGN KEY("chemical to disease or phenotypic feature association_id") REFERENCES "chemical to disease or phenotypic feature association" (id)
);
CREATE TABLE "chemical to disease or phenotypic feature association_object_closure" (
	"chemical to disease or phenotypic feature association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("chemical to disease or phenotypic feature association_id", object_closure), 
	FOREIGN KEY("chemical to disease or phenotypic feature association_id") REFERENCES "chemical to disease or phenotypic feature association" (id)
);
CREATE TABLE "chemical to disease or phenotypic feature association_subject_category_closure" (
	"chemical to disease or phenotypic feature association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("chemical to disease or phenotypic feature association_id", subject_category_closure_id), 
	FOREIGN KEY("chemical to disease or phenotypic feature association_id") REFERENCES "chemical to disease or phenotypic feature association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical to disease or phenotypic feature association_object_category_closure" (
	"chemical to disease or phenotypic feature association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("chemical to disease or phenotypic feature association_id", object_category_closure_id), 
	FOREIGN KEY("chemical to disease or phenotypic feature association_id") REFERENCES "chemical to disease or phenotypic feature association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical to disease or phenotypic feature association_subject_label_closure" (
	"chemical to disease or phenotypic feature association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("chemical to disease or phenotypic feature association_id", subject_label_closure), 
	FOREIGN KEY("chemical to disease or phenotypic feature association_id") REFERENCES "chemical to disease or phenotypic feature association" (id)
);
CREATE TABLE "chemical to disease or phenotypic feature association_object_label_closure" (
	"chemical to disease or phenotypic feature association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("chemical to disease or phenotypic feature association_id", object_label_closure), 
	FOREIGN KEY("chemical to disease or phenotypic feature association_id") REFERENCES "chemical to disease or phenotypic feature association" (id)
);
CREATE TABLE "chemical to disease or phenotypic feature association_retrieval_source_ids" (
	"chemical to disease or phenotypic feature association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("chemical to disease or phenotypic feature association_id", retrieval_source_ids_id), 
	FOREIGN KEY("chemical to disease or phenotypic feature association_id") REFERENCES "chemical to disease or phenotypic feature association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "chemical to disease or phenotypic feature association_category" (
	"chemical to disease or phenotypic feature association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("chemical to disease or phenotypic feature association_id", category), 
	FOREIGN KEY("chemical to disease or phenotypic feature association_id") REFERENCES "chemical to disease or phenotypic feature association" (id)
);
CREATE TABLE "chemical to disease or phenotypic feature association_type" (
	"chemical to disease or phenotypic feature association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("chemical to disease or phenotypic feature association_id", type), 
	FOREIGN KEY("chemical to disease or phenotypic feature association_id") REFERENCES "chemical to disease or phenotypic feature association" (id)
);
CREATE TABLE "chemical to disease or phenotypic feature association_has_attribute" (
	"chemical to disease or phenotypic feature association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("chemical to disease or phenotypic feature association_id", has_attribute_id), 
	FOREIGN KEY("chemical to disease or phenotypic feature association_id") REFERENCES "chemical to disease or phenotypic feature association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "chemical or drug or treatment to disease or phenotypic feature association_qualifiers" (
	"chemical or drug or treatment to disease or phenotypic feature association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("chemical or drug or treatment to disease or phenotypic feature association_id", qualifiers_id), 
	FOREIGN KEY("chemical or drug or treatment to disease or phenotypic feature association_id") REFERENCES "chemical or drug or treatment to disease or phenotypic feature association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical or drug or treatment to disease or phenotypic feature association_publications" (
	"chemical or drug or treatment to disease or phenotypic feature association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("chemical or drug or treatment to disease or phenotypic feature association_id", publications_id), 
	FOREIGN KEY("chemical or drug or treatment to disease or phenotypic feature association_id") REFERENCES "chemical or drug or treatment to disease or phenotypic feature association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "chemical or drug or treatment to disease or phenotypic feature association_has_evidence" (
	"chemical or drug or treatment to disease or phenotypic feature association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("chemical or drug or treatment to disease or phenotypic feature association_id", has_evidence_id), 
	FOREIGN KEY("chemical or drug or treatment to disease or phenotypic feature association_id") REFERENCES "chemical or drug or treatment to disease or phenotypic feature association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "chemical or drug or treatment to disease or phenotypic feature association_aggregator_knowledge_source" (
	"chemical or drug or treatment to disease or phenotypic feature association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("chemical or drug or treatment to disease or phenotypic feature association_id", aggregator_knowledge_source), 
	FOREIGN KEY("chemical or drug or treatment to disease or phenotypic feature association_id") REFERENCES "chemical or drug or treatment to disease or phenotypic feature association" (id)
);
CREATE TABLE "chemical or drug or treatment to disease or phenotypic feature association_subject_closure" (
	"chemical or drug or treatment to disease or phenotypic feature association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("chemical or drug or treatment to disease or phenotypic feature association_id", subject_closure), 
	FOREIGN KEY("chemical or drug or treatment to disease or phenotypic feature association_id") REFERENCES "chemical or drug or treatment to disease or phenotypic feature association" (id)
);
CREATE TABLE "chemical or drug or treatment to disease or phenotypic feature association_object_closure" (
	"chemical or drug or treatment to disease or phenotypic feature association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("chemical or drug or treatment to disease or phenotypic feature association_id", object_closure), 
	FOREIGN KEY("chemical or drug or treatment to disease or phenotypic feature association_id") REFERENCES "chemical or drug or treatment to disease or phenotypic feature association" (id)
);
CREATE TABLE "chemical or drug or treatment to disease or phenotypic feature association_subject_category_closure" (
	"chemical or drug or treatment to disease or phenotypic feature association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("chemical or drug or treatment to disease or phenotypic feature association_id", subject_category_closure_id), 
	FOREIGN KEY("chemical or drug or treatment to disease or phenotypic feature association_id") REFERENCES "chemical or drug or treatment to disease or phenotypic feature association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical or drug or treatment to disease or phenotypic feature association_object_category_closure" (
	"chemical or drug or treatment to disease or phenotypic feature association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("chemical or drug or treatment to disease or phenotypic feature association_id", object_category_closure_id), 
	FOREIGN KEY("chemical or drug or treatment to disease or phenotypic feature association_id") REFERENCES "chemical or drug or treatment to disease or phenotypic feature association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical or drug or treatment to disease or phenotypic feature association_subject_label_closure" (
	"chemical or drug or treatment to disease or phenotypic feature association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("chemical or drug or treatment to disease or phenotypic feature association_id", subject_label_closure), 
	FOREIGN KEY("chemical or drug or treatment to disease or phenotypic feature association_id") REFERENCES "chemical or drug or treatment to disease or phenotypic feature association" (id)
);
CREATE TABLE "chemical or drug or treatment to disease or phenotypic feature association_object_label_closure" (
	"chemical or drug or treatment to disease or phenotypic feature association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("chemical or drug or treatment to disease or phenotypic feature association_id", object_label_closure), 
	FOREIGN KEY("chemical or drug or treatment to disease or phenotypic feature association_id") REFERENCES "chemical or drug or treatment to disease or phenotypic feature association" (id)
);
CREATE TABLE "chemical or drug or treatment to disease or phenotypic feature association_retrieval_source_ids" (
	"chemical or drug or treatment to disease or phenotypic feature association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("chemical or drug or treatment to disease or phenotypic feature association_id", retrieval_source_ids_id), 
	FOREIGN KEY("chemical or drug or treatment to disease or phenotypic feature association_id") REFERENCES "chemical or drug or treatment to disease or phenotypic feature association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "chemical or drug or treatment to disease or phenotypic feature association_category" (
	"chemical or drug or treatment to disease or phenotypic feature association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("chemical or drug or treatment to disease or phenotypic feature association_id", category), 
	FOREIGN KEY("chemical or drug or treatment to disease or phenotypic feature association_id") REFERENCES "chemical or drug or treatment to disease or phenotypic feature association" (id)
);
CREATE TABLE "chemical or drug or treatment to disease or phenotypic feature association_type" (
	"chemical or drug or treatment to disease or phenotypic feature association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("chemical or drug or treatment to disease or phenotypic feature association_id", type), 
	FOREIGN KEY("chemical or drug or treatment to disease or phenotypic feature association_id") REFERENCES "chemical or drug or treatment to disease or phenotypic feature association" (id)
);
CREATE TABLE "chemical or drug or treatment to disease or phenotypic feature association_has_attribute" (
	"chemical or drug or treatment to disease or phenotypic feature association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("chemical or drug or treatment to disease or phenotypic feature association_id", has_attribute_id), 
	FOREIGN KEY("chemical or drug or treatment to disease or phenotypic feature association_id") REFERENCES "chemical or drug or treatment to disease or phenotypic feature association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "chemical or drug or treatment side effect disease or phenotypic feature association_qualifiers" (
	"chemical or drug or treatment side effect disease or phenotypic feature association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("chemical or drug or treatment side effect disease or phenotypic feature association_id", qualifiers_id), 
	FOREIGN KEY("chemical or drug or treatment side effect disease or phenotypic feature association_id") REFERENCES "chemical or drug or treatment side effect disease or phenotypic feature association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical or drug or treatment side effect disease or phenotypic feature association_publications" (
	"chemical or drug or treatment side effect disease or phenotypic feature association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("chemical or drug or treatment side effect disease or phenotypic feature association_id", publications_id), 
	FOREIGN KEY("chemical or drug or treatment side effect disease or phenotypic feature association_id") REFERENCES "chemical or drug or treatment side effect disease or phenotypic feature association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "chemical or drug or treatment side effect disease or phenotypic feature association_has_evidence" (
	"chemical or drug or treatment side effect disease or phenotypic feature association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("chemical or drug or treatment side effect disease or phenotypic feature association_id", has_evidence_id), 
	FOREIGN KEY("chemical or drug or treatment side effect disease or phenotypic feature association_id") REFERENCES "chemical or drug or treatment side effect disease or phenotypic feature association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "chemical or drug or treatment side effect disease or phenotypic feature association_aggregator_knowledge_source" (
	"chemical or drug or treatment side effect disease or phenotypic feature association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("chemical or drug or treatment side effect disease or phenotypic feature association_id", aggregator_knowledge_source), 
	FOREIGN KEY("chemical or drug or treatment side effect disease or phenotypic feature association_id") REFERENCES "chemical or drug or treatment side effect disease or phenotypic feature association" (id)
);
CREATE TABLE "chemical or drug or treatment side effect disease or phenotypic feature association_subject_closure" (
	"chemical or drug or treatment side effect disease or phenotypic feature association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("chemical or drug or treatment side effect disease or phenotypic feature association_id", subject_closure), 
	FOREIGN KEY("chemical or drug or treatment side effect disease or phenotypic feature association_id") REFERENCES "chemical or drug or treatment side effect disease or phenotypic feature association" (id)
);
CREATE TABLE "chemical or drug or treatment side effect disease or phenotypic feature association_object_closure" (
	"chemical or drug or treatment side effect disease or phenotypic feature association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("chemical or drug or treatment side effect disease or phenotypic feature association_id", object_closure), 
	FOREIGN KEY("chemical or drug or treatment side effect disease or phenotypic feature association_id") REFERENCES "chemical or drug or treatment side effect disease or phenotypic feature association" (id)
);
CREATE TABLE "chemical or drug or treatment side effect disease or phenotypic feature association_subject_category_closure" (
	"chemical or drug or treatment side effect disease or phenotypic feature association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("chemical or drug or treatment side effect disease or phenotypic feature association_id", subject_category_closure_id), 
	FOREIGN KEY("chemical or drug or treatment side effect disease or phenotypic feature association_id") REFERENCES "chemical or drug or treatment side effect disease or phenotypic feature association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical or drug or treatment side effect disease or phenotypic feature association_object_category_closure" (
	"chemical or drug or treatment side effect disease or phenotypic feature association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("chemical or drug or treatment side effect disease or phenotypic feature association_id", object_category_closure_id), 
	FOREIGN KEY("chemical or drug or treatment side effect disease or phenotypic feature association_id") REFERENCES "chemical or drug or treatment side effect disease or phenotypic feature association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical or drug or treatment side effect disease or phenotypic feature association_subject_label_closure" (
	"chemical or drug or treatment side effect disease or phenotypic feature association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("chemical or drug or treatment side effect disease or phenotypic feature association_id", subject_label_closure), 
	FOREIGN KEY("chemical or drug or treatment side effect disease or phenotypic feature association_id") REFERENCES "chemical or drug or treatment side effect disease or phenotypic feature association" (id)
);
CREATE TABLE "chemical or drug or treatment side effect disease or phenotypic feature association_object_label_closure" (
	"chemical or drug or treatment side effect disease or phenotypic feature association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("chemical or drug or treatment side effect disease or phenotypic feature association_id", object_label_closure), 
	FOREIGN KEY("chemical or drug or treatment side effect disease or phenotypic feature association_id") REFERENCES "chemical or drug or treatment side effect disease or phenotypic feature association" (id)
);
CREATE TABLE "chemical or drug or treatment side effect disease or phenotypic feature association_retrieval_source_ids" (
	"chemical or drug or treatment side effect disease or phenotypic feature association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("chemical or drug or treatment side effect disease or phenotypic feature association_id", retrieval_source_ids_id), 
	FOREIGN KEY("chemical or drug or treatment side effect disease or phenotypic feature association_id") REFERENCES "chemical or drug or treatment side effect disease or phenotypic feature association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "chemical or drug or treatment side effect disease or phenotypic feature association_category" (
	"chemical or drug or treatment side effect disease or phenotypic feature association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("chemical or drug or treatment side effect disease or phenotypic feature association_id", category), 
	FOREIGN KEY("chemical or drug or treatment side effect disease or phenotypic feature association_id") REFERENCES "chemical or drug or treatment side effect disease or phenotypic feature association" (id)
);
CREATE TABLE "chemical or drug or treatment side effect disease or phenotypic feature association_type" (
	"chemical or drug or treatment side effect disease or phenotypic feature association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("chemical or drug or treatment side effect disease or phenotypic feature association_id", type), 
	FOREIGN KEY("chemical or drug or treatment side effect disease or phenotypic feature association_id") REFERENCES "chemical or drug or treatment side effect disease or phenotypic feature association" (id)
);
CREATE TABLE "chemical or drug or treatment side effect disease or phenotypic feature association_has_attribute" (
	"chemical or drug or treatment side effect disease or phenotypic feature association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("chemical or drug or treatment side effect disease or phenotypic feature association_id", has_attribute_id), 
	FOREIGN KEY("chemical or drug or treatment side effect disease or phenotypic feature association_id") REFERENCES "chemical or drug or treatment side effect disease or phenotypic feature association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "gene to pathway association_qualifiers" (
	"gene to pathway association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("gene to pathway association_id", qualifiers_id), 
	FOREIGN KEY("gene to pathway association_id") REFERENCES "gene to pathway association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to pathway association_publications" (
	"gene to pathway association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("gene to pathway association_id", publications_id), 
	FOREIGN KEY("gene to pathway association_id") REFERENCES "gene to pathway association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "gene to pathway association_has_evidence" (
	"gene to pathway association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("gene to pathway association_id", has_evidence_id), 
	FOREIGN KEY("gene to pathway association_id") REFERENCES "gene to pathway association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "gene to pathway association_aggregator_knowledge_source" (
	"gene to pathway association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("gene to pathway association_id", aggregator_knowledge_source), 
	FOREIGN KEY("gene to pathway association_id") REFERENCES "gene to pathway association" (id)
);
CREATE TABLE "gene to pathway association_subject_closure" (
	"gene to pathway association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("gene to pathway association_id", subject_closure), 
	FOREIGN KEY("gene to pathway association_id") REFERENCES "gene to pathway association" (id)
);
CREATE TABLE "gene to pathway association_object_closure" (
	"gene to pathway association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("gene to pathway association_id", object_closure), 
	FOREIGN KEY("gene to pathway association_id") REFERENCES "gene to pathway association" (id)
);
CREATE TABLE "gene to pathway association_subject_category_closure" (
	"gene to pathway association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("gene to pathway association_id", subject_category_closure_id), 
	FOREIGN KEY("gene to pathway association_id") REFERENCES "gene to pathway association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to pathway association_object_category_closure" (
	"gene to pathway association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("gene to pathway association_id", object_category_closure_id), 
	FOREIGN KEY("gene to pathway association_id") REFERENCES "gene to pathway association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to pathway association_subject_label_closure" (
	"gene to pathway association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("gene to pathway association_id", subject_label_closure), 
	FOREIGN KEY("gene to pathway association_id") REFERENCES "gene to pathway association" (id)
);
CREATE TABLE "gene to pathway association_object_label_closure" (
	"gene to pathway association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("gene to pathway association_id", object_label_closure), 
	FOREIGN KEY("gene to pathway association_id") REFERENCES "gene to pathway association" (id)
);
CREATE TABLE "gene to pathway association_retrieval_source_ids" (
	"gene to pathway association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("gene to pathway association_id", retrieval_source_ids_id), 
	FOREIGN KEY("gene to pathway association_id") REFERENCES "gene to pathway association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "gene to pathway association_category" (
	"gene to pathway association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("gene to pathway association_id", category), 
	FOREIGN KEY("gene to pathway association_id") REFERENCES "gene to pathway association" (id)
);
CREATE TABLE "gene to pathway association_type" (
	"gene to pathway association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("gene to pathway association_id", type), 
	FOREIGN KEY("gene to pathway association_id") REFERENCES "gene to pathway association" (id)
);
CREATE TABLE "gene to pathway association_has_attribute" (
	"gene to pathway association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("gene to pathway association_id", has_attribute_id), 
	FOREIGN KEY("gene to pathway association_id") REFERENCES "gene to pathway association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "molecular activity to pathway association_qualifiers" (
	"molecular activity to pathway association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("molecular activity to pathway association_id", qualifiers_id), 
	FOREIGN KEY("molecular activity to pathway association_id") REFERENCES "molecular activity to pathway association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "molecular activity to pathway association_publications" (
	"molecular activity to pathway association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("molecular activity to pathway association_id", publications_id), 
	FOREIGN KEY("molecular activity to pathway association_id") REFERENCES "molecular activity to pathway association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "molecular activity to pathway association_has_evidence" (
	"molecular activity to pathway association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("molecular activity to pathway association_id", has_evidence_id), 
	FOREIGN KEY("molecular activity to pathway association_id") REFERENCES "molecular activity to pathway association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "molecular activity to pathway association_aggregator_knowledge_source" (
	"molecular activity to pathway association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("molecular activity to pathway association_id", aggregator_knowledge_source), 
	FOREIGN KEY("molecular activity to pathway association_id") REFERENCES "molecular activity to pathway association" (id)
);
CREATE TABLE "molecular activity to pathway association_subject_closure" (
	"molecular activity to pathway association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("molecular activity to pathway association_id", subject_closure), 
	FOREIGN KEY("molecular activity to pathway association_id") REFERENCES "molecular activity to pathway association" (id)
);
CREATE TABLE "molecular activity to pathway association_object_closure" (
	"molecular activity to pathway association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("molecular activity to pathway association_id", object_closure), 
	FOREIGN KEY("molecular activity to pathway association_id") REFERENCES "molecular activity to pathway association" (id)
);
CREATE TABLE "molecular activity to pathway association_subject_category_closure" (
	"molecular activity to pathway association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("molecular activity to pathway association_id", subject_category_closure_id), 
	FOREIGN KEY("molecular activity to pathway association_id") REFERENCES "molecular activity to pathway association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "molecular activity to pathway association_object_category_closure" (
	"molecular activity to pathway association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("molecular activity to pathway association_id", object_category_closure_id), 
	FOREIGN KEY("molecular activity to pathway association_id") REFERENCES "molecular activity to pathway association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "molecular activity to pathway association_subject_label_closure" (
	"molecular activity to pathway association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("molecular activity to pathway association_id", subject_label_closure), 
	FOREIGN KEY("molecular activity to pathway association_id") REFERENCES "molecular activity to pathway association" (id)
);
CREATE TABLE "molecular activity to pathway association_object_label_closure" (
	"molecular activity to pathway association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("molecular activity to pathway association_id", object_label_closure), 
	FOREIGN KEY("molecular activity to pathway association_id") REFERENCES "molecular activity to pathway association" (id)
);
CREATE TABLE "molecular activity to pathway association_retrieval_source_ids" (
	"molecular activity to pathway association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("molecular activity to pathway association_id", retrieval_source_ids_id), 
	FOREIGN KEY("molecular activity to pathway association_id") REFERENCES "molecular activity to pathway association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "molecular activity to pathway association_category" (
	"molecular activity to pathway association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("molecular activity to pathway association_id", category), 
	FOREIGN KEY("molecular activity to pathway association_id") REFERENCES "molecular activity to pathway association" (id)
);
CREATE TABLE "molecular activity to pathway association_type" (
	"molecular activity to pathway association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("molecular activity to pathway association_id", type), 
	FOREIGN KEY("molecular activity to pathway association_id") REFERENCES "molecular activity to pathway association" (id)
);
CREATE TABLE "molecular activity to pathway association_has_attribute" (
	"molecular activity to pathway association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("molecular activity to pathway association_id", has_attribute_id), 
	FOREIGN KEY("molecular activity to pathway association_id") REFERENCES "molecular activity to pathway association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "chemical to pathway association_qualifiers" (
	"chemical to pathway association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("chemical to pathway association_id", qualifiers_id), 
	FOREIGN KEY("chemical to pathway association_id") REFERENCES "chemical to pathway association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical to pathway association_publications" (
	"chemical to pathway association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("chemical to pathway association_id", publications_id), 
	FOREIGN KEY("chemical to pathway association_id") REFERENCES "chemical to pathway association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "chemical to pathway association_has_evidence" (
	"chemical to pathway association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("chemical to pathway association_id", has_evidence_id), 
	FOREIGN KEY("chemical to pathway association_id") REFERENCES "chemical to pathway association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "chemical to pathway association_aggregator_knowledge_source" (
	"chemical to pathway association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("chemical to pathway association_id", aggregator_knowledge_source), 
	FOREIGN KEY("chemical to pathway association_id") REFERENCES "chemical to pathway association" (id)
);
CREATE TABLE "chemical to pathway association_subject_closure" (
	"chemical to pathway association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("chemical to pathway association_id", subject_closure), 
	FOREIGN KEY("chemical to pathway association_id") REFERENCES "chemical to pathway association" (id)
);
CREATE TABLE "chemical to pathway association_object_closure" (
	"chemical to pathway association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("chemical to pathway association_id", object_closure), 
	FOREIGN KEY("chemical to pathway association_id") REFERENCES "chemical to pathway association" (id)
);
CREATE TABLE "chemical to pathway association_subject_category_closure" (
	"chemical to pathway association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("chemical to pathway association_id", subject_category_closure_id), 
	FOREIGN KEY("chemical to pathway association_id") REFERENCES "chemical to pathway association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical to pathway association_object_category_closure" (
	"chemical to pathway association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("chemical to pathway association_id", object_category_closure_id), 
	FOREIGN KEY("chemical to pathway association_id") REFERENCES "chemical to pathway association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical to pathway association_subject_label_closure" (
	"chemical to pathway association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("chemical to pathway association_id", subject_label_closure), 
	FOREIGN KEY("chemical to pathway association_id") REFERENCES "chemical to pathway association" (id)
);
CREATE TABLE "chemical to pathway association_object_label_closure" (
	"chemical to pathway association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("chemical to pathway association_id", object_label_closure), 
	FOREIGN KEY("chemical to pathway association_id") REFERENCES "chemical to pathway association" (id)
);
CREATE TABLE "chemical to pathway association_retrieval_source_ids" (
	"chemical to pathway association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("chemical to pathway association_id", retrieval_source_ids_id), 
	FOREIGN KEY("chemical to pathway association_id") REFERENCES "chemical to pathway association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "chemical to pathway association_category" (
	"chemical to pathway association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("chemical to pathway association_id", category), 
	FOREIGN KEY("chemical to pathway association_id") REFERENCES "chemical to pathway association" (id)
);
CREATE TABLE "chemical to pathway association_type" (
	"chemical to pathway association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("chemical to pathway association_id", type), 
	FOREIGN KEY("chemical to pathway association_id") REFERENCES "chemical to pathway association" (id)
);
CREATE TABLE "chemical to pathway association_has_attribute" (
	"chemical to pathway association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("chemical to pathway association_id", has_attribute_id), 
	FOREIGN KEY("chemical to pathway association_id") REFERENCES "chemical to pathway association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "named thing associated with likelihood of named thing association_qualifiers" (
	"named thing associated with likelihood of named thing association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("named thing associated with likelihood of named thing association_id", qualifiers_id), 
	FOREIGN KEY("named thing associated with likelihood of named thing association_id") REFERENCES "named thing associated with likelihood of named thing association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "named thing associated with likelihood of named thing association_publications" (
	"named thing associated with likelihood of named thing association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("named thing associated with likelihood of named thing association_id", publications_id), 
	FOREIGN KEY("named thing associated with likelihood of named thing association_id") REFERENCES "named thing associated with likelihood of named thing association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "named thing associated with likelihood of named thing association_has_evidence" (
	"named thing associated with likelihood of named thing association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("named thing associated with likelihood of named thing association_id", has_evidence_id), 
	FOREIGN KEY("named thing associated with likelihood of named thing association_id") REFERENCES "named thing associated with likelihood of named thing association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "named thing associated with likelihood of named thing association_aggregator_knowledge_source" (
	"named thing associated with likelihood of named thing association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("named thing associated with likelihood of named thing association_id", aggregator_knowledge_source), 
	FOREIGN KEY("named thing associated with likelihood of named thing association_id") REFERENCES "named thing associated with likelihood of named thing association" (id)
);
CREATE TABLE "named thing associated with likelihood of named thing association_subject_closure" (
	"named thing associated with likelihood of named thing association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("named thing associated with likelihood of named thing association_id", subject_closure), 
	FOREIGN KEY("named thing associated with likelihood of named thing association_id") REFERENCES "named thing associated with likelihood of named thing association" (id)
);
CREATE TABLE "named thing associated with likelihood of named thing association_object_closure" (
	"named thing associated with likelihood of named thing association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("named thing associated with likelihood of named thing association_id", object_closure), 
	FOREIGN KEY("named thing associated with likelihood of named thing association_id") REFERENCES "named thing associated with likelihood of named thing association" (id)
);
CREATE TABLE "named thing associated with likelihood of named thing association_subject_category_closure" (
	"named thing associated with likelihood of named thing association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("named thing associated with likelihood of named thing association_id", subject_category_closure_id), 
	FOREIGN KEY("named thing associated with likelihood of named thing association_id") REFERENCES "named thing associated with likelihood of named thing association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "named thing associated with likelihood of named thing association_object_category_closure" (
	"named thing associated with likelihood of named thing association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("named thing associated with likelihood of named thing association_id", object_category_closure_id), 
	FOREIGN KEY("named thing associated with likelihood of named thing association_id") REFERENCES "named thing associated with likelihood of named thing association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "named thing associated with likelihood of named thing association_subject_label_closure" (
	"named thing associated with likelihood of named thing association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("named thing associated with likelihood of named thing association_id", subject_label_closure), 
	FOREIGN KEY("named thing associated with likelihood of named thing association_id") REFERENCES "named thing associated with likelihood of named thing association" (id)
);
CREATE TABLE "named thing associated with likelihood of named thing association_object_label_closure" (
	"named thing associated with likelihood of named thing association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("named thing associated with likelihood of named thing association_id", object_label_closure), 
	FOREIGN KEY("named thing associated with likelihood of named thing association_id") REFERENCES "named thing associated with likelihood of named thing association" (id)
);
CREATE TABLE "named thing associated with likelihood of named thing association_retrieval_source_ids" (
	"named thing associated with likelihood of named thing association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("named thing associated with likelihood of named thing association_id", retrieval_source_ids_id), 
	FOREIGN KEY("named thing associated with likelihood of named thing association_id") REFERENCES "named thing associated with likelihood of named thing association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "named thing associated with likelihood of named thing association_category" (
	"named thing associated with likelihood of named thing association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("named thing associated with likelihood of named thing association_id", category), 
	FOREIGN KEY("named thing associated with likelihood of named thing association_id") REFERENCES "named thing associated with likelihood of named thing association" (id)
);
CREATE TABLE "named thing associated with likelihood of named thing association_type" (
	"named thing associated with likelihood of named thing association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("named thing associated with likelihood of named thing association_id", type), 
	FOREIGN KEY("named thing associated with likelihood of named thing association_id") REFERENCES "named thing associated with likelihood of named thing association" (id)
);
CREATE TABLE "named thing associated with likelihood of named thing association_has_attribute" (
	"named thing associated with likelihood of named thing association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("named thing associated with likelihood of named thing association_id", has_attribute_id), 
	FOREIGN KEY("named thing associated with likelihood of named thing association_id") REFERENCES "named thing associated with likelihood of named thing association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "chemical gene interaction association_qualifiers" (
	"chemical gene interaction association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("chemical gene interaction association_id", qualifiers_id), 
	FOREIGN KEY("chemical gene interaction association_id") REFERENCES "chemical gene interaction association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical gene interaction association_publications" (
	"chemical gene interaction association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("chemical gene interaction association_id", publications_id), 
	FOREIGN KEY("chemical gene interaction association_id") REFERENCES "chemical gene interaction association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "chemical gene interaction association_has_evidence" (
	"chemical gene interaction association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("chemical gene interaction association_id", has_evidence_id), 
	FOREIGN KEY("chemical gene interaction association_id") REFERENCES "chemical gene interaction association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "chemical gene interaction association_aggregator_knowledge_source" (
	"chemical gene interaction association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("chemical gene interaction association_id", aggregator_knowledge_source), 
	FOREIGN KEY("chemical gene interaction association_id") REFERENCES "chemical gene interaction association" (id)
);
CREATE TABLE "chemical gene interaction association_subject_closure" (
	"chemical gene interaction association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("chemical gene interaction association_id", subject_closure), 
	FOREIGN KEY("chemical gene interaction association_id") REFERENCES "chemical gene interaction association" (id)
);
CREATE TABLE "chemical gene interaction association_object_closure" (
	"chemical gene interaction association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("chemical gene interaction association_id", object_closure), 
	FOREIGN KEY("chemical gene interaction association_id") REFERENCES "chemical gene interaction association" (id)
);
CREATE TABLE "chemical gene interaction association_subject_category_closure" (
	"chemical gene interaction association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("chemical gene interaction association_id", subject_category_closure_id), 
	FOREIGN KEY("chemical gene interaction association_id") REFERENCES "chemical gene interaction association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical gene interaction association_object_category_closure" (
	"chemical gene interaction association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("chemical gene interaction association_id", object_category_closure_id), 
	FOREIGN KEY("chemical gene interaction association_id") REFERENCES "chemical gene interaction association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical gene interaction association_subject_label_closure" (
	"chemical gene interaction association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("chemical gene interaction association_id", subject_label_closure), 
	FOREIGN KEY("chemical gene interaction association_id") REFERENCES "chemical gene interaction association" (id)
);
CREATE TABLE "chemical gene interaction association_object_label_closure" (
	"chemical gene interaction association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("chemical gene interaction association_id", object_label_closure), 
	FOREIGN KEY("chemical gene interaction association_id") REFERENCES "chemical gene interaction association" (id)
);
CREATE TABLE "chemical gene interaction association_retrieval_source_ids" (
	"chemical gene interaction association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("chemical gene interaction association_id", retrieval_source_ids_id), 
	FOREIGN KEY("chemical gene interaction association_id") REFERENCES "chemical gene interaction association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "chemical gene interaction association_category" (
	"chemical gene interaction association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("chemical gene interaction association_id", category), 
	FOREIGN KEY("chemical gene interaction association_id") REFERENCES "chemical gene interaction association" (id)
);
CREATE TABLE "chemical gene interaction association_type" (
	"chemical gene interaction association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("chemical gene interaction association_id", type), 
	FOREIGN KEY("chemical gene interaction association_id") REFERENCES "chemical gene interaction association" (id)
);
CREATE TABLE "chemical gene interaction association_has_attribute" (
	"chemical gene interaction association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("chemical gene interaction association_id", has_attribute_id), 
	FOREIGN KEY("chemical gene interaction association_id") REFERENCES "chemical gene interaction association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "material sample derivation association_qualifiers" (
	"material sample derivation association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("material sample derivation association_id", qualifiers_id), 
	FOREIGN KEY("material sample derivation association_id") REFERENCES "material sample derivation association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "material sample derivation association_publications" (
	"material sample derivation association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("material sample derivation association_id", publications_id), 
	FOREIGN KEY("material sample derivation association_id") REFERENCES "material sample derivation association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "material sample derivation association_has_evidence" (
	"material sample derivation association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("material sample derivation association_id", has_evidence_id), 
	FOREIGN KEY("material sample derivation association_id") REFERENCES "material sample derivation association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "material sample derivation association_aggregator_knowledge_source" (
	"material sample derivation association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("material sample derivation association_id", aggregator_knowledge_source), 
	FOREIGN KEY("material sample derivation association_id") REFERENCES "material sample derivation association" (id)
);
CREATE TABLE "material sample derivation association_subject_closure" (
	"material sample derivation association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("material sample derivation association_id", subject_closure), 
	FOREIGN KEY("material sample derivation association_id") REFERENCES "material sample derivation association" (id)
);
CREATE TABLE "material sample derivation association_object_closure" (
	"material sample derivation association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("material sample derivation association_id", object_closure), 
	FOREIGN KEY("material sample derivation association_id") REFERENCES "material sample derivation association" (id)
);
CREATE TABLE "material sample derivation association_subject_category_closure" (
	"material sample derivation association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("material sample derivation association_id", subject_category_closure_id), 
	FOREIGN KEY("material sample derivation association_id") REFERENCES "material sample derivation association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "material sample derivation association_object_category_closure" (
	"material sample derivation association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("material sample derivation association_id", object_category_closure_id), 
	FOREIGN KEY("material sample derivation association_id") REFERENCES "material sample derivation association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "material sample derivation association_subject_label_closure" (
	"material sample derivation association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("material sample derivation association_id", subject_label_closure), 
	FOREIGN KEY("material sample derivation association_id") REFERENCES "material sample derivation association" (id)
);
CREATE TABLE "material sample derivation association_object_label_closure" (
	"material sample derivation association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("material sample derivation association_id", object_label_closure), 
	FOREIGN KEY("material sample derivation association_id") REFERENCES "material sample derivation association" (id)
);
CREATE TABLE "material sample derivation association_retrieval_source_ids" (
	"material sample derivation association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("material sample derivation association_id", retrieval_source_ids_id), 
	FOREIGN KEY("material sample derivation association_id") REFERENCES "material sample derivation association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "material sample derivation association_category" (
	"material sample derivation association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("material sample derivation association_id", category), 
	FOREIGN KEY("material sample derivation association_id") REFERENCES "material sample derivation association" (id)
);
CREATE TABLE "material sample derivation association_type" (
	"material sample derivation association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("material sample derivation association_id", type), 
	FOREIGN KEY("material sample derivation association_id") REFERENCES "material sample derivation association" (id)
);
CREATE TABLE "material sample derivation association_has_attribute" (
	"material sample derivation association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("material sample derivation association_id", has_attribute_id), 
	FOREIGN KEY("material sample derivation association_id") REFERENCES "material sample derivation association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "material sample to disease or phenotypic feature association_qualifiers" (
	"material sample to disease or phenotypic feature association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("material sample to disease or phenotypic feature association_id", qualifiers_id), 
	FOREIGN KEY("material sample to disease or phenotypic feature association_id") REFERENCES "material sample to disease or phenotypic feature association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "material sample to disease or phenotypic feature association_publications" (
	"material sample to disease or phenotypic feature association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("material sample to disease or phenotypic feature association_id", publications_id), 
	FOREIGN KEY("material sample to disease or phenotypic feature association_id") REFERENCES "material sample to disease or phenotypic feature association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "material sample to disease or phenotypic feature association_has_evidence" (
	"material sample to disease or phenotypic feature association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("material sample to disease or phenotypic feature association_id", has_evidence_id), 
	FOREIGN KEY("material sample to disease or phenotypic feature association_id") REFERENCES "material sample to disease or phenotypic feature association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "material sample to disease or phenotypic feature association_aggregator_knowledge_source" (
	"material sample to disease or phenotypic feature association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("material sample to disease or phenotypic feature association_id", aggregator_knowledge_source), 
	FOREIGN KEY("material sample to disease or phenotypic feature association_id") REFERENCES "material sample to disease or phenotypic feature association" (id)
);
CREATE TABLE "material sample to disease or phenotypic feature association_subject_closure" (
	"material sample to disease or phenotypic feature association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("material sample to disease or phenotypic feature association_id", subject_closure), 
	FOREIGN KEY("material sample to disease or phenotypic feature association_id") REFERENCES "material sample to disease or phenotypic feature association" (id)
);
CREATE TABLE "material sample to disease or phenotypic feature association_object_closure" (
	"material sample to disease or phenotypic feature association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("material sample to disease or phenotypic feature association_id", object_closure), 
	FOREIGN KEY("material sample to disease or phenotypic feature association_id") REFERENCES "material sample to disease or phenotypic feature association" (id)
);
CREATE TABLE "material sample to disease or phenotypic feature association_subject_category_closure" (
	"material sample to disease or phenotypic feature association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("material sample to disease or phenotypic feature association_id", subject_category_closure_id), 
	FOREIGN KEY("material sample to disease or phenotypic feature association_id") REFERENCES "material sample to disease or phenotypic feature association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "material sample to disease or phenotypic feature association_object_category_closure" (
	"material sample to disease or phenotypic feature association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("material sample to disease or phenotypic feature association_id", object_category_closure_id), 
	FOREIGN KEY("material sample to disease or phenotypic feature association_id") REFERENCES "material sample to disease or phenotypic feature association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "material sample to disease or phenotypic feature association_subject_label_closure" (
	"material sample to disease or phenotypic feature association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("material sample to disease or phenotypic feature association_id", subject_label_closure), 
	FOREIGN KEY("material sample to disease or phenotypic feature association_id") REFERENCES "material sample to disease or phenotypic feature association" (id)
);
CREATE TABLE "material sample to disease or phenotypic feature association_object_label_closure" (
	"material sample to disease or phenotypic feature association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("material sample to disease or phenotypic feature association_id", object_label_closure), 
	FOREIGN KEY("material sample to disease or phenotypic feature association_id") REFERENCES "material sample to disease or phenotypic feature association" (id)
);
CREATE TABLE "material sample to disease or phenotypic feature association_retrieval_source_ids" (
	"material sample to disease or phenotypic feature association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("material sample to disease or phenotypic feature association_id", retrieval_source_ids_id), 
	FOREIGN KEY("material sample to disease or phenotypic feature association_id") REFERENCES "material sample to disease or phenotypic feature association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "material sample to disease or phenotypic feature association_category" (
	"material sample to disease or phenotypic feature association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("material sample to disease or phenotypic feature association_id", category), 
	FOREIGN KEY("material sample to disease or phenotypic feature association_id") REFERENCES "material sample to disease or phenotypic feature association" (id)
);
CREATE TABLE "material sample to disease or phenotypic feature association_type" (
	"material sample to disease or phenotypic feature association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("material sample to disease or phenotypic feature association_id", type), 
	FOREIGN KEY("material sample to disease or phenotypic feature association_id") REFERENCES "material sample to disease or phenotypic feature association" (id)
);
CREATE TABLE "material sample to disease or phenotypic feature association_has_attribute" (
	"material sample to disease or phenotypic feature association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("material sample to disease or phenotypic feature association_id", has_attribute_id), 
	FOREIGN KEY("material sample to disease or phenotypic feature association_id") REFERENCES "material sample to disease or phenotypic feature association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "disease to exposure event association_qualifiers" (
	"disease to exposure event association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("disease to exposure event association_id", qualifiers_id), 
	FOREIGN KEY("disease to exposure event association_id") REFERENCES "disease to exposure event association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "disease to exposure event association_publications" (
	"disease to exposure event association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("disease to exposure event association_id", publications_id), 
	FOREIGN KEY("disease to exposure event association_id") REFERENCES "disease to exposure event association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "disease to exposure event association_has_evidence" (
	"disease to exposure event association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("disease to exposure event association_id", has_evidence_id), 
	FOREIGN KEY("disease to exposure event association_id") REFERENCES "disease to exposure event association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "disease to exposure event association_aggregator_knowledge_source" (
	"disease to exposure event association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("disease to exposure event association_id", aggregator_knowledge_source), 
	FOREIGN KEY("disease to exposure event association_id") REFERENCES "disease to exposure event association" (id)
);
CREATE TABLE "disease to exposure event association_subject_closure" (
	"disease to exposure event association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("disease to exposure event association_id", subject_closure), 
	FOREIGN KEY("disease to exposure event association_id") REFERENCES "disease to exposure event association" (id)
);
CREATE TABLE "disease to exposure event association_object_closure" (
	"disease to exposure event association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("disease to exposure event association_id", object_closure), 
	FOREIGN KEY("disease to exposure event association_id") REFERENCES "disease to exposure event association" (id)
);
CREATE TABLE "disease to exposure event association_subject_category_closure" (
	"disease to exposure event association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("disease to exposure event association_id", subject_category_closure_id), 
	FOREIGN KEY("disease to exposure event association_id") REFERENCES "disease to exposure event association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "disease to exposure event association_object_category_closure" (
	"disease to exposure event association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("disease to exposure event association_id", object_category_closure_id), 
	FOREIGN KEY("disease to exposure event association_id") REFERENCES "disease to exposure event association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "disease to exposure event association_subject_label_closure" (
	"disease to exposure event association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("disease to exposure event association_id", subject_label_closure), 
	FOREIGN KEY("disease to exposure event association_id") REFERENCES "disease to exposure event association" (id)
);
CREATE TABLE "disease to exposure event association_object_label_closure" (
	"disease to exposure event association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("disease to exposure event association_id", object_label_closure), 
	FOREIGN KEY("disease to exposure event association_id") REFERENCES "disease to exposure event association" (id)
);
CREATE TABLE "disease to exposure event association_retrieval_source_ids" (
	"disease to exposure event association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("disease to exposure event association_id", retrieval_source_ids_id), 
	FOREIGN KEY("disease to exposure event association_id") REFERENCES "disease to exposure event association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "disease to exposure event association_category" (
	"disease to exposure event association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("disease to exposure event association_id", category), 
	FOREIGN KEY("disease to exposure event association_id") REFERENCES "disease to exposure event association" (id)
);
CREATE TABLE "disease to exposure event association_type" (
	"disease to exposure event association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("disease to exposure event association_id", type), 
	FOREIGN KEY("disease to exposure event association_id") REFERENCES "disease to exposure event association" (id)
);
CREATE TABLE "disease to exposure event association_has_attribute" (
	"disease to exposure event association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("disease to exposure event association_id", has_attribute_id), 
	FOREIGN KEY("disease to exposure event association_id") REFERENCES "disease to exposure event association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "exposure event to outcome association_qualifiers" (
	"exposure event to outcome association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("exposure event to outcome association_id", qualifiers_id), 
	FOREIGN KEY("exposure event to outcome association_id") REFERENCES "exposure event to outcome association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "exposure event to outcome association_publications" (
	"exposure event to outcome association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("exposure event to outcome association_id", publications_id), 
	FOREIGN KEY("exposure event to outcome association_id") REFERENCES "exposure event to outcome association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "exposure event to outcome association_has_evidence" (
	"exposure event to outcome association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("exposure event to outcome association_id", has_evidence_id), 
	FOREIGN KEY("exposure event to outcome association_id") REFERENCES "exposure event to outcome association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "exposure event to outcome association_aggregator_knowledge_source" (
	"exposure event to outcome association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("exposure event to outcome association_id", aggregator_knowledge_source), 
	FOREIGN KEY("exposure event to outcome association_id") REFERENCES "exposure event to outcome association" (id)
);
CREATE TABLE "exposure event to outcome association_subject_closure" (
	"exposure event to outcome association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("exposure event to outcome association_id", subject_closure), 
	FOREIGN KEY("exposure event to outcome association_id") REFERENCES "exposure event to outcome association" (id)
);
CREATE TABLE "exposure event to outcome association_object_closure" (
	"exposure event to outcome association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("exposure event to outcome association_id", object_closure), 
	FOREIGN KEY("exposure event to outcome association_id") REFERENCES "exposure event to outcome association" (id)
);
CREATE TABLE "exposure event to outcome association_subject_category_closure" (
	"exposure event to outcome association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("exposure event to outcome association_id", subject_category_closure_id), 
	FOREIGN KEY("exposure event to outcome association_id") REFERENCES "exposure event to outcome association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "exposure event to outcome association_object_category_closure" (
	"exposure event to outcome association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("exposure event to outcome association_id", object_category_closure_id), 
	FOREIGN KEY("exposure event to outcome association_id") REFERENCES "exposure event to outcome association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "exposure event to outcome association_subject_label_closure" (
	"exposure event to outcome association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("exposure event to outcome association_id", subject_label_closure), 
	FOREIGN KEY("exposure event to outcome association_id") REFERENCES "exposure event to outcome association" (id)
);
CREATE TABLE "exposure event to outcome association_object_label_closure" (
	"exposure event to outcome association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("exposure event to outcome association_id", object_label_closure), 
	FOREIGN KEY("exposure event to outcome association_id") REFERENCES "exposure event to outcome association" (id)
);
CREATE TABLE "exposure event to outcome association_retrieval_source_ids" (
	"exposure event to outcome association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("exposure event to outcome association_id", retrieval_source_ids_id), 
	FOREIGN KEY("exposure event to outcome association_id") REFERENCES "exposure event to outcome association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "exposure event to outcome association_category" (
	"exposure event to outcome association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("exposure event to outcome association_id", category), 
	FOREIGN KEY("exposure event to outcome association_id") REFERENCES "exposure event to outcome association" (id)
);
CREATE TABLE "exposure event to outcome association_type" (
	"exposure event to outcome association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("exposure event to outcome association_id", type), 
	FOREIGN KEY("exposure event to outcome association_id") REFERENCES "exposure event to outcome association" (id)
);
CREATE TABLE "exposure event to outcome association_has_attribute" (
	"exposure event to outcome association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("exposure event to outcome association_id", has_attribute_id), 
	FOREIGN KEY("exposure event to outcome association_id") REFERENCES "exposure event to outcome association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "information content entity to named thing association_qualifiers" (
	"information content entity to named thing association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("information content entity to named thing association_id", qualifiers_id), 
	FOREIGN KEY("information content entity to named thing association_id") REFERENCES "information content entity to named thing association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "information content entity to named thing association_publications" (
	"information content entity to named thing association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("information content entity to named thing association_id", publications_id), 
	FOREIGN KEY("information content entity to named thing association_id") REFERENCES "information content entity to named thing association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "information content entity to named thing association_has_evidence" (
	"information content entity to named thing association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("information content entity to named thing association_id", has_evidence_id), 
	FOREIGN KEY("information content entity to named thing association_id") REFERENCES "information content entity to named thing association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "information content entity to named thing association_aggregator_knowledge_source" (
	"information content entity to named thing association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("information content entity to named thing association_id", aggregator_knowledge_source), 
	FOREIGN KEY("information content entity to named thing association_id") REFERENCES "information content entity to named thing association" (id)
);
CREATE TABLE "information content entity to named thing association_subject_closure" (
	"information content entity to named thing association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("information content entity to named thing association_id", subject_closure), 
	FOREIGN KEY("information content entity to named thing association_id") REFERENCES "information content entity to named thing association" (id)
);
CREATE TABLE "information content entity to named thing association_object_closure" (
	"information content entity to named thing association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("information content entity to named thing association_id", object_closure), 
	FOREIGN KEY("information content entity to named thing association_id") REFERENCES "information content entity to named thing association" (id)
);
CREATE TABLE "information content entity to named thing association_subject_category_closure" (
	"information content entity to named thing association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("information content entity to named thing association_id", subject_category_closure_id), 
	FOREIGN KEY("information content entity to named thing association_id") REFERENCES "information content entity to named thing association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "information content entity to named thing association_object_category_closure" (
	"information content entity to named thing association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("information content entity to named thing association_id", object_category_closure_id), 
	FOREIGN KEY("information content entity to named thing association_id") REFERENCES "information content entity to named thing association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "information content entity to named thing association_subject_label_closure" (
	"information content entity to named thing association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("information content entity to named thing association_id", subject_label_closure), 
	FOREIGN KEY("information content entity to named thing association_id") REFERENCES "information content entity to named thing association" (id)
);
CREATE TABLE "information content entity to named thing association_object_label_closure" (
	"information content entity to named thing association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("information content entity to named thing association_id", object_label_closure), 
	FOREIGN KEY("information content entity to named thing association_id") REFERENCES "information content entity to named thing association" (id)
);
CREATE TABLE "information content entity to named thing association_retrieval_source_ids" (
	"information content entity to named thing association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("information content entity to named thing association_id", retrieval_source_ids_id), 
	FOREIGN KEY("information content entity to named thing association_id") REFERENCES "information content entity to named thing association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "information content entity to named thing association_category" (
	"information content entity to named thing association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("information content entity to named thing association_id", category), 
	FOREIGN KEY("information content entity to named thing association_id") REFERENCES "information content entity to named thing association" (id)
);
CREATE TABLE "information content entity to named thing association_type" (
	"information content entity to named thing association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("information content entity to named thing association_id", type), 
	FOREIGN KEY("information content entity to named thing association_id") REFERENCES "information content entity to named thing association" (id)
);
CREATE TABLE "information content entity to named thing association_has_attribute" (
	"information content entity to named thing association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("information content entity to named thing association_id", has_attribute_id), 
	FOREIGN KEY("information content entity to named thing association_id") REFERENCES "information content entity to named thing association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "disease or phenotypic feature to location association_qualifiers" (
	"disease or phenotypic feature to location association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("disease or phenotypic feature to location association_id", qualifiers_id), 
	FOREIGN KEY("disease or phenotypic feature to location association_id") REFERENCES "disease or phenotypic feature to location association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "disease or phenotypic feature to location association_publications" (
	"disease or phenotypic feature to location association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("disease or phenotypic feature to location association_id", publications_id), 
	FOREIGN KEY("disease or phenotypic feature to location association_id") REFERENCES "disease or phenotypic feature to location association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "disease or phenotypic feature to location association_has_evidence" (
	"disease or phenotypic feature to location association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("disease or phenotypic feature to location association_id", has_evidence_id), 
	FOREIGN KEY("disease or phenotypic feature to location association_id") REFERENCES "disease or phenotypic feature to location association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "disease or phenotypic feature to location association_aggregator_knowledge_source" (
	"disease or phenotypic feature to location association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("disease or phenotypic feature to location association_id", aggregator_knowledge_source), 
	FOREIGN KEY("disease or phenotypic feature to location association_id") REFERENCES "disease or phenotypic feature to location association" (id)
);
CREATE TABLE "disease or phenotypic feature to location association_subject_closure" (
	"disease or phenotypic feature to location association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("disease or phenotypic feature to location association_id", subject_closure), 
	FOREIGN KEY("disease or phenotypic feature to location association_id") REFERENCES "disease or phenotypic feature to location association" (id)
);
CREATE TABLE "disease or phenotypic feature to location association_object_closure" (
	"disease or phenotypic feature to location association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("disease or phenotypic feature to location association_id", object_closure), 
	FOREIGN KEY("disease or phenotypic feature to location association_id") REFERENCES "disease or phenotypic feature to location association" (id)
);
CREATE TABLE "disease or phenotypic feature to location association_subject_category_closure" (
	"disease or phenotypic feature to location association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("disease or phenotypic feature to location association_id", subject_category_closure_id), 
	FOREIGN KEY("disease or phenotypic feature to location association_id") REFERENCES "disease or phenotypic feature to location association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "disease or phenotypic feature to location association_object_category_closure" (
	"disease or phenotypic feature to location association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("disease or phenotypic feature to location association_id", object_category_closure_id), 
	FOREIGN KEY("disease or phenotypic feature to location association_id") REFERENCES "disease or phenotypic feature to location association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "disease or phenotypic feature to location association_subject_label_closure" (
	"disease or phenotypic feature to location association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("disease or phenotypic feature to location association_id", subject_label_closure), 
	FOREIGN KEY("disease or phenotypic feature to location association_id") REFERENCES "disease or phenotypic feature to location association" (id)
);
CREATE TABLE "disease or phenotypic feature to location association_object_label_closure" (
	"disease or phenotypic feature to location association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("disease or phenotypic feature to location association_id", object_label_closure), 
	FOREIGN KEY("disease or phenotypic feature to location association_id") REFERENCES "disease or phenotypic feature to location association" (id)
);
CREATE TABLE "disease or phenotypic feature to location association_retrieval_source_ids" (
	"disease or phenotypic feature to location association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("disease or phenotypic feature to location association_id", retrieval_source_ids_id), 
	FOREIGN KEY("disease or phenotypic feature to location association_id") REFERENCES "disease or phenotypic feature to location association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "disease or phenotypic feature to location association_category" (
	"disease or phenotypic feature to location association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("disease or phenotypic feature to location association_id", category), 
	FOREIGN KEY("disease or phenotypic feature to location association_id") REFERENCES "disease or phenotypic feature to location association" (id)
);
CREATE TABLE "disease or phenotypic feature to location association_type" (
	"disease or phenotypic feature to location association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("disease or phenotypic feature to location association_id", type), 
	FOREIGN KEY("disease or phenotypic feature to location association_id") REFERENCES "disease or phenotypic feature to location association" (id)
);
CREATE TABLE "disease or phenotypic feature to location association_has_attribute" (
	"disease or phenotypic feature to location association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("disease or phenotypic feature to location association_id", has_attribute_id), 
	FOREIGN KEY("disease or phenotypic feature to location association_id") REFERENCES "disease or phenotypic feature to location association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "disease or phenotypic feature to genetic inheritance association_qualifiers" (
	"disease or phenotypic feature to genetic inheritance association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("disease or phenotypic feature to genetic inheritance association_id", qualifiers_id), 
	FOREIGN KEY("disease or phenotypic feature to genetic inheritance association_id") REFERENCES "disease or phenotypic feature to genetic inheritance association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "disease or phenotypic feature to genetic inheritance association_publications" (
	"disease or phenotypic feature to genetic inheritance association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("disease or phenotypic feature to genetic inheritance association_id", publications_id), 
	FOREIGN KEY("disease or phenotypic feature to genetic inheritance association_id") REFERENCES "disease or phenotypic feature to genetic inheritance association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "disease or phenotypic feature to genetic inheritance association_has_evidence" (
	"disease or phenotypic feature to genetic inheritance association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("disease or phenotypic feature to genetic inheritance association_id", has_evidence_id), 
	FOREIGN KEY("disease or phenotypic feature to genetic inheritance association_id") REFERENCES "disease or phenotypic feature to genetic inheritance association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "disease or phenotypic feature to genetic inheritance association_aggregator_knowledge_source" (
	"disease or phenotypic feature to genetic inheritance association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("disease or phenotypic feature to genetic inheritance association_id", aggregator_knowledge_source), 
	FOREIGN KEY("disease or phenotypic feature to genetic inheritance association_id") REFERENCES "disease or phenotypic feature to genetic inheritance association" (id)
);
CREATE TABLE "disease or phenotypic feature to genetic inheritance association_subject_closure" (
	"disease or phenotypic feature to genetic inheritance association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("disease or phenotypic feature to genetic inheritance association_id", subject_closure), 
	FOREIGN KEY("disease or phenotypic feature to genetic inheritance association_id") REFERENCES "disease or phenotypic feature to genetic inheritance association" (id)
);
CREATE TABLE "disease or phenotypic feature to genetic inheritance association_object_closure" (
	"disease or phenotypic feature to genetic inheritance association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("disease or phenotypic feature to genetic inheritance association_id", object_closure), 
	FOREIGN KEY("disease or phenotypic feature to genetic inheritance association_id") REFERENCES "disease or phenotypic feature to genetic inheritance association" (id)
);
CREATE TABLE "disease or phenotypic feature to genetic inheritance association_subject_category_closure" (
	"disease or phenotypic feature to genetic inheritance association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("disease or phenotypic feature to genetic inheritance association_id", subject_category_closure_id), 
	FOREIGN KEY("disease or phenotypic feature to genetic inheritance association_id") REFERENCES "disease or phenotypic feature to genetic inheritance association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "disease or phenotypic feature to genetic inheritance association_object_category_closure" (
	"disease or phenotypic feature to genetic inheritance association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("disease or phenotypic feature to genetic inheritance association_id", object_category_closure_id), 
	FOREIGN KEY("disease or phenotypic feature to genetic inheritance association_id") REFERENCES "disease or phenotypic feature to genetic inheritance association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "disease or phenotypic feature to genetic inheritance association_subject_label_closure" (
	"disease or phenotypic feature to genetic inheritance association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("disease or phenotypic feature to genetic inheritance association_id", subject_label_closure), 
	FOREIGN KEY("disease or phenotypic feature to genetic inheritance association_id") REFERENCES "disease or phenotypic feature to genetic inheritance association" (id)
);
CREATE TABLE "disease or phenotypic feature to genetic inheritance association_object_label_closure" (
	"disease or phenotypic feature to genetic inheritance association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("disease or phenotypic feature to genetic inheritance association_id", object_label_closure), 
	FOREIGN KEY("disease or phenotypic feature to genetic inheritance association_id") REFERENCES "disease or phenotypic feature to genetic inheritance association" (id)
);
CREATE TABLE "disease or phenotypic feature to genetic inheritance association_retrieval_source_ids" (
	"disease or phenotypic feature to genetic inheritance association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("disease or phenotypic feature to genetic inheritance association_id", retrieval_source_ids_id), 
	FOREIGN KEY("disease or phenotypic feature to genetic inheritance association_id") REFERENCES "disease or phenotypic feature to genetic inheritance association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "disease or phenotypic feature to genetic inheritance association_category" (
	"disease or phenotypic feature to genetic inheritance association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("disease or phenotypic feature to genetic inheritance association_id", category), 
	FOREIGN KEY("disease or phenotypic feature to genetic inheritance association_id") REFERENCES "disease or phenotypic feature to genetic inheritance association" (id)
);
CREATE TABLE "disease or phenotypic feature to genetic inheritance association_type" (
	"disease or phenotypic feature to genetic inheritance association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("disease or phenotypic feature to genetic inheritance association_id", type), 
	FOREIGN KEY("disease or phenotypic feature to genetic inheritance association_id") REFERENCES "disease or phenotypic feature to genetic inheritance association" (id)
);
CREATE TABLE "disease or phenotypic feature to genetic inheritance association_has_attribute" (
	"disease or phenotypic feature to genetic inheritance association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("disease or phenotypic feature to genetic inheritance association_id", has_attribute_id), 
	FOREIGN KEY("disease or phenotypic feature to genetic inheritance association_id") REFERENCES "disease or phenotypic feature to genetic inheritance association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "variant to gene association_qualifiers" (
	"variant to gene association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("variant to gene association_id", qualifiers_id), 
	FOREIGN KEY("variant to gene association_id") REFERENCES "variant to gene association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "variant to gene association_publications" (
	"variant to gene association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("variant to gene association_id", publications_id), 
	FOREIGN KEY("variant to gene association_id") REFERENCES "variant to gene association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "variant to gene association_has_evidence" (
	"variant to gene association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("variant to gene association_id", has_evidence_id), 
	FOREIGN KEY("variant to gene association_id") REFERENCES "variant to gene association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "variant to gene association_aggregator_knowledge_source" (
	"variant to gene association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("variant to gene association_id", aggregator_knowledge_source), 
	FOREIGN KEY("variant to gene association_id") REFERENCES "variant to gene association" (id)
);
CREATE TABLE "variant to gene association_subject_closure" (
	"variant to gene association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("variant to gene association_id", subject_closure), 
	FOREIGN KEY("variant to gene association_id") REFERENCES "variant to gene association" (id)
);
CREATE TABLE "variant to gene association_object_closure" (
	"variant to gene association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("variant to gene association_id", object_closure), 
	FOREIGN KEY("variant to gene association_id") REFERENCES "variant to gene association" (id)
);
CREATE TABLE "variant to gene association_subject_category_closure" (
	"variant to gene association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("variant to gene association_id", subject_category_closure_id), 
	FOREIGN KEY("variant to gene association_id") REFERENCES "variant to gene association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "variant to gene association_object_category_closure" (
	"variant to gene association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("variant to gene association_id", object_category_closure_id), 
	FOREIGN KEY("variant to gene association_id") REFERENCES "variant to gene association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "variant to gene association_subject_label_closure" (
	"variant to gene association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("variant to gene association_id", subject_label_closure), 
	FOREIGN KEY("variant to gene association_id") REFERENCES "variant to gene association" (id)
);
CREATE TABLE "variant to gene association_object_label_closure" (
	"variant to gene association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("variant to gene association_id", object_label_closure), 
	FOREIGN KEY("variant to gene association_id") REFERENCES "variant to gene association" (id)
);
CREATE TABLE "variant to gene association_retrieval_source_ids" (
	"variant to gene association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("variant to gene association_id", retrieval_source_ids_id), 
	FOREIGN KEY("variant to gene association_id") REFERENCES "variant to gene association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "variant to gene association_category" (
	"variant to gene association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("variant to gene association_id", category), 
	FOREIGN KEY("variant to gene association_id") REFERENCES "variant to gene association" (id)
);
CREATE TABLE "variant to gene association_type" (
	"variant to gene association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("variant to gene association_id", type), 
	FOREIGN KEY("variant to gene association_id") REFERENCES "variant to gene association" (id)
);
CREATE TABLE "variant to gene association_has_attribute" (
	"variant to gene association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("variant to gene association_id", has_attribute_id), 
	FOREIGN KEY("variant to gene association_id") REFERENCES "variant to gene association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "variant to gene expression association_qualifiers" (
	"variant to gene expression association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("variant to gene expression association_id", qualifiers_id), 
	FOREIGN KEY("variant to gene expression association_id") REFERENCES "variant to gene expression association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "variant to gene expression association_publications" (
	"variant to gene expression association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("variant to gene expression association_id", publications_id), 
	FOREIGN KEY("variant to gene expression association_id") REFERENCES "variant to gene expression association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "variant to gene expression association_has_evidence" (
	"variant to gene expression association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("variant to gene expression association_id", has_evidence_id), 
	FOREIGN KEY("variant to gene expression association_id") REFERENCES "variant to gene expression association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "variant to gene expression association_aggregator_knowledge_source" (
	"variant to gene expression association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("variant to gene expression association_id", aggregator_knowledge_source), 
	FOREIGN KEY("variant to gene expression association_id") REFERENCES "variant to gene expression association" (id)
);
CREATE TABLE "variant to gene expression association_subject_closure" (
	"variant to gene expression association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("variant to gene expression association_id", subject_closure), 
	FOREIGN KEY("variant to gene expression association_id") REFERENCES "variant to gene expression association" (id)
);
CREATE TABLE "variant to gene expression association_object_closure" (
	"variant to gene expression association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("variant to gene expression association_id", object_closure), 
	FOREIGN KEY("variant to gene expression association_id") REFERENCES "variant to gene expression association" (id)
);
CREATE TABLE "variant to gene expression association_subject_category_closure" (
	"variant to gene expression association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("variant to gene expression association_id", subject_category_closure_id), 
	FOREIGN KEY("variant to gene expression association_id") REFERENCES "variant to gene expression association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "variant to gene expression association_object_category_closure" (
	"variant to gene expression association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("variant to gene expression association_id", object_category_closure_id), 
	FOREIGN KEY("variant to gene expression association_id") REFERENCES "variant to gene expression association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "variant to gene expression association_subject_label_closure" (
	"variant to gene expression association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("variant to gene expression association_id", subject_label_closure), 
	FOREIGN KEY("variant to gene expression association_id") REFERENCES "variant to gene expression association" (id)
);
CREATE TABLE "variant to gene expression association_object_label_closure" (
	"variant to gene expression association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("variant to gene expression association_id", object_label_closure), 
	FOREIGN KEY("variant to gene expression association_id") REFERENCES "variant to gene expression association" (id)
);
CREATE TABLE "variant to gene expression association_retrieval_source_ids" (
	"variant to gene expression association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("variant to gene expression association_id", retrieval_source_ids_id), 
	FOREIGN KEY("variant to gene expression association_id") REFERENCES "variant to gene expression association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "variant to gene expression association_category" (
	"variant to gene expression association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("variant to gene expression association_id", category), 
	FOREIGN KEY("variant to gene expression association_id") REFERENCES "variant to gene expression association" (id)
);
CREATE TABLE "variant to gene expression association_type" (
	"variant to gene expression association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("variant to gene expression association_id", type), 
	FOREIGN KEY("variant to gene expression association_id") REFERENCES "variant to gene expression association" (id)
);
CREATE TABLE "variant to gene expression association_has_attribute" (
	"variant to gene expression association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("variant to gene expression association_id", has_attribute_id), 
	FOREIGN KEY("variant to gene expression association_id") REFERENCES "variant to gene expression association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "variant to population association_qualifiers" (
	"variant to population association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("variant to population association_id", qualifiers_id), 
	FOREIGN KEY("variant to population association_id") REFERENCES "variant to population association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "variant to population association_publications" (
	"variant to population association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("variant to population association_id", publications_id), 
	FOREIGN KEY("variant to population association_id") REFERENCES "variant to population association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "variant to population association_has_evidence" (
	"variant to population association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("variant to population association_id", has_evidence_id), 
	FOREIGN KEY("variant to population association_id") REFERENCES "variant to population association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "variant to population association_aggregator_knowledge_source" (
	"variant to population association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("variant to population association_id", aggregator_knowledge_source), 
	FOREIGN KEY("variant to population association_id") REFERENCES "variant to population association" (id)
);
CREATE TABLE "variant to population association_subject_closure" (
	"variant to population association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("variant to population association_id", subject_closure), 
	FOREIGN KEY("variant to population association_id") REFERENCES "variant to population association" (id)
);
CREATE TABLE "variant to population association_object_closure" (
	"variant to population association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("variant to population association_id", object_closure), 
	FOREIGN KEY("variant to population association_id") REFERENCES "variant to population association" (id)
);
CREATE TABLE "variant to population association_subject_category_closure" (
	"variant to population association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("variant to population association_id", subject_category_closure_id), 
	FOREIGN KEY("variant to population association_id") REFERENCES "variant to population association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "variant to population association_object_category_closure" (
	"variant to population association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("variant to population association_id", object_category_closure_id), 
	FOREIGN KEY("variant to population association_id") REFERENCES "variant to population association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "variant to population association_subject_label_closure" (
	"variant to population association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("variant to population association_id", subject_label_closure), 
	FOREIGN KEY("variant to population association_id") REFERENCES "variant to population association" (id)
);
CREATE TABLE "variant to population association_object_label_closure" (
	"variant to population association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("variant to population association_id", object_label_closure), 
	FOREIGN KEY("variant to population association_id") REFERENCES "variant to population association" (id)
);
CREATE TABLE "variant to population association_retrieval_source_ids" (
	"variant to population association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("variant to population association_id", retrieval_source_ids_id), 
	FOREIGN KEY("variant to population association_id") REFERENCES "variant to population association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "variant to population association_category" (
	"variant to population association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("variant to population association_id", category), 
	FOREIGN KEY("variant to population association_id") REFERENCES "variant to population association" (id)
);
CREATE TABLE "variant to population association_type" (
	"variant to population association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("variant to population association_id", type), 
	FOREIGN KEY("variant to population association_id") REFERENCES "variant to population association" (id)
);
CREATE TABLE "variant to population association_has_attribute" (
	"variant to population association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("variant to population association_id", has_attribute_id), 
	FOREIGN KEY("variant to population association_id") REFERENCES "variant to population association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "population to population association_qualifiers" (
	"population to population association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("population to population association_id", qualifiers_id), 
	FOREIGN KEY("population to population association_id") REFERENCES "population to population association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "population to population association_publications" (
	"population to population association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("population to population association_id", publications_id), 
	FOREIGN KEY("population to population association_id") REFERENCES "population to population association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "population to population association_has_evidence" (
	"population to population association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("population to population association_id", has_evidence_id), 
	FOREIGN KEY("population to population association_id") REFERENCES "population to population association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "population to population association_aggregator_knowledge_source" (
	"population to population association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("population to population association_id", aggregator_knowledge_source), 
	FOREIGN KEY("population to population association_id") REFERENCES "population to population association" (id)
);
CREATE TABLE "population to population association_subject_closure" (
	"population to population association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("population to population association_id", subject_closure), 
	FOREIGN KEY("population to population association_id") REFERENCES "population to population association" (id)
);
CREATE TABLE "population to population association_object_closure" (
	"population to population association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("population to population association_id", object_closure), 
	FOREIGN KEY("population to population association_id") REFERENCES "population to population association" (id)
);
CREATE TABLE "population to population association_subject_category_closure" (
	"population to population association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("population to population association_id", subject_category_closure_id), 
	FOREIGN KEY("population to population association_id") REFERENCES "population to population association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "population to population association_object_category_closure" (
	"population to population association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("population to population association_id", object_category_closure_id), 
	FOREIGN KEY("population to population association_id") REFERENCES "population to population association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "population to population association_subject_label_closure" (
	"population to population association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("population to population association_id", subject_label_closure), 
	FOREIGN KEY("population to population association_id") REFERENCES "population to population association" (id)
);
CREATE TABLE "population to population association_object_label_closure" (
	"population to population association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("population to population association_id", object_label_closure), 
	FOREIGN KEY("population to population association_id") REFERENCES "population to population association" (id)
);
CREATE TABLE "population to population association_retrieval_source_ids" (
	"population to population association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("population to population association_id", retrieval_source_ids_id), 
	FOREIGN KEY("population to population association_id") REFERENCES "population to population association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "population to population association_category" (
	"population to population association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("population to population association_id", category), 
	FOREIGN KEY("population to population association_id") REFERENCES "population to population association" (id)
);
CREATE TABLE "population to population association_type" (
	"population to population association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("population to population association_id", type), 
	FOREIGN KEY("population to population association_id") REFERENCES "population to population association" (id)
);
CREATE TABLE "population to population association_has_attribute" (
	"population to population association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("population to population association_id", has_attribute_id), 
	FOREIGN KEY("population to population association_id") REFERENCES "population to population association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "variant to disease association_qualifiers" (
	"variant to disease association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("variant to disease association_id", qualifiers_id), 
	FOREIGN KEY("variant to disease association_id") REFERENCES "variant to disease association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "variant to disease association_publications" (
	"variant to disease association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("variant to disease association_id", publications_id), 
	FOREIGN KEY("variant to disease association_id") REFERENCES "variant to disease association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "variant to disease association_has_evidence" (
	"variant to disease association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("variant to disease association_id", has_evidence_id), 
	FOREIGN KEY("variant to disease association_id") REFERENCES "variant to disease association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "variant to disease association_aggregator_knowledge_source" (
	"variant to disease association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("variant to disease association_id", aggregator_knowledge_source), 
	FOREIGN KEY("variant to disease association_id") REFERENCES "variant to disease association" (id)
);
CREATE TABLE "variant to disease association_subject_closure" (
	"variant to disease association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("variant to disease association_id", subject_closure), 
	FOREIGN KEY("variant to disease association_id") REFERENCES "variant to disease association" (id)
);
CREATE TABLE "variant to disease association_object_closure" (
	"variant to disease association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("variant to disease association_id", object_closure), 
	FOREIGN KEY("variant to disease association_id") REFERENCES "variant to disease association" (id)
);
CREATE TABLE "variant to disease association_subject_category_closure" (
	"variant to disease association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("variant to disease association_id", subject_category_closure_id), 
	FOREIGN KEY("variant to disease association_id") REFERENCES "variant to disease association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "variant to disease association_object_category_closure" (
	"variant to disease association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("variant to disease association_id", object_category_closure_id), 
	FOREIGN KEY("variant to disease association_id") REFERENCES "variant to disease association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "variant to disease association_subject_label_closure" (
	"variant to disease association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("variant to disease association_id", subject_label_closure), 
	FOREIGN KEY("variant to disease association_id") REFERENCES "variant to disease association" (id)
);
CREATE TABLE "variant to disease association_object_label_closure" (
	"variant to disease association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("variant to disease association_id", object_label_closure), 
	FOREIGN KEY("variant to disease association_id") REFERENCES "variant to disease association" (id)
);
CREATE TABLE "variant to disease association_retrieval_source_ids" (
	"variant to disease association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("variant to disease association_id", retrieval_source_ids_id), 
	FOREIGN KEY("variant to disease association_id") REFERENCES "variant to disease association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "variant to disease association_category" (
	"variant to disease association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("variant to disease association_id", category), 
	FOREIGN KEY("variant to disease association_id") REFERENCES "variant to disease association" (id)
);
CREATE TABLE "variant to disease association_type" (
	"variant to disease association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("variant to disease association_id", type), 
	FOREIGN KEY("variant to disease association_id") REFERENCES "variant to disease association" (id)
);
CREATE TABLE "variant to disease association_has_attribute" (
	"variant to disease association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("variant to disease association_id", has_attribute_id), 
	FOREIGN KEY("variant to disease association_id") REFERENCES "variant to disease association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "variant as a model of disease association_qualifiers" (
	"variant as a model of disease association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("variant as a model of disease association_id", qualifiers_id), 
	FOREIGN KEY("variant as a model of disease association_id") REFERENCES "variant as a model of disease association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "variant as a model of disease association_publications" (
	"variant as a model of disease association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("variant as a model of disease association_id", publications_id), 
	FOREIGN KEY("variant as a model of disease association_id") REFERENCES "variant as a model of disease association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "variant as a model of disease association_has_evidence" (
	"variant as a model of disease association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("variant as a model of disease association_id", has_evidence_id), 
	FOREIGN KEY("variant as a model of disease association_id") REFERENCES "variant as a model of disease association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "variant as a model of disease association_aggregator_knowledge_source" (
	"variant as a model of disease association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("variant as a model of disease association_id", aggregator_knowledge_source), 
	FOREIGN KEY("variant as a model of disease association_id") REFERENCES "variant as a model of disease association" (id)
);
CREATE TABLE "variant as a model of disease association_subject_closure" (
	"variant as a model of disease association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("variant as a model of disease association_id", subject_closure), 
	FOREIGN KEY("variant as a model of disease association_id") REFERENCES "variant as a model of disease association" (id)
);
CREATE TABLE "variant as a model of disease association_object_closure" (
	"variant as a model of disease association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("variant as a model of disease association_id", object_closure), 
	FOREIGN KEY("variant as a model of disease association_id") REFERENCES "variant as a model of disease association" (id)
);
CREATE TABLE "variant as a model of disease association_subject_category_closure" (
	"variant as a model of disease association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("variant as a model of disease association_id", subject_category_closure_id), 
	FOREIGN KEY("variant as a model of disease association_id") REFERENCES "variant as a model of disease association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "variant as a model of disease association_object_category_closure" (
	"variant as a model of disease association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("variant as a model of disease association_id", object_category_closure_id), 
	FOREIGN KEY("variant as a model of disease association_id") REFERENCES "variant as a model of disease association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "variant as a model of disease association_subject_label_closure" (
	"variant as a model of disease association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("variant as a model of disease association_id", subject_label_closure), 
	FOREIGN KEY("variant as a model of disease association_id") REFERENCES "variant as a model of disease association" (id)
);
CREATE TABLE "variant as a model of disease association_object_label_closure" (
	"variant as a model of disease association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("variant as a model of disease association_id", object_label_closure), 
	FOREIGN KEY("variant as a model of disease association_id") REFERENCES "variant as a model of disease association" (id)
);
CREATE TABLE "variant as a model of disease association_retrieval_source_ids" (
	"variant as a model of disease association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("variant as a model of disease association_id", retrieval_source_ids_id), 
	FOREIGN KEY("variant as a model of disease association_id") REFERENCES "variant as a model of disease association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "variant as a model of disease association_category" (
	"variant as a model of disease association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("variant as a model of disease association_id", category), 
	FOREIGN KEY("variant as a model of disease association_id") REFERENCES "variant as a model of disease association" (id)
);
CREATE TABLE "variant as a model of disease association_type" (
	"variant as a model of disease association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("variant as a model of disease association_id", type), 
	FOREIGN KEY("variant as a model of disease association_id") REFERENCES "variant as a model of disease association" (id)
);
CREATE TABLE "variant as a model of disease association_has_attribute" (
	"variant as a model of disease association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("variant as a model of disease association_id", has_attribute_id), 
	FOREIGN KEY("variant as a model of disease association_id") REFERENCES "variant as a model of disease association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "cell line as a model of disease association_qualifiers" (
	"cell line as a model of disease association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("cell line as a model of disease association_id", qualifiers_id), 
	FOREIGN KEY("cell line as a model of disease association_id") REFERENCES "cell line as a model of disease association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "cell line as a model of disease association_publications" (
	"cell line as a model of disease association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("cell line as a model of disease association_id", publications_id), 
	FOREIGN KEY("cell line as a model of disease association_id") REFERENCES "cell line as a model of disease association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "cell line as a model of disease association_has_evidence" (
	"cell line as a model of disease association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("cell line as a model of disease association_id", has_evidence_id), 
	FOREIGN KEY("cell line as a model of disease association_id") REFERENCES "cell line as a model of disease association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "cell line as a model of disease association_aggregator_knowledge_source" (
	"cell line as a model of disease association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("cell line as a model of disease association_id", aggregator_knowledge_source), 
	FOREIGN KEY("cell line as a model of disease association_id") REFERENCES "cell line as a model of disease association" (id)
);
CREATE TABLE "cell line as a model of disease association_subject_closure" (
	"cell line as a model of disease association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("cell line as a model of disease association_id", subject_closure), 
	FOREIGN KEY("cell line as a model of disease association_id") REFERENCES "cell line as a model of disease association" (id)
);
CREATE TABLE "cell line as a model of disease association_object_closure" (
	"cell line as a model of disease association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("cell line as a model of disease association_id", object_closure), 
	FOREIGN KEY("cell line as a model of disease association_id") REFERENCES "cell line as a model of disease association" (id)
);
CREATE TABLE "cell line as a model of disease association_subject_category_closure" (
	"cell line as a model of disease association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("cell line as a model of disease association_id", subject_category_closure_id), 
	FOREIGN KEY("cell line as a model of disease association_id") REFERENCES "cell line as a model of disease association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "cell line as a model of disease association_object_category_closure" (
	"cell line as a model of disease association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("cell line as a model of disease association_id", object_category_closure_id), 
	FOREIGN KEY("cell line as a model of disease association_id") REFERENCES "cell line as a model of disease association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "cell line as a model of disease association_subject_label_closure" (
	"cell line as a model of disease association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("cell line as a model of disease association_id", subject_label_closure), 
	FOREIGN KEY("cell line as a model of disease association_id") REFERENCES "cell line as a model of disease association" (id)
);
CREATE TABLE "cell line as a model of disease association_object_label_closure" (
	"cell line as a model of disease association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("cell line as a model of disease association_id", object_label_closure), 
	FOREIGN KEY("cell line as a model of disease association_id") REFERENCES "cell line as a model of disease association" (id)
);
CREATE TABLE "cell line as a model of disease association_retrieval_source_ids" (
	"cell line as a model of disease association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("cell line as a model of disease association_id", retrieval_source_ids_id), 
	FOREIGN KEY("cell line as a model of disease association_id") REFERENCES "cell line as a model of disease association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "cell line as a model of disease association_category" (
	"cell line as a model of disease association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("cell line as a model of disease association_id", category), 
	FOREIGN KEY("cell line as a model of disease association_id") REFERENCES "cell line as a model of disease association" (id)
);
CREATE TABLE "cell line as a model of disease association_type" (
	"cell line as a model of disease association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("cell line as a model of disease association_id", type), 
	FOREIGN KEY("cell line as a model of disease association_id") REFERENCES "cell line as a model of disease association" (id)
);
CREATE TABLE "cell line as a model of disease association_has_attribute" (
	"cell line as a model of disease association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("cell line as a model of disease association_id", has_attribute_id), 
	FOREIGN KEY("cell line as a model of disease association_id") REFERENCES "cell line as a model of disease association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "organismal entity as a model of disease association_qualifiers" (
	"organismal entity as a model of disease association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("organismal entity as a model of disease association_id", qualifiers_id), 
	FOREIGN KEY("organismal entity as a model of disease association_id") REFERENCES "organismal entity as a model of disease association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "organismal entity as a model of disease association_publications" (
	"organismal entity as a model of disease association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("organismal entity as a model of disease association_id", publications_id), 
	FOREIGN KEY("organismal entity as a model of disease association_id") REFERENCES "organismal entity as a model of disease association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "organismal entity as a model of disease association_has_evidence" (
	"organismal entity as a model of disease association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("organismal entity as a model of disease association_id", has_evidence_id), 
	FOREIGN KEY("organismal entity as a model of disease association_id") REFERENCES "organismal entity as a model of disease association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "organismal entity as a model of disease association_aggregator_knowledge_source" (
	"organismal entity as a model of disease association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("organismal entity as a model of disease association_id", aggregator_knowledge_source), 
	FOREIGN KEY("organismal entity as a model of disease association_id") REFERENCES "organismal entity as a model of disease association" (id)
);
CREATE TABLE "organismal entity as a model of disease association_subject_closure" (
	"organismal entity as a model of disease association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("organismal entity as a model of disease association_id", subject_closure), 
	FOREIGN KEY("organismal entity as a model of disease association_id") REFERENCES "organismal entity as a model of disease association" (id)
);
CREATE TABLE "organismal entity as a model of disease association_object_closure" (
	"organismal entity as a model of disease association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("organismal entity as a model of disease association_id", object_closure), 
	FOREIGN KEY("organismal entity as a model of disease association_id") REFERENCES "organismal entity as a model of disease association" (id)
);
CREATE TABLE "organismal entity as a model of disease association_subject_category_closure" (
	"organismal entity as a model of disease association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("organismal entity as a model of disease association_id", subject_category_closure_id), 
	FOREIGN KEY("organismal entity as a model of disease association_id") REFERENCES "organismal entity as a model of disease association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "organismal entity as a model of disease association_object_category_closure" (
	"organismal entity as a model of disease association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("organismal entity as a model of disease association_id", object_category_closure_id), 
	FOREIGN KEY("organismal entity as a model of disease association_id") REFERENCES "organismal entity as a model of disease association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "organismal entity as a model of disease association_subject_label_closure" (
	"organismal entity as a model of disease association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("organismal entity as a model of disease association_id", subject_label_closure), 
	FOREIGN KEY("organismal entity as a model of disease association_id") REFERENCES "organismal entity as a model of disease association" (id)
);
CREATE TABLE "organismal entity as a model of disease association_object_label_closure" (
	"organismal entity as a model of disease association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("organismal entity as a model of disease association_id", object_label_closure), 
	FOREIGN KEY("organismal entity as a model of disease association_id") REFERENCES "organismal entity as a model of disease association" (id)
);
CREATE TABLE "organismal entity as a model of disease association_retrieval_source_ids" (
	"organismal entity as a model of disease association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("organismal entity as a model of disease association_id", retrieval_source_ids_id), 
	FOREIGN KEY("organismal entity as a model of disease association_id") REFERENCES "organismal entity as a model of disease association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "organismal entity as a model of disease association_category" (
	"organismal entity as a model of disease association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("organismal entity as a model of disease association_id", category), 
	FOREIGN KEY("organismal entity as a model of disease association_id") REFERENCES "organismal entity as a model of disease association" (id)
);
CREATE TABLE "organismal entity as a model of disease association_type" (
	"organismal entity as a model of disease association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("organismal entity as a model of disease association_id", type), 
	FOREIGN KEY("organismal entity as a model of disease association_id") REFERENCES "organismal entity as a model of disease association" (id)
);
CREATE TABLE "organismal entity as a model of disease association_has_attribute" (
	"organismal entity as a model of disease association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("organismal entity as a model of disease association_id", has_attribute_id), 
	FOREIGN KEY("organismal entity as a model of disease association_id") REFERENCES "organismal entity as a model of disease association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "organism to organism association_qualifiers" (
	"organism to organism association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("organism to organism association_id", qualifiers_id), 
	FOREIGN KEY("organism to organism association_id") REFERENCES "organism to organism association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "organism to organism association_publications" (
	"organism to organism association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("organism to organism association_id", publications_id), 
	FOREIGN KEY("organism to organism association_id") REFERENCES "organism to organism association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "organism to organism association_has_evidence" (
	"organism to organism association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("organism to organism association_id", has_evidence_id), 
	FOREIGN KEY("organism to organism association_id") REFERENCES "organism to organism association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "organism to organism association_aggregator_knowledge_source" (
	"organism to organism association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("organism to organism association_id", aggregator_knowledge_source), 
	FOREIGN KEY("organism to organism association_id") REFERENCES "organism to organism association" (id)
);
CREATE TABLE "organism to organism association_subject_closure" (
	"organism to organism association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("organism to organism association_id", subject_closure), 
	FOREIGN KEY("organism to organism association_id") REFERENCES "organism to organism association" (id)
);
CREATE TABLE "organism to organism association_object_closure" (
	"organism to organism association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("organism to organism association_id", object_closure), 
	FOREIGN KEY("organism to organism association_id") REFERENCES "organism to organism association" (id)
);
CREATE TABLE "organism to organism association_subject_category_closure" (
	"organism to organism association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("organism to organism association_id", subject_category_closure_id), 
	FOREIGN KEY("organism to organism association_id") REFERENCES "organism to organism association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "organism to organism association_object_category_closure" (
	"organism to organism association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("organism to organism association_id", object_category_closure_id), 
	FOREIGN KEY("organism to organism association_id") REFERENCES "organism to organism association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "organism to organism association_subject_label_closure" (
	"organism to organism association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("organism to organism association_id", subject_label_closure), 
	FOREIGN KEY("organism to organism association_id") REFERENCES "organism to organism association" (id)
);
CREATE TABLE "organism to organism association_object_label_closure" (
	"organism to organism association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("organism to organism association_id", object_label_closure), 
	FOREIGN KEY("organism to organism association_id") REFERENCES "organism to organism association" (id)
);
CREATE TABLE "organism to organism association_retrieval_source_ids" (
	"organism to organism association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("organism to organism association_id", retrieval_source_ids_id), 
	FOREIGN KEY("organism to organism association_id") REFERENCES "organism to organism association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "organism to organism association_category" (
	"organism to organism association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("organism to organism association_id", category), 
	FOREIGN KEY("organism to organism association_id") REFERENCES "organism to organism association" (id)
);
CREATE TABLE "organism to organism association_type" (
	"organism to organism association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("organism to organism association_id", type), 
	FOREIGN KEY("organism to organism association_id") REFERENCES "organism to organism association" (id)
);
CREATE TABLE "organism to organism association_has_attribute" (
	"organism to organism association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("organism to organism association_id", has_attribute_id), 
	FOREIGN KEY("organism to organism association_id") REFERENCES "organism to organism association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "gene to expression site association_qualifiers" (
	"gene to expression site association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("gene to expression site association_id", qualifiers_id), 
	FOREIGN KEY("gene to expression site association_id") REFERENCES "gene to expression site association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to expression site association_publications" (
	"gene to expression site association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("gene to expression site association_id", publications_id), 
	FOREIGN KEY("gene to expression site association_id") REFERENCES "gene to expression site association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "gene to expression site association_has_evidence" (
	"gene to expression site association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("gene to expression site association_id", has_evidence_id), 
	FOREIGN KEY("gene to expression site association_id") REFERENCES "gene to expression site association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "gene to expression site association_aggregator_knowledge_source" (
	"gene to expression site association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("gene to expression site association_id", aggregator_knowledge_source), 
	FOREIGN KEY("gene to expression site association_id") REFERENCES "gene to expression site association" (id)
);
CREATE TABLE "gene to expression site association_subject_closure" (
	"gene to expression site association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("gene to expression site association_id", subject_closure), 
	FOREIGN KEY("gene to expression site association_id") REFERENCES "gene to expression site association" (id)
);
CREATE TABLE "gene to expression site association_object_closure" (
	"gene to expression site association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("gene to expression site association_id", object_closure), 
	FOREIGN KEY("gene to expression site association_id") REFERENCES "gene to expression site association" (id)
);
CREATE TABLE "gene to expression site association_subject_category_closure" (
	"gene to expression site association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("gene to expression site association_id", subject_category_closure_id), 
	FOREIGN KEY("gene to expression site association_id") REFERENCES "gene to expression site association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to expression site association_object_category_closure" (
	"gene to expression site association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("gene to expression site association_id", object_category_closure_id), 
	FOREIGN KEY("gene to expression site association_id") REFERENCES "gene to expression site association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to expression site association_subject_label_closure" (
	"gene to expression site association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("gene to expression site association_id", subject_label_closure), 
	FOREIGN KEY("gene to expression site association_id") REFERENCES "gene to expression site association" (id)
);
CREATE TABLE "gene to expression site association_object_label_closure" (
	"gene to expression site association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("gene to expression site association_id", object_label_closure), 
	FOREIGN KEY("gene to expression site association_id") REFERENCES "gene to expression site association" (id)
);
CREATE TABLE "gene to expression site association_retrieval_source_ids" (
	"gene to expression site association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("gene to expression site association_id", retrieval_source_ids_id), 
	FOREIGN KEY("gene to expression site association_id") REFERENCES "gene to expression site association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "gene to expression site association_category" (
	"gene to expression site association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("gene to expression site association_id", category), 
	FOREIGN KEY("gene to expression site association_id") REFERENCES "gene to expression site association" (id)
);
CREATE TABLE "gene to expression site association_type" (
	"gene to expression site association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("gene to expression site association_id", type), 
	FOREIGN KEY("gene to expression site association_id") REFERENCES "gene to expression site association" (id)
);
CREATE TABLE "gene to expression site association_has_attribute" (
	"gene to expression site association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("gene to expression site association_id", has_attribute_id), 
	FOREIGN KEY("gene to expression site association_id") REFERENCES "gene to expression site association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "sequence variant modulates treatment association_qualifiers" (
	"sequence variant modulates treatment association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("sequence variant modulates treatment association_id", qualifiers_id), 
	FOREIGN KEY("sequence variant modulates treatment association_id") REFERENCES "sequence variant modulates treatment association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "sequence variant modulates treatment association_publications" (
	"sequence variant modulates treatment association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("sequence variant modulates treatment association_id", publications_id), 
	FOREIGN KEY("sequence variant modulates treatment association_id") REFERENCES "sequence variant modulates treatment association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "sequence variant modulates treatment association_has_evidence" (
	"sequence variant modulates treatment association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("sequence variant modulates treatment association_id", has_evidence_id), 
	FOREIGN KEY("sequence variant modulates treatment association_id") REFERENCES "sequence variant modulates treatment association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "sequence variant modulates treatment association_aggregator_knowledge_source" (
	"sequence variant modulates treatment association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("sequence variant modulates treatment association_id", aggregator_knowledge_source), 
	FOREIGN KEY("sequence variant modulates treatment association_id") REFERENCES "sequence variant modulates treatment association" (id)
);
CREATE TABLE "sequence variant modulates treatment association_subject_closure" (
	"sequence variant modulates treatment association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("sequence variant modulates treatment association_id", subject_closure), 
	FOREIGN KEY("sequence variant modulates treatment association_id") REFERENCES "sequence variant modulates treatment association" (id)
);
CREATE TABLE "sequence variant modulates treatment association_object_closure" (
	"sequence variant modulates treatment association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("sequence variant modulates treatment association_id", object_closure), 
	FOREIGN KEY("sequence variant modulates treatment association_id") REFERENCES "sequence variant modulates treatment association" (id)
);
CREATE TABLE "sequence variant modulates treatment association_subject_category_closure" (
	"sequence variant modulates treatment association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("sequence variant modulates treatment association_id", subject_category_closure_id), 
	FOREIGN KEY("sequence variant modulates treatment association_id") REFERENCES "sequence variant modulates treatment association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "sequence variant modulates treatment association_object_category_closure" (
	"sequence variant modulates treatment association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("sequence variant modulates treatment association_id", object_category_closure_id), 
	FOREIGN KEY("sequence variant modulates treatment association_id") REFERENCES "sequence variant modulates treatment association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "sequence variant modulates treatment association_subject_label_closure" (
	"sequence variant modulates treatment association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("sequence variant modulates treatment association_id", subject_label_closure), 
	FOREIGN KEY("sequence variant modulates treatment association_id") REFERENCES "sequence variant modulates treatment association" (id)
);
CREATE TABLE "sequence variant modulates treatment association_object_label_closure" (
	"sequence variant modulates treatment association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("sequence variant modulates treatment association_id", object_label_closure), 
	FOREIGN KEY("sequence variant modulates treatment association_id") REFERENCES "sequence variant modulates treatment association" (id)
);
CREATE TABLE "sequence variant modulates treatment association_retrieval_source_ids" (
	"sequence variant modulates treatment association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("sequence variant modulates treatment association_id", retrieval_source_ids_id), 
	FOREIGN KEY("sequence variant modulates treatment association_id") REFERENCES "sequence variant modulates treatment association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "sequence variant modulates treatment association_category" (
	"sequence variant modulates treatment association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("sequence variant modulates treatment association_id", category), 
	FOREIGN KEY("sequence variant modulates treatment association_id") REFERENCES "sequence variant modulates treatment association" (id)
);
CREATE TABLE "sequence variant modulates treatment association_type" (
	"sequence variant modulates treatment association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("sequence variant modulates treatment association_id", type), 
	FOREIGN KEY("sequence variant modulates treatment association_id") REFERENCES "sequence variant modulates treatment association" (id)
);
CREATE TABLE "sequence variant modulates treatment association_has_attribute" (
	"sequence variant modulates treatment association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("sequence variant modulates treatment association_id", has_attribute_id), 
	FOREIGN KEY("sequence variant modulates treatment association_id") REFERENCES "sequence variant modulates treatment association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "functional association_qualifiers" (
	"functional association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("functional association_id", qualifiers_id), 
	FOREIGN KEY("functional association_id") REFERENCES "functional association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "functional association_publications" (
	"functional association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("functional association_id", publications_id), 
	FOREIGN KEY("functional association_id") REFERENCES "functional association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "functional association_has_evidence" (
	"functional association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("functional association_id", has_evidence_id), 
	FOREIGN KEY("functional association_id") REFERENCES "functional association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "functional association_aggregator_knowledge_source" (
	"functional association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("functional association_id", aggregator_knowledge_source), 
	FOREIGN KEY("functional association_id") REFERENCES "functional association" (id)
);
CREATE TABLE "functional association_subject_closure" (
	"functional association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("functional association_id", subject_closure), 
	FOREIGN KEY("functional association_id") REFERENCES "functional association" (id)
);
CREATE TABLE "functional association_object_closure" (
	"functional association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("functional association_id", object_closure), 
	FOREIGN KEY("functional association_id") REFERENCES "functional association" (id)
);
CREATE TABLE "functional association_subject_category_closure" (
	"functional association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("functional association_id", subject_category_closure_id), 
	FOREIGN KEY("functional association_id") REFERENCES "functional association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "functional association_object_category_closure" (
	"functional association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("functional association_id", object_category_closure_id), 
	FOREIGN KEY("functional association_id") REFERENCES "functional association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "functional association_subject_label_closure" (
	"functional association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("functional association_id", subject_label_closure), 
	FOREIGN KEY("functional association_id") REFERENCES "functional association" (id)
);
CREATE TABLE "functional association_object_label_closure" (
	"functional association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("functional association_id", object_label_closure), 
	FOREIGN KEY("functional association_id") REFERENCES "functional association" (id)
);
CREATE TABLE "functional association_retrieval_source_ids" (
	"functional association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("functional association_id", retrieval_source_ids_id), 
	FOREIGN KEY("functional association_id") REFERENCES "functional association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "functional association_category" (
	"functional association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("functional association_id", category), 
	FOREIGN KEY("functional association_id") REFERENCES "functional association" (id)
);
CREATE TABLE "functional association_type" (
	"functional association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("functional association_id", type), 
	FOREIGN KEY("functional association_id") REFERENCES "functional association" (id)
);
CREATE TABLE "functional association_has_attribute" (
	"functional association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("functional association_id", has_attribute_id), 
	FOREIGN KEY("functional association_id") REFERENCES "functional association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "macromolecular machine to molecular activity association_qualifiers" (
	"macromolecular machine to molecular activity association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("macromolecular machine to molecular activity association_id", qualifiers_id), 
	FOREIGN KEY("macromolecular machine to molecular activity association_id") REFERENCES "macromolecular machine to molecular activity association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "macromolecular machine to molecular activity association_publications" (
	"macromolecular machine to molecular activity association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("macromolecular machine to molecular activity association_id", publications_id), 
	FOREIGN KEY("macromolecular machine to molecular activity association_id") REFERENCES "macromolecular machine to molecular activity association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "macromolecular machine to molecular activity association_has_evidence" (
	"macromolecular machine to molecular activity association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("macromolecular machine to molecular activity association_id", has_evidence_id), 
	FOREIGN KEY("macromolecular machine to molecular activity association_id") REFERENCES "macromolecular machine to molecular activity association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "macromolecular machine to molecular activity association_aggregator_knowledge_source" (
	"macromolecular machine to molecular activity association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("macromolecular machine to molecular activity association_id", aggregator_knowledge_source), 
	FOREIGN KEY("macromolecular machine to molecular activity association_id") REFERENCES "macromolecular machine to molecular activity association" (id)
);
CREATE TABLE "macromolecular machine to molecular activity association_subject_closure" (
	"macromolecular machine to molecular activity association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("macromolecular machine to molecular activity association_id", subject_closure), 
	FOREIGN KEY("macromolecular machine to molecular activity association_id") REFERENCES "macromolecular machine to molecular activity association" (id)
);
CREATE TABLE "macromolecular machine to molecular activity association_object_closure" (
	"macromolecular machine to molecular activity association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("macromolecular machine to molecular activity association_id", object_closure), 
	FOREIGN KEY("macromolecular machine to molecular activity association_id") REFERENCES "macromolecular machine to molecular activity association" (id)
);
CREATE TABLE "macromolecular machine to molecular activity association_subject_category_closure" (
	"macromolecular machine to molecular activity association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("macromolecular machine to molecular activity association_id", subject_category_closure_id), 
	FOREIGN KEY("macromolecular machine to molecular activity association_id") REFERENCES "macromolecular machine to molecular activity association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "macromolecular machine to molecular activity association_object_category_closure" (
	"macromolecular machine to molecular activity association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("macromolecular machine to molecular activity association_id", object_category_closure_id), 
	FOREIGN KEY("macromolecular machine to molecular activity association_id") REFERENCES "macromolecular machine to molecular activity association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "macromolecular machine to molecular activity association_subject_label_closure" (
	"macromolecular machine to molecular activity association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("macromolecular machine to molecular activity association_id", subject_label_closure), 
	FOREIGN KEY("macromolecular machine to molecular activity association_id") REFERENCES "macromolecular machine to molecular activity association" (id)
);
CREATE TABLE "macromolecular machine to molecular activity association_object_label_closure" (
	"macromolecular machine to molecular activity association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("macromolecular machine to molecular activity association_id", object_label_closure), 
	FOREIGN KEY("macromolecular machine to molecular activity association_id") REFERENCES "macromolecular machine to molecular activity association" (id)
);
CREATE TABLE "macromolecular machine to molecular activity association_retrieval_source_ids" (
	"macromolecular machine to molecular activity association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("macromolecular machine to molecular activity association_id", retrieval_source_ids_id), 
	FOREIGN KEY("macromolecular machine to molecular activity association_id") REFERENCES "macromolecular machine to molecular activity association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "macromolecular machine to molecular activity association_category" (
	"macromolecular machine to molecular activity association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("macromolecular machine to molecular activity association_id", category), 
	FOREIGN KEY("macromolecular machine to molecular activity association_id") REFERENCES "macromolecular machine to molecular activity association" (id)
);
CREATE TABLE "macromolecular machine to molecular activity association_type" (
	"macromolecular machine to molecular activity association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("macromolecular machine to molecular activity association_id", type), 
	FOREIGN KEY("macromolecular machine to molecular activity association_id") REFERENCES "macromolecular machine to molecular activity association" (id)
);
CREATE TABLE "macromolecular machine to molecular activity association_has_attribute" (
	"macromolecular machine to molecular activity association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("macromolecular machine to molecular activity association_id", has_attribute_id), 
	FOREIGN KEY("macromolecular machine to molecular activity association_id") REFERENCES "macromolecular machine to molecular activity association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "macromolecular machine to biological process association_qualifiers" (
	"macromolecular machine to biological process association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("macromolecular machine to biological process association_id", qualifiers_id), 
	FOREIGN KEY("macromolecular machine to biological process association_id") REFERENCES "macromolecular machine to biological process association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "macromolecular machine to biological process association_publications" (
	"macromolecular machine to biological process association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("macromolecular machine to biological process association_id", publications_id), 
	FOREIGN KEY("macromolecular machine to biological process association_id") REFERENCES "macromolecular machine to biological process association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "macromolecular machine to biological process association_has_evidence" (
	"macromolecular machine to biological process association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("macromolecular machine to biological process association_id", has_evidence_id), 
	FOREIGN KEY("macromolecular machine to biological process association_id") REFERENCES "macromolecular machine to biological process association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "macromolecular machine to biological process association_aggregator_knowledge_source" (
	"macromolecular machine to biological process association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("macromolecular machine to biological process association_id", aggregator_knowledge_source), 
	FOREIGN KEY("macromolecular machine to biological process association_id") REFERENCES "macromolecular machine to biological process association" (id)
);
CREATE TABLE "macromolecular machine to biological process association_subject_closure" (
	"macromolecular machine to biological process association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("macromolecular machine to biological process association_id", subject_closure), 
	FOREIGN KEY("macromolecular machine to biological process association_id") REFERENCES "macromolecular machine to biological process association" (id)
);
CREATE TABLE "macromolecular machine to biological process association_object_closure" (
	"macromolecular machine to biological process association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("macromolecular machine to biological process association_id", object_closure), 
	FOREIGN KEY("macromolecular machine to biological process association_id") REFERENCES "macromolecular machine to biological process association" (id)
);
CREATE TABLE "macromolecular machine to biological process association_subject_category_closure" (
	"macromolecular machine to biological process association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("macromolecular machine to biological process association_id", subject_category_closure_id), 
	FOREIGN KEY("macromolecular machine to biological process association_id") REFERENCES "macromolecular machine to biological process association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "macromolecular machine to biological process association_object_category_closure" (
	"macromolecular machine to biological process association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("macromolecular machine to biological process association_id", object_category_closure_id), 
	FOREIGN KEY("macromolecular machine to biological process association_id") REFERENCES "macromolecular machine to biological process association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "macromolecular machine to biological process association_subject_label_closure" (
	"macromolecular machine to biological process association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("macromolecular machine to biological process association_id", subject_label_closure), 
	FOREIGN KEY("macromolecular machine to biological process association_id") REFERENCES "macromolecular machine to biological process association" (id)
);
CREATE TABLE "macromolecular machine to biological process association_object_label_closure" (
	"macromolecular machine to biological process association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("macromolecular machine to biological process association_id", object_label_closure), 
	FOREIGN KEY("macromolecular machine to biological process association_id") REFERENCES "macromolecular machine to biological process association" (id)
);
CREATE TABLE "macromolecular machine to biological process association_retrieval_source_ids" (
	"macromolecular machine to biological process association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("macromolecular machine to biological process association_id", retrieval_source_ids_id), 
	FOREIGN KEY("macromolecular machine to biological process association_id") REFERENCES "macromolecular machine to biological process association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "macromolecular machine to biological process association_category" (
	"macromolecular machine to biological process association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("macromolecular machine to biological process association_id", category), 
	FOREIGN KEY("macromolecular machine to biological process association_id") REFERENCES "macromolecular machine to biological process association" (id)
);
CREATE TABLE "macromolecular machine to biological process association_type" (
	"macromolecular machine to biological process association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("macromolecular machine to biological process association_id", type), 
	FOREIGN KEY("macromolecular machine to biological process association_id") REFERENCES "macromolecular machine to biological process association" (id)
);
CREATE TABLE "macromolecular machine to biological process association_has_attribute" (
	"macromolecular machine to biological process association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("macromolecular machine to biological process association_id", has_attribute_id), 
	FOREIGN KEY("macromolecular machine to biological process association_id") REFERENCES "macromolecular machine to biological process association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "macromolecular machine to cellular component association_qualifiers" (
	"macromolecular machine to cellular component association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("macromolecular machine to cellular component association_id", qualifiers_id), 
	FOREIGN KEY("macromolecular machine to cellular component association_id") REFERENCES "macromolecular machine to cellular component association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "macromolecular machine to cellular component association_publications" (
	"macromolecular machine to cellular component association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("macromolecular machine to cellular component association_id", publications_id), 
	FOREIGN KEY("macromolecular machine to cellular component association_id") REFERENCES "macromolecular machine to cellular component association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "macromolecular machine to cellular component association_has_evidence" (
	"macromolecular machine to cellular component association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("macromolecular machine to cellular component association_id", has_evidence_id), 
	FOREIGN KEY("macromolecular machine to cellular component association_id") REFERENCES "macromolecular machine to cellular component association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "macromolecular machine to cellular component association_aggregator_knowledge_source" (
	"macromolecular machine to cellular component association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("macromolecular machine to cellular component association_id", aggregator_knowledge_source), 
	FOREIGN KEY("macromolecular machine to cellular component association_id") REFERENCES "macromolecular machine to cellular component association" (id)
);
CREATE TABLE "macromolecular machine to cellular component association_subject_closure" (
	"macromolecular machine to cellular component association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("macromolecular machine to cellular component association_id", subject_closure), 
	FOREIGN KEY("macromolecular machine to cellular component association_id") REFERENCES "macromolecular machine to cellular component association" (id)
);
CREATE TABLE "macromolecular machine to cellular component association_object_closure" (
	"macromolecular machine to cellular component association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("macromolecular machine to cellular component association_id", object_closure), 
	FOREIGN KEY("macromolecular machine to cellular component association_id") REFERENCES "macromolecular machine to cellular component association" (id)
);
CREATE TABLE "macromolecular machine to cellular component association_subject_category_closure" (
	"macromolecular machine to cellular component association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("macromolecular machine to cellular component association_id", subject_category_closure_id), 
	FOREIGN KEY("macromolecular machine to cellular component association_id") REFERENCES "macromolecular machine to cellular component association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "macromolecular machine to cellular component association_object_category_closure" (
	"macromolecular machine to cellular component association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("macromolecular machine to cellular component association_id", object_category_closure_id), 
	FOREIGN KEY("macromolecular machine to cellular component association_id") REFERENCES "macromolecular machine to cellular component association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "macromolecular machine to cellular component association_subject_label_closure" (
	"macromolecular machine to cellular component association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("macromolecular machine to cellular component association_id", subject_label_closure), 
	FOREIGN KEY("macromolecular machine to cellular component association_id") REFERENCES "macromolecular machine to cellular component association" (id)
);
CREATE TABLE "macromolecular machine to cellular component association_object_label_closure" (
	"macromolecular machine to cellular component association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("macromolecular machine to cellular component association_id", object_label_closure), 
	FOREIGN KEY("macromolecular machine to cellular component association_id") REFERENCES "macromolecular machine to cellular component association" (id)
);
CREATE TABLE "macromolecular machine to cellular component association_retrieval_source_ids" (
	"macromolecular machine to cellular component association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("macromolecular machine to cellular component association_id", retrieval_source_ids_id), 
	FOREIGN KEY("macromolecular machine to cellular component association_id") REFERENCES "macromolecular machine to cellular component association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "macromolecular machine to cellular component association_category" (
	"macromolecular machine to cellular component association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("macromolecular machine to cellular component association_id", category), 
	FOREIGN KEY("macromolecular machine to cellular component association_id") REFERENCES "macromolecular machine to cellular component association" (id)
);
CREATE TABLE "macromolecular machine to cellular component association_type" (
	"macromolecular machine to cellular component association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("macromolecular machine to cellular component association_id", type), 
	FOREIGN KEY("macromolecular machine to cellular component association_id") REFERENCES "macromolecular machine to cellular component association" (id)
);
CREATE TABLE "macromolecular machine to cellular component association_has_attribute" (
	"macromolecular machine to cellular component association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("macromolecular machine to cellular component association_id", has_attribute_id), 
	FOREIGN KEY("macromolecular machine to cellular component association_id") REFERENCES "macromolecular machine to cellular component association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "molecular activity to chemical entity association_qualifiers" (
	"molecular activity to chemical entity association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("molecular activity to chemical entity association_id", qualifiers_id), 
	FOREIGN KEY("molecular activity to chemical entity association_id") REFERENCES "molecular activity to chemical entity association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "molecular activity to chemical entity association_publications" (
	"molecular activity to chemical entity association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("molecular activity to chemical entity association_id", publications_id), 
	FOREIGN KEY("molecular activity to chemical entity association_id") REFERENCES "molecular activity to chemical entity association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "molecular activity to chemical entity association_has_evidence" (
	"molecular activity to chemical entity association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("molecular activity to chemical entity association_id", has_evidence_id), 
	FOREIGN KEY("molecular activity to chemical entity association_id") REFERENCES "molecular activity to chemical entity association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "molecular activity to chemical entity association_aggregator_knowledge_source" (
	"molecular activity to chemical entity association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("molecular activity to chemical entity association_id", aggregator_knowledge_source), 
	FOREIGN KEY("molecular activity to chemical entity association_id") REFERENCES "molecular activity to chemical entity association" (id)
);
CREATE TABLE "molecular activity to chemical entity association_subject_closure" (
	"molecular activity to chemical entity association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("molecular activity to chemical entity association_id", subject_closure), 
	FOREIGN KEY("molecular activity to chemical entity association_id") REFERENCES "molecular activity to chemical entity association" (id)
);
CREATE TABLE "molecular activity to chemical entity association_object_closure" (
	"molecular activity to chemical entity association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("molecular activity to chemical entity association_id", object_closure), 
	FOREIGN KEY("molecular activity to chemical entity association_id") REFERENCES "molecular activity to chemical entity association" (id)
);
CREATE TABLE "molecular activity to chemical entity association_subject_category_closure" (
	"molecular activity to chemical entity association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("molecular activity to chemical entity association_id", subject_category_closure_id), 
	FOREIGN KEY("molecular activity to chemical entity association_id") REFERENCES "molecular activity to chemical entity association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "molecular activity to chemical entity association_object_category_closure" (
	"molecular activity to chemical entity association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("molecular activity to chemical entity association_id", object_category_closure_id), 
	FOREIGN KEY("molecular activity to chemical entity association_id") REFERENCES "molecular activity to chemical entity association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "molecular activity to chemical entity association_subject_label_closure" (
	"molecular activity to chemical entity association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("molecular activity to chemical entity association_id", subject_label_closure), 
	FOREIGN KEY("molecular activity to chemical entity association_id") REFERENCES "molecular activity to chemical entity association" (id)
);
CREATE TABLE "molecular activity to chemical entity association_object_label_closure" (
	"molecular activity to chemical entity association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("molecular activity to chemical entity association_id", object_label_closure), 
	FOREIGN KEY("molecular activity to chemical entity association_id") REFERENCES "molecular activity to chemical entity association" (id)
);
CREATE TABLE "molecular activity to chemical entity association_retrieval_source_ids" (
	"molecular activity to chemical entity association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("molecular activity to chemical entity association_id", retrieval_source_ids_id), 
	FOREIGN KEY("molecular activity to chemical entity association_id") REFERENCES "molecular activity to chemical entity association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "molecular activity to chemical entity association_category" (
	"molecular activity to chemical entity association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("molecular activity to chemical entity association_id", category), 
	FOREIGN KEY("molecular activity to chemical entity association_id") REFERENCES "molecular activity to chemical entity association" (id)
);
CREATE TABLE "molecular activity to chemical entity association_type" (
	"molecular activity to chemical entity association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("molecular activity to chemical entity association_id", type), 
	FOREIGN KEY("molecular activity to chemical entity association_id") REFERENCES "molecular activity to chemical entity association" (id)
);
CREATE TABLE "molecular activity to chemical entity association_has_attribute" (
	"molecular activity to chemical entity association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("molecular activity to chemical entity association_id", has_attribute_id), 
	FOREIGN KEY("molecular activity to chemical entity association_id") REFERENCES "molecular activity to chemical entity association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "molecular activity to molecular activity association_qualifiers" (
	"molecular activity to molecular activity association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("molecular activity to molecular activity association_id", qualifiers_id), 
	FOREIGN KEY("molecular activity to molecular activity association_id") REFERENCES "molecular activity to molecular activity association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "molecular activity to molecular activity association_publications" (
	"molecular activity to molecular activity association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("molecular activity to molecular activity association_id", publications_id), 
	FOREIGN KEY("molecular activity to molecular activity association_id") REFERENCES "molecular activity to molecular activity association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "molecular activity to molecular activity association_has_evidence" (
	"molecular activity to molecular activity association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("molecular activity to molecular activity association_id", has_evidence_id), 
	FOREIGN KEY("molecular activity to molecular activity association_id") REFERENCES "molecular activity to molecular activity association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "molecular activity to molecular activity association_aggregator_knowledge_source" (
	"molecular activity to molecular activity association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("molecular activity to molecular activity association_id", aggregator_knowledge_source), 
	FOREIGN KEY("molecular activity to molecular activity association_id") REFERENCES "molecular activity to molecular activity association" (id)
);
CREATE TABLE "molecular activity to molecular activity association_subject_closure" (
	"molecular activity to molecular activity association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("molecular activity to molecular activity association_id", subject_closure), 
	FOREIGN KEY("molecular activity to molecular activity association_id") REFERENCES "molecular activity to molecular activity association" (id)
);
CREATE TABLE "molecular activity to molecular activity association_object_closure" (
	"molecular activity to molecular activity association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("molecular activity to molecular activity association_id", object_closure), 
	FOREIGN KEY("molecular activity to molecular activity association_id") REFERENCES "molecular activity to molecular activity association" (id)
);
CREATE TABLE "molecular activity to molecular activity association_subject_category_closure" (
	"molecular activity to molecular activity association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("molecular activity to molecular activity association_id", subject_category_closure_id), 
	FOREIGN KEY("molecular activity to molecular activity association_id") REFERENCES "molecular activity to molecular activity association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "molecular activity to molecular activity association_object_category_closure" (
	"molecular activity to molecular activity association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("molecular activity to molecular activity association_id", object_category_closure_id), 
	FOREIGN KEY("molecular activity to molecular activity association_id") REFERENCES "molecular activity to molecular activity association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "molecular activity to molecular activity association_subject_label_closure" (
	"molecular activity to molecular activity association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("molecular activity to molecular activity association_id", subject_label_closure), 
	FOREIGN KEY("molecular activity to molecular activity association_id") REFERENCES "molecular activity to molecular activity association" (id)
);
CREATE TABLE "molecular activity to molecular activity association_object_label_closure" (
	"molecular activity to molecular activity association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("molecular activity to molecular activity association_id", object_label_closure), 
	FOREIGN KEY("molecular activity to molecular activity association_id") REFERENCES "molecular activity to molecular activity association" (id)
);
CREATE TABLE "molecular activity to molecular activity association_retrieval_source_ids" (
	"molecular activity to molecular activity association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("molecular activity to molecular activity association_id", retrieval_source_ids_id), 
	FOREIGN KEY("molecular activity to molecular activity association_id") REFERENCES "molecular activity to molecular activity association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "molecular activity to molecular activity association_category" (
	"molecular activity to molecular activity association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("molecular activity to molecular activity association_id", category), 
	FOREIGN KEY("molecular activity to molecular activity association_id") REFERENCES "molecular activity to molecular activity association" (id)
);
CREATE TABLE "molecular activity to molecular activity association_type" (
	"molecular activity to molecular activity association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("molecular activity to molecular activity association_id", type), 
	FOREIGN KEY("molecular activity to molecular activity association_id") REFERENCES "molecular activity to molecular activity association" (id)
);
CREATE TABLE "molecular activity to molecular activity association_has_attribute" (
	"molecular activity to molecular activity association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("molecular activity to molecular activity association_id", has_attribute_id), 
	FOREIGN KEY("molecular activity to molecular activity association_id") REFERENCES "molecular activity to molecular activity association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "gene to go term association_qualifiers" (
	"gene to go term association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("gene to go term association_id", qualifiers_id), 
	FOREIGN KEY("gene to go term association_id") REFERENCES "gene to go term association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to go term association_publications" (
	"gene to go term association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("gene to go term association_id", publications_id), 
	FOREIGN KEY("gene to go term association_id") REFERENCES "gene to go term association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "gene to go term association_has_evidence" (
	"gene to go term association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("gene to go term association_id", has_evidence_id), 
	FOREIGN KEY("gene to go term association_id") REFERENCES "gene to go term association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "gene to go term association_aggregator_knowledge_source" (
	"gene to go term association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("gene to go term association_id", aggregator_knowledge_source), 
	FOREIGN KEY("gene to go term association_id") REFERENCES "gene to go term association" (id)
);
CREATE TABLE "gene to go term association_subject_closure" (
	"gene to go term association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("gene to go term association_id", subject_closure), 
	FOREIGN KEY("gene to go term association_id") REFERENCES "gene to go term association" (id)
);
CREATE TABLE "gene to go term association_object_closure" (
	"gene to go term association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("gene to go term association_id", object_closure), 
	FOREIGN KEY("gene to go term association_id") REFERENCES "gene to go term association" (id)
);
CREATE TABLE "gene to go term association_subject_category_closure" (
	"gene to go term association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("gene to go term association_id", subject_category_closure_id), 
	FOREIGN KEY("gene to go term association_id") REFERENCES "gene to go term association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to go term association_object_category_closure" (
	"gene to go term association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("gene to go term association_id", object_category_closure_id), 
	FOREIGN KEY("gene to go term association_id") REFERENCES "gene to go term association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to go term association_subject_label_closure" (
	"gene to go term association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("gene to go term association_id", subject_label_closure), 
	FOREIGN KEY("gene to go term association_id") REFERENCES "gene to go term association" (id)
);
CREATE TABLE "gene to go term association_object_label_closure" (
	"gene to go term association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("gene to go term association_id", object_label_closure), 
	FOREIGN KEY("gene to go term association_id") REFERENCES "gene to go term association" (id)
);
CREATE TABLE "gene to go term association_retrieval_source_ids" (
	"gene to go term association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("gene to go term association_id", retrieval_source_ids_id), 
	FOREIGN KEY("gene to go term association_id") REFERENCES "gene to go term association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "gene to go term association_category" (
	"gene to go term association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("gene to go term association_id", category), 
	FOREIGN KEY("gene to go term association_id") REFERENCES "gene to go term association" (id)
);
CREATE TABLE "gene to go term association_type" (
	"gene to go term association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("gene to go term association_id", type), 
	FOREIGN KEY("gene to go term association_id") REFERENCES "gene to go term association" (id)
);
CREATE TABLE "gene to go term association_has_attribute" (
	"gene to go term association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("gene to go term association_id", has_attribute_id), 
	FOREIGN KEY("gene to go term association_id") REFERENCES "gene to go term association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "entity to disease association_qualifiers" (
	"entity to disease association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("entity to disease association_id", qualifiers_id), 
	FOREIGN KEY("entity to disease association_id") REFERENCES "entity to disease association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "entity to disease association_publications" (
	"entity to disease association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("entity to disease association_id", publications_id), 
	FOREIGN KEY("entity to disease association_id") REFERENCES "entity to disease association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "entity to disease association_has_evidence" (
	"entity to disease association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("entity to disease association_id", has_evidence_id), 
	FOREIGN KEY("entity to disease association_id") REFERENCES "entity to disease association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "entity to disease association_aggregator_knowledge_source" (
	"entity to disease association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("entity to disease association_id", aggregator_knowledge_source), 
	FOREIGN KEY("entity to disease association_id") REFERENCES "entity to disease association" (id)
);
CREATE TABLE "entity to disease association_subject_closure" (
	"entity to disease association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("entity to disease association_id", subject_closure), 
	FOREIGN KEY("entity to disease association_id") REFERENCES "entity to disease association" (id)
);
CREATE TABLE "entity to disease association_object_closure" (
	"entity to disease association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("entity to disease association_id", object_closure), 
	FOREIGN KEY("entity to disease association_id") REFERENCES "entity to disease association" (id)
);
CREATE TABLE "entity to disease association_subject_category_closure" (
	"entity to disease association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("entity to disease association_id", subject_category_closure_id), 
	FOREIGN KEY("entity to disease association_id") REFERENCES "entity to disease association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "entity to disease association_object_category_closure" (
	"entity to disease association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("entity to disease association_id", object_category_closure_id), 
	FOREIGN KEY("entity to disease association_id") REFERENCES "entity to disease association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "entity to disease association_subject_label_closure" (
	"entity to disease association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("entity to disease association_id", subject_label_closure), 
	FOREIGN KEY("entity to disease association_id") REFERENCES "entity to disease association" (id)
);
CREATE TABLE "entity to disease association_object_label_closure" (
	"entity to disease association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("entity to disease association_id", object_label_closure), 
	FOREIGN KEY("entity to disease association_id") REFERENCES "entity to disease association" (id)
);
CREATE TABLE "entity to disease association_retrieval_source_ids" (
	"entity to disease association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("entity to disease association_id", retrieval_source_ids_id), 
	FOREIGN KEY("entity to disease association_id") REFERENCES "entity to disease association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "entity to disease association_category" (
	"entity to disease association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("entity to disease association_id", category), 
	FOREIGN KEY("entity to disease association_id") REFERENCES "entity to disease association" (id)
);
CREATE TABLE "entity to disease association_type" (
	"entity to disease association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("entity to disease association_id", type), 
	FOREIGN KEY("entity to disease association_id") REFERENCES "entity to disease association" (id)
);
CREATE TABLE "entity to disease association_has_attribute" (
	"entity to disease association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("entity to disease association_id", has_attribute_id), 
	FOREIGN KEY("entity to disease association_id") REFERENCES "entity to disease association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "entity to phenotypic feature association_qualifiers" (
	"entity to phenotypic feature association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("entity to phenotypic feature association_id", qualifiers_id), 
	FOREIGN KEY("entity to phenotypic feature association_id") REFERENCES "entity to phenotypic feature association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "entity to phenotypic feature association_publications" (
	"entity to phenotypic feature association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("entity to phenotypic feature association_id", publications_id), 
	FOREIGN KEY("entity to phenotypic feature association_id") REFERENCES "entity to phenotypic feature association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "entity to phenotypic feature association_has_evidence" (
	"entity to phenotypic feature association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("entity to phenotypic feature association_id", has_evidence_id), 
	FOREIGN KEY("entity to phenotypic feature association_id") REFERENCES "entity to phenotypic feature association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "entity to phenotypic feature association_aggregator_knowledge_source" (
	"entity to phenotypic feature association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("entity to phenotypic feature association_id", aggregator_knowledge_source), 
	FOREIGN KEY("entity to phenotypic feature association_id") REFERENCES "entity to phenotypic feature association" (id)
);
CREATE TABLE "entity to phenotypic feature association_subject_closure" (
	"entity to phenotypic feature association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("entity to phenotypic feature association_id", subject_closure), 
	FOREIGN KEY("entity to phenotypic feature association_id") REFERENCES "entity to phenotypic feature association" (id)
);
CREATE TABLE "entity to phenotypic feature association_object_closure" (
	"entity to phenotypic feature association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("entity to phenotypic feature association_id", object_closure), 
	FOREIGN KEY("entity to phenotypic feature association_id") REFERENCES "entity to phenotypic feature association" (id)
);
CREATE TABLE "entity to phenotypic feature association_subject_category_closure" (
	"entity to phenotypic feature association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("entity to phenotypic feature association_id", subject_category_closure_id), 
	FOREIGN KEY("entity to phenotypic feature association_id") REFERENCES "entity to phenotypic feature association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "entity to phenotypic feature association_object_category_closure" (
	"entity to phenotypic feature association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("entity to phenotypic feature association_id", object_category_closure_id), 
	FOREIGN KEY("entity to phenotypic feature association_id") REFERENCES "entity to phenotypic feature association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "entity to phenotypic feature association_subject_label_closure" (
	"entity to phenotypic feature association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("entity to phenotypic feature association_id", subject_label_closure), 
	FOREIGN KEY("entity to phenotypic feature association_id") REFERENCES "entity to phenotypic feature association" (id)
);
CREATE TABLE "entity to phenotypic feature association_object_label_closure" (
	"entity to phenotypic feature association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("entity to phenotypic feature association_id", object_label_closure), 
	FOREIGN KEY("entity to phenotypic feature association_id") REFERENCES "entity to phenotypic feature association" (id)
);
CREATE TABLE "entity to phenotypic feature association_retrieval_source_ids" (
	"entity to phenotypic feature association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("entity to phenotypic feature association_id", retrieval_source_ids_id), 
	FOREIGN KEY("entity to phenotypic feature association_id") REFERENCES "entity to phenotypic feature association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "entity to phenotypic feature association_category" (
	"entity to phenotypic feature association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("entity to phenotypic feature association_id", category), 
	FOREIGN KEY("entity to phenotypic feature association_id") REFERENCES "entity to phenotypic feature association" (id)
);
CREATE TABLE "entity to phenotypic feature association_type" (
	"entity to phenotypic feature association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("entity to phenotypic feature association_id", type), 
	FOREIGN KEY("entity to phenotypic feature association_id") REFERENCES "entity to phenotypic feature association" (id)
);
CREATE TABLE "entity to phenotypic feature association_has_attribute" (
	"entity to phenotypic feature association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("entity to phenotypic feature association_id", has_attribute_id), 
	FOREIGN KEY("entity to phenotypic feature association_id") REFERENCES "entity to phenotypic feature association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "sequence association_qualifiers" (
	"sequence association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("sequence association_id", qualifiers_id), 
	FOREIGN KEY("sequence association_id") REFERENCES "sequence association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "sequence association_publications" (
	"sequence association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("sequence association_id", publications_id), 
	FOREIGN KEY("sequence association_id") REFERENCES "sequence association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "sequence association_has_evidence" (
	"sequence association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("sequence association_id", has_evidence_id), 
	FOREIGN KEY("sequence association_id") REFERENCES "sequence association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "sequence association_aggregator_knowledge_source" (
	"sequence association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("sequence association_id", aggregator_knowledge_source), 
	FOREIGN KEY("sequence association_id") REFERENCES "sequence association" (id)
);
CREATE TABLE "sequence association_subject_closure" (
	"sequence association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("sequence association_id", subject_closure), 
	FOREIGN KEY("sequence association_id") REFERENCES "sequence association" (id)
);
CREATE TABLE "sequence association_object_closure" (
	"sequence association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("sequence association_id", object_closure), 
	FOREIGN KEY("sequence association_id") REFERENCES "sequence association" (id)
);
CREATE TABLE "sequence association_subject_category_closure" (
	"sequence association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("sequence association_id", subject_category_closure_id), 
	FOREIGN KEY("sequence association_id") REFERENCES "sequence association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "sequence association_object_category_closure" (
	"sequence association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("sequence association_id", object_category_closure_id), 
	FOREIGN KEY("sequence association_id") REFERENCES "sequence association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "sequence association_subject_label_closure" (
	"sequence association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("sequence association_id", subject_label_closure), 
	FOREIGN KEY("sequence association_id") REFERENCES "sequence association" (id)
);
CREATE TABLE "sequence association_object_label_closure" (
	"sequence association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("sequence association_id", object_label_closure), 
	FOREIGN KEY("sequence association_id") REFERENCES "sequence association" (id)
);
CREATE TABLE "sequence association_retrieval_source_ids" (
	"sequence association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("sequence association_id", retrieval_source_ids_id), 
	FOREIGN KEY("sequence association_id") REFERENCES "sequence association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "sequence association_category" (
	"sequence association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("sequence association_id", category), 
	FOREIGN KEY("sequence association_id") REFERENCES "sequence association" (id)
);
CREATE TABLE "sequence association_type" (
	"sequence association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("sequence association_id", type), 
	FOREIGN KEY("sequence association_id") REFERENCES "sequence association" (id)
);
CREATE TABLE "sequence association_has_attribute" (
	"sequence association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("sequence association_id", has_attribute_id), 
	FOREIGN KEY("sequence association_id") REFERENCES "sequence association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "transcript to gene relationship_qualifiers" (
	"transcript to gene relationship_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("transcript to gene relationship_id", qualifiers_id), 
	FOREIGN KEY("transcript to gene relationship_id") REFERENCES "transcript to gene relationship" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "transcript to gene relationship_publications" (
	"transcript to gene relationship_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("transcript to gene relationship_id", publications_id), 
	FOREIGN KEY("transcript to gene relationship_id") REFERENCES "transcript to gene relationship" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "transcript to gene relationship_has_evidence" (
	"transcript to gene relationship_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("transcript to gene relationship_id", has_evidence_id), 
	FOREIGN KEY("transcript to gene relationship_id") REFERENCES "transcript to gene relationship" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "transcript to gene relationship_aggregator_knowledge_source" (
	"transcript to gene relationship_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("transcript to gene relationship_id", aggregator_knowledge_source), 
	FOREIGN KEY("transcript to gene relationship_id") REFERENCES "transcript to gene relationship" (id)
);
CREATE TABLE "transcript to gene relationship_subject_closure" (
	"transcript to gene relationship_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("transcript to gene relationship_id", subject_closure), 
	FOREIGN KEY("transcript to gene relationship_id") REFERENCES "transcript to gene relationship" (id)
);
CREATE TABLE "transcript to gene relationship_object_closure" (
	"transcript to gene relationship_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("transcript to gene relationship_id", object_closure), 
	FOREIGN KEY("transcript to gene relationship_id") REFERENCES "transcript to gene relationship" (id)
);
CREATE TABLE "transcript to gene relationship_subject_category_closure" (
	"transcript to gene relationship_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("transcript to gene relationship_id", subject_category_closure_id), 
	FOREIGN KEY("transcript to gene relationship_id") REFERENCES "transcript to gene relationship" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "transcript to gene relationship_object_category_closure" (
	"transcript to gene relationship_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("transcript to gene relationship_id", object_category_closure_id), 
	FOREIGN KEY("transcript to gene relationship_id") REFERENCES "transcript to gene relationship" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "transcript to gene relationship_subject_label_closure" (
	"transcript to gene relationship_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("transcript to gene relationship_id", subject_label_closure), 
	FOREIGN KEY("transcript to gene relationship_id") REFERENCES "transcript to gene relationship" (id)
);
CREATE TABLE "transcript to gene relationship_object_label_closure" (
	"transcript to gene relationship_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("transcript to gene relationship_id", object_label_closure), 
	FOREIGN KEY("transcript to gene relationship_id") REFERENCES "transcript to gene relationship" (id)
);
CREATE TABLE "transcript to gene relationship_retrieval_source_ids" (
	"transcript to gene relationship_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("transcript to gene relationship_id", retrieval_source_ids_id), 
	FOREIGN KEY("transcript to gene relationship_id") REFERENCES "transcript to gene relationship" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "transcript to gene relationship_category" (
	"transcript to gene relationship_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("transcript to gene relationship_id", category), 
	FOREIGN KEY("transcript to gene relationship_id") REFERENCES "transcript to gene relationship" (id)
);
CREATE TABLE "transcript to gene relationship_type" (
	"transcript to gene relationship_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("transcript to gene relationship_id", type), 
	FOREIGN KEY("transcript to gene relationship_id") REFERENCES "transcript to gene relationship" (id)
);
CREATE TABLE "transcript to gene relationship_has_attribute" (
	"transcript to gene relationship_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("transcript to gene relationship_id", has_attribute_id), 
	FOREIGN KEY("transcript to gene relationship_id") REFERENCES "transcript to gene relationship" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "gene to gene product relationship_qualifiers" (
	"gene to gene product relationship_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("gene to gene product relationship_id", qualifiers_id), 
	FOREIGN KEY("gene to gene product relationship_id") REFERENCES "gene to gene product relationship" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to gene product relationship_publications" (
	"gene to gene product relationship_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("gene to gene product relationship_id", publications_id), 
	FOREIGN KEY("gene to gene product relationship_id") REFERENCES "gene to gene product relationship" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "gene to gene product relationship_has_evidence" (
	"gene to gene product relationship_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("gene to gene product relationship_id", has_evidence_id), 
	FOREIGN KEY("gene to gene product relationship_id") REFERENCES "gene to gene product relationship" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "gene to gene product relationship_aggregator_knowledge_source" (
	"gene to gene product relationship_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("gene to gene product relationship_id", aggregator_knowledge_source), 
	FOREIGN KEY("gene to gene product relationship_id") REFERENCES "gene to gene product relationship" (id)
);
CREATE TABLE "gene to gene product relationship_subject_closure" (
	"gene to gene product relationship_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("gene to gene product relationship_id", subject_closure), 
	FOREIGN KEY("gene to gene product relationship_id") REFERENCES "gene to gene product relationship" (id)
);
CREATE TABLE "gene to gene product relationship_object_closure" (
	"gene to gene product relationship_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("gene to gene product relationship_id", object_closure), 
	FOREIGN KEY("gene to gene product relationship_id") REFERENCES "gene to gene product relationship" (id)
);
CREATE TABLE "gene to gene product relationship_subject_category_closure" (
	"gene to gene product relationship_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("gene to gene product relationship_id", subject_category_closure_id), 
	FOREIGN KEY("gene to gene product relationship_id") REFERENCES "gene to gene product relationship" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to gene product relationship_object_category_closure" (
	"gene to gene product relationship_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("gene to gene product relationship_id", object_category_closure_id), 
	FOREIGN KEY("gene to gene product relationship_id") REFERENCES "gene to gene product relationship" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to gene product relationship_subject_label_closure" (
	"gene to gene product relationship_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("gene to gene product relationship_id", subject_label_closure), 
	FOREIGN KEY("gene to gene product relationship_id") REFERENCES "gene to gene product relationship" (id)
);
CREATE TABLE "gene to gene product relationship_object_label_closure" (
	"gene to gene product relationship_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("gene to gene product relationship_id", object_label_closure), 
	FOREIGN KEY("gene to gene product relationship_id") REFERENCES "gene to gene product relationship" (id)
);
CREATE TABLE "gene to gene product relationship_retrieval_source_ids" (
	"gene to gene product relationship_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("gene to gene product relationship_id", retrieval_source_ids_id), 
	FOREIGN KEY("gene to gene product relationship_id") REFERENCES "gene to gene product relationship" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "gene to gene product relationship_category" (
	"gene to gene product relationship_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("gene to gene product relationship_id", category), 
	FOREIGN KEY("gene to gene product relationship_id") REFERENCES "gene to gene product relationship" (id)
);
CREATE TABLE "gene to gene product relationship_type" (
	"gene to gene product relationship_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("gene to gene product relationship_id", type), 
	FOREIGN KEY("gene to gene product relationship_id") REFERENCES "gene to gene product relationship" (id)
);
CREATE TABLE "gene to gene product relationship_has_attribute" (
	"gene to gene product relationship_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("gene to gene product relationship_id", has_attribute_id), 
	FOREIGN KEY("gene to gene product relationship_id") REFERENCES "gene to gene product relationship" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "exon to transcript relationship_qualifiers" (
	"exon to transcript relationship_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("exon to transcript relationship_id", qualifiers_id), 
	FOREIGN KEY("exon to transcript relationship_id") REFERENCES "exon to transcript relationship" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "exon to transcript relationship_publications" (
	"exon to transcript relationship_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("exon to transcript relationship_id", publications_id), 
	FOREIGN KEY("exon to transcript relationship_id") REFERENCES "exon to transcript relationship" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "exon to transcript relationship_has_evidence" (
	"exon to transcript relationship_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("exon to transcript relationship_id", has_evidence_id), 
	FOREIGN KEY("exon to transcript relationship_id") REFERENCES "exon to transcript relationship" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "exon to transcript relationship_aggregator_knowledge_source" (
	"exon to transcript relationship_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("exon to transcript relationship_id", aggregator_knowledge_source), 
	FOREIGN KEY("exon to transcript relationship_id") REFERENCES "exon to transcript relationship" (id)
);
CREATE TABLE "exon to transcript relationship_subject_closure" (
	"exon to transcript relationship_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("exon to transcript relationship_id", subject_closure), 
	FOREIGN KEY("exon to transcript relationship_id") REFERENCES "exon to transcript relationship" (id)
);
CREATE TABLE "exon to transcript relationship_object_closure" (
	"exon to transcript relationship_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("exon to transcript relationship_id", object_closure), 
	FOREIGN KEY("exon to transcript relationship_id") REFERENCES "exon to transcript relationship" (id)
);
CREATE TABLE "exon to transcript relationship_subject_category_closure" (
	"exon to transcript relationship_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("exon to transcript relationship_id", subject_category_closure_id), 
	FOREIGN KEY("exon to transcript relationship_id") REFERENCES "exon to transcript relationship" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "exon to transcript relationship_object_category_closure" (
	"exon to transcript relationship_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("exon to transcript relationship_id", object_category_closure_id), 
	FOREIGN KEY("exon to transcript relationship_id") REFERENCES "exon to transcript relationship" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "exon to transcript relationship_subject_label_closure" (
	"exon to transcript relationship_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("exon to transcript relationship_id", subject_label_closure), 
	FOREIGN KEY("exon to transcript relationship_id") REFERENCES "exon to transcript relationship" (id)
);
CREATE TABLE "exon to transcript relationship_object_label_closure" (
	"exon to transcript relationship_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("exon to transcript relationship_id", object_label_closure), 
	FOREIGN KEY("exon to transcript relationship_id") REFERENCES "exon to transcript relationship" (id)
);
CREATE TABLE "exon to transcript relationship_retrieval_source_ids" (
	"exon to transcript relationship_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("exon to transcript relationship_id", retrieval_source_ids_id), 
	FOREIGN KEY("exon to transcript relationship_id") REFERENCES "exon to transcript relationship" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "exon to transcript relationship_category" (
	"exon to transcript relationship_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("exon to transcript relationship_id", category), 
	FOREIGN KEY("exon to transcript relationship_id") REFERENCES "exon to transcript relationship" (id)
);
CREATE TABLE "exon to transcript relationship_type" (
	"exon to transcript relationship_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("exon to transcript relationship_id", type), 
	FOREIGN KEY("exon to transcript relationship_id") REFERENCES "exon to transcript relationship" (id)
);
CREATE TABLE "exon to transcript relationship_has_attribute" (
	"exon to transcript relationship_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("exon to transcript relationship_id", has_attribute_id), 
	FOREIGN KEY("exon to transcript relationship_id") REFERENCES "exon to transcript relationship" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "chemical entity or gene or gene product regulates gene association_qualifiers" (
	"chemical entity or gene or gene product regulates gene association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("chemical entity or gene or gene product regulates gene association_id", qualifiers_id), 
	FOREIGN KEY("chemical entity or gene or gene product regulates gene association_id") REFERENCES "chemical entity or gene or gene product regulates gene association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical entity or gene or gene product regulates gene association_publications" (
	"chemical entity or gene or gene product regulates gene association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("chemical entity or gene or gene product regulates gene association_id", publications_id), 
	FOREIGN KEY("chemical entity or gene or gene product regulates gene association_id") REFERENCES "chemical entity or gene or gene product regulates gene association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "chemical entity or gene or gene product regulates gene association_has_evidence" (
	"chemical entity or gene or gene product regulates gene association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("chemical entity or gene or gene product regulates gene association_id", has_evidence_id), 
	FOREIGN KEY("chemical entity or gene or gene product regulates gene association_id") REFERENCES "chemical entity or gene or gene product regulates gene association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "chemical entity or gene or gene product regulates gene association_aggregator_knowledge_source" (
	"chemical entity or gene or gene product regulates gene association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("chemical entity or gene or gene product regulates gene association_id", aggregator_knowledge_source), 
	FOREIGN KEY("chemical entity or gene or gene product regulates gene association_id") REFERENCES "chemical entity or gene or gene product regulates gene association" (id)
);
CREATE TABLE "chemical entity or gene or gene product regulates gene association_subject_closure" (
	"chemical entity or gene or gene product regulates gene association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("chemical entity or gene or gene product regulates gene association_id", subject_closure), 
	FOREIGN KEY("chemical entity or gene or gene product regulates gene association_id") REFERENCES "chemical entity or gene or gene product regulates gene association" (id)
);
CREATE TABLE "chemical entity or gene or gene product regulates gene association_object_closure" (
	"chemical entity or gene or gene product regulates gene association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("chemical entity or gene or gene product regulates gene association_id", object_closure), 
	FOREIGN KEY("chemical entity or gene or gene product regulates gene association_id") REFERENCES "chemical entity or gene or gene product regulates gene association" (id)
);
CREATE TABLE "chemical entity or gene or gene product regulates gene association_subject_category_closure" (
	"chemical entity or gene or gene product regulates gene association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("chemical entity or gene or gene product regulates gene association_id", subject_category_closure_id), 
	FOREIGN KEY("chemical entity or gene or gene product regulates gene association_id") REFERENCES "chemical entity or gene or gene product regulates gene association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical entity or gene or gene product regulates gene association_object_category_closure" (
	"chemical entity or gene or gene product regulates gene association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("chemical entity or gene or gene product regulates gene association_id", object_category_closure_id), 
	FOREIGN KEY("chemical entity or gene or gene product regulates gene association_id") REFERENCES "chemical entity or gene or gene product regulates gene association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical entity or gene or gene product regulates gene association_subject_label_closure" (
	"chemical entity or gene or gene product regulates gene association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("chemical entity or gene or gene product regulates gene association_id", subject_label_closure), 
	FOREIGN KEY("chemical entity or gene or gene product regulates gene association_id") REFERENCES "chemical entity or gene or gene product regulates gene association" (id)
);
CREATE TABLE "chemical entity or gene or gene product regulates gene association_object_label_closure" (
	"chemical entity or gene or gene product regulates gene association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("chemical entity or gene or gene product regulates gene association_id", object_label_closure), 
	FOREIGN KEY("chemical entity or gene or gene product regulates gene association_id") REFERENCES "chemical entity or gene or gene product regulates gene association" (id)
);
CREATE TABLE "chemical entity or gene or gene product regulates gene association_retrieval_source_ids" (
	"chemical entity or gene or gene product regulates gene association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("chemical entity or gene or gene product regulates gene association_id", retrieval_source_ids_id), 
	FOREIGN KEY("chemical entity or gene or gene product regulates gene association_id") REFERENCES "chemical entity or gene or gene product regulates gene association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "chemical entity or gene or gene product regulates gene association_category" (
	"chemical entity or gene or gene product regulates gene association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("chemical entity or gene or gene product regulates gene association_id", category), 
	FOREIGN KEY("chemical entity or gene or gene product regulates gene association_id") REFERENCES "chemical entity or gene or gene product regulates gene association" (id)
);
CREATE TABLE "chemical entity or gene or gene product regulates gene association_type" (
	"chemical entity or gene or gene product regulates gene association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("chemical entity or gene or gene product regulates gene association_id", type), 
	FOREIGN KEY("chemical entity or gene or gene product regulates gene association_id") REFERENCES "chemical entity or gene or gene product regulates gene association" (id)
);
CREATE TABLE "chemical entity or gene or gene product regulates gene association_has_attribute" (
	"chemical entity or gene or gene product regulates gene association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("chemical entity or gene or gene product regulates gene association_id", has_attribute_id), 
	FOREIGN KEY("chemical entity or gene or gene product regulates gene association_id") REFERENCES "chemical entity or gene or gene product regulates gene association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "anatomical entity to anatomical entity association_qualifiers" (
	"anatomical entity to anatomical entity association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity association_id", qualifiers_id), 
	FOREIGN KEY("anatomical entity to anatomical entity association_id") REFERENCES "anatomical entity to anatomical entity association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "anatomical entity to anatomical entity association_publications" (
	"anatomical entity to anatomical entity association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity association_id", publications_id), 
	FOREIGN KEY("anatomical entity to anatomical entity association_id") REFERENCES "anatomical entity to anatomical entity association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "anatomical entity to anatomical entity association_has_evidence" (
	"anatomical entity to anatomical entity association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity association_id", has_evidence_id), 
	FOREIGN KEY("anatomical entity to anatomical entity association_id") REFERENCES "anatomical entity to anatomical entity association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "anatomical entity to anatomical entity association_aggregator_knowledge_source" (
	"anatomical entity to anatomical entity association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity association_id", aggregator_knowledge_source), 
	FOREIGN KEY("anatomical entity to anatomical entity association_id") REFERENCES "anatomical entity to anatomical entity association" (id)
);
CREATE TABLE "anatomical entity to anatomical entity association_subject_closure" (
	"anatomical entity to anatomical entity association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity association_id", subject_closure), 
	FOREIGN KEY("anatomical entity to anatomical entity association_id") REFERENCES "anatomical entity to anatomical entity association" (id)
);
CREATE TABLE "anatomical entity to anatomical entity association_object_closure" (
	"anatomical entity to anatomical entity association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity association_id", object_closure), 
	FOREIGN KEY("anatomical entity to anatomical entity association_id") REFERENCES "anatomical entity to anatomical entity association" (id)
);
CREATE TABLE "anatomical entity to anatomical entity association_subject_category_closure" (
	"anatomical entity to anatomical entity association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity association_id", subject_category_closure_id), 
	FOREIGN KEY("anatomical entity to anatomical entity association_id") REFERENCES "anatomical entity to anatomical entity association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "anatomical entity to anatomical entity association_object_category_closure" (
	"anatomical entity to anatomical entity association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity association_id", object_category_closure_id), 
	FOREIGN KEY("anatomical entity to anatomical entity association_id") REFERENCES "anatomical entity to anatomical entity association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "anatomical entity to anatomical entity association_subject_label_closure" (
	"anatomical entity to anatomical entity association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity association_id", subject_label_closure), 
	FOREIGN KEY("anatomical entity to anatomical entity association_id") REFERENCES "anatomical entity to anatomical entity association" (id)
);
CREATE TABLE "anatomical entity to anatomical entity association_object_label_closure" (
	"anatomical entity to anatomical entity association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity association_id", object_label_closure), 
	FOREIGN KEY("anatomical entity to anatomical entity association_id") REFERENCES "anatomical entity to anatomical entity association" (id)
);
CREATE TABLE "anatomical entity to anatomical entity association_retrieval_source_ids" (
	"anatomical entity to anatomical entity association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity association_id", retrieval_source_ids_id), 
	FOREIGN KEY("anatomical entity to anatomical entity association_id") REFERENCES "anatomical entity to anatomical entity association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "anatomical entity to anatomical entity association_category" (
	"anatomical entity to anatomical entity association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity association_id", category), 
	FOREIGN KEY("anatomical entity to anatomical entity association_id") REFERENCES "anatomical entity to anatomical entity association" (id)
);
CREATE TABLE "anatomical entity to anatomical entity association_type" (
	"anatomical entity to anatomical entity association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity association_id", type), 
	FOREIGN KEY("anatomical entity to anatomical entity association_id") REFERENCES "anatomical entity to anatomical entity association" (id)
);
CREATE TABLE "anatomical entity to anatomical entity association_has_attribute" (
	"anatomical entity to anatomical entity association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity association_id", has_attribute_id), 
	FOREIGN KEY("anatomical entity to anatomical entity association_id") REFERENCES "anatomical entity to anatomical entity association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "anatomical entity to anatomical entity part of association_qualifiers" (
	"anatomical entity to anatomical entity part of association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity part of association_id", qualifiers_id), 
	FOREIGN KEY("anatomical entity to anatomical entity part of association_id") REFERENCES "anatomical entity to anatomical entity part of association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "anatomical entity to anatomical entity part of association_publications" (
	"anatomical entity to anatomical entity part of association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity part of association_id", publications_id), 
	FOREIGN KEY("anatomical entity to anatomical entity part of association_id") REFERENCES "anatomical entity to anatomical entity part of association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "anatomical entity to anatomical entity part of association_has_evidence" (
	"anatomical entity to anatomical entity part of association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity part of association_id", has_evidence_id), 
	FOREIGN KEY("anatomical entity to anatomical entity part of association_id") REFERENCES "anatomical entity to anatomical entity part of association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "anatomical entity to anatomical entity part of association_aggregator_knowledge_source" (
	"anatomical entity to anatomical entity part of association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity part of association_id", aggregator_knowledge_source), 
	FOREIGN KEY("anatomical entity to anatomical entity part of association_id") REFERENCES "anatomical entity to anatomical entity part of association" (id)
);
CREATE TABLE "anatomical entity to anatomical entity part of association_subject_closure" (
	"anatomical entity to anatomical entity part of association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity part of association_id", subject_closure), 
	FOREIGN KEY("anatomical entity to anatomical entity part of association_id") REFERENCES "anatomical entity to anatomical entity part of association" (id)
);
CREATE TABLE "anatomical entity to anatomical entity part of association_object_closure" (
	"anatomical entity to anatomical entity part of association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity part of association_id", object_closure), 
	FOREIGN KEY("anatomical entity to anatomical entity part of association_id") REFERENCES "anatomical entity to anatomical entity part of association" (id)
);
CREATE TABLE "anatomical entity to anatomical entity part of association_subject_category_closure" (
	"anatomical entity to anatomical entity part of association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity part of association_id", subject_category_closure_id), 
	FOREIGN KEY("anatomical entity to anatomical entity part of association_id") REFERENCES "anatomical entity to anatomical entity part of association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "anatomical entity to anatomical entity part of association_object_category_closure" (
	"anatomical entity to anatomical entity part of association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity part of association_id", object_category_closure_id), 
	FOREIGN KEY("anatomical entity to anatomical entity part of association_id") REFERENCES "anatomical entity to anatomical entity part of association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "anatomical entity to anatomical entity part of association_subject_label_closure" (
	"anatomical entity to anatomical entity part of association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity part of association_id", subject_label_closure), 
	FOREIGN KEY("anatomical entity to anatomical entity part of association_id") REFERENCES "anatomical entity to anatomical entity part of association" (id)
);
CREATE TABLE "anatomical entity to anatomical entity part of association_object_label_closure" (
	"anatomical entity to anatomical entity part of association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity part of association_id", object_label_closure), 
	FOREIGN KEY("anatomical entity to anatomical entity part of association_id") REFERENCES "anatomical entity to anatomical entity part of association" (id)
);
CREATE TABLE "anatomical entity to anatomical entity part of association_retrieval_source_ids" (
	"anatomical entity to anatomical entity part of association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity part of association_id", retrieval_source_ids_id), 
	FOREIGN KEY("anatomical entity to anatomical entity part of association_id") REFERENCES "anatomical entity to anatomical entity part of association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "anatomical entity to anatomical entity part of association_category" (
	"anatomical entity to anatomical entity part of association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity part of association_id", category), 
	FOREIGN KEY("anatomical entity to anatomical entity part of association_id") REFERENCES "anatomical entity to anatomical entity part of association" (id)
);
CREATE TABLE "anatomical entity to anatomical entity part of association_type" (
	"anatomical entity to anatomical entity part of association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity part of association_id", type), 
	FOREIGN KEY("anatomical entity to anatomical entity part of association_id") REFERENCES "anatomical entity to anatomical entity part of association" (id)
);
CREATE TABLE "anatomical entity to anatomical entity part of association_has_attribute" (
	"anatomical entity to anatomical entity part of association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity part of association_id", has_attribute_id), 
	FOREIGN KEY("anatomical entity to anatomical entity part of association_id") REFERENCES "anatomical entity to anatomical entity part of association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "anatomical entity to anatomical entity ontogenic association_qualifiers" (
	"anatomical entity to anatomical entity ontogenic association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity ontogenic association_id", qualifiers_id), 
	FOREIGN KEY("anatomical entity to anatomical entity ontogenic association_id") REFERENCES "anatomical entity to anatomical entity ontogenic association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "anatomical entity to anatomical entity ontogenic association_publications" (
	"anatomical entity to anatomical entity ontogenic association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity ontogenic association_id", publications_id), 
	FOREIGN KEY("anatomical entity to anatomical entity ontogenic association_id") REFERENCES "anatomical entity to anatomical entity ontogenic association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "anatomical entity to anatomical entity ontogenic association_has_evidence" (
	"anatomical entity to anatomical entity ontogenic association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity ontogenic association_id", has_evidence_id), 
	FOREIGN KEY("anatomical entity to anatomical entity ontogenic association_id") REFERENCES "anatomical entity to anatomical entity ontogenic association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "anatomical entity to anatomical entity ontogenic association_aggregator_knowledge_source" (
	"anatomical entity to anatomical entity ontogenic association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity ontogenic association_id", aggregator_knowledge_source), 
	FOREIGN KEY("anatomical entity to anatomical entity ontogenic association_id") REFERENCES "anatomical entity to anatomical entity ontogenic association" (id)
);
CREATE TABLE "anatomical entity to anatomical entity ontogenic association_subject_closure" (
	"anatomical entity to anatomical entity ontogenic association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity ontogenic association_id", subject_closure), 
	FOREIGN KEY("anatomical entity to anatomical entity ontogenic association_id") REFERENCES "anatomical entity to anatomical entity ontogenic association" (id)
);
CREATE TABLE "anatomical entity to anatomical entity ontogenic association_object_closure" (
	"anatomical entity to anatomical entity ontogenic association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity ontogenic association_id", object_closure), 
	FOREIGN KEY("anatomical entity to anatomical entity ontogenic association_id") REFERENCES "anatomical entity to anatomical entity ontogenic association" (id)
);
CREATE TABLE "anatomical entity to anatomical entity ontogenic association_subject_category_closure" (
	"anatomical entity to anatomical entity ontogenic association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity ontogenic association_id", subject_category_closure_id), 
	FOREIGN KEY("anatomical entity to anatomical entity ontogenic association_id") REFERENCES "anatomical entity to anatomical entity ontogenic association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "anatomical entity to anatomical entity ontogenic association_object_category_closure" (
	"anatomical entity to anatomical entity ontogenic association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity ontogenic association_id", object_category_closure_id), 
	FOREIGN KEY("anatomical entity to anatomical entity ontogenic association_id") REFERENCES "anatomical entity to anatomical entity ontogenic association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "anatomical entity to anatomical entity ontogenic association_subject_label_closure" (
	"anatomical entity to anatomical entity ontogenic association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity ontogenic association_id", subject_label_closure), 
	FOREIGN KEY("anatomical entity to anatomical entity ontogenic association_id") REFERENCES "anatomical entity to anatomical entity ontogenic association" (id)
);
CREATE TABLE "anatomical entity to anatomical entity ontogenic association_object_label_closure" (
	"anatomical entity to anatomical entity ontogenic association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity ontogenic association_id", object_label_closure), 
	FOREIGN KEY("anatomical entity to anatomical entity ontogenic association_id") REFERENCES "anatomical entity to anatomical entity ontogenic association" (id)
);
CREATE TABLE "anatomical entity to anatomical entity ontogenic association_retrieval_source_ids" (
	"anatomical entity to anatomical entity ontogenic association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity ontogenic association_id", retrieval_source_ids_id), 
	FOREIGN KEY("anatomical entity to anatomical entity ontogenic association_id") REFERENCES "anatomical entity to anatomical entity ontogenic association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "anatomical entity to anatomical entity ontogenic association_category" (
	"anatomical entity to anatomical entity ontogenic association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity ontogenic association_id", category), 
	FOREIGN KEY("anatomical entity to anatomical entity ontogenic association_id") REFERENCES "anatomical entity to anatomical entity ontogenic association" (id)
);
CREATE TABLE "anatomical entity to anatomical entity ontogenic association_type" (
	"anatomical entity to anatomical entity ontogenic association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity ontogenic association_id", type), 
	FOREIGN KEY("anatomical entity to anatomical entity ontogenic association_id") REFERENCES "anatomical entity to anatomical entity ontogenic association" (id)
);
CREATE TABLE "anatomical entity to anatomical entity ontogenic association_has_attribute" (
	"anatomical entity to anatomical entity ontogenic association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("anatomical entity to anatomical entity ontogenic association_id", has_attribute_id), 
	FOREIGN KEY("anatomical entity to anatomical entity ontogenic association_id") REFERENCES "anatomical entity to anatomical entity ontogenic association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "genotype to genotype part association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES genotype (id), 
	FOREIGN KEY(object) REFERENCES genotype (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "genotype to gene association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES genotype (id), 
	FOREIGN KEY(object) REFERENCES gene (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "genotype to variant association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES genotype (id), 
	FOREIGN KEY(object) REFERENCES "sequence variant" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "drug to entity association mixin" (
	id INTEGER NOT NULL, 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES drug (id), 
	FOREIGN KEY(object) REFERENCES "named thing" (id)
);
CREATE TABLE "drug to gene association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	object_id TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES drug (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_id) REFERENCES "gene or gene product" (id)
);
CREATE TABLE "genotype to entity association mixin" (
	id INTEGER NOT NULL, 
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES genotype (id), 
	FOREIGN KEY(object) REFERENCES "named thing" (id)
);
CREATE TABLE "genotype to phenotypic feature association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	sex_qualifier TEXT, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	has_count INTEGER, 
	has_total INTEGER, 
	has_quotient FLOAT, 
	has_percentage FLOAT, 
	subject_aspect_qualifier TEXT, 
	subject_direction_qualifier VARCHAR(13), 
	object_aspect_qualifier TEXT, 
	object_direction_qualifier VARCHAR(13), 
	qualified_predicate TEXT, 
	frequency_qualifier TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES genotype (id), 
	FOREIGN KEY(object) REFERENCES "phenotypic feature" (id), 
	FOREIGN KEY(sex_qualifier) REFERENCES "biological sex" (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "genotype to disease association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	subject_aspect_qualifier TEXT, 
	subject_direction_qualifier VARCHAR(13), 
	object_aspect_qualifier TEXT, 
	object_direction_qualifier VARCHAR(13), 
	qualified_predicate TEXT, 
	frequency_qualifier TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES genotype (id), 
	FOREIGN KEY(object) REFERENCES disease (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "genotype as a model of disease association" (
	subject TEXT NOT NULL, 
	predicate TEXT NOT NULL, 
	object TEXT NOT NULL, 
	negated BOOLEAN, 
	qualifier TEXT, 
	knowledge_source TEXT, 
	primary_knowledge_source TEXT, 
	timepoint TEXT, 
	original_subject TEXT, 
	original_predicate TEXT, 
	original_object TEXT, 
	subject_category TEXT, 
	object_category TEXT, 
	subject_namespace TEXT, 
	object_namespace TEXT, 
	id TEXT NOT NULL, 
	iri TEXT, 
	name TEXT, 
	description TEXT, 
	deprecated BOOLEAN, 
	subject_aspect_qualifier TEXT, 
	subject_direction_qualifier VARCHAR(13), 
	object_aspect_qualifier TEXT, 
	object_direction_qualifier VARCHAR(13), 
	qualified_predicate TEXT, 
	frequency_qualifier TEXT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(subject) REFERENCES genotype (id), 
	FOREIGN KEY(object) REFERENCES disease (id), 
	FOREIGN KEY(subject_category) REFERENCES "ontology class" (id), 
	FOREIGN KEY(object_category) REFERENCES "ontology class" (id)
);
CREATE TABLE "predicate mapping_exact_match" (
	"predicate mapping_id" TEXT, 
	exact_match_id TEXT, 
	PRIMARY KEY ("predicate mapping_id", exact_match_id), 
	FOREIGN KEY("predicate mapping_id") REFERENCES "predicate mapping" (id), 
	FOREIGN KEY(exact_match_id) REFERENCES "named thing" (id)
);
CREATE TABLE "predicate mapping_narrow_match" (
	"predicate mapping_id" TEXT, 
	narrow_match_id TEXT, 
	PRIMARY KEY ("predicate mapping_id", narrow_match_id), 
	FOREIGN KEY("predicate mapping_id") REFERENCES "predicate mapping" (id), 
	FOREIGN KEY(narrow_match_id) REFERENCES "named thing" (id)
);
CREATE TABLE "predicate mapping_broad_match" (
	"predicate mapping_id" TEXT, 
	broad_match_id TEXT, 
	PRIMARY KEY ("predicate mapping_id", broad_match_id), 
	FOREIGN KEY("predicate mapping_id") REFERENCES "predicate mapping" (id), 
	FOREIGN KEY(broad_match_id) REFERENCES "named thing" (id)
);
CREATE TABLE "molecular mixture_routes_of_delivery" (
	"molecular mixture_id" TEXT, 
	routes_of_delivery VARCHAR(27), 
	PRIMARY KEY ("molecular mixture_id", routes_of_delivery), 
	FOREIGN KEY("molecular mixture_id") REFERENCES "molecular mixture" (id)
);
CREATE TABLE "molecular mixture_available_from" (
	"molecular mixture_id" TEXT, 
	available_from VARCHAR(16), 
	PRIMARY KEY ("molecular mixture_id", available_from), 
	FOREIGN KEY("molecular mixture_id") REFERENCES "molecular mixture" (id)
);
CREATE TABLE "molecular mixture_has_chemical_role" (
	"molecular mixture_id" TEXT, 
	has_chemical_role_id TEXT, 
	PRIMARY KEY ("molecular mixture_id", has_chemical_role_id), 
	FOREIGN KEY("molecular mixture_id") REFERENCES "molecular mixture" (id), 
	FOREIGN KEY(has_chemical_role_id) REFERENCES "chemical role" (id)
);
CREATE TABLE "molecular mixture_provided_by" (
	"molecular mixture_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("molecular mixture_id", provided_by), 
	FOREIGN KEY("molecular mixture_id") REFERENCES "molecular mixture" (id)
);
CREATE TABLE "molecular mixture_xref" (
	"molecular mixture_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("molecular mixture_id", xref), 
	FOREIGN KEY("molecular mixture_id") REFERENCES "molecular mixture" (id)
);
CREATE TABLE "molecular mixture_synonym" (
	"molecular mixture_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("molecular mixture_id", synonym), 
	FOREIGN KEY("molecular mixture_id") REFERENCES "molecular mixture" (id)
);
CREATE TABLE "molecular mixture_category" (
	"molecular mixture_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("molecular mixture_id", category), 
	FOREIGN KEY("molecular mixture_id") REFERENCES "molecular mixture" (id)
);
CREATE TABLE "molecular mixture_type" (
	"molecular mixture_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("molecular mixture_id", type), 
	FOREIGN KEY("molecular mixture_id") REFERENCES "molecular mixture" (id)
);
CREATE TABLE "molecular mixture_has_attribute" (
	"molecular mixture_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("molecular mixture_id", has_attribute_id), 
	FOREIGN KEY("molecular mixture_id") REFERENCES "molecular mixture" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "complex molecular mixture_routes_of_delivery" (
	"complex molecular mixture_id" TEXT, 
	routes_of_delivery VARCHAR(27), 
	PRIMARY KEY ("complex molecular mixture_id", routes_of_delivery), 
	FOREIGN KEY("complex molecular mixture_id") REFERENCES "complex molecular mixture" (id)
);
CREATE TABLE "complex molecular mixture_available_from" (
	"complex molecular mixture_id" TEXT, 
	available_from VARCHAR(16), 
	PRIMARY KEY ("complex molecular mixture_id", available_from), 
	FOREIGN KEY("complex molecular mixture_id") REFERENCES "complex molecular mixture" (id)
);
CREATE TABLE "complex molecular mixture_has_chemical_role" (
	"complex molecular mixture_id" TEXT, 
	has_chemical_role_id TEXT, 
	PRIMARY KEY ("complex molecular mixture_id", has_chemical_role_id), 
	FOREIGN KEY("complex molecular mixture_id") REFERENCES "complex molecular mixture" (id), 
	FOREIGN KEY(has_chemical_role_id) REFERENCES "chemical role" (id)
);
CREATE TABLE "complex molecular mixture_provided_by" (
	"complex molecular mixture_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("complex molecular mixture_id", provided_by), 
	FOREIGN KEY("complex molecular mixture_id") REFERENCES "complex molecular mixture" (id)
);
CREATE TABLE "complex molecular mixture_xref" (
	"complex molecular mixture_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("complex molecular mixture_id", xref), 
	FOREIGN KEY("complex molecular mixture_id") REFERENCES "complex molecular mixture" (id)
);
CREATE TABLE "complex molecular mixture_synonym" (
	"complex molecular mixture_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("complex molecular mixture_id", synonym), 
	FOREIGN KEY("complex molecular mixture_id") REFERENCES "complex molecular mixture" (id)
);
CREATE TABLE "complex molecular mixture_category" (
	"complex molecular mixture_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("complex molecular mixture_id", category), 
	FOREIGN KEY("complex molecular mixture_id") REFERENCES "complex molecular mixture" (id)
);
CREATE TABLE "complex molecular mixture_type" (
	"complex molecular mixture_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("complex molecular mixture_id", type), 
	FOREIGN KEY("complex molecular mixture_id") REFERENCES "complex molecular mixture" (id)
);
CREATE TABLE "complex molecular mixture_has_attribute" (
	"complex molecular mixture_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("complex molecular mixture_id", has_attribute_id), 
	FOREIGN KEY("complex molecular mixture_id") REFERENCES "complex molecular mixture" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "processed material_routes_of_delivery" (
	"processed material_id" TEXT, 
	routes_of_delivery VARCHAR(27), 
	PRIMARY KEY ("processed material_id", routes_of_delivery), 
	FOREIGN KEY("processed material_id") REFERENCES "processed material" (id)
);
CREATE TABLE "processed material_available_from" (
	"processed material_id" TEXT, 
	available_from VARCHAR(16), 
	PRIMARY KEY ("processed material_id", available_from), 
	FOREIGN KEY("processed material_id") REFERENCES "processed material" (id)
);
CREATE TABLE "processed material_has_chemical_role" (
	"processed material_id" TEXT, 
	has_chemical_role_id TEXT, 
	PRIMARY KEY ("processed material_id", has_chemical_role_id), 
	FOREIGN KEY("processed material_id") REFERENCES "processed material" (id), 
	FOREIGN KEY(has_chemical_role_id) REFERENCES "chemical role" (id)
);
CREATE TABLE "processed material_provided_by" (
	"processed material_id" TEXT, 
	provided_by TEXT, 
	PRIMARY KEY ("processed material_id", provided_by), 
	FOREIGN KEY("processed material_id") REFERENCES "processed material" (id)
);
CREATE TABLE "processed material_xref" (
	"processed material_id" TEXT, 
	xref TEXT, 
	PRIMARY KEY ("processed material_id", xref), 
	FOREIGN KEY("processed material_id") REFERENCES "processed material" (id)
);
CREATE TABLE "processed material_synonym" (
	"processed material_id" TEXT, 
	synonym TEXT, 
	PRIMARY KEY ("processed material_id", synonym), 
	FOREIGN KEY("processed material_id") REFERENCES "processed material" (id)
);
CREATE TABLE "processed material_category" (
	"processed material_id" TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY ("processed material_id", category), 
	FOREIGN KEY("processed material_id") REFERENCES "processed material" (id)
);
CREATE TABLE "processed material_type" (
	"processed material_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("processed material_id", type), 
	FOREIGN KEY("processed material_id") REFERENCES "processed material" (id)
);
CREATE TABLE "processed material_has_attribute" (
	"processed material_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("processed material_id", has_attribute_id), 
	FOREIGN KEY("processed material_id") REFERENCES "processed material" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE drug_routes_of_delivery (
	drug_id TEXT, 
	routes_of_delivery VARCHAR(27), 
	PRIMARY KEY (drug_id, routes_of_delivery), 
	FOREIGN KEY(drug_id) REFERENCES drug (id)
);
CREATE TABLE drug_available_from (
	drug_id TEXT, 
	available_from VARCHAR(16), 
	PRIMARY KEY (drug_id, available_from), 
	FOREIGN KEY(drug_id) REFERENCES drug (id)
);
CREATE TABLE drug_has_chemical_role (
	drug_id TEXT, 
	has_chemical_role_id TEXT, 
	PRIMARY KEY (drug_id, has_chemical_role_id), 
	FOREIGN KEY(drug_id) REFERENCES drug (id), 
	FOREIGN KEY(has_chemical_role_id) REFERENCES "chemical role" (id)
);
CREATE TABLE drug_provided_by (
	drug_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (drug_id, provided_by), 
	FOREIGN KEY(drug_id) REFERENCES drug (id)
);
CREATE TABLE drug_xref (
	drug_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (drug_id, xref), 
	FOREIGN KEY(drug_id) REFERENCES drug (id)
);
CREATE TABLE drug_synonym (
	drug_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (drug_id, synonym), 
	FOREIGN KEY(drug_id) REFERENCES drug (id)
);
CREATE TABLE drug_category (
	drug_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (drug_id, category), 
	FOREIGN KEY(drug_id) REFERENCES drug (id)
);
CREATE TABLE drug_type (
	drug_id TEXT, 
	type TEXT, 
	PRIMARY KEY (drug_id, type), 
	FOREIGN KEY(drug_id) REFERENCES drug (id)
);
CREATE TABLE drug_has_attribute (
	drug_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (drug_id, has_attribute_id), 
	FOREIGN KEY(drug_id) REFERENCES drug (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE food_routes_of_delivery (
	food_id TEXT, 
	routes_of_delivery VARCHAR(27), 
	PRIMARY KEY (food_id, routes_of_delivery), 
	FOREIGN KEY(food_id) REFERENCES food (id)
);
CREATE TABLE food_available_from (
	food_id TEXT, 
	available_from VARCHAR(16), 
	PRIMARY KEY (food_id, available_from), 
	FOREIGN KEY(food_id) REFERENCES food (id)
);
CREATE TABLE food_has_chemical_role (
	food_id TEXT, 
	has_chemical_role_id TEXT, 
	PRIMARY KEY (food_id, has_chemical_role_id), 
	FOREIGN KEY(food_id) REFERENCES food (id), 
	FOREIGN KEY(has_chemical_role_id) REFERENCES "chemical role" (id)
);
CREATE TABLE food_provided_by (
	food_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (food_id, provided_by), 
	FOREIGN KEY(food_id) REFERENCES food (id)
);
CREATE TABLE food_xref (
	food_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (food_id, xref), 
	FOREIGN KEY(food_id) REFERENCES food (id)
);
CREATE TABLE food_synonym (
	food_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (food_id, synonym), 
	FOREIGN KEY(food_id) REFERENCES food (id)
);
CREATE TABLE food_category (
	food_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (food_id, category), 
	FOREIGN KEY(food_id) REFERENCES food (id)
);
CREATE TABLE food_type (
	food_id TEXT, 
	type TEXT, 
	PRIMARY KEY (food_id, type), 
	FOREIGN KEY(food_id) REFERENCES food (id)
);
CREATE TABLE food_has_attribute (
	food_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (food_id, has_attribute_id), 
	FOREIGN KEY(food_id) REFERENCES food (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE genotype_in_taxon (
	genotype_id TEXT, 
	in_taxon_id TEXT, 
	PRIMARY KEY (genotype_id, in_taxon_id), 
	FOREIGN KEY(genotype_id) REFERENCES genotype (id), 
	FOREIGN KEY(in_taxon_id) REFERENCES "organism taxon" (id)
);
CREATE TABLE genotype_provided_by (
	genotype_id TEXT, 
	provided_by TEXT, 
	PRIMARY KEY (genotype_id, provided_by), 
	FOREIGN KEY(genotype_id) REFERENCES genotype (id)
);
CREATE TABLE genotype_xref (
	genotype_id TEXT, 
	xref TEXT, 
	PRIMARY KEY (genotype_id, xref), 
	FOREIGN KEY(genotype_id) REFERENCES genotype (id)
);
CREATE TABLE genotype_synonym (
	genotype_id TEXT, 
	synonym TEXT, 
	PRIMARY KEY (genotype_id, synonym), 
	FOREIGN KEY(genotype_id) REFERENCES genotype (id)
);
CREATE TABLE genotype_category (
	genotype_id TEXT, 
	category TEXT NOT NULL, 
	PRIMARY KEY (genotype_id, category), 
	FOREIGN KEY(genotype_id) REFERENCES genotype (id)
);
CREATE TABLE genotype_type (
	genotype_id TEXT, 
	type TEXT, 
	PRIMARY KEY (genotype_id, type), 
	FOREIGN KEY(genotype_id) REFERENCES genotype (id)
);
CREATE TABLE genotype_has_attribute (
	genotype_id TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY (genotype_id, has_attribute_id), 
	FOREIGN KEY(genotype_id) REFERENCES genotype (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE treatment_has_drug (
	treatment_id TEXT, 
	has_drug_id TEXT, 
	PRIMARY KEY (treatment_id, has_drug_id), 
	FOREIGN KEY(treatment_id) REFERENCES treatment (id), 
	FOREIGN KEY(has_drug_id) REFERENCES drug (id)
);
CREATE TABLE "pairwise molecular interaction_qualifiers" (
	"pairwise molecular interaction_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("pairwise molecular interaction_id", qualifiers_id), 
	FOREIGN KEY("pairwise molecular interaction_id") REFERENCES "pairwise molecular interaction" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "pairwise molecular interaction_publications" (
	"pairwise molecular interaction_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("pairwise molecular interaction_id", publications_id), 
	FOREIGN KEY("pairwise molecular interaction_id") REFERENCES "pairwise molecular interaction" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "pairwise molecular interaction_has_evidence" (
	"pairwise molecular interaction_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("pairwise molecular interaction_id", has_evidence_id), 
	FOREIGN KEY("pairwise molecular interaction_id") REFERENCES "pairwise molecular interaction" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "pairwise molecular interaction_aggregator_knowledge_source" (
	"pairwise molecular interaction_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("pairwise molecular interaction_id", aggregator_knowledge_source), 
	FOREIGN KEY("pairwise molecular interaction_id") REFERENCES "pairwise molecular interaction" (id)
);
CREATE TABLE "pairwise molecular interaction_subject_closure" (
	"pairwise molecular interaction_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("pairwise molecular interaction_id", subject_closure), 
	FOREIGN KEY("pairwise molecular interaction_id") REFERENCES "pairwise molecular interaction" (id)
);
CREATE TABLE "pairwise molecular interaction_object_closure" (
	"pairwise molecular interaction_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("pairwise molecular interaction_id", object_closure), 
	FOREIGN KEY("pairwise molecular interaction_id") REFERENCES "pairwise molecular interaction" (id)
);
CREATE TABLE "pairwise molecular interaction_subject_category_closure" (
	"pairwise molecular interaction_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("pairwise molecular interaction_id", subject_category_closure_id), 
	FOREIGN KEY("pairwise molecular interaction_id") REFERENCES "pairwise molecular interaction" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "pairwise molecular interaction_object_category_closure" (
	"pairwise molecular interaction_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("pairwise molecular interaction_id", object_category_closure_id), 
	FOREIGN KEY("pairwise molecular interaction_id") REFERENCES "pairwise molecular interaction" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "pairwise molecular interaction_subject_label_closure" (
	"pairwise molecular interaction_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("pairwise molecular interaction_id", subject_label_closure), 
	FOREIGN KEY("pairwise molecular interaction_id") REFERENCES "pairwise molecular interaction" (id)
);
CREATE TABLE "pairwise molecular interaction_object_label_closure" (
	"pairwise molecular interaction_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("pairwise molecular interaction_id", object_label_closure), 
	FOREIGN KEY("pairwise molecular interaction_id") REFERENCES "pairwise molecular interaction" (id)
);
CREATE TABLE "pairwise molecular interaction_retrieval_source_ids" (
	"pairwise molecular interaction_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("pairwise molecular interaction_id", retrieval_source_ids_id), 
	FOREIGN KEY("pairwise molecular interaction_id") REFERENCES "pairwise molecular interaction" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "pairwise molecular interaction_category" (
	"pairwise molecular interaction_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("pairwise molecular interaction_id", category), 
	FOREIGN KEY("pairwise molecular interaction_id") REFERENCES "pairwise molecular interaction" (id)
);
CREATE TABLE "pairwise molecular interaction_type" (
	"pairwise molecular interaction_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("pairwise molecular interaction_id", type), 
	FOREIGN KEY("pairwise molecular interaction_id") REFERENCES "pairwise molecular interaction" (id)
);
CREATE TABLE "pairwise molecular interaction_has_attribute" (
	"pairwise molecular interaction_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("pairwise molecular interaction_id", has_attribute_id), 
	FOREIGN KEY("pairwise molecular interaction_id") REFERENCES "pairwise molecular interaction" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "reaction to participant association_qualifiers" (
	"reaction to participant association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("reaction to participant association_id", qualifiers_id), 
	FOREIGN KEY("reaction to participant association_id") REFERENCES "reaction to participant association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "reaction to participant association_publications" (
	"reaction to participant association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("reaction to participant association_id", publications_id), 
	FOREIGN KEY("reaction to participant association_id") REFERENCES "reaction to participant association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "reaction to participant association_has_evidence" (
	"reaction to participant association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("reaction to participant association_id", has_evidence_id), 
	FOREIGN KEY("reaction to participant association_id") REFERENCES "reaction to participant association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "reaction to participant association_aggregator_knowledge_source" (
	"reaction to participant association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("reaction to participant association_id", aggregator_knowledge_source), 
	FOREIGN KEY("reaction to participant association_id") REFERENCES "reaction to participant association" (id)
);
CREATE TABLE "reaction to participant association_subject_closure" (
	"reaction to participant association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("reaction to participant association_id", subject_closure), 
	FOREIGN KEY("reaction to participant association_id") REFERENCES "reaction to participant association" (id)
);
CREATE TABLE "reaction to participant association_object_closure" (
	"reaction to participant association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("reaction to participant association_id", object_closure), 
	FOREIGN KEY("reaction to participant association_id") REFERENCES "reaction to participant association" (id)
);
CREATE TABLE "reaction to participant association_subject_category_closure" (
	"reaction to participant association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("reaction to participant association_id", subject_category_closure_id), 
	FOREIGN KEY("reaction to participant association_id") REFERENCES "reaction to participant association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "reaction to participant association_object_category_closure" (
	"reaction to participant association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("reaction to participant association_id", object_category_closure_id), 
	FOREIGN KEY("reaction to participant association_id") REFERENCES "reaction to participant association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "reaction to participant association_subject_label_closure" (
	"reaction to participant association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("reaction to participant association_id", subject_label_closure), 
	FOREIGN KEY("reaction to participant association_id") REFERENCES "reaction to participant association" (id)
);
CREATE TABLE "reaction to participant association_object_label_closure" (
	"reaction to participant association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("reaction to participant association_id", object_label_closure), 
	FOREIGN KEY("reaction to participant association_id") REFERENCES "reaction to participant association" (id)
);
CREATE TABLE "reaction to participant association_retrieval_source_ids" (
	"reaction to participant association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("reaction to participant association_id", retrieval_source_ids_id), 
	FOREIGN KEY("reaction to participant association_id") REFERENCES "reaction to participant association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "reaction to participant association_category" (
	"reaction to participant association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("reaction to participant association_id", category), 
	FOREIGN KEY("reaction to participant association_id") REFERENCES "reaction to participant association" (id)
);
CREATE TABLE "reaction to participant association_type" (
	"reaction to participant association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("reaction to participant association_id", type), 
	FOREIGN KEY("reaction to participant association_id") REFERENCES "reaction to participant association" (id)
);
CREATE TABLE "reaction to participant association_has_attribute" (
	"reaction to participant association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("reaction to participant association_id", has_attribute_id), 
	FOREIGN KEY("reaction to participant association_id") REFERENCES "reaction to participant association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "reaction to catalyst association_qualifiers" (
	"reaction to catalyst association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("reaction to catalyst association_id", qualifiers_id), 
	FOREIGN KEY("reaction to catalyst association_id") REFERENCES "reaction to catalyst association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "reaction to catalyst association_publications" (
	"reaction to catalyst association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("reaction to catalyst association_id", publications_id), 
	FOREIGN KEY("reaction to catalyst association_id") REFERENCES "reaction to catalyst association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "reaction to catalyst association_has_evidence" (
	"reaction to catalyst association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("reaction to catalyst association_id", has_evidence_id), 
	FOREIGN KEY("reaction to catalyst association_id") REFERENCES "reaction to catalyst association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "reaction to catalyst association_aggregator_knowledge_source" (
	"reaction to catalyst association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("reaction to catalyst association_id", aggregator_knowledge_source), 
	FOREIGN KEY("reaction to catalyst association_id") REFERENCES "reaction to catalyst association" (id)
);
CREATE TABLE "reaction to catalyst association_subject_closure" (
	"reaction to catalyst association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("reaction to catalyst association_id", subject_closure), 
	FOREIGN KEY("reaction to catalyst association_id") REFERENCES "reaction to catalyst association" (id)
);
CREATE TABLE "reaction to catalyst association_object_closure" (
	"reaction to catalyst association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("reaction to catalyst association_id", object_closure), 
	FOREIGN KEY("reaction to catalyst association_id") REFERENCES "reaction to catalyst association" (id)
);
CREATE TABLE "reaction to catalyst association_subject_category_closure" (
	"reaction to catalyst association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("reaction to catalyst association_id", subject_category_closure_id), 
	FOREIGN KEY("reaction to catalyst association_id") REFERENCES "reaction to catalyst association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "reaction to catalyst association_object_category_closure" (
	"reaction to catalyst association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("reaction to catalyst association_id", object_category_closure_id), 
	FOREIGN KEY("reaction to catalyst association_id") REFERENCES "reaction to catalyst association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "reaction to catalyst association_subject_label_closure" (
	"reaction to catalyst association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("reaction to catalyst association_id", subject_label_closure), 
	FOREIGN KEY("reaction to catalyst association_id") REFERENCES "reaction to catalyst association" (id)
);
CREATE TABLE "reaction to catalyst association_object_label_closure" (
	"reaction to catalyst association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("reaction to catalyst association_id", object_label_closure), 
	FOREIGN KEY("reaction to catalyst association_id") REFERENCES "reaction to catalyst association" (id)
);
CREATE TABLE "reaction to catalyst association_retrieval_source_ids" (
	"reaction to catalyst association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("reaction to catalyst association_id", retrieval_source_ids_id), 
	FOREIGN KEY("reaction to catalyst association_id") REFERENCES "reaction to catalyst association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "reaction to catalyst association_category" (
	"reaction to catalyst association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("reaction to catalyst association_id", category), 
	FOREIGN KEY("reaction to catalyst association_id") REFERENCES "reaction to catalyst association" (id)
);
CREATE TABLE "reaction to catalyst association_type" (
	"reaction to catalyst association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("reaction to catalyst association_id", type), 
	FOREIGN KEY("reaction to catalyst association_id") REFERENCES "reaction to catalyst association" (id)
);
CREATE TABLE "reaction to catalyst association_has_attribute" (
	"reaction to catalyst association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("reaction to catalyst association_id", has_attribute_id), 
	FOREIGN KEY("reaction to catalyst association_id") REFERENCES "reaction to catalyst association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "chemical affects gene association_qualifiers" (
	"chemical affects gene association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("chemical affects gene association_id", qualifiers_id), 
	FOREIGN KEY("chemical affects gene association_id") REFERENCES "chemical affects gene association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical affects gene association_publications" (
	"chemical affects gene association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("chemical affects gene association_id", publications_id), 
	FOREIGN KEY("chemical affects gene association_id") REFERENCES "chemical affects gene association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "chemical affects gene association_has_evidence" (
	"chemical affects gene association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("chemical affects gene association_id", has_evidence_id), 
	FOREIGN KEY("chemical affects gene association_id") REFERENCES "chemical affects gene association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "chemical affects gene association_aggregator_knowledge_source" (
	"chemical affects gene association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("chemical affects gene association_id", aggregator_knowledge_source), 
	FOREIGN KEY("chemical affects gene association_id") REFERENCES "chemical affects gene association" (id)
);
CREATE TABLE "chemical affects gene association_subject_closure" (
	"chemical affects gene association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("chemical affects gene association_id", subject_closure), 
	FOREIGN KEY("chemical affects gene association_id") REFERENCES "chemical affects gene association" (id)
);
CREATE TABLE "chemical affects gene association_object_closure" (
	"chemical affects gene association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("chemical affects gene association_id", object_closure), 
	FOREIGN KEY("chemical affects gene association_id") REFERENCES "chemical affects gene association" (id)
);
CREATE TABLE "chemical affects gene association_subject_category_closure" (
	"chemical affects gene association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("chemical affects gene association_id", subject_category_closure_id), 
	FOREIGN KEY("chemical affects gene association_id") REFERENCES "chemical affects gene association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical affects gene association_object_category_closure" (
	"chemical affects gene association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("chemical affects gene association_id", object_category_closure_id), 
	FOREIGN KEY("chemical affects gene association_id") REFERENCES "chemical affects gene association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "chemical affects gene association_subject_label_closure" (
	"chemical affects gene association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("chemical affects gene association_id", subject_label_closure), 
	FOREIGN KEY("chemical affects gene association_id") REFERENCES "chemical affects gene association" (id)
);
CREATE TABLE "chemical affects gene association_object_label_closure" (
	"chemical affects gene association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("chemical affects gene association_id", object_label_closure), 
	FOREIGN KEY("chemical affects gene association_id") REFERENCES "chemical affects gene association" (id)
);
CREATE TABLE "chemical affects gene association_retrieval_source_ids" (
	"chemical affects gene association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("chemical affects gene association_id", retrieval_source_ids_id), 
	FOREIGN KEY("chemical affects gene association_id") REFERENCES "chemical affects gene association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "chemical affects gene association_category" (
	"chemical affects gene association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("chemical affects gene association_id", category), 
	FOREIGN KEY("chemical affects gene association_id") REFERENCES "chemical affects gene association" (id)
);
CREATE TABLE "chemical affects gene association_type" (
	"chemical affects gene association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("chemical affects gene association_id", type), 
	FOREIGN KEY("chemical affects gene association_id") REFERENCES "chemical affects gene association" (id)
);
CREATE TABLE "chemical affects gene association_has_attribute" (
	"chemical affects gene association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("chemical affects gene association_id", has_attribute_id), 
	FOREIGN KEY("chemical affects gene association_id") REFERENCES "chemical affects gene association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "gene affects chemical association_qualifiers" (
	"gene affects chemical association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("gene affects chemical association_id", qualifiers_id), 
	FOREIGN KEY("gene affects chemical association_id") REFERENCES "gene affects chemical association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene affects chemical association_publications" (
	"gene affects chemical association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("gene affects chemical association_id", publications_id), 
	FOREIGN KEY("gene affects chemical association_id") REFERENCES "gene affects chemical association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "gene affects chemical association_has_evidence" (
	"gene affects chemical association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("gene affects chemical association_id", has_evidence_id), 
	FOREIGN KEY("gene affects chemical association_id") REFERENCES "gene affects chemical association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "gene affects chemical association_aggregator_knowledge_source" (
	"gene affects chemical association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("gene affects chemical association_id", aggregator_knowledge_source), 
	FOREIGN KEY("gene affects chemical association_id") REFERENCES "gene affects chemical association" (id)
);
CREATE TABLE "gene affects chemical association_subject_closure" (
	"gene affects chemical association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("gene affects chemical association_id", subject_closure), 
	FOREIGN KEY("gene affects chemical association_id") REFERENCES "gene affects chemical association" (id)
);
CREATE TABLE "gene affects chemical association_object_closure" (
	"gene affects chemical association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("gene affects chemical association_id", object_closure), 
	FOREIGN KEY("gene affects chemical association_id") REFERENCES "gene affects chemical association" (id)
);
CREATE TABLE "gene affects chemical association_subject_category_closure" (
	"gene affects chemical association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("gene affects chemical association_id", subject_category_closure_id), 
	FOREIGN KEY("gene affects chemical association_id") REFERENCES "gene affects chemical association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene affects chemical association_object_category_closure" (
	"gene affects chemical association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("gene affects chemical association_id", object_category_closure_id), 
	FOREIGN KEY("gene affects chemical association_id") REFERENCES "gene affects chemical association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene affects chemical association_subject_label_closure" (
	"gene affects chemical association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("gene affects chemical association_id", subject_label_closure), 
	FOREIGN KEY("gene affects chemical association_id") REFERENCES "gene affects chemical association" (id)
);
CREATE TABLE "gene affects chemical association_object_label_closure" (
	"gene affects chemical association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("gene affects chemical association_id", object_label_closure), 
	FOREIGN KEY("gene affects chemical association_id") REFERENCES "gene affects chemical association" (id)
);
CREATE TABLE "gene affects chemical association_retrieval_source_ids" (
	"gene affects chemical association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("gene affects chemical association_id", retrieval_source_ids_id), 
	FOREIGN KEY("gene affects chemical association_id") REFERENCES "gene affects chemical association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "gene affects chemical association_category" (
	"gene affects chemical association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("gene affects chemical association_id", category), 
	FOREIGN KEY("gene affects chemical association_id") REFERENCES "gene affects chemical association" (id)
);
CREATE TABLE "gene affects chemical association_type" (
	"gene affects chemical association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("gene affects chemical association_id", type), 
	FOREIGN KEY("gene affects chemical association_id") REFERENCES "gene affects chemical association" (id)
);
CREATE TABLE "gene affects chemical association_has_attribute" (
	"gene affects chemical association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("gene affects chemical association_id", has_attribute_id), 
	FOREIGN KEY("gene affects chemical association_id") REFERENCES "gene affects chemical association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "exposure event to phenotypic feature association_qualifiers" (
	"exposure event to phenotypic feature association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("exposure event to phenotypic feature association_id", qualifiers_id), 
	FOREIGN KEY("exposure event to phenotypic feature association_id") REFERENCES "exposure event to phenotypic feature association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "exposure event to phenotypic feature association_publications" (
	"exposure event to phenotypic feature association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("exposure event to phenotypic feature association_id", publications_id), 
	FOREIGN KEY("exposure event to phenotypic feature association_id") REFERENCES "exposure event to phenotypic feature association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "exposure event to phenotypic feature association_has_evidence" (
	"exposure event to phenotypic feature association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("exposure event to phenotypic feature association_id", has_evidence_id), 
	FOREIGN KEY("exposure event to phenotypic feature association_id") REFERENCES "exposure event to phenotypic feature association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "exposure event to phenotypic feature association_aggregator_knowledge_source" (
	"exposure event to phenotypic feature association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("exposure event to phenotypic feature association_id", aggregator_knowledge_source), 
	FOREIGN KEY("exposure event to phenotypic feature association_id") REFERENCES "exposure event to phenotypic feature association" (id)
);
CREATE TABLE "exposure event to phenotypic feature association_subject_closure" (
	"exposure event to phenotypic feature association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("exposure event to phenotypic feature association_id", subject_closure), 
	FOREIGN KEY("exposure event to phenotypic feature association_id") REFERENCES "exposure event to phenotypic feature association" (id)
);
CREATE TABLE "exposure event to phenotypic feature association_object_closure" (
	"exposure event to phenotypic feature association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("exposure event to phenotypic feature association_id", object_closure), 
	FOREIGN KEY("exposure event to phenotypic feature association_id") REFERENCES "exposure event to phenotypic feature association" (id)
);
CREATE TABLE "exposure event to phenotypic feature association_subject_category_closure" (
	"exposure event to phenotypic feature association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("exposure event to phenotypic feature association_id", subject_category_closure_id), 
	FOREIGN KEY("exposure event to phenotypic feature association_id") REFERENCES "exposure event to phenotypic feature association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "exposure event to phenotypic feature association_object_category_closure" (
	"exposure event to phenotypic feature association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("exposure event to phenotypic feature association_id", object_category_closure_id), 
	FOREIGN KEY("exposure event to phenotypic feature association_id") REFERENCES "exposure event to phenotypic feature association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "exposure event to phenotypic feature association_subject_label_closure" (
	"exposure event to phenotypic feature association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("exposure event to phenotypic feature association_id", subject_label_closure), 
	FOREIGN KEY("exposure event to phenotypic feature association_id") REFERENCES "exposure event to phenotypic feature association" (id)
);
CREATE TABLE "exposure event to phenotypic feature association_object_label_closure" (
	"exposure event to phenotypic feature association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("exposure event to phenotypic feature association_id", object_label_closure), 
	FOREIGN KEY("exposure event to phenotypic feature association_id") REFERENCES "exposure event to phenotypic feature association" (id)
);
CREATE TABLE "exposure event to phenotypic feature association_retrieval_source_ids" (
	"exposure event to phenotypic feature association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("exposure event to phenotypic feature association_id", retrieval_source_ids_id), 
	FOREIGN KEY("exposure event to phenotypic feature association_id") REFERENCES "exposure event to phenotypic feature association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "exposure event to phenotypic feature association_category" (
	"exposure event to phenotypic feature association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("exposure event to phenotypic feature association_id", category), 
	FOREIGN KEY("exposure event to phenotypic feature association_id") REFERENCES "exposure event to phenotypic feature association" (id)
);
CREATE TABLE "exposure event to phenotypic feature association_type" (
	"exposure event to phenotypic feature association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("exposure event to phenotypic feature association_id", type), 
	FOREIGN KEY("exposure event to phenotypic feature association_id") REFERENCES "exposure event to phenotypic feature association" (id)
);
CREATE TABLE "exposure event to phenotypic feature association_has_attribute" (
	"exposure event to phenotypic feature association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("exposure event to phenotypic feature association_id", has_attribute_id), 
	FOREIGN KEY("exposure event to phenotypic feature association_id") REFERENCES "exposure event to phenotypic feature association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "disease to phenotypic feature association_qualifiers" (
	"disease to phenotypic feature association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("disease to phenotypic feature association_id", qualifiers_id), 
	FOREIGN KEY("disease to phenotypic feature association_id") REFERENCES "disease to phenotypic feature association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "disease to phenotypic feature association_publications" (
	"disease to phenotypic feature association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("disease to phenotypic feature association_id", publications_id), 
	FOREIGN KEY("disease to phenotypic feature association_id") REFERENCES "disease to phenotypic feature association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "disease to phenotypic feature association_has_evidence" (
	"disease to phenotypic feature association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("disease to phenotypic feature association_id", has_evidence_id), 
	FOREIGN KEY("disease to phenotypic feature association_id") REFERENCES "disease to phenotypic feature association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "disease to phenotypic feature association_aggregator_knowledge_source" (
	"disease to phenotypic feature association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("disease to phenotypic feature association_id", aggregator_knowledge_source), 
	FOREIGN KEY("disease to phenotypic feature association_id") REFERENCES "disease to phenotypic feature association" (id)
);
CREATE TABLE "disease to phenotypic feature association_subject_closure" (
	"disease to phenotypic feature association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("disease to phenotypic feature association_id", subject_closure), 
	FOREIGN KEY("disease to phenotypic feature association_id") REFERENCES "disease to phenotypic feature association" (id)
);
CREATE TABLE "disease to phenotypic feature association_object_closure" (
	"disease to phenotypic feature association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("disease to phenotypic feature association_id", object_closure), 
	FOREIGN KEY("disease to phenotypic feature association_id") REFERENCES "disease to phenotypic feature association" (id)
);
CREATE TABLE "disease to phenotypic feature association_subject_category_closure" (
	"disease to phenotypic feature association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("disease to phenotypic feature association_id", subject_category_closure_id), 
	FOREIGN KEY("disease to phenotypic feature association_id") REFERENCES "disease to phenotypic feature association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "disease to phenotypic feature association_object_category_closure" (
	"disease to phenotypic feature association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("disease to phenotypic feature association_id", object_category_closure_id), 
	FOREIGN KEY("disease to phenotypic feature association_id") REFERENCES "disease to phenotypic feature association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "disease to phenotypic feature association_subject_label_closure" (
	"disease to phenotypic feature association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("disease to phenotypic feature association_id", subject_label_closure), 
	FOREIGN KEY("disease to phenotypic feature association_id") REFERENCES "disease to phenotypic feature association" (id)
);
CREATE TABLE "disease to phenotypic feature association_object_label_closure" (
	"disease to phenotypic feature association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("disease to phenotypic feature association_id", object_label_closure), 
	FOREIGN KEY("disease to phenotypic feature association_id") REFERENCES "disease to phenotypic feature association" (id)
);
CREATE TABLE "disease to phenotypic feature association_retrieval_source_ids" (
	"disease to phenotypic feature association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("disease to phenotypic feature association_id", retrieval_source_ids_id), 
	FOREIGN KEY("disease to phenotypic feature association_id") REFERENCES "disease to phenotypic feature association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "disease to phenotypic feature association_category" (
	"disease to phenotypic feature association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("disease to phenotypic feature association_id", category), 
	FOREIGN KEY("disease to phenotypic feature association_id") REFERENCES "disease to phenotypic feature association" (id)
);
CREATE TABLE "disease to phenotypic feature association_type" (
	"disease to phenotypic feature association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("disease to phenotypic feature association_id", type), 
	FOREIGN KEY("disease to phenotypic feature association_id") REFERENCES "disease to phenotypic feature association" (id)
);
CREATE TABLE "disease to phenotypic feature association_has_attribute" (
	"disease to phenotypic feature association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("disease to phenotypic feature association_id", has_attribute_id), 
	FOREIGN KEY("disease to phenotypic feature association_id") REFERENCES "disease to phenotypic feature association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "case to phenotypic feature association_qualifiers" (
	"case to phenotypic feature association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("case to phenotypic feature association_id", qualifiers_id), 
	FOREIGN KEY("case to phenotypic feature association_id") REFERENCES "case to phenotypic feature association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "case to phenotypic feature association_publications" (
	"case to phenotypic feature association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("case to phenotypic feature association_id", publications_id), 
	FOREIGN KEY("case to phenotypic feature association_id") REFERENCES "case to phenotypic feature association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "case to phenotypic feature association_has_evidence" (
	"case to phenotypic feature association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("case to phenotypic feature association_id", has_evidence_id), 
	FOREIGN KEY("case to phenotypic feature association_id") REFERENCES "case to phenotypic feature association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "case to phenotypic feature association_aggregator_knowledge_source" (
	"case to phenotypic feature association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("case to phenotypic feature association_id", aggregator_knowledge_source), 
	FOREIGN KEY("case to phenotypic feature association_id") REFERENCES "case to phenotypic feature association" (id)
);
CREATE TABLE "case to phenotypic feature association_subject_closure" (
	"case to phenotypic feature association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("case to phenotypic feature association_id", subject_closure), 
	FOREIGN KEY("case to phenotypic feature association_id") REFERENCES "case to phenotypic feature association" (id)
);
CREATE TABLE "case to phenotypic feature association_object_closure" (
	"case to phenotypic feature association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("case to phenotypic feature association_id", object_closure), 
	FOREIGN KEY("case to phenotypic feature association_id") REFERENCES "case to phenotypic feature association" (id)
);
CREATE TABLE "case to phenotypic feature association_subject_category_closure" (
	"case to phenotypic feature association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("case to phenotypic feature association_id", subject_category_closure_id), 
	FOREIGN KEY("case to phenotypic feature association_id") REFERENCES "case to phenotypic feature association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "case to phenotypic feature association_object_category_closure" (
	"case to phenotypic feature association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("case to phenotypic feature association_id", object_category_closure_id), 
	FOREIGN KEY("case to phenotypic feature association_id") REFERENCES "case to phenotypic feature association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "case to phenotypic feature association_subject_label_closure" (
	"case to phenotypic feature association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("case to phenotypic feature association_id", subject_label_closure), 
	FOREIGN KEY("case to phenotypic feature association_id") REFERENCES "case to phenotypic feature association" (id)
);
CREATE TABLE "case to phenotypic feature association_object_label_closure" (
	"case to phenotypic feature association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("case to phenotypic feature association_id", object_label_closure), 
	FOREIGN KEY("case to phenotypic feature association_id") REFERENCES "case to phenotypic feature association" (id)
);
CREATE TABLE "case to phenotypic feature association_retrieval_source_ids" (
	"case to phenotypic feature association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("case to phenotypic feature association_id", retrieval_source_ids_id), 
	FOREIGN KEY("case to phenotypic feature association_id") REFERENCES "case to phenotypic feature association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "case to phenotypic feature association_category" (
	"case to phenotypic feature association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("case to phenotypic feature association_id", category), 
	FOREIGN KEY("case to phenotypic feature association_id") REFERENCES "case to phenotypic feature association" (id)
);
CREATE TABLE "case to phenotypic feature association_type" (
	"case to phenotypic feature association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("case to phenotypic feature association_id", type), 
	FOREIGN KEY("case to phenotypic feature association_id") REFERENCES "case to phenotypic feature association" (id)
);
CREATE TABLE "case to phenotypic feature association_has_attribute" (
	"case to phenotypic feature association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("case to phenotypic feature association_id", has_attribute_id), 
	FOREIGN KEY("case to phenotypic feature association_id") REFERENCES "case to phenotypic feature association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "behavior to behavioral feature association_qualifiers" (
	"behavior to behavioral feature association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("behavior to behavioral feature association_id", qualifiers_id), 
	FOREIGN KEY("behavior to behavioral feature association_id") REFERENCES "behavior to behavioral feature association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "behavior to behavioral feature association_publications" (
	"behavior to behavioral feature association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("behavior to behavioral feature association_id", publications_id), 
	FOREIGN KEY("behavior to behavioral feature association_id") REFERENCES "behavior to behavioral feature association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "behavior to behavioral feature association_has_evidence" (
	"behavior to behavioral feature association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("behavior to behavioral feature association_id", has_evidence_id), 
	FOREIGN KEY("behavior to behavioral feature association_id") REFERENCES "behavior to behavioral feature association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "behavior to behavioral feature association_aggregator_knowledge_source" (
	"behavior to behavioral feature association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("behavior to behavioral feature association_id", aggregator_knowledge_source), 
	FOREIGN KEY("behavior to behavioral feature association_id") REFERENCES "behavior to behavioral feature association" (id)
);
CREATE TABLE "behavior to behavioral feature association_subject_closure" (
	"behavior to behavioral feature association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("behavior to behavioral feature association_id", subject_closure), 
	FOREIGN KEY("behavior to behavioral feature association_id") REFERENCES "behavior to behavioral feature association" (id)
);
CREATE TABLE "behavior to behavioral feature association_object_closure" (
	"behavior to behavioral feature association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("behavior to behavioral feature association_id", object_closure), 
	FOREIGN KEY("behavior to behavioral feature association_id") REFERENCES "behavior to behavioral feature association" (id)
);
CREATE TABLE "behavior to behavioral feature association_subject_category_closure" (
	"behavior to behavioral feature association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("behavior to behavioral feature association_id", subject_category_closure_id), 
	FOREIGN KEY("behavior to behavioral feature association_id") REFERENCES "behavior to behavioral feature association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "behavior to behavioral feature association_object_category_closure" (
	"behavior to behavioral feature association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("behavior to behavioral feature association_id", object_category_closure_id), 
	FOREIGN KEY("behavior to behavioral feature association_id") REFERENCES "behavior to behavioral feature association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "behavior to behavioral feature association_subject_label_closure" (
	"behavior to behavioral feature association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("behavior to behavioral feature association_id", subject_label_closure), 
	FOREIGN KEY("behavior to behavioral feature association_id") REFERENCES "behavior to behavioral feature association" (id)
);
CREATE TABLE "behavior to behavioral feature association_object_label_closure" (
	"behavior to behavioral feature association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("behavior to behavioral feature association_id", object_label_closure), 
	FOREIGN KEY("behavior to behavioral feature association_id") REFERENCES "behavior to behavioral feature association" (id)
);
CREATE TABLE "behavior to behavioral feature association_retrieval_source_ids" (
	"behavior to behavioral feature association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("behavior to behavioral feature association_id", retrieval_source_ids_id), 
	FOREIGN KEY("behavior to behavioral feature association_id") REFERENCES "behavior to behavioral feature association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "behavior to behavioral feature association_category" (
	"behavior to behavioral feature association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("behavior to behavioral feature association_id", category), 
	FOREIGN KEY("behavior to behavioral feature association_id") REFERENCES "behavior to behavioral feature association" (id)
);
CREATE TABLE "behavior to behavioral feature association_type" (
	"behavior to behavioral feature association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("behavior to behavioral feature association_id", type), 
	FOREIGN KEY("behavior to behavioral feature association_id") REFERENCES "behavior to behavioral feature association" (id)
);
CREATE TABLE "behavior to behavioral feature association_has_attribute" (
	"behavior to behavioral feature association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("behavior to behavioral feature association_id", has_attribute_id), 
	FOREIGN KEY("behavior to behavioral feature association_id") REFERENCES "behavior to behavioral feature association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "gene to disease or phenotypic feature association_qualifiers" (
	"gene to disease or phenotypic feature association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("gene to disease or phenotypic feature association_id", qualifiers_id), 
	FOREIGN KEY("gene to disease or phenotypic feature association_id") REFERENCES "gene to disease or phenotypic feature association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to disease or phenotypic feature association_publications" (
	"gene to disease or phenotypic feature association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("gene to disease or phenotypic feature association_id", publications_id), 
	FOREIGN KEY("gene to disease or phenotypic feature association_id") REFERENCES "gene to disease or phenotypic feature association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "gene to disease or phenotypic feature association_has_evidence" (
	"gene to disease or phenotypic feature association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("gene to disease or phenotypic feature association_id", has_evidence_id), 
	FOREIGN KEY("gene to disease or phenotypic feature association_id") REFERENCES "gene to disease or phenotypic feature association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "gene to disease or phenotypic feature association_aggregator_knowledge_source" (
	"gene to disease or phenotypic feature association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("gene to disease or phenotypic feature association_id", aggregator_knowledge_source), 
	FOREIGN KEY("gene to disease or phenotypic feature association_id") REFERENCES "gene to disease or phenotypic feature association" (id)
);
CREATE TABLE "gene to disease or phenotypic feature association_subject_closure" (
	"gene to disease or phenotypic feature association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("gene to disease or phenotypic feature association_id", subject_closure), 
	FOREIGN KEY("gene to disease or phenotypic feature association_id") REFERENCES "gene to disease or phenotypic feature association" (id)
);
CREATE TABLE "gene to disease or phenotypic feature association_object_closure" (
	"gene to disease or phenotypic feature association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("gene to disease or phenotypic feature association_id", object_closure), 
	FOREIGN KEY("gene to disease or phenotypic feature association_id") REFERENCES "gene to disease or phenotypic feature association" (id)
);
CREATE TABLE "gene to disease or phenotypic feature association_subject_category_closure" (
	"gene to disease or phenotypic feature association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("gene to disease or phenotypic feature association_id", subject_category_closure_id), 
	FOREIGN KEY("gene to disease or phenotypic feature association_id") REFERENCES "gene to disease or phenotypic feature association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to disease or phenotypic feature association_object_category_closure" (
	"gene to disease or phenotypic feature association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("gene to disease or phenotypic feature association_id", object_category_closure_id), 
	FOREIGN KEY("gene to disease or phenotypic feature association_id") REFERENCES "gene to disease or phenotypic feature association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to disease or phenotypic feature association_subject_label_closure" (
	"gene to disease or phenotypic feature association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("gene to disease or phenotypic feature association_id", subject_label_closure), 
	FOREIGN KEY("gene to disease or phenotypic feature association_id") REFERENCES "gene to disease or phenotypic feature association" (id)
);
CREATE TABLE "gene to disease or phenotypic feature association_object_label_closure" (
	"gene to disease or phenotypic feature association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("gene to disease or phenotypic feature association_id", object_label_closure), 
	FOREIGN KEY("gene to disease or phenotypic feature association_id") REFERENCES "gene to disease or phenotypic feature association" (id)
);
CREATE TABLE "gene to disease or phenotypic feature association_retrieval_source_ids" (
	"gene to disease or phenotypic feature association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("gene to disease or phenotypic feature association_id", retrieval_source_ids_id), 
	FOREIGN KEY("gene to disease or phenotypic feature association_id") REFERENCES "gene to disease or phenotypic feature association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "gene to disease or phenotypic feature association_category" (
	"gene to disease or phenotypic feature association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("gene to disease or phenotypic feature association_id", category), 
	FOREIGN KEY("gene to disease or phenotypic feature association_id") REFERENCES "gene to disease or phenotypic feature association" (id)
);
CREATE TABLE "gene to disease or phenotypic feature association_type" (
	"gene to disease or phenotypic feature association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("gene to disease or phenotypic feature association_id", type), 
	FOREIGN KEY("gene to disease or phenotypic feature association_id") REFERENCES "gene to disease or phenotypic feature association" (id)
);
CREATE TABLE "gene to disease or phenotypic feature association_has_attribute" (
	"gene to disease or phenotypic feature association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("gene to disease or phenotypic feature association_id", has_attribute_id), 
	FOREIGN KEY("gene to disease or phenotypic feature association_id") REFERENCES "gene to disease or phenotypic feature association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "gene to phenotypic feature association_qualifiers" (
	"gene to phenotypic feature association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("gene to phenotypic feature association_id", qualifiers_id), 
	FOREIGN KEY("gene to phenotypic feature association_id") REFERENCES "gene to phenotypic feature association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to phenotypic feature association_publications" (
	"gene to phenotypic feature association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("gene to phenotypic feature association_id", publications_id), 
	FOREIGN KEY("gene to phenotypic feature association_id") REFERENCES "gene to phenotypic feature association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "gene to phenotypic feature association_has_evidence" (
	"gene to phenotypic feature association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("gene to phenotypic feature association_id", has_evidence_id), 
	FOREIGN KEY("gene to phenotypic feature association_id") REFERENCES "gene to phenotypic feature association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "gene to phenotypic feature association_aggregator_knowledge_source" (
	"gene to phenotypic feature association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("gene to phenotypic feature association_id", aggregator_knowledge_source), 
	FOREIGN KEY("gene to phenotypic feature association_id") REFERENCES "gene to phenotypic feature association" (id)
);
CREATE TABLE "gene to phenotypic feature association_subject_closure" (
	"gene to phenotypic feature association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("gene to phenotypic feature association_id", subject_closure), 
	FOREIGN KEY("gene to phenotypic feature association_id") REFERENCES "gene to phenotypic feature association" (id)
);
CREATE TABLE "gene to phenotypic feature association_object_closure" (
	"gene to phenotypic feature association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("gene to phenotypic feature association_id", object_closure), 
	FOREIGN KEY("gene to phenotypic feature association_id") REFERENCES "gene to phenotypic feature association" (id)
);
CREATE TABLE "gene to phenotypic feature association_subject_category_closure" (
	"gene to phenotypic feature association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("gene to phenotypic feature association_id", subject_category_closure_id), 
	FOREIGN KEY("gene to phenotypic feature association_id") REFERENCES "gene to phenotypic feature association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to phenotypic feature association_object_category_closure" (
	"gene to phenotypic feature association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("gene to phenotypic feature association_id", object_category_closure_id), 
	FOREIGN KEY("gene to phenotypic feature association_id") REFERENCES "gene to phenotypic feature association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to phenotypic feature association_subject_label_closure" (
	"gene to phenotypic feature association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("gene to phenotypic feature association_id", subject_label_closure), 
	FOREIGN KEY("gene to phenotypic feature association_id") REFERENCES "gene to phenotypic feature association" (id)
);
CREATE TABLE "gene to phenotypic feature association_object_label_closure" (
	"gene to phenotypic feature association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("gene to phenotypic feature association_id", object_label_closure), 
	FOREIGN KEY("gene to phenotypic feature association_id") REFERENCES "gene to phenotypic feature association" (id)
);
CREATE TABLE "gene to phenotypic feature association_retrieval_source_ids" (
	"gene to phenotypic feature association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("gene to phenotypic feature association_id", retrieval_source_ids_id), 
	FOREIGN KEY("gene to phenotypic feature association_id") REFERENCES "gene to phenotypic feature association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "gene to phenotypic feature association_category" (
	"gene to phenotypic feature association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("gene to phenotypic feature association_id", category), 
	FOREIGN KEY("gene to phenotypic feature association_id") REFERENCES "gene to phenotypic feature association" (id)
);
CREATE TABLE "gene to phenotypic feature association_type" (
	"gene to phenotypic feature association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("gene to phenotypic feature association_id", type), 
	FOREIGN KEY("gene to phenotypic feature association_id") REFERENCES "gene to phenotypic feature association" (id)
);
CREATE TABLE "gene to phenotypic feature association_has_attribute" (
	"gene to phenotypic feature association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("gene to phenotypic feature association_id", has_attribute_id), 
	FOREIGN KEY("gene to phenotypic feature association_id") REFERENCES "gene to phenotypic feature association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "gene to disease association_qualifiers" (
	"gene to disease association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("gene to disease association_id", qualifiers_id), 
	FOREIGN KEY("gene to disease association_id") REFERENCES "gene to disease association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to disease association_publications" (
	"gene to disease association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("gene to disease association_id", publications_id), 
	FOREIGN KEY("gene to disease association_id") REFERENCES "gene to disease association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "gene to disease association_has_evidence" (
	"gene to disease association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("gene to disease association_id", has_evidence_id), 
	FOREIGN KEY("gene to disease association_id") REFERENCES "gene to disease association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "gene to disease association_aggregator_knowledge_source" (
	"gene to disease association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("gene to disease association_id", aggregator_knowledge_source), 
	FOREIGN KEY("gene to disease association_id") REFERENCES "gene to disease association" (id)
);
CREATE TABLE "gene to disease association_subject_closure" (
	"gene to disease association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("gene to disease association_id", subject_closure), 
	FOREIGN KEY("gene to disease association_id") REFERENCES "gene to disease association" (id)
);
CREATE TABLE "gene to disease association_object_closure" (
	"gene to disease association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("gene to disease association_id", object_closure), 
	FOREIGN KEY("gene to disease association_id") REFERENCES "gene to disease association" (id)
);
CREATE TABLE "gene to disease association_subject_category_closure" (
	"gene to disease association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("gene to disease association_id", subject_category_closure_id), 
	FOREIGN KEY("gene to disease association_id") REFERENCES "gene to disease association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to disease association_object_category_closure" (
	"gene to disease association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("gene to disease association_id", object_category_closure_id), 
	FOREIGN KEY("gene to disease association_id") REFERENCES "gene to disease association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene to disease association_subject_label_closure" (
	"gene to disease association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("gene to disease association_id", subject_label_closure), 
	FOREIGN KEY("gene to disease association_id") REFERENCES "gene to disease association" (id)
);
CREATE TABLE "gene to disease association_object_label_closure" (
	"gene to disease association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("gene to disease association_id", object_label_closure), 
	FOREIGN KEY("gene to disease association_id") REFERENCES "gene to disease association" (id)
);
CREATE TABLE "gene to disease association_retrieval_source_ids" (
	"gene to disease association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("gene to disease association_id", retrieval_source_ids_id), 
	FOREIGN KEY("gene to disease association_id") REFERENCES "gene to disease association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "gene to disease association_category" (
	"gene to disease association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("gene to disease association_id", category), 
	FOREIGN KEY("gene to disease association_id") REFERENCES "gene to disease association" (id)
);
CREATE TABLE "gene to disease association_type" (
	"gene to disease association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("gene to disease association_id", type), 
	FOREIGN KEY("gene to disease association_id") REFERENCES "gene to disease association" (id)
);
CREATE TABLE "gene to disease association_has_attribute" (
	"gene to disease association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("gene to disease association_id", has_attribute_id), 
	FOREIGN KEY("gene to disease association_id") REFERENCES "gene to disease association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "causal gene to disease association_qualifiers" (
	"causal gene to disease association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("causal gene to disease association_id", qualifiers_id), 
	FOREIGN KEY("causal gene to disease association_id") REFERENCES "causal gene to disease association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "causal gene to disease association_publications" (
	"causal gene to disease association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("causal gene to disease association_id", publications_id), 
	FOREIGN KEY("causal gene to disease association_id") REFERENCES "causal gene to disease association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "causal gene to disease association_has_evidence" (
	"causal gene to disease association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("causal gene to disease association_id", has_evidence_id), 
	FOREIGN KEY("causal gene to disease association_id") REFERENCES "causal gene to disease association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "causal gene to disease association_aggregator_knowledge_source" (
	"causal gene to disease association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("causal gene to disease association_id", aggregator_knowledge_source), 
	FOREIGN KEY("causal gene to disease association_id") REFERENCES "causal gene to disease association" (id)
);
CREATE TABLE "causal gene to disease association_subject_closure" (
	"causal gene to disease association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("causal gene to disease association_id", subject_closure), 
	FOREIGN KEY("causal gene to disease association_id") REFERENCES "causal gene to disease association" (id)
);
CREATE TABLE "causal gene to disease association_object_closure" (
	"causal gene to disease association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("causal gene to disease association_id", object_closure), 
	FOREIGN KEY("causal gene to disease association_id") REFERENCES "causal gene to disease association" (id)
);
CREATE TABLE "causal gene to disease association_subject_category_closure" (
	"causal gene to disease association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("causal gene to disease association_id", subject_category_closure_id), 
	FOREIGN KEY("causal gene to disease association_id") REFERENCES "causal gene to disease association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "causal gene to disease association_object_category_closure" (
	"causal gene to disease association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("causal gene to disease association_id", object_category_closure_id), 
	FOREIGN KEY("causal gene to disease association_id") REFERENCES "causal gene to disease association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "causal gene to disease association_subject_label_closure" (
	"causal gene to disease association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("causal gene to disease association_id", subject_label_closure), 
	FOREIGN KEY("causal gene to disease association_id") REFERENCES "causal gene to disease association" (id)
);
CREATE TABLE "causal gene to disease association_object_label_closure" (
	"causal gene to disease association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("causal gene to disease association_id", object_label_closure), 
	FOREIGN KEY("causal gene to disease association_id") REFERENCES "causal gene to disease association" (id)
);
CREATE TABLE "causal gene to disease association_retrieval_source_ids" (
	"causal gene to disease association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("causal gene to disease association_id", retrieval_source_ids_id), 
	FOREIGN KEY("causal gene to disease association_id") REFERENCES "causal gene to disease association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "causal gene to disease association_category" (
	"causal gene to disease association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("causal gene to disease association_id", category), 
	FOREIGN KEY("causal gene to disease association_id") REFERENCES "causal gene to disease association" (id)
);
CREATE TABLE "causal gene to disease association_type" (
	"causal gene to disease association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("causal gene to disease association_id", type), 
	FOREIGN KEY("causal gene to disease association_id") REFERENCES "causal gene to disease association" (id)
);
CREATE TABLE "causal gene to disease association_has_attribute" (
	"causal gene to disease association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("causal gene to disease association_id", has_attribute_id), 
	FOREIGN KEY("causal gene to disease association_id") REFERENCES "causal gene to disease association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "correlated gene to disease association_qualifiers" (
	"correlated gene to disease association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("correlated gene to disease association_id", qualifiers_id), 
	FOREIGN KEY("correlated gene to disease association_id") REFERENCES "correlated gene to disease association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "correlated gene to disease association_publications" (
	"correlated gene to disease association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("correlated gene to disease association_id", publications_id), 
	FOREIGN KEY("correlated gene to disease association_id") REFERENCES "correlated gene to disease association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "correlated gene to disease association_has_evidence" (
	"correlated gene to disease association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("correlated gene to disease association_id", has_evidence_id), 
	FOREIGN KEY("correlated gene to disease association_id") REFERENCES "correlated gene to disease association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "correlated gene to disease association_aggregator_knowledge_source" (
	"correlated gene to disease association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("correlated gene to disease association_id", aggregator_knowledge_source), 
	FOREIGN KEY("correlated gene to disease association_id") REFERENCES "correlated gene to disease association" (id)
);
CREATE TABLE "correlated gene to disease association_subject_closure" (
	"correlated gene to disease association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("correlated gene to disease association_id", subject_closure), 
	FOREIGN KEY("correlated gene to disease association_id") REFERENCES "correlated gene to disease association" (id)
);
CREATE TABLE "correlated gene to disease association_object_closure" (
	"correlated gene to disease association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("correlated gene to disease association_id", object_closure), 
	FOREIGN KEY("correlated gene to disease association_id") REFERENCES "correlated gene to disease association" (id)
);
CREATE TABLE "correlated gene to disease association_subject_category_closure" (
	"correlated gene to disease association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("correlated gene to disease association_id", subject_category_closure_id), 
	FOREIGN KEY("correlated gene to disease association_id") REFERENCES "correlated gene to disease association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "correlated gene to disease association_object_category_closure" (
	"correlated gene to disease association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("correlated gene to disease association_id", object_category_closure_id), 
	FOREIGN KEY("correlated gene to disease association_id") REFERENCES "correlated gene to disease association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "correlated gene to disease association_subject_label_closure" (
	"correlated gene to disease association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("correlated gene to disease association_id", subject_label_closure), 
	FOREIGN KEY("correlated gene to disease association_id") REFERENCES "correlated gene to disease association" (id)
);
CREATE TABLE "correlated gene to disease association_object_label_closure" (
	"correlated gene to disease association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("correlated gene to disease association_id", object_label_closure), 
	FOREIGN KEY("correlated gene to disease association_id") REFERENCES "correlated gene to disease association" (id)
);
CREATE TABLE "correlated gene to disease association_retrieval_source_ids" (
	"correlated gene to disease association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("correlated gene to disease association_id", retrieval_source_ids_id), 
	FOREIGN KEY("correlated gene to disease association_id") REFERENCES "correlated gene to disease association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "correlated gene to disease association_category" (
	"correlated gene to disease association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("correlated gene to disease association_id", category), 
	FOREIGN KEY("correlated gene to disease association_id") REFERENCES "correlated gene to disease association" (id)
);
CREATE TABLE "correlated gene to disease association_type" (
	"correlated gene to disease association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("correlated gene to disease association_id", type), 
	FOREIGN KEY("correlated gene to disease association_id") REFERENCES "correlated gene to disease association" (id)
);
CREATE TABLE "correlated gene to disease association_has_attribute" (
	"correlated gene to disease association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("correlated gene to disease association_id", has_attribute_id), 
	FOREIGN KEY("correlated gene to disease association_id") REFERENCES "correlated gene to disease association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "druggable gene to disease association_qualifiers" (
	"druggable gene to disease association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("druggable gene to disease association_id", qualifiers_id), 
	FOREIGN KEY("druggable gene to disease association_id") REFERENCES "druggable gene to disease association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "druggable gene to disease association_publications" (
	"druggable gene to disease association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("druggable gene to disease association_id", publications_id), 
	FOREIGN KEY("druggable gene to disease association_id") REFERENCES "druggable gene to disease association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "druggable gene to disease association_has_evidence" (
	"druggable gene to disease association_id" TEXT, 
	has_evidence VARCHAR(5), 
	PRIMARY KEY ("druggable gene to disease association_id", has_evidence), 
	FOREIGN KEY("druggable gene to disease association_id") REFERENCES "druggable gene to disease association" (id)
);
CREATE TABLE "druggable gene to disease association_aggregator_knowledge_source" (
	"druggable gene to disease association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("druggable gene to disease association_id", aggregator_knowledge_source), 
	FOREIGN KEY("druggable gene to disease association_id") REFERENCES "druggable gene to disease association" (id)
);
CREATE TABLE "druggable gene to disease association_subject_closure" (
	"druggable gene to disease association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("druggable gene to disease association_id", subject_closure), 
	FOREIGN KEY("druggable gene to disease association_id") REFERENCES "druggable gene to disease association" (id)
);
CREATE TABLE "druggable gene to disease association_object_closure" (
	"druggable gene to disease association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("druggable gene to disease association_id", object_closure), 
	FOREIGN KEY("druggable gene to disease association_id") REFERENCES "druggable gene to disease association" (id)
);
CREATE TABLE "druggable gene to disease association_subject_category_closure" (
	"druggable gene to disease association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("druggable gene to disease association_id", subject_category_closure_id), 
	FOREIGN KEY("druggable gene to disease association_id") REFERENCES "druggable gene to disease association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "druggable gene to disease association_object_category_closure" (
	"druggable gene to disease association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("druggable gene to disease association_id", object_category_closure_id), 
	FOREIGN KEY("druggable gene to disease association_id") REFERENCES "druggable gene to disease association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "druggable gene to disease association_subject_label_closure" (
	"druggable gene to disease association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("druggable gene to disease association_id", subject_label_closure), 
	FOREIGN KEY("druggable gene to disease association_id") REFERENCES "druggable gene to disease association" (id)
);
CREATE TABLE "druggable gene to disease association_object_label_closure" (
	"druggable gene to disease association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("druggable gene to disease association_id", object_label_closure), 
	FOREIGN KEY("druggable gene to disease association_id") REFERENCES "druggable gene to disease association" (id)
);
CREATE TABLE "druggable gene to disease association_retrieval_source_ids" (
	"druggable gene to disease association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("druggable gene to disease association_id", retrieval_source_ids_id), 
	FOREIGN KEY("druggable gene to disease association_id") REFERENCES "druggable gene to disease association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "druggable gene to disease association_category" (
	"druggable gene to disease association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("druggable gene to disease association_id", category), 
	FOREIGN KEY("druggable gene to disease association_id") REFERENCES "druggable gene to disease association" (id)
);
CREATE TABLE "druggable gene to disease association_type" (
	"druggable gene to disease association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("druggable gene to disease association_id", type), 
	FOREIGN KEY("druggable gene to disease association_id") REFERENCES "druggable gene to disease association" (id)
);
CREATE TABLE "druggable gene to disease association_has_attribute" (
	"druggable gene to disease association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("druggable gene to disease association_id", has_attribute_id), 
	FOREIGN KEY("druggable gene to disease association_id") REFERENCES "druggable gene to disease association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "phenotypic feature to disease association_qualifiers" (
	"phenotypic feature to disease association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("phenotypic feature to disease association_id", qualifiers_id), 
	FOREIGN KEY("phenotypic feature to disease association_id") REFERENCES "phenotypic feature to disease association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "phenotypic feature to disease association_publications" (
	"phenotypic feature to disease association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("phenotypic feature to disease association_id", publications_id), 
	FOREIGN KEY("phenotypic feature to disease association_id") REFERENCES "phenotypic feature to disease association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "phenotypic feature to disease association_has_evidence" (
	"phenotypic feature to disease association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("phenotypic feature to disease association_id", has_evidence_id), 
	FOREIGN KEY("phenotypic feature to disease association_id") REFERENCES "phenotypic feature to disease association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "phenotypic feature to disease association_aggregator_knowledge_source" (
	"phenotypic feature to disease association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("phenotypic feature to disease association_id", aggregator_knowledge_source), 
	FOREIGN KEY("phenotypic feature to disease association_id") REFERENCES "phenotypic feature to disease association" (id)
);
CREATE TABLE "phenotypic feature to disease association_subject_closure" (
	"phenotypic feature to disease association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("phenotypic feature to disease association_id", subject_closure), 
	FOREIGN KEY("phenotypic feature to disease association_id") REFERENCES "phenotypic feature to disease association" (id)
);
CREATE TABLE "phenotypic feature to disease association_object_closure" (
	"phenotypic feature to disease association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("phenotypic feature to disease association_id", object_closure), 
	FOREIGN KEY("phenotypic feature to disease association_id") REFERENCES "phenotypic feature to disease association" (id)
);
CREATE TABLE "phenotypic feature to disease association_subject_category_closure" (
	"phenotypic feature to disease association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("phenotypic feature to disease association_id", subject_category_closure_id), 
	FOREIGN KEY("phenotypic feature to disease association_id") REFERENCES "phenotypic feature to disease association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "phenotypic feature to disease association_object_category_closure" (
	"phenotypic feature to disease association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("phenotypic feature to disease association_id", object_category_closure_id), 
	FOREIGN KEY("phenotypic feature to disease association_id") REFERENCES "phenotypic feature to disease association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "phenotypic feature to disease association_subject_label_closure" (
	"phenotypic feature to disease association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("phenotypic feature to disease association_id", subject_label_closure), 
	FOREIGN KEY("phenotypic feature to disease association_id") REFERENCES "phenotypic feature to disease association" (id)
);
CREATE TABLE "phenotypic feature to disease association_object_label_closure" (
	"phenotypic feature to disease association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("phenotypic feature to disease association_id", object_label_closure), 
	FOREIGN KEY("phenotypic feature to disease association_id") REFERENCES "phenotypic feature to disease association" (id)
);
CREATE TABLE "phenotypic feature to disease association_retrieval_source_ids" (
	"phenotypic feature to disease association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("phenotypic feature to disease association_id", retrieval_source_ids_id), 
	FOREIGN KEY("phenotypic feature to disease association_id") REFERENCES "phenotypic feature to disease association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "phenotypic feature to disease association_category" (
	"phenotypic feature to disease association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("phenotypic feature to disease association_id", category), 
	FOREIGN KEY("phenotypic feature to disease association_id") REFERENCES "phenotypic feature to disease association" (id)
);
CREATE TABLE "phenotypic feature to disease association_type" (
	"phenotypic feature to disease association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("phenotypic feature to disease association_id", type), 
	FOREIGN KEY("phenotypic feature to disease association_id") REFERENCES "phenotypic feature to disease association" (id)
);
CREATE TABLE "phenotypic feature to disease association_has_attribute" (
	"phenotypic feature to disease association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("phenotypic feature to disease association_id", has_attribute_id), 
	FOREIGN KEY("phenotypic feature to disease association_id") REFERENCES "phenotypic feature to disease association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "variant to phenotypic feature association_qualifiers" (
	"variant to phenotypic feature association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("variant to phenotypic feature association_id", qualifiers_id), 
	FOREIGN KEY("variant to phenotypic feature association_id") REFERENCES "variant to phenotypic feature association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "variant to phenotypic feature association_publications" (
	"variant to phenotypic feature association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("variant to phenotypic feature association_id", publications_id), 
	FOREIGN KEY("variant to phenotypic feature association_id") REFERENCES "variant to phenotypic feature association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "variant to phenotypic feature association_has_evidence" (
	"variant to phenotypic feature association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("variant to phenotypic feature association_id", has_evidence_id), 
	FOREIGN KEY("variant to phenotypic feature association_id") REFERENCES "variant to phenotypic feature association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "variant to phenotypic feature association_aggregator_knowledge_source" (
	"variant to phenotypic feature association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("variant to phenotypic feature association_id", aggregator_knowledge_source), 
	FOREIGN KEY("variant to phenotypic feature association_id") REFERENCES "variant to phenotypic feature association" (id)
);
CREATE TABLE "variant to phenotypic feature association_subject_closure" (
	"variant to phenotypic feature association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("variant to phenotypic feature association_id", subject_closure), 
	FOREIGN KEY("variant to phenotypic feature association_id") REFERENCES "variant to phenotypic feature association" (id)
);
CREATE TABLE "variant to phenotypic feature association_object_closure" (
	"variant to phenotypic feature association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("variant to phenotypic feature association_id", object_closure), 
	FOREIGN KEY("variant to phenotypic feature association_id") REFERENCES "variant to phenotypic feature association" (id)
);
CREATE TABLE "variant to phenotypic feature association_subject_category_closure" (
	"variant to phenotypic feature association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("variant to phenotypic feature association_id", subject_category_closure_id), 
	FOREIGN KEY("variant to phenotypic feature association_id") REFERENCES "variant to phenotypic feature association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "variant to phenotypic feature association_object_category_closure" (
	"variant to phenotypic feature association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("variant to phenotypic feature association_id", object_category_closure_id), 
	FOREIGN KEY("variant to phenotypic feature association_id") REFERENCES "variant to phenotypic feature association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "variant to phenotypic feature association_subject_label_closure" (
	"variant to phenotypic feature association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("variant to phenotypic feature association_id", subject_label_closure), 
	FOREIGN KEY("variant to phenotypic feature association_id") REFERENCES "variant to phenotypic feature association" (id)
);
CREATE TABLE "variant to phenotypic feature association_object_label_closure" (
	"variant to phenotypic feature association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("variant to phenotypic feature association_id", object_label_closure), 
	FOREIGN KEY("variant to phenotypic feature association_id") REFERENCES "variant to phenotypic feature association" (id)
);
CREATE TABLE "variant to phenotypic feature association_retrieval_source_ids" (
	"variant to phenotypic feature association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("variant to phenotypic feature association_id", retrieval_source_ids_id), 
	FOREIGN KEY("variant to phenotypic feature association_id") REFERENCES "variant to phenotypic feature association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "variant to phenotypic feature association_category" (
	"variant to phenotypic feature association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("variant to phenotypic feature association_id", category), 
	FOREIGN KEY("variant to phenotypic feature association_id") REFERENCES "variant to phenotypic feature association" (id)
);
CREATE TABLE "variant to phenotypic feature association_type" (
	"variant to phenotypic feature association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("variant to phenotypic feature association_id", type), 
	FOREIGN KEY("variant to phenotypic feature association_id") REFERENCES "variant to phenotypic feature association" (id)
);
CREATE TABLE "variant to phenotypic feature association_has_attribute" (
	"variant to phenotypic feature association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("variant to phenotypic feature association_id", has_attribute_id), 
	FOREIGN KEY("variant to phenotypic feature association_id") REFERENCES "variant to phenotypic feature association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "gene as a model of disease association_qualifiers" (
	"gene as a model of disease association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("gene as a model of disease association_id", qualifiers_id), 
	FOREIGN KEY("gene as a model of disease association_id") REFERENCES "gene as a model of disease association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene as a model of disease association_publications" (
	"gene as a model of disease association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("gene as a model of disease association_id", publications_id), 
	FOREIGN KEY("gene as a model of disease association_id") REFERENCES "gene as a model of disease association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "gene as a model of disease association_has_evidence" (
	"gene as a model of disease association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("gene as a model of disease association_id", has_evidence_id), 
	FOREIGN KEY("gene as a model of disease association_id") REFERENCES "gene as a model of disease association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "gene as a model of disease association_aggregator_knowledge_source" (
	"gene as a model of disease association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("gene as a model of disease association_id", aggregator_knowledge_source), 
	FOREIGN KEY("gene as a model of disease association_id") REFERENCES "gene as a model of disease association" (id)
);
CREATE TABLE "gene as a model of disease association_subject_closure" (
	"gene as a model of disease association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("gene as a model of disease association_id", subject_closure), 
	FOREIGN KEY("gene as a model of disease association_id") REFERENCES "gene as a model of disease association" (id)
);
CREATE TABLE "gene as a model of disease association_object_closure" (
	"gene as a model of disease association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("gene as a model of disease association_id", object_closure), 
	FOREIGN KEY("gene as a model of disease association_id") REFERENCES "gene as a model of disease association" (id)
);
CREATE TABLE "gene as a model of disease association_subject_category_closure" (
	"gene as a model of disease association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("gene as a model of disease association_id", subject_category_closure_id), 
	FOREIGN KEY("gene as a model of disease association_id") REFERENCES "gene as a model of disease association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene as a model of disease association_object_category_closure" (
	"gene as a model of disease association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("gene as a model of disease association_id", object_category_closure_id), 
	FOREIGN KEY("gene as a model of disease association_id") REFERENCES "gene as a model of disease association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene as a model of disease association_subject_label_closure" (
	"gene as a model of disease association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("gene as a model of disease association_id", subject_label_closure), 
	FOREIGN KEY("gene as a model of disease association_id") REFERENCES "gene as a model of disease association" (id)
);
CREATE TABLE "gene as a model of disease association_object_label_closure" (
	"gene as a model of disease association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("gene as a model of disease association_id", object_label_closure), 
	FOREIGN KEY("gene as a model of disease association_id") REFERENCES "gene as a model of disease association" (id)
);
CREATE TABLE "gene as a model of disease association_retrieval_source_ids" (
	"gene as a model of disease association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("gene as a model of disease association_id", retrieval_source_ids_id), 
	FOREIGN KEY("gene as a model of disease association_id") REFERENCES "gene as a model of disease association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "gene as a model of disease association_category" (
	"gene as a model of disease association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("gene as a model of disease association_id", category), 
	FOREIGN KEY("gene as a model of disease association_id") REFERENCES "gene as a model of disease association" (id)
);
CREATE TABLE "gene as a model of disease association_type" (
	"gene as a model of disease association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("gene as a model of disease association_id", type), 
	FOREIGN KEY("gene as a model of disease association_id") REFERENCES "gene as a model of disease association" (id)
);
CREATE TABLE "gene as a model of disease association_has_attribute" (
	"gene as a model of disease association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("gene as a model of disease association_id", has_attribute_id), 
	FOREIGN KEY("gene as a model of disease association_id") REFERENCES "gene as a model of disease association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "taxon to taxon association_qualifiers" (
	"taxon to taxon association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("taxon to taxon association_id", qualifiers_id), 
	FOREIGN KEY("taxon to taxon association_id") REFERENCES "taxon to taxon association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "taxon to taxon association_publications" (
	"taxon to taxon association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("taxon to taxon association_id", publications_id), 
	FOREIGN KEY("taxon to taxon association_id") REFERENCES "taxon to taxon association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "taxon to taxon association_has_evidence" (
	"taxon to taxon association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("taxon to taxon association_id", has_evidence_id), 
	FOREIGN KEY("taxon to taxon association_id") REFERENCES "taxon to taxon association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "taxon to taxon association_aggregator_knowledge_source" (
	"taxon to taxon association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("taxon to taxon association_id", aggregator_knowledge_source), 
	FOREIGN KEY("taxon to taxon association_id") REFERENCES "taxon to taxon association" (id)
);
CREATE TABLE "taxon to taxon association_subject_closure" (
	"taxon to taxon association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("taxon to taxon association_id", subject_closure), 
	FOREIGN KEY("taxon to taxon association_id") REFERENCES "taxon to taxon association" (id)
);
CREATE TABLE "taxon to taxon association_object_closure" (
	"taxon to taxon association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("taxon to taxon association_id", object_closure), 
	FOREIGN KEY("taxon to taxon association_id") REFERENCES "taxon to taxon association" (id)
);
CREATE TABLE "taxon to taxon association_subject_category_closure" (
	"taxon to taxon association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("taxon to taxon association_id", subject_category_closure_id), 
	FOREIGN KEY("taxon to taxon association_id") REFERENCES "taxon to taxon association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "taxon to taxon association_object_category_closure" (
	"taxon to taxon association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("taxon to taxon association_id", object_category_closure_id), 
	FOREIGN KEY("taxon to taxon association_id") REFERENCES "taxon to taxon association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "taxon to taxon association_subject_label_closure" (
	"taxon to taxon association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("taxon to taxon association_id", subject_label_closure), 
	FOREIGN KEY("taxon to taxon association_id") REFERENCES "taxon to taxon association" (id)
);
CREATE TABLE "taxon to taxon association_object_label_closure" (
	"taxon to taxon association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("taxon to taxon association_id", object_label_closure), 
	FOREIGN KEY("taxon to taxon association_id") REFERENCES "taxon to taxon association" (id)
);
CREATE TABLE "taxon to taxon association_retrieval_source_ids" (
	"taxon to taxon association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("taxon to taxon association_id", retrieval_source_ids_id), 
	FOREIGN KEY("taxon to taxon association_id") REFERENCES "taxon to taxon association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "taxon to taxon association_category" (
	"taxon to taxon association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("taxon to taxon association_id", category), 
	FOREIGN KEY("taxon to taxon association_id") REFERENCES "taxon to taxon association" (id)
);
CREATE TABLE "taxon to taxon association_type" (
	"taxon to taxon association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("taxon to taxon association_id", type), 
	FOREIGN KEY("taxon to taxon association_id") REFERENCES "taxon to taxon association" (id)
);
CREATE TABLE "taxon to taxon association_has_attribute" (
	"taxon to taxon association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("taxon to taxon association_id", has_attribute_id), 
	FOREIGN KEY("taxon to taxon association_id") REFERENCES "taxon to taxon association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "gene has variant that contributes to disease association_qualifiers" (
	"gene has variant that contributes to disease association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("gene has variant that contributes to disease association_id", qualifiers_id), 
	FOREIGN KEY("gene has variant that contributes to disease association_id") REFERENCES "gene has variant that contributes to disease association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene has variant that contributes to disease association_publications" (
	"gene has variant that contributes to disease association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("gene has variant that contributes to disease association_id", publications_id), 
	FOREIGN KEY("gene has variant that contributes to disease association_id") REFERENCES "gene has variant that contributes to disease association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "gene has variant that contributes to disease association_has_evidence" (
	"gene has variant that contributes to disease association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("gene has variant that contributes to disease association_id", has_evidence_id), 
	FOREIGN KEY("gene has variant that contributes to disease association_id") REFERENCES "gene has variant that contributes to disease association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "gene has variant that contributes to disease association_aggregator_knowledge_source" (
	"gene has variant that contributes to disease association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("gene has variant that contributes to disease association_id", aggregator_knowledge_source), 
	FOREIGN KEY("gene has variant that contributes to disease association_id") REFERENCES "gene has variant that contributes to disease association" (id)
);
CREATE TABLE "gene has variant that contributes to disease association_subject_closure" (
	"gene has variant that contributes to disease association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("gene has variant that contributes to disease association_id", subject_closure), 
	FOREIGN KEY("gene has variant that contributes to disease association_id") REFERENCES "gene has variant that contributes to disease association" (id)
);
CREATE TABLE "gene has variant that contributes to disease association_object_closure" (
	"gene has variant that contributes to disease association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("gene has variant that contributes to disease association_id", object_closure), 
	FOREIGN KEY("gene has variant that contributes to disease association_id") REFERENCES "gene has variant that contributes to disease association" (id)
);
CREATE TABLE "gene has variant that contributes to disease association_subject_category_closure" (
	"gene has variant that contributes to disease association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("gene has variant that contributes to disease association_id", subject_category_closure_id), 
	FOREIGN KEY("gene has variant that contributes to disease association_id") REFERENCES "gene has variant that contributes to disease association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene has variant that contributes to disease association_object_category_closure" (
	"gene has variant that contributes to disease association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("gene has variant that contributes to disease association_id", object_category_closure_id), 
	FOREIGN KEY("gene has variant that contributes to disease association_id") REFERENCES "gene has variant that contributes to disease association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "gene has variant that contributes to disease association_subject_label_closure" (
	"gene has variant that contributes to disease association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("gene has variant that contributes to disease association_id", subject_label_closure), 
	FOREIGN KEY("gene has variant that contributes to disease association_id") REFERENCES "gene has variant that contributes to disease association" (id)
);
CREATE TABLE "gene has variant that contributes to disease association_object_label_closure" (
	"gene has variant that contributes to disease association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("gene has variant that contributes to disease association_id", object_label_closure), 
	FOREIGN KEY("gene has variant that contributes to disease association_id") REFERENCES "gene has variant that contributes to disease association" (id)
);
CREATE TABLE "gene has variant that contributes to disease association_retrieval_source_ids" (
	"gene has variant that contributes to disease association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("gene has variant that contributes to disease association_id", retrieval_source_ids_id), 
	FOREIGN KEY("gene has variant that contributes to disease association_id") REFERENCES "gene has variant that contributes to disease association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "gene has variant that contributes to disease association_category" (
	"gene has variant that contributes to disease association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("gene has variant that contributes to disease association_id", category), 
	FOREIGN KEY("gene has variant that contributes to disease association_id") REFERENCES "gene has variant that contributes to disease association" (id)
);
CREATE TABLE "gene has variant that contributes to disease association_type" (
	"gene has variant that contributes to disease association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("gene has variant that contributes to disease association_id", type), 
	FOREIGN KEY("gene has variant that contributes to disease association_id") REFERENCES "gene has variant that contributes to disease association" (id)
);
CREATE TABLE "gene has variant that contributes to disease association_has_attribute" (
	"gene has variant that contributes to disease association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("gene has variant that contributes to disease association_id", has_attribute_id), 
	FOREIGN KEY("gene has variant that contributes to disease association_id") REFERENCES "gene has variant that contributes to disease association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "genomic sequence localization_qualifiers" (
	"genomic sequence localization_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("genomic sequence localization_id", qualifiers_id), 
	FOREIGN KEY("genomic sequence localization_id") REFERENCES "genomic sequence localization" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "genomic sequence localization_publications" (
	"genomic sequence localization_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("genomic sequence localization_id", publications_id), 
	FOREIGN KEY("genomic sequence localization_id") REFERENCES "genomic sequence localization" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "genomic sequence localization_has_evidence" (
	"genomic sequence localization_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("genomic sequence localization_id", has_evidence_id), 
	FOREIGN KEY("genomic sequence localization_id") REFERENCES "genomic sequence localization" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "genomic sequence localization_aggregator_knowledge_source" (
	"genomic sequence localization_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("genomic sequence localization_id", aggregator_knowledge_source), 
	FOREIGN KEY("genomic sequence localization_id") REFERENCES "genomic sequence localization" (id)
);
CREATE TABLE "genomic sequence localization_subject_closure" (
	"genomic sequence localization_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("genomic sequence localization_id", subject_closure), 
	FOREIGN KEY("genomic sequence localization_id") REFERENCES "genomic sequence localization" (id)
);
CREATE TABLE "genomic sequence localization_object_closure" (
	"genomic sequence localization_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("genomic sequence localization_id", object_closure), 
	FOREIGN KEY("genomic sequence localization_id") REFERENCES "genomic sequence localization" (id)
);
CREATE TABLE "genomic sequence localization_subject_category_closure" (
	"genomic sequence localization_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("genomic sequence localization_id", subject_category_closure_id), 
	FOREIGN KEY("genomic sequence localization_id") REFERENCES "genomic sequence localization" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "genomic sequence localization_object_category_closure" (
	"genomic sequence localization_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("genomic sequence localization_id", object_category_closure_id), 
	FOREIGN KEY("genomic sequence localization_id") REFERENCES "genomic sequence localization" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "genomic sequence localization_subject_label_closure" (
	"genomic sequence localization_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("genomic sequence localization_id", subject_label_closure), 
	FOREIGN KEY("genomic sequence localization_id") REFERENCES "genomic sequence localization" (id)
);
CREATE TABLE "genomic sequence localization_object_label_closure" (
	"genomic sequence localization_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("genomic sequence localization_id", object_label_closure), 
	FOREIGN KEY("genomic sequence localization_id") REFERENCES "genomic sequence localization" (id)
);
CREATE TABLE "genomic sequence localization_retrieval_source_ids" (
	"genomic sequence localization_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("genomic sequence localization_id", retrieval_source_ids_id), 
	FOREIGN KEY("genomic sequence localization_id") REFERENCES "genomic sequence localization" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "genomic sequence localization_category" (
	"genomic sequence localization_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("genomic sequence localization_id", category), 
	FOREIGN KEY("genomic sequence localization_id") REFERENCES "genomic sequence localization" (id)
);
CREATE TABLE "genomic sequence localization_type" (
	"genomic sequence localization_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("genomic sequence localization_id", type), 
	FOREIGN KEY("genomic sequence localization_id") REFERENCES "genomic sequence localization" (id)
);
CREATE TABLE "genomic sequence localization_has_attribute" (
	"genomic sequence localization_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("genomic sequence localization_id", has_attribute_id), 
	FOREIGN KEY("genomic sequence localization_id") REFERENCES "genomic sequence localization" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "sequence feature relationship_qualifiers" (
	"sequence feature relationship_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("sequence feature relationship_id", qualifiers_id), 
	FOREIGN KEY("sequence feature relationship_id") REFERENCES "sequence feature relationship" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "sequence feature relationship_publications" (
	"sequence feature relationship_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("sequence feature relationship_id", publications_id), 
	FOREIGN KEY("sequence feature relationship_id") REFERENCES "sequence feature relationship" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "sequence feature relationship_has_evidence" (
	"sequence feature relationship_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("sequence feature relationship_id", has_evidence_id), 
	FOREIGN KEY("sequence feature relationship_id") REFERENCES "sequence feature relationship" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "sequence feature relationship_aggregator_knowledge_source" (
	"sequence feature relationship_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("sequence feature relationship_id", aggregator_knowledge_source), 
	FOREIGN KEY("sequence feature relationship_id") REFERENCES "sequence feature relationship" (id)
);
CREATE TABLE "sequence feature relationship_subject_closure" (
	"sequence feature relationship_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("sequence feature relationship_id", subject_closure), 
	FOREIGN KEY("sequence feature relationship_id") REFERENCES "sequence feature relationship" (id)
);
CREATE TABLE "sequence feature relationship_object_closure" (
	"sequence feature relationship_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("sequence feature relationship_id", object_closure), 
	FOREIGN KEY("sequence feature relationship_id") REFERENCES "sequence feature relationship" (id)
);
CREATE TABLE "sequence feature relationship_subject_category_closure" (
	"sequence feature relationship_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("sequence feature relationship_id", subject_category_closure_id), 
	FOREIGN KEY("sequence feature relationship_id") REFERENCES "sequence feature relationship" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "sequence feature relationship_object_category_closure" (
	"sequence feature relationship_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("sequence feature relationship_id", object_category_closure_id), 
	FOREIGN KEY("sequence feature relationship_id") REFERENCES "sequence feature relationship" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "sequence feature relationship_subject_label_closure" (
	"sequence feature relationship_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("sequence feature relationship_id", subject_label_closure), 
	FOREIGN KEY("sequence feature relationship_id") REFERENCES "sequence feature relationship" (id)
);
CREATE TABLE "sequence feature relationship_object_label_closure" (
	"sequence feature relationship_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("sequence feature relationship_id", object_label_closure), 
	FOREIGN KEY("sequence feature relationship_id") REFERENCES "sequence feature relationship" (id)
);
CREATE TABLE "sequence feature relationship_retrieval_source_ids" (
	"sequence feature relationship_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("sequence feature relationship_id", retrieval_source_ids_id), 
	FOREIGN KEY("sequence feature relationship_id") REFERENCES "sequence feature relationship" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "sequence feature relationship_category" (
	"sequence feature relationship_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("sequence feature relationship_id", category), 
	FOREIGN KEY("sequence feature relationship_id") REFERENCES "sequence feature relationship" (id)
);
CREATE TABLE "sequence feature relationship_type" (
	"sequence feature relationship_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("sequence feature relationship_id", type), 
	FOREIGN KEY("sequence feature relationship_id") REFERENCES "sequence feature relationship" (id)
);
CREATE TABLE "sequence feature relationship_has_attribute" (
	"sequence feature relationship_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("sequence feature relationship_id", has_attribute_id), 
	FOREIGN KEY("sequence feature relationship_id") REFERENCES "sequence feature relationship" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "organism taxon to organism taxon association_qualifiers" (
	"organism taxon to organism taxon association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon association_id", qualifiers_id), 
	FOREIGN KEY("organism taxon to organism taxon association_id") REFERENCES "organism taxon to organism taxon association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "organism taxon to organism taxon association_publications" (
	"organism taxon to organism taxon association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon association_id", publications_id), 
	FOREIGN KEY("organism taxon to organism taxon association_id") REFERENCES "organism taxon to organism taxon association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "organism taxon to organism taxon association_has_evidence" (
	"organism taxon to organism taxon association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon association_id", has_evidence_id), 
	FOREIGN KEY("organism taxon to organism taxon association_id") REFERENCES "organism taxon to organism taxon association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "organism taxon to organism taxon association_aggregator_knowledge_source" (
	"organism taxon to organism taxon association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon association_id", aggregator_knowledge_source), 
	FOREIGN KEY("organism taxon to organism taxon association_id") REFERENCES "organism taxon to organism taxon association" (id)
);
CREATE TABLE "organism taxon to organism taxon association_subject_closure" (
	"organism taxon to organism taxon association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon association_id", subject_closure), 
	FOREIGN KEY("organism taxon to organism taxon association_id") REFERENCES "organism taxon to organism taxon association" (id)
);
CREATE TABLE "organism taxon to organism taxon association_object_closure" (
	"organism taxon to organism taxon association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon association_id", object_closure), 
	FOREIGN KEY("organism taxon to organism taxon association_id") REFERENCES "organism taxon to organism taxon association" (id)
);
CREATE TABLE "organism taxon to organism taxon association_subject_category_closure" (
	"organism taxon to organism taxon association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon association_id", subject_category_closure_id), 
	FOREIGN KEY("organism taxon to organism taxon association_id") REFERENCES "organism taxon to organism taxon association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "organism taxon to organism taxon association_object_category_closure" (
	"organism taxon to organism taxon association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon association_id", object_category_closure_id), 
	FOREIGN KEY("organism taxon to organism taxon association_id") REFERENCES "organism taxon to organism taxon association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "organism taxon to organism taxon association_subject_label_closure" (
	"organism taxon to organism taxon association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon association_id", subject_label_closure), 
	FOREIGN KEY("organism taxon to organism taxon association_id") REFERENCES "organism taxon to organism taxon association" (id)
);
CREATE TABLE "organism taxon to organism taxon association_object_label_closure" (
	"organism taxon to organism taxon association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon association_id", object_label_closure), 
	FOREIGN KEY("organism taxon to organism taxon association_id") REFERENCES "organism taxon to organism taxon association" (id)
);
CREATE TABLE "organism taxon to organism taxon association_retrieval_source_ids" (
	"organism taxon to organism taxon association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon association_id", retrieval_source_ids_id), 
	FOREIGN KEY("organism taxon to organism taxon association_id") REFERENCES "organism taxon to organism taxon association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "organism taxon to organism taxon association_category" (
	"organism taxon to organism taxon association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon association_id", category), 
	FOREIGN KEY("organism taxon to organism taxon association_id") REFERENCES "organism taxon to organism taxon association" (id)
);
CREATE TABLE "organism taxon to organism taxon association_type" (
	"organism taxon to organism taxon association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon association_id", type), 
	FOREIGN KEY("organism taxon to organism taxon association_id") REFERENCES "organism taxon to organism taxon association" (id)
);
CREATE TABLE "organism taxon to organism taxon association_has_attribute" (
	"organism taxon to organism taxon association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon association_id", has_attribute_id), 
	FOREIGN KEY("organism taxon to organism taxon association_id") REFERENCES "organism taxon to organism taxon association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "organism taxon to organism taxon specialization_qualifiers" (
	"organism taxon to organism taxon specialization_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon specialization_id", qualifiers_id), 
	FOREIGN KEY("organism taxon to organism taxon specialization_id") REFERENCES "organism taxon to organism taxon specialization" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "organism taxon to organism taxon specialization_publications" (
	"organism taxon to organism taxon specialization_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon specialization_id", publications_id), 
	FOREIGN KEY("organism taxon to organism taxon specialization_id") REFERENCES "organism taxon to organism taxon specialization" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "organism taxon to organism taxon specialization_has_evidence" (
	"organism taxon to organism taxon specialization_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon specialization_id", has_evidence_id), 
	FOREIGN KEY("organism taxon to organism taxon specialization_id") REFERENCES "organism taxon to organism taxon specialization" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "organism taxon to organism taxon specialization_aggregator_knowledge_source" (
	"organism taxon to organism taxon specialization_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon specialization_id", aggregator_knowledge_source), 
	FOREIGN KEY("organism taxon to organism taxon specialization_id") REFERENCES "organism taxon to organism taxon specialization" (id)
);
CREATE TABLE "organism taxon to organism taxon specialization_subject_closure" (
	"organism taxon to organism taxon specialization_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon specialization_id", subject_closure), 
	FOREIGN KEY("organism taxon to organism taxon specialization_id") REFERENCES "organism taxon to organism taxon specialization" (id)
);
CREATE TABLE "organism taxon to organism taxon specialization_object_closure" (
	"organism taxon to organism taxon specialization_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon specialization_id", object_closure), 
	FOREIGN KEY("organism taxon to organism taxon specialization_id") REFERENCES "organism taxon to organism taxon specialization" (id)
);
CREATE TABLE "organism taxon to organism taxon specialization_subject_category_closure" (
	"organism taxon to organism taxon specialization_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon specialization_id", subject_category_closure_id), 
	FOREIGN KEY("organism taxon to organism taxon specialization_id") REFERENCES "organism taxon to organism taxon specialization" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "organism taxon to organism taxon specialization_object_category_closure" (
	"organism taxon to organism taxon specialization_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon specialization_id", object_category_closure_id), 
	FOREIGN KEY("organism taxon to organism taxon specialization_id") REFERENCES "organism taxon to organism taxon specialization" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "organism taxon to organism taxon specialization_subject_label_closure" (
	"organism taxon to organism taxon specialization_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon specialization_id", subject_label_closure), 
	FOREIGN KEY("organism taxon to organism taxon specialization_id") REFERENCES "organism taxon to organism taxon specialization" (id)
);
CREATE TABLE "organism taxon to organism taxon specialization_object_label_closure" (
	"organism taxon to organism taxon specialization_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon specialization_id", object_label_closure), 
	FOREIGN KEY("organism taxon to organism taxon specialization_id") REFERENCES "organism taxon to organism taxon specialization" (id)
);
CREATE TABLE "organism taxon to organism taxon specialization_retrieval_source_ids" (
	"organism taxon to organism taxon specialization_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon specialization_id", retrieval_source_ids_id), 
	FOREIGN KEY("organism taxon to organism taxon specialization_id") REFERENCES "organism taxon to organism taxon specialization" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "organism taxon to organism taxon specialization_category" (
	"organism taxon to organism taxon specialization_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon specialization_id", category), 
	FOREIGN KEY("organism taxon to organism taxon specialization_id") REFERENCES "organism taxon to organism taxon specialization" (id)
);
CREATE TABLE "organism taxon to organism taxon specialization_type" (
	"organism taxon to organism taxon specialization_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon specialization_id", type), 
	FOREIGN KEY("organism taxon to organism taxon specialization_id") REFERENCES "organism taxon to organism taxon specialization" (id)
);
CREATE TABLE "organism taxon to organism taxon specialization_has_attribute" (
	"organism taxon to organism taxon specialization_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon specialization_id", has_attribute_id), 
	FOREIGN KEY("organism taxon to organism taxon specialization_id") REFERENCES "organism taxon to organism taxon specialization" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "organism taxon to organism taxon interaction_qualifiers" (
	"organism taxon to organism taxon interaction_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon interaction_id", qualifiers_id), 
	FOREIGN KEY("organism taxon to organism taxon interaction_id") REFERENCES "organism taxon to organism taxon interaction" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "organism taxon to organism taxon interaction_publications" (
	"organism taxon to organism taxon interaction_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon interaction_id", publications_id), 
	FOREIGN KEY("organism taxon to organism taxon interaction_id") REFERENCES "organism taxon to organism taxon interaction" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "organism taxon to organism taxon interaction_has_evidence" (
	"organism taxon to organism taxon interaction_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon interaction_id", has_evidence_id), 
	FOREIGN KEY("organism taxon to organism taxon interaction_id") REFERENCES "organism taxon to organism taxon interaction" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "organism taxon to organism taxon interaction_aggregator_knowledge_source" (
	"organism taxon to organism taxon interaction_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon interaction_id", aggregator_knowledge_source), 
	FOREIGN KEY("organism taxon to organism taxon interaction_id") REFERENCES "organism taxon to organism taxon interaction" (id)
);
CREATE TABLE "organism taxon to organism taxon interaction_subject_closure" (
	"organism taxon to organism taxon interaction_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon interaction_id", subject_closure), 
	FOREIGN KEY("organism taxon to organism taxon interaction_id") REFERENCES "organism taxon to organism taxon interaction" (id)
);
CREATE TABLE "organism taxon to organism taxon interaction_object_closure" (
	"organism taxon to organism taxon interaction_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon interaction_id", object_closure), 
	FOREIGN KEY("organism taxon to organism taxon interaction_id") REFERENCES "organism taxon to organism taxon interaction" (id)
);
CREATE TABLE "organism taxon to organism taxon interaction_subject_category_closure" (
	"organism taxon to organism taxon interaction_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon interaction_id", subject_category_closure_id), 
	FOREIGN KEY("organism taxon to organism taxon interaction_id") REFERENCES "organism taxon to organism taxon interaction" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "organism taxon to organism taxon interaction_object_category_closure" (
	"organism taxon to organism taxon interaction_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon interaction_id", object_category_closure_id), 
	FOREIGN KEY("organism taxon to organism taxon interaction_id") REFERENCES "organism taxon to organism taxon interaction" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "organism taxon to organism taxon interaction_subject_label_closure" (
	"organism taxon to organism taxon interaction_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon interaction_id", subject_label_closure), 
	FOREIGN KEY("organism taxon to organism taxon interaction_id") REFERENCES "organism taxon to organism taxon interaction" (id)
);
CREATE TABLE "organism taxon to organism taxon interaction_object_label_closure" (
	"organism taxon to organism taxon interaction_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon interaction_id", object_label_closure), 
	FOREIGN KEY("organism taxon to organism taxon interaction_id") REFERENCES "organism taxon to organism taxon interaction" (id)
);
CREATE TABLE "organism taxon to organism taxon interaction_retrieval_source_ids" (
	"organism taxon to organism taxon interaction_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon interaction_id", retrieval_source_ids_id), 
	FOREIGN KEY("organism taxon to organism taxon interaction_id") REFERENCES "organism taxon to organism taxon interaction" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "organism taxon to organism taxon interaction_category" (
	"organism taxon to organism taxon interaction_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon interaction_id", category), 
	FOREIGN KEY("organism taxon to organism taxon interaction_id") REFERENCES "organism taxon to organism taxon interaction" (id)
);
CREATE TABLE "organism taxon to organism taxon interaction_type" (
	"organism taxon to organism taxon interaction_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon interaction_id", type), 
	FOREIGN KEY("organism taxon to organism taxon interaction_id") REFERENCES "organism taxon to organism taxon interaction" (id)
);
CREATE TABLE "organism taxon to organism taxon interaction_has_attribute" (
	"organism taxon to organism taxon interaction_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("organism taxon to organism taxon interaction_id", has_attribute_id), 
	FOREIGN KEY("organism taxon to organism taxon interaction_id") REFERENCES "organism taxon to organism taxon interaction" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "organism taxon to environment association_qualifiers" (
	"organism taxon to environment association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("organism taxon to environment association_id", qualifiers_id), 
	FOREIGN KEY("organism taxon to environment association_id") REFERENCES "organism taxon to environment association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "organism taxon to environment association_publications" (
	"organism taxon to environment association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("organism taxon to environment association_id", publications_id), 
	FOREIGN KEY("organism taxon to environment association_id") REFERENCES "organism taxon to environment association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "organism taxon to environment association_has_evidence" (
	"organism taxon to environment association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("organism taxon to environment association_id", has_evidence_id), 
	FOREIGN KEY("organism taxon to environment association_id") REFERENCES "organism taxon to environment association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "organism taxon to environment association_aggregator_knowledge_source" (
	"organism taxon to environment association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("organism taxon to environment association_id", aggregator_knowledge_source), 
	FOREIGN KEY("organism taxon to environment association_id") REFERENCES "organism taxon to environment association" (id)
);
CREATE TABLE "organism taxon to environment association_subject_closure" (
	"organism taxon to environment association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("organism taxon to environment association_id", subject_closure), 
	FOREIGN KEY("organism taxon to environment association_id") REFERENCES "organism taxon to environment association" (id)
);
CREATE TABLE "organism taxon to environment association_object_closure" (
	"organism taxon to environment association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("organism taxon to environment association_id", object_closure), 
	FOREIGN KEY("organism taxon to environment association_id") REFERENCES "organism taxon to environment association" (id)
);
CREATE TABLE "organism taxon to environment association_subject_category_closure" (
	"organism taxon to environment association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("organism taxon to environment association_id", subject_category_closure_id), 
	FOREIGN KEY("organism taxon to environment association_id") REFERENCES "organism taxon to environment association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "organism taxon to environment association_object_category_closure" (
	"organism taxon to environment association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("organism taxon to environment association_id", object_category_closure_id), 
	FOREIGN KEY("organism taxon to environment association_id") REFERENCES "organism taxon to environment association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "organism taxon to environment association_subject_label_closure" (
	"organism taxon to environment association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("organism taxon to environment association_id", subject_label_closure), 
	FOREIGN KEY("organism taxon to environment association_id") REFERENCES "organism taxon to environment association" (id)
);
CREATE TABLE "organism taxon to environment association_object_label_closure" (
	"organism taxon to environment association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("organism taxon to environment association_id", object_label_closure), 
	FOREIGN KEY("organism taxon to environment association_id") REFERENCES "organism taxon to environment association" (id)
);
CREATE TABLE "organism taxon to environment association_retrieval_source_ids" (
	"organism taxon to environment association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("organism taxon to environment association_id", retrieval_source_ids_id), 
	FOREIGN KEY("organism taxon to environment association_id") REFERENCES "organism taxon to environment association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "organism taxon to environment association_category" (
	"organism taxon to environment association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("organism taxon to environment association_id", category), 
	FOREIGN KEY("organism taxon to environment association_id") REFERENCES "organism taxon to environment association" (id)
);
CREATE TABLE "organism taxon to environment association_type" (
	"organism taxon to environment association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("organism taxon to environment association_id", type), 
	FOREIGN KEY("organism taxon to environment association_id") REFERENCES "organism taxon to environment association" (id)
);
CREATE TABLE "organism taxon to environment association_has_attribute" (
	"organism taxon to environment association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("organism taxon to environment association_id", has_attribute_id), 
	FOREIGN KEY("organism taxon to environment association_id") REFERENCES "organism taxon to environment association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "genotype to genotype part association_qualifiers" (
	"genotype to genotype part association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("genotype to genotype part association_id", qualifiers_id), 
	FOREIGN KEY("genotype to genotype part association_id") REFERENCES "genotype to genotype part association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "genotype to genotype part association_publications" (
	"genotype to genotype part association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("genotype to genotype part association_id", publications_id), 
	FOREIGN KEY("genotype to genotype part association_id") REFERENCES "genotype to genotype part association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "genotype to genotype part association_has_evidence" (
	"genotype to genotype part association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("genotype to genotype part association_id", has_evidence_id), 
	FOREIGN KEY("genotype to genotype part association_id") REFERENCES "genotype to genotype part association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "genotype to genotype part association_aggregator_knowledge_source" (
	"genotype to genotype part association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("genotype to genotype part association_id", aggregator_knowledge_source), 
	FOREIGN KEY("genotype to genotype part association_id") REFERENCES "genotype to genotype part association" (id)
);
CREATE TABLE "genotype to genotype part association_subject_closure" (
	"genotype to genotype part association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("genotype to genotype part association_id", subject_closure), 
	FOREIGN KEY("genotype to genotype part association_id") REFERENCES "genotype to genotype part association" (id)
);
CREATE TABLE "genotype to genotype part association_object_closure" (
	"genotype to genotype part association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("genotype to genotype part association_id", object_closure), 
	FOREIGN KEY("genotype to genotype part association_id") REFERENCES "genotype to genotype part association" (id)
);
CREATE TABLE "genotype to genotype part association_subject_category_closure" (
	"genotype to genotype part association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("genotype to genotype part association_id", subject_category_closure_id), 
	FOREIGN KEY("genotype to genotype part association_id") REFERENCES "genotype to genotype part association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "genotype to genotype part association_object_category_closure" (
	"genotype to genotype part association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("genotype to genotype part association_id", object_category_closure_id), 
	FOREIGN KEY("genotype to genotype part association_id") REFERENCES "genotype to genotype part association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "genotype to genotype part association_subject_label_closure" (
	"genotype to genotype part association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("genotype to genotype part association_id", subject_label_closure), 
	FOREIGN KEY("genotype to genotype part association_id") REFERENCES "genotype to genotype part association" (id)
);
CREATE TABLE "genotype to genotype part association_object_label_closure" (
	"genotype to genotype part association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("genotype to genotype part association_id", object_label_closure), 
	FOREIGN KEY("genotype to genotype part association_id") REFERENCES "genotype to genotype part association" (id)
);
CREATE TABLE "genotype to genotype part association_retrieval_source_ids" (
	"genotype to genotype part association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("genotype to genotype part association_id", retrieval_source_ids_id), 
	FOREIGN KEY("genotype to genotype part association_id") REFERENCES "genotype to genotype part association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "genotype to genotype part association_category" (
	"genotype to genotype part association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("genotype to genotype part association_id", category), 
	FOREIGN KEY("genotype to genotype part association_id") REFERENCES "genotype to genotype part association" (id)
);
CREATE TABLE "genotype to genotype part association_type" (
	"genotype to genotype part association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("genotype to genotype part association_id", type), 
	FOREIGN KEY("genotype to genotype part association_id") REFERENCES "genotype to genotype part association" (id)
);
CREATE TABLE "genotype to genotype part association_has_attribute" (
	"genotype to genotype part association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("genotype to genotype part association_id", has_attribute_id), 
	FOREIGN KEY("genotype to genotype part association_id") REFERENCES "genotype to genotype part association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "genotype to gene association_qualifiers" (
	"genotype to gene association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("genotype to gene association_id", qualifiers_id), 
	FOREIGN KEY("genotype to gene association_id") REFERENCES "genotype to gene association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "genotype to gene association_publications" (
	"genotype to gene association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("genotype to gene association_id", publications_id), 
	FOREIGN KEY("genotype to gene association_id") REFERENCES "genotype to gene association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "genotype to gene association_has_evidence" (
	"genotype to gene association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("genotype to gene association_id", has_evidence_id), 
	FOREIGN KEY("genotype to gene association_id") REFERENCES "genotype to gene association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "genotype to gene association_aggregator_knowledge_source" (
	"genotype to gene association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("genotype to gene association_id", aggregator_knowledge_source), 
	FOREIGN KEY("genotype to gene association_id") REFERENCES "genotype to gene association" (id)
);
CREATE TABLE "genotype to gene association_subject_closure" (
	"genotype to gene association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("genotype to gene association_id", subject_closure), 
	FOREIGN KEY("genotype to gene association_id") REFERENCES "genotype to gene association" (id)
);
CREATE TABLE "genotype to gene association_object_closure" (
	"genotype to gene association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("genotype to gene association_id", object_closure), 
	FOREIGN KEY("genotype to gene association_id") REFERENCES "genotype to gene association" (id)
);
CREATE TABLE "genotype to gene association_subject_category_closure" (
	"genotype to gene association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("genotype to gene association_id", subject_category_closure_id), 
	FOREIGN KEY("genotype to gene association_id") REFERENCES "genotype to gene association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "genotype to gene association_object_category_closure" (
	"genotype to gene association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("genotype to gene association_id", object_category_closure_id), 
	FOREIGN KEY("genotype to gene association_id") REFERENCES "genotype to gene association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "genotype to gene association_subject_label_closure" (
	"genotype to gene association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("genotype to gene association_id", subject_label_closure), 
	FOREIGN KEY("genotype to gene association_id") REFERENCES "genotype to gene association" (id)
);
CREATE TABLE "genotype to gene association_object_label_closure" (
	"genotype to gene association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("genotype to gene association_id", object_label_closure), 
	FOREIGN KEY("genotype to gene association_id") REFERENCES "genotype to gene association" (id)
);
CREATE TABLE "genotype to gene association_retrieval_source_ids" (
	"genotype to gene association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("genotype to gene association_id", retrieval_source_ids_id), 
	FOREIGN KEY("genotype to gene association_id") REFERENCES "genotype to gene association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "genotype to gene association_category" (
	"genotype to gene association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("genotype to gene association_id", category), 
	FOREIGN KEY("genotype to gene association_id") REFERENCES "genotype to gene association" (id)
);
CREATE TABLE "genotype to gene association_type" (
	"genotype to gene association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("genotype to gene association_id", type), 
	FOREIGN KEY("genotype to gene association_id") REFERENCES "genotype to gene association" (id)
);
CREATE TABLE "genotype to gene association_has_attribute" (
	"genotype to gene association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("genotype to gene association_id", has_attribute_id), 
	FOREIGN KEY("genotype to gene association_id") REFERENCES "genotype to gene association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "genotype to variant association_qualifiers" (
	"genotype to variant association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("genotype to variant association_id", qualifiers_id), 
	FOREIGN KEY("genotype to variant association_id") REFERENCES "genotype to variant association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "genotype to variant association_publications" (
	"genotype to variant association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("genotype to variant association_id", publications_id), 
	FOREIGN KEY("genotype to variant association_id") REFERENCES "genotype to variant association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "genotype to variant association_has_evidence" (
	"genotype to variant association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("genotype to variant association_id", has_evidence_id), 
	FOREIGN KEY("genotype to variant association_id") REFERENCES "genotype to variant association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "genotype to variant association_aggregator_knowledge_source" (
	"genotype to variant association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("genotype to variant association_id", aggregator_knowledge_source), 
	FOREIGN KEY("genotype to variant association_id") REFERENCES "genotype to variant association" (id)
);
CREATE TABLE "genotype to variant association_subject_closure" (
	"genotype to variant association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("genotype to variant association_id", subject_closure), 
	FOREIGN KEY("genotype to variant association_id") REFERENCES "genotype to variant association" (id)
);
CREATE TABLE "genotype to variant association_object_closure" (
	"genotype to variant association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("genotype to variant association_id", object_closure), 
	FOREIGN KEY("genotype to variant association_id") REFERENCES "genotype to variant association" (id)
);
CREATE TABLE "genotype to variant association_subject_category_closure" (
	"genotype to variant association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("genotype to variant association_id", subject_category_closure_id), 
	FOREIGN KEY("genotype to variant association_id") REFERENCES "genotype to variant association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "genotype to variant association_object_category_closure" (
	"genotype to variant association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("genotype to variant association_id", object_category_closure_id), 
	FOREIGN KEY("genotype to variant association_id") REFERENCES "genotype to variant association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "genotype to variant association_subject_label_closure" (
	"genotype to variant association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("genotype to variant association_id", subject_label_closure), 
	FOREIGN KEY("genotype to variant association_id") REFERENCES "genotype to variant association" (id)
);
CREATE TABLE "genotype to variant association_object_label_closure" (
	"genotype to variant association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("genotype to variant association_id", object_label_closure), 
	FOREIGN KEY("genotype to variant association_id") REFERENCES "genotype to variant association" (id)
);
CREATE TABLE "genotype to variant association_retrieval_source_ids" (
	"genotype to variant association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("genotype to variant association_id", retrieval_source_ids_id), 
	FOREIGN KEY("genotype to variant association_id") REFERENCES "genotype to variant association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "genotype to variant association_category" (
	"genotype to variant association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("genotype to variant association_id", category), 
	FOREIGN KEY("genotype to variant association_id") REFERENCES "genotype to variant association" (id)
);
CREATE TABLE "genotype to variant association_type" (
	"genotype to variant association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("genotype to variant association_id", type), 
	FOREIGN KEY("genotype to variant association_id") REFERENCES "genotype to variant association" (id)
);
CREATE TABLE "genotype to variant association_has_attribute" (
	"genotype to variant association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("genotype to variant association_id", has_attribute_id), 
	FOREIGN KEY("genotype to variant association_id") REFERENCES "genotype to variant association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "drug to gene association_qualifiers" (
	"drug to gene association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("drug to gene association_id", qualifiers_id), 
	FOREIGN KEY("drug to gene association_id") REFERENCES "drug to gene association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "drug to gene association_publications" (
	"drug to gene association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("drug to gene association_id", publications_id), 
	FOREIGN KEY("drug to gene association_id") REFERENCES "drug to gene association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "drug to gene association_has_evidence" (
	"drug to gene association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("drug to gene association_id", has_evidence_id), 
	FOREIGN KEY("drug to gene association_id") REFERENCES "drug to gene association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "drug to gene association_aggregator_knowledge_source" (
	"drug to gene association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("drug to gene association_id", aggregator_knowledge_source), 
	FOREIGN KEY("drug to gene association_id") REFERENCES "drug to gene association" (id)
);
CREATE TABLE "drug to gene association_subject_closure" (
	"drug to gene association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("drug to gene association_id", subject_closure), 
	FOREIGN KEY("drug to gene association_id") REFERENCES "drug to gene association" (id)
);
CREATE TABLE "drug to gene association_object_closure" (
	"drug to gene association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("drug to gene association_id", object_closure), 
	FOREIGN KEY("drug to gene association_id") REFERENCES "drug to gene association" (id)
);
CREATE TABLE "drug to gene association_subject_category_closure" (
	"drug to gene association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("drug to gene association_id", subject_category_closure_id), 
	FOREIGN KEY("drug to gene association_id") REFERENCES "drug to gene association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "drug to gene association_object_category_closure" (
	"drug to gene association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("drug to gene association_id", object_category_closure_id), 
	FOREIGN KEY("drug to gene association_id") REFERENCES "drug to gene association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "drug to gene association_subject_label_closure" (
	"drug to gene association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("drug to gene association_id", subject_label_closure), 
	FOREIGN KEY("drug to gene association_id") REFERENCES "drug to gene association" (id)
);
CREATE TABLE "drug to gene association_object_label_closure" (
	"drug to gene association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("drug to gene association_id", object_label_closure), 
	FOREIGN KEY("drug to gene association_id") REFERENCES "drug to gene association" (id)
);
CREATE TABLE "drug to gene association_retrieval_source_ids" (
	"drug to gene association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("drug to gene association_id", retrieval_source_ids_id), 
	FOREIGN KEY("drug to gene association_id") REFERENCES "drug to gene association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "drug to gene association_category" (
	"drug to gene association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("drug to gene association_id", category), 
	FOREIGN KEY("drug to gene association_id") REFERENCES "drug to gene association" (id)
);
CREATE TABLE "drug to gene association_type" (
	"drug to gene association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("drug to gene association_id", type), 
	FOREIGN KEY("drug to gene association_id") REFERENCES "drug to gene association" (id)
);
CREATE TABLE "drug to gene association_has_attribute" (
	"drug to gene association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("drug to gene association_id", has_attribute_id), 
	FOREIGN KEY("drug to gene association_id") REFERENCES "drug to gene association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "genotype to phenotypic feature association_qualifiers" (
	"genotype to phenotypic feature association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("genotype to phenotypic feature association_id", qualifiers_id), 
	FOREIGN KEY("genotype to phenotypic feature association_id") REFERENCES "genotype to phenotypic feature association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "genotype to phenotypic feature association_publications" (
	"genotype to phenotypic feature association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("genotype to phenotypic feature association_id", publications_id), 
	FOREIGN KEY("genotype to phenotypic feature association_id") REFERENCES "genotype to phenotypic feature association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "genotype to phenotypic feature association_has_evidence" (
	"genotype to phenotypic feature association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("genotype to phenotypic feature association_id", has_evidence_id), 
	FOREIGN KEY("genotype to phenotypic feature association_id") REFERENCES "genotype to phenotypic feature association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "genotype to phenotypic feature association_aggregator_knowledge_source" (
	"genotype to phenotypic feature association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("genotype to phenotypic feature association_id", aggregator_knowledge_source), 
	FOREIGN KEY("genotype to phenotypic feature association_id") REFERENCES "genotype to phenotypic feature association" (id)
);
CREATE TABLE "genotype to phenotypic feature association_subject_closure" (
	"genotype to phenotypic feature association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("genotype to phenotypic feature association_id", subject_closure), 
	FOREIGN KEY("genotype to phenotypic feature association_id") REFERENCES "genotype to phenotypic feature association" (id)
);
CREATE TABLE "genotype to phenotypic feature association_object_closure" (
	"genotype to phenotypic feature association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("genotype to phenotypic feature association_id", object_closure), 
	FOREIGN KEY("genotype to phenotypic feature association_id") REFERENCES "genotype to phenotypic feature association" (id)
);
CREATE TABLE "genotype to phenotypic feature association_subject_category_closure" (
	"genotype to phenotypic feature association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("genotype to phenotypic feature association_id", subject_category_closure_id), 
	FOREIGN KEY("genotype to phenotypic feature association_id") REFERENCES "genotype to phenotypic feature association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "genotype to phenotypic feature association_object_category_closure" (
	"genotype to phenotypic feature association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("genotype to phenotypic feature association_id", object_category_closure_id), 
	FOREIGN KEY("genotype to phenotypic feature association_id") REFERENCES "genotype to phenotypic feature association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "genotype to phenotypic feature association_subject_label_closure" (
	"genotype to phenotypic feature association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("genotype to phenotypic feature association_id", subject_label_closure), 
	FOREIGN KEY("genotype to phenotypic feature association_id") REFERENCES "genotype to phenotypic feature association" (id)
);
CREATE TABLE "genotype to phenotypic feature association_object_label_closure" (
	"genotype to phenotypic feature association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("genotype to phenotypic feature association_id", object_label_closure), 
	FOREIGN KEY("genotype to phenotypic feature association_id") REFERENCES "genotype to phenotypic feature association" (id)
);
CREATE TABLE "genotype to phenotypic feature association_retrieval_source_ids" (
	"genotype to phenotypic feature association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("genotype to phenotypic feature association_id", retrieval_source_ids_id), 
	FOREIGN KEY("genotype to phenotypic feature association_id") REFERENCES "genotype to phenotypic feature association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "genotype to phenotypic feature association_category" (
	"genotype to phenotypic feature association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("genotype to phenotypic feature association_id", category), 
	FOREIGN KEY("genotype to phenotypic feature association_id") REFERENCES "genotype to phenotypic feature association" (id)
);
CREATE TABLE "genotype to phenotypic feature association_type" (
	"genotype to phenotypic feature association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("genotype to phenotypic feature association_id", type), 
	FOREIGN KEY("genotype to phenotypic feature association_id") REFERENCES "genotype to phenotypic feature association" (id)
);
CREATE TABLE "genotype to phenotypic feature association_has_attribute" (
	"genotype to phenotypic feature association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("genotype to phenotypic feature association_id", has_attribute_id), 
	FOREIGN KEY("genotype to phenotypic feature association_id") REFERENCES "genotype to phenotypic feature association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "genotype to disease association_qualifiers" (
	"genotype to disease association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("genotype to disease association_id", qualifiers_id), 
	FOREIGN KEY("genotype to disease association_id") REFERENCES "genotype to disease association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "genotype to disease association_publications" (
	"genotype to disease association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("genotype to disease association_id", publications_id), 
	FOREIGN KEY("genotype to disease association_id") REFERENCES "genotype to disease association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "genotype to disease association_has_evidence" (
	"genotype to disease association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("genotype to disease association_id", has_evidence_id), 
	FOREIGN KEY("genotype to disease association_id") REFERENCES "genotype to disease association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "genotype to disease association_aggregator_knowledge_source" (
	"genotype to disease association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("genotype to disease association_id", aggregator_knowledge_source), 
	FOREIGN KEY("genotype to disease association_id") REFERENCES "genotype to disease association" (id)
);
CREATE TABLE "genotype to disease association_subject_closure" (
	"genotype to disease association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("genotype to disease association_id", subject_closure), 
	FOREIGN KEY("genotype to disease association_id") REFERENCES "genotype to disease association" (id)
);
CREATE TABLE "genotype to disease association_object_closure" (
	"genotype to disease association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("genotype to disease association_id", object_closure), 
	FOREIGN KEY("genotype to disease association_id") REFERENCES "genotype to disease association" (id)
);
CREATE TABLE "genotype to disease association_subject_category_closure" (
	"genotype to disease association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("genotype to disease association_id", subject_category_closure_id), 
	FOREIGN KEY("genotype to disease association_id") REFERENCES "genotype to disease association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "genotype to disease association_object_category_closure" (
	"genotype to disease association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("genotype to disease association_id", object_category_closure_id), 
	FOREIGN KEY("genotype to disease association_id") REFERENCES "genotype to disease association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "genotype to disease association_subject_label_closure" (
	"genotype to disease association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("genotype to disease association_id", subject_label_closure), 
	FOREIGN KEY("genotype to disease association_id") REFERENCES "genotype to disease association" (id)
);
CREATE TABLE "genotype to disease association_object_label_closure" (
	"genotype to disease association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("genotype to disease association_id", object_label_closure), 
	FOREIGN KEY("genotype to disease association_id") REFERENCES "genotype to disease association" (id)
);
CREATE TABLE "genotype to disease association_retrieval_source_ids" (
	"genotype to disease association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("genotype to disease association_id", retrieval_source_ids_id), 
	FOREIGN KEY("genotype to disease association_id") REFERENCES "genotype to disease association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "genotype to disease association_category" (
	"genotype to disease association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("genotype to disease association_id", category), 
	FOREIGN KEY("genotype to disease association_id") REFERENCES "genotype to disease association" (id)
);
CREATE TABLE "genotype to disease association_type" (
	"genotype to disease association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("genotype to disease association_id", type), 
	FOREIGN KEY("genotype to disease association_id") REFERENCES "genotype to disease association" (id)
);
CREATE TABLE "genotype to disease association_has_attribute" (
	"genotype to disease association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("genotype to disease association_id", has_attribute_id), 
	FOREIGN KEY("genotype to disease association_id") REFERENCES "genotype to disease association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
CREATE TABLE "genotype as a model of disease association_qualifiers" (
	"genotype as a model of disease association_id" TEXT, 
	qualifiers_id TEXT, 
	PRIMARY KEY ("genotype as a model of disease association_id", qualifiers_id), 
	FOREIGN KEY("genotype as a model of disease association_id") REFERENCES "genotype as a model of disease association" (id), 
	FOREIGN KEY(qualifiers_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "genotype as a model of disease association_publications" (
	"genotype as a model of disease association_id" TEXT, 
	publications_id TEXT, 
	PRIMARY KEY ("genotype as a model of disease association_id", publications_id), 
	FOREIGN KEY("genotype as a model of disease association_id") REFERENCES "genotype as a model of disease association" (id), 
	FOREIGN KEY(publications_id) REFERENCES publication (id)
);
CREATE TABLE "genotype as a model of disease association_has_evidence" (
	"genotype as a model of disease association_id" TEXT, 
	has_evidence_id TEXT, 
	PRIMARY KEY ("genotype as a model of disease association_id", has_evidence_id), 
	FOREIGN KEY("genotype as a model of disease association_id") REFERENCES "genotype as a model of disease association" (id), 
	FOREIGN KEY(has_evidence_id) REFERENCES "evidence type" (id)
);
CREATE TABLE "genotype as a model of disease association_aggregator_knowledge_source" (
	"genotype as a model of disease association_id" TEXT, 
	aggregator_knowledge_source TEXT, 
	PRIMARY KEY ("genotype as a model of disease association_id", aggregator_knowledge_source), 
	FOREIGN KEY("genotype as a model of disease association_id") REFERENCES "genotype as a model of disease association" (id)
);
CREATE TABLE "genotype as a model of disease association_subject_closure" (
	"genotype as a model of disease association_id" TEXT, 
	subject_closure TEXT, 
	PRIMARY KEY ("genotype as a model of disease association_id", subject_closure), 
	FOREIGN KEY("genotype as a model of disease association_id") REFERENCES "genotype as a model of disease association" (id)
);
CREATE TABLE "genotype as a model of disease association_object_closure" (
	"genotype as a model of disease association_id" TEXT, 
	object_closure TEXT, 
	PRIMARY KEY ("genotype as a model of disease association_id", object_closure), 
	FOREIGN KEY("genotype as a model of disease association_id") REFERENCES "genotype as a model of disease association" (id)
);
CREATE TABLE "genotype as a model of disease association_subject_category_closure" (
	"genotype as a model of disease association_id" TEXT, 
	subject_category_closure_id TEXT, 
	PRIMARY KEY ("genotype as a model of disease association_id", subject_category_closure_id), 
	FOREIGN KEY("genotype as a model of disease association_id") REFERENCES "genotype as a model of disease association" (id), 
	FOREIGN KEY(subject_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "genotype as a model of disease association_object_category_closure" (
	"genotype as a model of disease association_id" TEXT, 
	object_category_closure_id TEXT, 
	PRIMARY KEY ("genotype as a model of disease association_id", object_category_closure_id), 
	FOREIGN KEY("genotype as a model of disease association_id") REFERENCES "genotype as a model of disease association" (id), 
	FOREIGN KEY(object_category_closure_id) REFERENCES "ontology class" (id)
);
CREATE TABLE "genotype as a model of disease association_subject_label_closure" (
	"genotype as a model of disease association_id" TEXT, 
	subject_label_closure TEXT, 
	PRIMARY KEY ("genotype as a model of disease association_id", subject_label_closure), 
	FOREIGN KEY("genotype as a model of disease association_id") REFERENCES "genotype as a model of disease association" (id)
);
CREATE TABLE "genotype as a model of disease association_object_label_closure" (
	"genotype as a model of disease association_id" TEXT, 
	object_label_closure TEXT, 
	PRIMARY KEY ("genotype as a model of disease association_id", object_label_closure), 
	FOREIGN KEY("genotype as a model of disease association_id") REFERENCES "genotype as a model of disease association" (id)
);
CREATE TABLE "genotype as a model of disease association_retrieval_source_ids" (
	"genotype as a model of disease association_id" TEXT, 
	retrieval_source_ids_id TEXT, 
	PRIMARY KEY ("genotype as a model of disease association_id", retrieval_source_ids_id), 
	FOREIGN KEY("genotype as a model of disease association_id") REFERENCES "genotype as a model of disease association" (id), 
	FOREIGN KEY(retrieval_source_ids_id) REFERENCES "retrieval source" (id)
);
CREATE TABLE "genotype as a model of disease association_category" (
	"genotype as a model of disease association_id" TEXT, 
	category TEXT, 
	PRIMARY KEY ("genotype as a model of disease association_id", category), 
	FOREIGN KEY("genotype as a model of disease association_id") REFERENCES "genotype as a model of disease association" (id)
);
CREATE TABLE "genotype as a model of disease association_type" (
	"genotype as a model of disease association_id" TEXT, 
	type TEXT, 
	PRIMARY KEY ("genotype as a model of disease association_id", type), 
	FOREIGN KEY("genotype as a model of disease association_id") REFERENCES "genotype as a model of disease association" (id)
);
CREATE TABLE "genotype as a model of disease association_has_attribute" (
	"genotype as a model of disease association_id" TEXT, 
	has_attribute_id TEXT, 
	PRIMARY KEY ("genotype as a model of disease association_id", has_attribute_id), 
	FOREIGN KEY("genotype as a model of disease association_id") REFERENCES "genotype as a model of disease association" (id), 
	FOREIGN KEY(has_attribute_id) REFERENCES attribute (id)
);
